[
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typing",
        "description": "typing",
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NewType",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NoReturn",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NoReturn",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NoReturn",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ForwardRef",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Coroutine",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NoReturn",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "strawberry",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "strawberry",
        "description": "strawberry",
        "detail": "strawberry",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.api.gql.analysis.types",
        "description": "felicity.api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.api.gql.analysis.types",
        "description": "felicity.api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.api.gql.analysis.types",
        "description": "felicity.api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.api.gql.analysis.types",
        "description": "felicity.api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "results",
        "importPath": "felicity.api.gql.analysis.types",
        "description": "felicity.api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "results",
        "importPath": "felicity.api.gql.analysis.types",
        "description": "felicity.api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.api.gql.analysis.types",
        "description": "felicity.api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.api.gql.analysis.types",
        "description": "felicity.api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.api.gql.analysis.types",
        "description": "felicity.api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "results",
        "importPath": "felicity.api.gql.analysis.types",
        "description": "felicity.api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.api.gql.analysis.types",
        "description": "felicity.api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.api.gql.analysis.types",
        "description": "felicity.api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.api.gql.analysis.types",
        "description": "felicity.api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.api.gql.analysis.types",
        "description": "felicity.api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "results",
        "importPath": "felicity.api.gql.analysis.types",
        "description": "felicity.api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "analysis_types",
        "importPath": "felicity.api.gql.analysis.types",
        "description": "felicity.api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "felicity.api.gql.auth",
        "description": "felicity.api.gql.auth",
        "isExtraImport": true,
        "detail": "felicity.api.gql.auth",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "CanVerifySample",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "CanVerifyAnalysisResult",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "isExtraImport": true,
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationSuccess",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "SuccessErrorResponse",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationSuccess",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "BytesScalar",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "BytesScalar",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "JSONScalar",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "DeletedItem",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "BytesScalar",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "BytesScalar",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "JSONScalar",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "BytesScalar",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "DeletedItem",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "DeleteResponse",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "DeletedItem",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "DeleteResponse",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "BytesScalar",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "BytesScalar",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "JSONScalar",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "MessageResponse",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "MessagesType",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "JSONScalar",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "generic_types",
        "importPath": "felicity.api.gql.types",
        "description": "felicity.api.gql.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "results",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "results",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "qc",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "results",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "qc",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "results",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "qc",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "results",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "qc",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "results",
        "importPath": "felicity.apps.analysis.models",
        "description": "felicity.apps.analysis.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "asyncio",
        "description": "asyncio",
        "isExtraImport": true,
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "ensure_future",
        "importPath": "asyncio",
        "description": "asyncio",
        "isExtraImport": true,
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "current_task",
        "importPath": "asyncio",
        "description": "asyncio",
        "isExtraImport": true,
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "States",
        "importPath": "felicity.apps.analysis.conf",
        "description": "felicity.apps.analysis.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.conf",
        "documentation": {}
    },
    {
        "label": "priorities",
        "importPath": "felicity.apps.analysis.conf",
        "description": "felicity.apps.analysis.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.conf",
        "documentation": {}
    },
    {
        "label": "states",
        "importPath": "felicity.apps.analysis.conf",
        "description": "felicity.apps.analysis.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.conf",
        "documentation": {}
    },
    {
        "label": "states",
        "importPath": "felicity.apps.analysis.conf",
        "description": "felicity.apps.analysis.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.conf",
        "documentation": {}
    },
    {
        "label": "states",
        "importPath": "felicity.apps.analysis.conf",
        "description": "felicity.apps.analysis.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.conf",
        "documentation": {}
    },
    {
        "label": "states",
        "importPath": "felicity.apps.analysis.conf",
        "description": "felicity.apps.analysis.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.conf",
        "documentation": {}
    },
    {
        "label": "QC_SAMPLE",
        "importPath": "felicity.apps.analysis.conf",
        "description": "felicity.apps.analysis.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.conf",
        "documentation": {}
    },
    {
        "label": "states",
        "importPath": "felicity.apps.analysis.conf",
        "description": "felicity.apps.analysis.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.conf",
        "documentation": {}
    },
    {
        "label": "ResultType",
        "importPath": "felicity.apps.analysis.conf",
        "description": "felicity.apps.analysis.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.conf",
        "documentation": {}
    },
    {
        "label": "states",
        "importPath": "felicity.apps.analysis.conf",
        "description": "felicity.apps.analysis.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.conf",
        "documentation": {}
    },
    {
        "label": "states",
        "importPath": "felicity.apps.analysis.conf",
        "description": "felicity.apps.analysis.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.conf",
        "documentation": {}
    },
    {
        "label": "States",
        "importPath": "felicity.apps.analysis.conf",
        "description": "felicity.apps.analysis.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.conf",
        "documentation": {}
    },
    {
        "label": "States",
        "importPath": "felicity.apps.analysis.conf",
        "description": "felicity.apps.analysis.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.conf",
        "documentation": {}
    },
    {
        "label": "States",
        "importPath": "felicity.apps.analysis.conf",
        "description": "felicity.apps.analysis.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.conf",
        "documentation": {}
    },
    {
        "label": "states",
        "importPath": "felicity.apps.analysis.conf",
        "description": "felicity.apps.analysis.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.conf",
        "documentation": {}
    },
    {
        "label": "QC_SAMPLE",
        "importPath": "felicity.apps.analysis.conf",
        "description": "felicity.apps.analysis.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.conf",
        "documentation": {}
    },
    {
        "label": "states",
        "importPath": "felicity.apps.analysis.conf",
        "description": "felicity.apps.analysis.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.conf",
        "documentation": {}
    },
    {
        "label": "states",
        "importPath": "felicity.apps.analysis.conf",
        "description": "felicity.apps.analysis.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.conf",
        "documentation": {}
    },
    {
        "label": "bill_order",
        "importPath": "felicity.apps.billing.utils",
        "description": "felicity.apps.billing.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.utils",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.client",
        "description": "felicity.apps.client",
        "isExtraImport": true,
        "detail": "felicity.apps.client",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.client",
        "description": "felicity.apps.client",
        "isExtraImport": true,
        "detail": "felicity.apps.client",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.client",
        "description": "felicity.apps.client",
        "isExtraImport": true,
        "detail": "felicity.apps.client",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.client",
        "description": "felicity.apps.client",
        "isExtraImport": true,
        "detail": "felicity.apps.client",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "felicity.apps.client",
        "description": "felicity.apps.client",
        "isExtraImport": true,
        "detail": "felicity.apps.client",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.client",
        "description": "felicity.apps.client",
        "isExtraImport": true,
        "detail": "felicity.apps.client",
        "documentation": {}
    },
    {
        "label": "entities",
        "importPath": "felicity.apps.client",
        "description": "felicity.apps.client",
        "isExtraImport": true,
        "detail": "felicity.apps.client",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.client",
        "description": "felicity.apps.client",
        "isExtraImport": true,
        "detail": "felicity.apps.client",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.client",
        "description": "felicity.apps.client",
        "isExtraImport": true,
        "detail": "felicity.apps.client",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.client",
        "description": "felicity.apps.client",
        "isExtraImport": true,
        "detail": "felicity.apps.client",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "categories",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "priorities",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "states",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "categories",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "priorities",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "states",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "categories",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "priorities",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "states",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "categories",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "priorities",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "states",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "states",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "categories",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "priorities",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "states",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "states",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "categories",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "priorities",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "states",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "states",
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "FelicityStreamer",
        "importPath": "felicity.apps.notification.utils",
        "description": "felicity.apps.notification.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.utils",
        "documentation": {}
    },
    {
        "label": "FelicityStreamer",
        "importPath": "felicity.apps.notification.utils",
        "description": "felicity.apps.notification.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.utils",
        "documentation": {}
    },
    {
        "label": "FelicityStreamer",
        "importPath": "felicity.apps.notification.utils",
        "description": "felicity.apps.notification.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.utils",
        "documentation": {}
    },
    {
        "label": "FelicityStreamer",
        "importPath": "felicity.apps.notification.utils",
        "description": "felicity.apps.notification.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.utils",
        "documentation": {}
    },
    {
        "label": "ReportNotifier",
        "importPath": "felicity.apps.notification.utils",
        "description": "felicity.apps.notification.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.utils",
        "documentation": {}
    },
    {
        "label": "FelicityStreamer",
        "importPath": "felicity.apps.notification.utils",
        "description": "felicity.apps.notification.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.utils",
        "documentation": {}
    },
    {
        "label": "FelicityStreamer",
        "importPath": "felicity.apps.notification.utils",
        "description": "felicity.apps.notification.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.utils",
        "documentation": {}
    },
    {
        "label": "ReportNotifier",
        "importPath": "felicity.apps.notification.utils",
        "description": "felicity.apps.notification.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.utils",
        "documentation": {}
    },
    {
        "label": "FelicityStreamer",
        "importPath": "felicity.apps.notification.utils",
        "description": "felicity.apps.notification.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.utils",
        "documentation": {}
    },
    {
        "label": "ReportNotifier",
        "importPath": "felicity.apps.notification.utils",
        "description": "felicity.apps.notification.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.utils",
        "documentation": {}
    },
    {
        "label": "FelicityStreamer",
        "importPath": "felicity.apps.notification.utils",
        "description": "felicity.apps.notification.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.utils",
        "documentation": {}
    },
    {
        "label": "FelicityStreamer",
        "importPath": "felicity.apps.notification.utils",
        "description": "felicity.apps.notification.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.utils",
        "documentation": {}
    },
    {
        "label": "FelicityStreamer",
        "importPath": "felicity.apps.notification.utils",
        "description": "felicity.apps.notification.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.utils",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.patient",
        "description": "felicity.apps.patient",
        "isExtraImport": true,
        "detail": "felicity.apps.patient",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.patient",
        "description": "felicity.apps.patient",
        "isExtraImport": true,
        "detail": "felicity.apps.patient",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.patient",
        "description": "felicity.apps.patient",
        "isExtraImport": true,
        "detail": "felicity.apps.patient",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.patient",
        "description": "felicity.apps.patient",
        "isExtraImport": true,
        "detail": "felicity.apps.patient",
        "documentation": {}
    },
    {
        "label": "entities",
        "importPath": "felicity.apps.patient",
        "description": "felicity.apps.patient",
        "isExtraImport": true,
        "detail": "felicity.apps.patient",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.patient",
        "description": "felicity.apps.patient",
        "isExtraImport": true,
        "detail": "felicity.apps.patient",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.patient",
        "description": "felicity.apps.patient",
        "isExtraImport": true,
        "detail": "felicity.apps.patient",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.patient",
        "description": "felicity.apps.patient",
        "isExtraImport": true,
        "detail": "felicity.apps.patient",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.patient",
        "description": "felicity.apps.patient",
        "isExtraImport": true,
        "detail": "felicity.apps.patient",
        "documentation": {}
    },
    {
        "label": "ReflexUtil",
        "importPath": "felicity.apps.reflex.utils",
        "description": "felicity.apps.reflex.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.utils",
        "documentation": {}
    },
    {
        "label": "ReflexUtil",
        "importPath": "felicity.apps.reflex.utils",
        "description": "felicity.apps.reflex.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.utils",
        "documentation": {}
    },
    {
        "label": "ReflexUtil",
        "importPath": "felicity.apps.reflex.utils",
        "description": "felicity.apps.reflex.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.utils",
        "documentation": {}
    },
    {
        "label": "retest_from_result_uids",
        "importPath": "felicity.apps.analysis.utils",
        "description": "felicity.apps.analysis.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.utils",
        "documentation": {}
    },
    {
        "label": "get_qc_sample_type",
        "importPath": "felicity.apps.analysis.utils",
        "description": "felicity.apps.analysis.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.utils",
        "documentation": {}
    },
    {
        "label": "sample_search",
        "importPath": "felicity.apps.analysis.utils",
        "description": "felicity.apps.analysis.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.utils",
        "documentation": {}
    },
    {
        "label": "get_last_verificator",
        "importPath": "felicity.apps.analysis.utils",
        "description": "felicity.apps.analysis.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.utils",
        "documentation": {}
    },
    {
        "label": "get_qc_sample_type",
        "importPath": "felicity.apps.analysis.utils",
        "description": "felicity.apps.analysis.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.utils",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "felicity.apps.worksheet",
        "description": "felicity.apps.worksheet",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.worksheet",
        "description": "felicity.apps.worksheet",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.worksheet",
        "description": "felicity.apps.worksheet",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "felicity.apps.worksheet",
        "description": "felicity.apps.worksheet",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.worksheet",
        "description": "felicity.apps.worksheet",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.worksheet",
        "description": "felicity.apps.worksheet",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.worksheet",
        "description": "felicity.apps.worksheet",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "felicity.apps.worksheet",
        "description": "felicity.apps.worksheet",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.worksheet",
        "description": "felicity.apps.worksheet",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "felicity.apps.worksheet",
        "description": "felicity.apps.worksheet",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.worksheet",
        "description": "felicity.apps.worksheet",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.worksheet",
        "description": "felicity.apps.worksheet",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "felicity.apps.worksheet",
        "description": "felicity.apps.worksheet",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet",
        "documentation": {}
    },
    {
        "label": "Method",
        "importPath": "felicity.apps.instrument.models",
        "description": "felicity.apps.instrument.models",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.models",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrument",
        "importPath": "felicity.apps.instrument.models",
        "description": "felicity.apps.instrument.models",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.models",
        "documentation": {}
    },
    {
        "label": "Instrument",
        "importPath": "felicity.apps.instrument.models",
        "description": "felicity.apps.instrument.models",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.models",
        "documentation": {}
    },
    {
        "label": "Method",
        "importPath": "felicity.apps.instrument.models",
        "description": "felicity.apps.instrument.models",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.models",
        "documentation": {}
    },
    {
        "label": "Instrument",
        "importPath": "felicity.apps.instrument.models",
        "description": "felicity.apps.instrument.models",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.models",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificate",
        "importPath": "felicity.apps.instrument.models",
        "description": "felicity.apps.instrument.models",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.models",
        "documentation": {}
    },
    {
        "label": "Instrument",
        "importPath": "felicity.apps.instrument.models",
        "description": "felicity.apps.instrument.models",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.models",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibration",
        "importPath": "felicity.apps.instrument.models",
        "description": "felicity.apps.instrument.models",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.models",
        "documentation": {}
    },
    {
        "label": "InstrumentType",
        "importPath": "felicity.apps.instrument.models",
        "description": "felicity.apps.instrument.models",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.models",
        "documentation": {}
    },
    {
        "label": "Method",
        "importPath": "felicity.apps.instrument.models",
        "description": "felicity.apps.instrument.models",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.models",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "felicity.apps.setup.models",
        "description": "felicity.apps.setup.models",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.models",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "felicity.apps.setup.models",
        "description": "felicity.apps.setup.models",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.models",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "felicity.apps.setup.models",
        "description": "felicity.apps.setup.models",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.models",
        "documentation": {}
    },
    {
        "label": "Country",
        "importPath": "felicity.apps.setup.models",
        "description": "felicity.apps.setup.models",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.models",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "felicity.apps.setup.models",
        "description": "felicity.apps.setup.models",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.models",
        "documentation": {}
    },
    {
        "label": "District",
        "importPath": "felicity.apps.setup.models",
        "description": "felicity.apps.setup.models",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.models",
        "documentation": {}
    },
    {
        "label": "Laboratory",
        "importPath": "felicity.apps.setup.models",
        "description": "felicity.apps.setup.models",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.models",
        "documentation": {}
    },
    {
        "label": "LaboratorySetting",
        "importPath": "felicity.apps.setup.models",
        "description": "felicity.apps.setup.models",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.models",
        "documentation": {}
    },
    {
        "label": "Manufacturer",
        "importPath": "felicity.apps.setup.models",
        "description": "felicity.apps.setup.models",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.models",
        "documentation": {}
    },
    {
        "label": "Province",
        "importPath": "felicity.apps.setup.models",
        "description": "felicity.apps.setup.models",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.models",
        "documentation": {}
    },
    {
        "label": "Supplier",
        "importPath": "felicity.apps.setup.models",
        "description": "felicity.apps.setup.models",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.models",
        "documentation": {}
    },
    {
        "label": "Unit",
        "importPath": "felicity.apps.setup.models",
        "description": "felicity.apps.setup.models",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.models",
        "documentation": {}
    },
    {
        "label": "get_passed_args",
        "importPath": "felicity.utils",
        "description": "felicity.utils",
        "isExtraImport": true,
        "detail": "felicity.utils",
        "documentation": {}
    },
    {
        "label": "has_value_or_is_truthy",
        "importPath": "felicity.utils",
        "description": "felicity.utils",
        "isExtraImport": true,
        "detail": "felicity.utils",
        "documentation": {}
    },
    {
        "label": "has_value_or_is_truthy",
        "importPath": "felicity.utils",
        "description": "felicity.utils",
        "isExtraImport": true,
        "detail": "felicity.utils",
        "documentation": {}
    },
    {
        "label": "has_value_or_is_truthy",
        "importPath": "felicity.utils",
        "description": "felicity.utils",
        "isExtraImport": true,
        "detail": "felicity.utils",
        "documentation": {}
    },
    {
        "label": "has_value_or_is_truthy",
        "importPath": "felicity.utils",
        "description": "felicity.utils",
        "isExtraImport": true,
        "detail": "felicity.utils",
        "documentation": {}
    },
    {
        "label": "has_value_or_is_truthy",
        "importPath": "felicity.utils",
        "description": "felicity.utils",
        "isExtraImport": true,
        "detail": "felicity.utils",
        "documentation": {}
    },
    {
        "label": "has_value_or_is_truthy",
        "importPath": "felicity.utils",
        "description": "felicity.utils",
        "isExtraImport": true,
        "detail": "felicity.utils",
        "documentation": {}
    },
    {
        "label": "has_value_or_is_truthy",
        "importPath": "felicity.utils",
        "description": "felicity.utils",
        "isExtraImport": true,
        "detail": "felicity.utils",
        "documentation": {}
    },
    {
        "label": "get_passed_args",
        "importPath": "felicity.utils",
        "description": "felicity.utils",
        "isExtraImport": true,
        "detail": "felicity.utils",
        "documentation": {}
    },
    {
        "label": "has_value_or_is_truthy",
        "importPath": "felicity.utils",
        "description": "felicity.utils",
        "isExtraImport": true,
        "detail": "felicity.utils",
        "documentation": {}
    },
    {
        "label": "has_value_or_is_truthy",
        "importPath": "felicity.utils",
        "description": "felicity.utils",
        "isExtraImport": true,
        "detail": "felicity.utils",
        "documentation": {}
    },
    {
        "label": "has_value_or_is_truthy",
        "importPath": "felicity.utils",
        "description": "felicity.utils",
        "isExtraImport": true,
        "detail": "felicity.utils",
        "documentation": {}
    },
    {
        "label": "has_value_or_is_truthy",
        "importPath": "felicity.utils",
        "description": "felicity.utils",
        "isExtraImport": true,
        "detail": "felicity.utils",
        "documentation": {}
    },
    {
        "label": "has_value_or_is_truthy",
        "importPath": "felicity.utils",
        "description": "felicity.utils",
        "isExtraImport": true,
        "detail": "felicity.utils",
        "documentation": {}
    },
    {
        "label": "has_value_or_is_truthy",
        "importPath": "felicity.utils",
        "description": "felicity.utils",
        "isExtraImport": true,
        "detail": "felicity.utils",
        "documentation": {}
    },
    {
        "label": "has_value_or_is_truthy",
        "importPath": "felicity.utils",
        "description": "felicity.utils",
        "isExtraImport": true,
        "detail": "felicity.utils",
        "documentation": {}
    },
    {
        "label": "has_value_or_is_truthy",
        "importPath": "felicity.utils",
        "description": "felicity.utils",
        "isExtraImport": true,
        "detail": "felicity.utils",
        "documentation": {}
    },
    {
        "label": "remove_circular_refs",
        "importPath": "felicity.utils",
        "description": "felicity.utils",
        "isExtraImport": true,
        "detail": "felicity.utils",
        "documentation": {}
    },
    {
        "label": "get_from_nested",
        "importPath": "felicity.utils",
        "description": "felicity.utils",
        "isExtraImport": true,
        "detail": "felicity.utils",
        "documentation": {}
    },
    {
        "label": "has_value_or_is_truthy",
        "importPath": "felicity.utils",
        "description": "felicity.utils",
        "isExtraImport": true,
        "detail": "felicity.utils",
        "documentation": {}
    },
    {
        "label": "ClientType",
        "importPath": "felicity.api.gql.client.types",
        "description": "felicity.api.gql.client.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.client.types",
        "documentation": {}
    },
    {
        "label": "ClientType",
        "importPath": "felicity.api.gql.client.types",
        "description": "felicity.api.gql.client.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.client.types",
        "documentation": {}
    },
    {
        "label": "ClientContactType",
        "importPath": "felicity.api.gql.client.types",
        "description": "felicity.api.gql.client.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.client.types",
        "documentation": {}
    },
    {
        "label": "ClientType",
        "importPath": "felicity.api.gql.client.types",
        "description": "felicity.api.gql.client.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.client.types",
        "documentation": {}
    },
    {
        "label": "ClientContactType",
        "importPath": "felicity.api.gql.client.types",
        "description": "felicity.api.gql.client.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.client.types",
        "documentation": {}
    },
    {
        "label": "ClientCursorPage",
        "importPath": "felicity.api.gql.client.types",
        "description": "felicity.api.gql.client.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.client.types",
        "documentation": {}
    },
    {
        "label": "ClientEdge",
        "importPath": "felicity.api.gql.client.types",
        "description": "felicity.api.gql.client.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.client.types",
        "documentation": {}
    },
    {
        "label": "ClientType",
        "importPath": "felicity.api.gql.client.types",
        "description": "felicity.api.gql.client.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.client.types",
        "documentation": {}
    },
    {
        "label": "ClientType",
        "importPath": "felicity.api.gql.client.types",
        "description": "felicity.api.gql.client.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.client.types",
        "documentation": {}
    },
    {
        "label": "InstrumentType",
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "MethodType",
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentType",
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "MethodType",
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificateType",
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibrationType",
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetenceType",
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "InstrumentType",
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeType",
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentType",
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "MethodType",
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "InstrumentCursorPage",
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "InstrumentEdge",
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "InstrumentType",
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeCursorPage",
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeEdge",
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeType",
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentCursorPage",
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentEdge",
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentType",
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "MethodCursorPage",
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "MethodEdge",
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "MethodType",
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "InstrumentType",
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "PatientType",
        "importPath": "felicity.api.gql.patient.types",
        "description": "felicity.api.gql.patient.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.patient.types",
        "documentation": {}
    },
    {
        "label": "PatientType",
        "importPath": "felicity.api.gql.patient.types",
        "description": "felicity.api.gql.patient.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.patient.types",
        "documentation": {}
    },
    {
        "label": "IdentificationType",
        "importPath": "felicity.api.gql.patient.types",
        "description": "felicity.api.gql.patient.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.patient.types",
        "documentation": {}
    },
    {
        "label": "PatientType",
        "importPath": "felicity.api.gql.patient.types",
        "description": "felicity.api.gql.patient.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.patient.types",
        "documentation": {}
    },
    {
        "label": "IdentificationType",
        "importPath": "felicity.api.gql.patient.types",
        "description": "felicity.api.gql.patient.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.patient.types",
        "documentation": {}
    },
    {
        "label": "PatientCursorPage",
        "importPath": "felicity.api.gql.patient.types",
        "description": "felicity.api.gql.patient.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.patient.types",
        "documentation": {}
    },
    {
        "label": "PatientEdge",
        "importPath": "felicity.api.gql.patient.types",
        "description": "felicity.api.gql.patient.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.patient.types",
        "documentation": {}
    },
    {
        "label": "PatientType",
        "importPath": "felicity.api.gql.patient.types",
        "description": "felicity.api.gql.patient.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.patient.types",
        "documentation": {}
    },
    {
        "label": "UnitType",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "DistrictType",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "ProvinceType",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "ManufacturerType",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "SupplierType",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "SupplierType",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "CountryType",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "DistrictType",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "ProvinceType",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "CountryType",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "DistrictType",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "LaboratorySettingType",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "LaboratoryType",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "ManufacturerType",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "ProvinceType",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "SupplierType",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "UnitType",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "CountryType",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "DistrictCursorPage",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "DistrictEdge",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "DistrictType",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "LaboratorySettingType",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "LaboratoryType",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "ManufacturerType",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "ProvinceCursorPage",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "ProvinceEdge",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "ProvinceType",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "SupplierType",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "UnitType",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "setup_types",
        "importPath": "felicity.api.gql.setup.types",
        "description": "felicity.api.gql.setup.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types",
        "documentation": {}
    },
    {
        "label": "DepartmentType",
        "importPath": "felicity.api.gql.setup.types.department",
        "description": "felicity.api.gql.setup.types.department",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types.department",
        "documentation": {}
    },
    {
        "label": "DepartmentType",
        "importPath": "felicity.api.gql.setup.types.department",
        "description": "felicity.api.gql.setup.types.department",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types.department",
        "documentation": {}
    },
    {
        "label": "DepartmentType",
        "importPath": "felicity.api.gql.setup.types.department",
        "description": "felicity.api.gql.setup.types.department",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types.department",
        "documentation": {}
    },
    {
        "label": "DepartmentType",
        "importPath": "felicity.api.gql.setup.types.department",
        "description": "felicity.api.gql.setup.types.department",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types.department",
        "documentation": {}
    },
    {
        "label": "DepartmentType",
        "importPath": "felicity.api.gql.setup.types.department",
        "description": "felicity.api.gql.setup.types.department",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types.department",
        "documentation": {}
    },
    {
        "label": "DepartmentType",
        "importPath": "felicity.api.gql.setup.types.department",
        "description": "felicity.api.gql.setup.types.department",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types.department",
        "documentation": {}
    },
    {
        "label": "DepartmentType",
        "importPath": "felicity.api.gql.setup.types.department",
        "description": "felicity.api.gql.setup.types.department",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.types.department",
        "documentation": {}
    },
    {
        "label": "StorageContainerType",
        "importPath": "felicity.api.gql.storage.types",
        "description": "felicity.api.gql.storage.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.storage.types",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.api.gql.types.generic",
        "description": "felicity.api.gql.types.generic",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types.generic",
        "documentation": {}
    },
    {
        "label": "StrawberryMapper",
        "importPath": "felicity.api.gql.types.generic",
        "description": "felicity.api.gql.types.generic",
        "isExtraImport": true,
        "detail": "felicity.api.gql.types.generic",
        "documentation": {}
    },
    {
        "label": "UserType",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UserType",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UserType",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UserType",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UserType",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UserType",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UserType",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UserType",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UserType",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "GroupType",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UserType",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "GroupType",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UserType",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UserType",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UserType",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UserType",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UserType",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UserType",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "AuthenticatedData",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "GroupType",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UpdatedGroupPerms",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UserAuthType",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UserType",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "GroupType",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "PermissionType",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UserCursorPage",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UserEdge",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UserType",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UserType",
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "AnalysisType",
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "QCSetType",
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "SampleType",
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisType",
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestType",
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisType",
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "ProfileType",
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "SampleType",
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "SampleType",
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisType",
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "SampleTypeTyp",
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "SampleType",
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "SampleType",
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisType",
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "QCLevelType",
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "QCTemplateType",
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "SampleTypeTyp",
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "UnicodeText",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "event",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "inspect",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "LargeBinary",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "inspect",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "case",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "event",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "inspection",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "asc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "desc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "LargeBinary",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "LargeBinary",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "LargeBinary",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "LargeBinary",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "LargeBinary",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "asc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "desc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "inspect",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "async_session_factory",
        "importPath": "felicity.database.session",
        "description": "felicity.database.session",
        "isExtraImport": true,
        "detail": "felicity.database.session",
        "documentation": {}
    },
    {
        "label": "async_session_factory",
        "importPath": "felicity.database.session",
        "description": "felicity.database.session",
        "isExtraImport": true,
        "detail": "felicity.database.session",
        "documentation": {}
    },
    {
        "label": "async_session_factory",
        "importPath": "felicity.database.session",
        "description": "felicity.database.session",
        "isExtraImport": true,
        "detail": "felicity.database.session",
        "documentation": {}
    },
    {
        "label": "AsyncSessionScoped",
        "importPath": "felicity.database.session",
        "description": "felicity.database.session",
        "isExtraImport": true,
        "detail": "felicity.database.session",
        "documentation": {}
    },
    {
        "label": "async_session",
        "importPath": "felicity.database.session",
        "description": "felicity.database.session",
        "isExtraImport": true,
        "detail": "felicity.database.session",
        "documentation": {}
    },
    {
        "label": "async_session_factory",
        "importPath": "felicity.database.session",
        "description": "felicity.database.session",
        "isExtraImport": true,
        "detail": "felicity.database.session",
        "documentation": {}
    },
    {
        "label": "async_engine",
        "importPath": "felicity.database.session",
        "description": "felicity.database.session",
        "isExtraImport": true,
        "detail": "felicity.database.session",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "felicity.api.gql.analytics",
        "description": "felicity.api.gql.analytics",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analytics",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "felicity.api.gql.analytics",
        "description": "felicity.api.gql.analytics",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analytics",
        "documentation": {}
    },
    {
        "label": "analytics_types",
        "importPath": "felicity.api.gql.analytics",
        "description": "felicity.api.gql.analytics",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analytics",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRequest",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "QCSet",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "Analysis",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "SampleType",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRequest",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRequest",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "Analysis",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "Analysis",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRequest",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "SampleType",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "sample_analysis",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "Analysis",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCategory",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCoding",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisInterim",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRequest",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertainty",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "CodingStandard",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "ProfileCoding",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "RejectionReason",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "ResultOption",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "SampleType",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "SampleTypeCoding",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "Analysis",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "analysis_profile",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCategory",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "CodingStandard",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "RejectionReason",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "SampleType",
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "importPath": "felicity.apps.analysis.models.results",
        "description": "felicity.apps.analysis.models.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.results",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "importPath": "felicity.apps.analysis.models.results",
        "description": "felicity.apps.analysis.models.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.results",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "importPath": "felicity.apps.analysis.models.results",
        "description": "felicity.apps.analysis.models.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.results",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "importPath": "felicity.apps.analysis.models.results",
        "description": "felicity.apps.analysis.models.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.results",
        "documentation": {}
    },
    {
        "label": "ResultMutation",
        "importPath": "felicity.apps.analysis.models.results",
        "description": "felicity.apps.analysis.models.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.results",
        "documentation": {}
    },
    {
        "label": "result_verification",
        "importPath": "felicity.apps.analysis.models.results",
        "description": "felicity.apps.analysis.models.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.results",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "importPath": "felicity.apps.analysis.models.results",
        "description": "felicity.apps.analysis.models.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.results",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "importPath": "felicity.apps.analysis.models.results",
        "description": "felicity.apps.analysis.models.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.results",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "felicity.apps.analysis.models.results",
        "description": "felicity.apps.analysis.models.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.results",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.analysis.models.results",
        "description": "felicity.apps.analysis.models.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.results",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "importPath": "felicity.apps.analysis.models.results",
        "description": "felicity.apps.analysis.models.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.results",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "importPath": "felicity.apps.analysis.models.results",
        "description": "felicity.apps.analysis.models.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.results",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "importPath": "felicity.apps.analysis.models.results",
        "description": "felicity.apps.analysis.models.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.results",
        "documentation": {}
    },
    {
        "label": "ResultMutation",
        "importPath": "felicity.apps.analysis.models.results",
        "description": "felicity.apps.analysis.models.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.results",
        "documentation": {}
    },
    {
        "label": "SampleAnalyticsInit",
        "importPath": "felicity.apps.analytics",
        "description": "felicity.apps.analytics",
        "isExtraImport": true,
        "detail": "felicity.apps.analytics",
        "documentation": {}
    },
    {
        "label": "SampleAnalyticsInit",
        "importPath": "felicity.apps.analytics",
        "description": "felicity.apps.analytics",
        "isExtraImport": true,
        "detail": "felicity.apps.analytics",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "felicity.apps.analytics",
        "description": "felicity.apps.analytics",
        "isExtraImport": true,
        "detail": "felicity.apps.analytics",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.analytics",
        "description": "felicity.apps.analytics",
        "isExtraImport": true,
        "detail": "felicity.apps.analytics",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.analytics",
        "description": "felicity.apps.analytics",
        "isExtraImport": true,
        "detail": "felicity.apps.analytics",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "felicity.apps.analytics",
        "description": "felicity.apps.analytics",
        "isExtraImport": true,
        "detail": "felicity.apps.analytics",
        "documentation": {}
    },
    {
        "label": "SampleAnalyticsInit",
        "importPath": "felicity.apps.analytics",
        "description": "felicity.apps.analytics",
        "isExtraImport": true,
        "detail": "felicity.apps.analytics",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "felicity.apps.analytics",
        "description": "felicity.apps.analytics",
        "isExtraImport": true,
        "detail": "felicity.apps.analytics",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.analytics",
        "description": "felicity.apps.analytics",
        "isExtraImport": true,
        "detail": "felicity.apps.analytics",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "UserAuth",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "UserPreference",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "isExtraImport": true,
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "worksheet_states",
        "importPath": "felicity.apps.worksheet.conf",
        "description": "felicity.apps.worksheet.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.conf",
        "documentation": {}
    },
    {
        "label": "WorkSheet",
        "importPath": "felicity.apps.worksheet.models",
        "description": "felicity.apps.worksheet.models",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.models",
        "documentation": {}
    },
    {
        "label": "WorkSheet",
        "importPath": "felicity.apps.worksheet.models",
        "description": "felicity.apps.worksheet.models",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.models",
        "documentation": {}
    },
    {
        "label": "WorkSheet",
        "importPath": "felicity.apps.worksheet.models",
        "description": "felicity.apps.worksheet.models",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.models",
        "documentation": {}
    },
    {
        "label": "WorkSheet",
        "importPath": "felicity.apps.worksheet.models",
        "description": "felicity.apps.worksheet.models",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.models",
        "documentation": {}
    },
    {
        "label": "WorkSheetTemplate",
        "importPath": "felicity.apps.worksheet.models",
        "description": "felicity.apps.worksheet.models",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.models",
        "documentation": {}
    },
    {
        "label": "AuditLogType",
        "importPath": "felicity.api.gql.audit.types",
        "description": "felicity.api.gql.audit.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.audit.types",
        "documentation": {}
    },
    {
        "label": "AuditLog",
        "importPath": "felicity.apps.auditlog.models",
        "description": "felicity.apps.auditlog.models",
        "isExtraImport": true,
        "detail": "felicity.apps.auditlog.models",
        "documentation": {}
    },
    {
        "label": "AuditLog",
        "importPath": "felicity.apps.auditlog.models",
        "description": "felicity.apps.auditlog.models",
        "isExtraImport": true,
        "detail": "felicity.apps.auditlog.models",
        "documentation": {}
    },
    {
        "label": "AuditLog",
        "importPath": "felicity.apps.auditlog.models",
        "description": "felicity.apps.auditlog.models",
        "isExtraImport": true,
        "detail": "felicity.apps.auditlog.models",
        "documentation": {}
    },
    {
        "label": "Info",
        "importPath": "strawberry.types",
        "description": "strawberry.types",
        "isExtraImport": true,
        "detail": "strawberry.types",
        "documentation": {}
    },
    {
        "label": "Info",
        "importPath": "strawberry.types",
        "description": "strawberry.types",
        "isExtraImport": true,
        "detail": "strawberry.types",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscountType",
        "importPath": "felicity.api.gql.billing.types",
        "description": "felicity.api.gql.billing.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.billing.types",
        "documentation": {}
    },
    {
        "label": "AnalysisPriceType",
        "importPath": "felicity.api.gql.billing.types",
        "description": "felicity.api.gql.billing.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.billing.types",
        "documentation": {}
    },
    {
        "label": "ProfileDiscountType",
        "importPath": "felicity.api.gql.billing.types",
        "description": "felicity.api.gql.billing.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.billing.types",
        "documentation": {}
    },
    {
        "label": "ProfilePriceType",
        "importPath": "felicity.api.gql.billing.types",
        "description": "felicity.api.gql.billing.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.billing.types",
        "documentation": {}
    },
    {
        "label": "TestBillTransactionType",
        "importPath": "felicity.api.gql.billing.types",
        "description": "felicity.api.gql.billing.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.billing.types",
        "documentation": {}
    },
    {
        "label": "TestBillType",
        "importPath": "felicity.api.gql.billing.types",
        "description": "felicity.api.gql.billing.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.billing.types",
        "documentation": {}
    },
    {
        "label": "VoucherCodeType",
        "importPath": "felicity.api.gql.billing.types",
        "description": "felicity.api.gql.billing.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.billing.types",
        "documentation": {}
    },
    {
        "label": "VoucherType",
        "importPath": "felicity.api.gql.billing.types",
        "description": "felicity.api.gql.billing.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.billing.types",
        "documentation": {}
    },
    {
        "label": "entities",
        "importPath": "felicity.apps.billing",
        "description": "felicity.apps.billing",
        "isExtraImport": true,
        "detail": "felicity.apps.billing",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.billing",
        "description": "felicity.apps.billing",
        "isExtraImport": true,
        "detail": "felicity.apps.billing",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "felicity.apps.billing",
        "description": "felicity.apps.billing",
        "isExtraImport": true,
        "detail": "felicity.apps.billing",
        "documentation": {}
    },
    {
        "label": "entities",
        "importPath": "felicity.apps.billing",
        "description": "felicity.apps.billing",
        "isExtraImport": true,
        "detail": "felicity.apps.billing",
        "documentation": {}
    },
    {
        "label": "DiscountType",
        "importPath": "felicity.apps.billing.config",
        "description": "felicity.apps.billing.config",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.config",
        "documentation": {}
    },
    {
        "label": "TransactionKind",
        "importPath": "felicity.apps.billing.config",
        "description": "felicity.apps.billing.config",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.config",
        "documentation": {}
    },
    {
        "label": "DiscountType",
        "importPath": "felicity.apps.billing.config",
        "description": "felicity.apps.billing.config",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.config",
        "documentation": {}
    },
    {
        "label": "DiscountValueType",
        "importPath": "felicity.apps.billing.config",
        "description": "felicity.apps.billing.config",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.config",
        "documentation": {}
    },
    {
        "label": "DiscountType",
        "importPath": "felicity.apps.billing.config",
        "description": "felicity.apps.billing.config",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.config",
        "documentation": {}
    },
    {
        "label": "DiscountValueType",
        "importPath": "felicity.apps.billing.config",
        "description": "felicity.apps.billing.config",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.config",
        "documentation": {}
    },
    {
        "label": "TransactionKind",
        "importPath": "felicity.apps.billing.config",
        "description": "felicity.apps.billing.config",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.config",
        "documentation": {}
    },
    {
        "label": "DiscountType",
        "importPath": "felicity.apps.billing.config",
        "description": "felicity.apps.billing.config",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.config",
        "documentation": {}
    },
    {
        "label": "DiscountValueType",
        "importPath": "felicity.apps.billing.config",
        "description": "felicity.apps.billing.config",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.config",
        "documentation": {}
    },
    {
        "label": "TransactionKind",
        "importPath": "felicity.apps.billing.config",
        "description": "felicity.apps.billing.config",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.config",
        "documentation": {}
    },
    {
        "label": "TestBillTransactionUpdate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillUpdate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscountCreate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisPriceCreate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileDiscountCreate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "ProfilePriceCreate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillCreate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillUpdate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillCreate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillTransactionCreate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillTransactionUpdate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillUpdate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillInvoiceCreate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "felicity.apps.impress.invoicing",
        "description": "felicity.apps.impress.invoicing",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.invoicing",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "felicity.api.gql.billing",
        "description": "felicity.api.gql.billing",
        "isExtraImport": true,
        "detail": "felicity.api.gql.billing",
        "documentation": {}
    },
    {
        "label": "billing_types",
        "importPath": "felicity.api.gql.billing",
        "description": "felicity.api.gql.billing",
        "isExtraImport": true,
        "detail": "felicity.api.gql.billing",
        "documentation": {}
    },
    {
        "label": "impress_invoice",
        "importPath": "felicity.apps.impress.invoicing.utils",
        "description": "felicity.apps.impress.invoicing.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.invoicing.utils",
        "documentation": {}
    },
    {
        "label": "impress_invoice",
        "importPath": "felicity.apps.impress.invoicing.utils",
        "description": "felicity.apps.impress.invoicing.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.invoicing.utils",
        "documentation": {}
    },
    {
        "label": "TestBill",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "VoucherCode",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "test_bill_item",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscount",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "AnalysisPrice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "ProfileDiscount",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "ProfilePrice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscount",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "AnalysisPrice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "ProfileDiscount",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "ProfilePrice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBill",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBillInvoice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBillTransaction",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "Voucher",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "VoucherCode",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "VoucherCustomer",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscount",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "AnalysisPrice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "ProfileDiscount",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "ProfilePrice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBill",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBillInvoice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBillTransaction",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "Voucher",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "VoucherCode",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "VoucherCustomer",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscount",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "AnalysisPrice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "ProfileDiscount",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "ProfilePrice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBill",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBillTransaction",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "Voucher",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "VoucherCode",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "VoucherCustomer",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "test_bill_item",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "AnalysisPrice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "ProfilePrice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBill",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBillInvoice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBillTransaction",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "test_bill_item",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscount",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "AnalysisPrice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "ProfileDiscount",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "ProfilePrice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBill",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBillInvoice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBillTransaction",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "VoucherCode",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "VoucherCustomer",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "Info",
        "importPath": "felicity.api.deps",
        "description": "felicity.api.deps",
        "isExtraImport": true,
        "detail": "felicity.api.deps",
        "documentation": {}
    },
    {
        "label": "Info",
        "importPath": "felicity.api.deps",
        "description": "felicity.api.deps",
        "isExtraImport": true,
        "detail": "felicity.api.deps",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "felicity.api.deps",
        "description": "felicity.api.deps",
        "isExtraImport": true,
        "detail": "felicity.api.deps",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "felicity.api.deps",
        "description": "felicity.api.deps",
        "isExtraImport": true,
        "detail": "felicity.api.deps",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "felicity.api.deps",
        "description": "felicity.api.deps",
        "isExtraImport": true,
        "detail": "felicity.api.deps",
        "documentation": {}
    },
    {
        "label": "get_gql_context",
        "importPath": "felicity.api.deps",
        "description": "felicity.api.deps",
        "isExtraImport": true,
        "detail": "felicity.api.deps",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "PdfWriter",
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "isExtraImport": true,
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "PdfWriter",
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "isExtraImport": true,
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "convert_from_bytes",
        "importPath": "pdf2image",
        "description": "pdf2image",
        "isExtraImport": true,
        "detail": "pdf2image",
        "documentation": {}
    },
    {
        "label": "ReportImpressType",
        "importPath": "felicity.api.gql.impress.types",
        "description": "felicity.api.gql.impress.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.impress.types",
        "documentation": {}
    },
    {
        "label": "BarCode",
        "importPath": "felicity.apps.impress.barcode.schema",
        "description": "felicity.apps.impress.barcode.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.barcode.schema",
        "documentation": {}
    },
    {
        "label": "BarCodeMeta",
        "importPath": "felicity.apps.impress.barcode.schema",
        "description": "felicity.apps.impress.barcode.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.barcode.schema",
        "documentation": {}
    },
    {
        "label": "BarCode",
        "importPath": "felicity.apps.impress.barcode.schema",
        "description": "felicity.apps.impress.barcode.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.barcode.schema",
        "documentation": {}
    },
    {
        "label": "BarCode",
        "importPath": "felicity.apps.impress.barcode.schema",
        "description": "felicity.apps.impress.barcode.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.barcode.schema",
        "documentation": {}
    },
    {
        "label": "impress_barcodes",
        "importPath": "felicity.apps.impress.barcode.utils",
        "description": "felicity.apps.impress.barcode.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.barcode.utils",
        "documentation": {}
    },
    {
        "label": "ReportImpress",
        "importPath": "felicity.apps.impress.sample.models",
        "description": "felicity.apps.impress.sample.models",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.sample.models",
        "documentation": {}
    },
    {
        "label": "ReportImpress",
        "importPath": "felicity.apps.impress.sample.models",
        "description": "felicity.apps.impress.sample.models",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.sample.models",
        "documentation": {}
    },
    {
        "label": "ReportImpress",
        "importPath": "felicity.apps.impress.sample.models",
        "description": "felicity.apps.impress.sample.models",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.sample.models",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.storage.models",
        "description": "felicity.apps.storage.models",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.models",
        "documentation": {}
    },
    {
        "label": "StorageContainer",
        "importPath": "felicity.apps.storage.models",
        "description": "felicity.apps.storage.models",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.models",
        "documentation": {}
    },
    {
        "label": "StorageLocation",
        "importPath": "felicity.apps.storage.models",
        "description": "felicity.apps.storage.models",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.models",
        "documentation": {}
    },
    {
        "label": "StorageSection",
        "importPath": "felicity.apps.storage.models",
        "description": "felicity.apps.storage.models",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.models",
        "documentation": {}
    },
    {
        "label": "StoreRoom",
        "importPath": "felicity.apps.storage.models",
        "description": "felicity.apps.storage.models",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.models",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.instrument",
        "description": "felicity.apps.instrument",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.instrument",
        "description": "felicity.apps.instrument",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.instrument",
        "description": "felicity.apps.instrument",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.instrument",
        "description": "felicity.apps.instrument",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.instrument",
        "description": "felicity.apps.instrument",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.instrument",
        "description": "felicity.apps.instrument",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.instrument",
        "description": "felicity.apps.instrument",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "felicity.api.gql.inventory",
        "description": "felicity.api.gql.inventory",
        "isExtraImport": true,
        "detail": "felicity.api.gql.inventory",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "felicity.api.gql.inventory",
        "description": "felicity.api.gql.inventory",
        "isExtraImport": true,
        "detail": "felicity.api.gql.inventory",
        "documentation": {}
    },
    {
        "label": "inventory_types",
        "importPath": "felicity.api.gql.inventory",
        "description": "felicity.api.gql.inventory",
        "isExtraImport": true,
        "detail": "felicity.api.gql.inventory",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.inventory",
        "description": "felicity.apps.inventory",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.inventory",
        "description": "felicity.apps.inventory",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.inventory",
        "description": "felicity.apps.inventory",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.inventory",
        "description": "felicity.apps.inventory",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.inventory",
        "description": "felicity.apps.inventory",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.inventory",
        "description": "felicity.apps.inventory",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory",
        "documentation": {}
    },
    {
        "label": "order_states",
        "importPath": "felicity.apps.inventory.conf",
        "description": "felicity.apps.inventory.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.conf",
        "documentation": {}
    },
    {
        "label": "Adjust",
        "importPath": "felicity.apps.inventory.conf",
        "description": "felicity.apps.inventory.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.conf",
        "documentation": {}
    },
    {
        "label": "MessageType",
        "importPath": "felicity.api.gql.messaging.types",
        "description": "felicity.api.gql.messaging.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.messaging.types",
        "documentation": {}
    },
    {
        "label": "MessageThreadType",
        "importPath": "felicity.api.gql.messaging.types",
        "description": "felicity.api.gql.messaging.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.messaging.types",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.messaging",
        "description": "felicity.apps.messaging",
        "isExtraImport": true,
        "detail": "felicity.apps.messaging",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.messaging",
        "description": "felicity.apps.messaging",
        "isExtraImport": true,
        "detail": "felicity.apps.messaging",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.messaging",
        "description": "felicity.apps.messaging",
        "isExtraImport": true,
        "detail": "felicity.apps.messaging",
        "documentation": {}
    },
    {
        "label": "NoticeType",
        "importPath": "felicity.api.gql.noticeboard.types",
        "description": "felicity.api.gql.noticeboard.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.noticeboard.types",
        "documentation": {}
    },
    {
        "label": "NoticeType",
        "importPath": "felicity.api.gql.noticeboard.types",
        "description": "felicity.api.gql.noticeboard.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.noticeboard.types",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.noticeboard",
        "description": "felicity.apps.noticeboard",
        "isExtraImport": true,
        "detail": "felicity.apps.noticeboard",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.noticeboard",
        "description": "felicity.apps.noticeboard",
        "isExtraImport": true,
        "detail": "felicity.apps.noticeboard",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.noticeboard",
        "description": "felicity.apps.noticeboard",
        "isExtraImport": true,
        "detail": "felicity.apps.noticeboard",
        "documentation": {}
    },
    {
        "label": "get_time_now",
        "importPath": "felicity.core.dtz",
        "description": "felicity.core.dtz",
        "isExtraImport": true,
        "detail": "felicity.core.dtz",
        "documentation": {}
    },
    {
        "label": "format_datetime",
        "importPath": "felicity.core.dtz",
        "description": "felicity.core.dtz",
        "isExtraImport": true,
        "detail": "felicity.core.dtz",
        "documentation": {}
    },
    {
        "label": "datetime_math",
        "importPath": "felicity.core.dtz",
        "description": "felicity.core.dtz",
        "isExtraImport": true,
        "detail": "felicity.core.dtz",
        "documentation": {}
    },
    {
        "label": "format_datetime",
        "importPath": "felicity.core.dtz",
        "description": "felicity.core.dtz",
        "isExtraImport": true,
        "detail": "felicity.core.dtz",
        "documentation": {}
    },
    {
        "label": "get_time_now",
        "importPath": "felicity.core.dtz",
        "description": "felicity.core.dtz",
        "isExtraImport": true,
        "detail": "felicity.core.dtz",
        "documentation": {}
    },
    {
        "label": "get_time_now",
        "importPath": "felicity.core.dtz",
        "description": "felicity.core.dtz",
        "isExtraImport": true,
        "detail": "felicity.core.dtz",
        "documentation": {}
    },
    {
        "label": "format_datetime",
        "importPath": "felicity.core.dtz",
        "description": "felicity.core.dtz",
        "isExtraImport": true,
        "detail": "felicity.core.dtz",
        "documentation": {}
    },
    {
        "label": "format_datetime",
        "importPath": "felicity.core.dtz",
        "description": "felicity.core.dtz",
        "isExtraImport": true,
        "detail": "felicity.core.dtz",
        "documentation": {}
    },
    {
        "label": "NotificationType",
        "importPath": "felicity.api.gql.notification.types",
        "description": "felicity.api.gql.notification.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.notification.types",
        "documentation": {}
    },
    {
        "label": "ActivityStreamType",
        "importPath": "felicity.api.gql.notification.types",
        "description": "felicity.api.gql.notification.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.notification.types",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.notification",
        "description": "felicity.apps.notification",
        "isExtraImport": true,
        "detail": "felicity.apps.notification",
        "documentation": {}
    },
    {
        "label": "BroadcastEvent",
        "importPath": "felicity.apps.common.channel",
        "description": "felicity.apps.common.channel",
        "isExtraImport": true,
        "detail": "felicity.apps.common.channel",
        "documentation": {}
    },
    {
        "label": "Subscriber",
        "importPath": "felicity.apps.common.channel",
        "description": "felicity.apps.common.channel",
        "isExtraImport": true,
        "detail": "felicity.apps.common.channel",
        "documentation": {}
    },
    {
        "label": "broadcast",
        "importPath": "felicity.apps.common.channel",
        "description": "felicity.apps.common.channel",
        "isExtraImport": true,
        "detail": "felicity.apps.common.channel",
        "documentation": {}
    },
    {
        "label": "broadcast",
        "importPath": "felicity.apps.common.channel",
        "description": "felicity.apps.common.channel",
        "isExtraImport": true,
        "detail": "felicity.apps.common.channel",
        "documentation": {}
    },
    {
        "label": "ActivityStream",
        "importPath": "felicity.apps.notification.models",
        "description": "felicity.apps.notification.models",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.models",
        "documentation": {}
    },
    {
        "label": "ActivityStream",
        "importPath": "felicity.apps.notification.models",
        "description": "felicity.apps.notification.models",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "felicity.apps.notification.models",
        "description": "felicity.apps.notification.models",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.models",
        "documentation": {}
    },
    {
        "label": "ActivityFeed",
        "importPath": "felicity.apps.notification.models",
        "description": "felicity.apps.notification.models",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.models",
        "documentation": {}
    },
    {
        "label": "ActivityStream",
        "importPath": "felicity.apps.notification.models",
        "description": "felicity.apps.notification.models",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "felicity.apps.notification.models",
        "description": "felicity.apps.notification.models",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.models",
        "documentation": {}
    },
    {
        "label": "AnalysisResultType",
        "importPath": "felicity.api.gql.analysis.types.results",
        "description": "felicity.api.gql.analysis.types.results",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types.results",
        "documentation": {}
    },
    {
        "label": "AnalysisResultType",
        "importPath": "felicity.api.gql.analysis.types.results",
        "description": "felicity.api.gql.analysis.types.results",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.types.results",
        "documentation": {}
    },
    {
        "label": "ReportMetaType",
        "importPath": "felicity.api.gql.analytics.types",
        "description": "felicity.api.gql.analytics.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analytics.types",
        "documentation": {}
    },
    {
        "label": "WorkSheetType",
        "importPath": "felicity.api.gql.worksheet.types",
        "description": "felicity.api.gql.worksheet.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.worksheet.types",
        "documentation": {}
    },
    {
        "label": "WorkSheetTemplateType",
        "importPath": "felicity.api.gql.worksheet.types",
        "description": "felicity.api.gql.worksheet.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.worksheet.types",
        "documentation": {}
    },
    {
        "label": "WorkSheetType",
        "importPath": "felicity.api.gql.worksheet.types",
        "description": "felicity.api.gql.worksheet.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.worksheet.types",
        "documentation": {}
    },
    {
        "label": "WorkSheetCursorPage",
        "importPath": "felicity.api.gql.worksheet.types",
        "description": "felicity.api.gql.worksheet.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.worksheet.types",
        "documentation": {}
    },
    {
        "label": "WorkSheetEdge",
        "importPath": "felicity.api.gql.worksheet.types",
        "description": "felicity.api.gql.worksheet.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.worksheet.types",
        "documentation": {}
    },
    {
        "label": "WorkSheetTemplateType",
        "importPath": "felicity.api.gql.worksheet.types",
        "description": "felicity.api.gql.worksheet.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.worksheet.types",
        "documentation": {}
    },
    {
        "label": "WorkSheetType",
        "importPath": "felicity.api.gql.worksheet.types",
        "description": "felicity.api.gql.worksheet.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.worksheet.types",
        "documentation": {}
    },
    {
        "label": "ReportMeta",
        "importPath": "felicity.apps.analytics.models",
        "description": "felicity.apps.analytics.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analytics.models",
        "documentation": {}
    },
    {
        "label": "ReportMeta",
        "importPath": "felicity.apps.analytics.models",
        "description": "felicity.apps.analytics.models",
        "isExtraImport": true,
        "detail": "felicity.apps.analytics.models",
        "documentation": {}
    },
    {
        "label": "ReflexActionType",
        "importPath": "felicity.api.gql.reflex.types",
        "description": "felicity.api.gql.reflex.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.reflex.types",
        "documentation": {}
    },
    {
        "label": "ReflexBrainType",
        "importPath": "felicity.api.gql.reflex.types",
        "description": "felicity.api.gql.reflex.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.reflex.types",
        "documentation": {}
    },
    {
        "label": "ReflexRuleType",
        "importPath": "felicity.api.gql.reflex.types",
        "description": "felicity.api.gql.reflex.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.reflex.types",
        "documentation": {}
    },
    {
        "label": "ReflexRuleCursorPage",
        "importPath": "felicity.api.gql.reflex.types",
        "description": "felicity.api.gql.reflex.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.reflex.types",
        "documentation": {}
    },
    {
        "label": "ReflexRuleEdge",
        "importPath": "felicity.api.gql.reflex.types",
        "description": "felicity.api.gql.reflex.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.reflex.types",
        "documentation": {}
    },
    {
        "label": "ReflexRuleType",
        "importPath": "felicity.api.gql.reflex.types",
        "description": "felicity.api.gql.reflex.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.reflex.types",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.reflex",
        "description": "felicity.apps.reflex",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.reflex",
        "description": "felicity.apps.reflex",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.reflex",
        "description": "felicity.apps.reflex",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.reflex",
        "description": "felicity.apps.reflex",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.reflex",
        "description": "felicity.apps.reflex",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.setup",
        "description": "felicity.apps.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.setup",
        "description": "felicity.apps.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.setup",
        "description": "felicity.apps.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.setup",
        "description": "felicity.apps.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.setup",
        "description": "felicity.apps.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.setup",
        "description": "felicity.apps.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.setup",
        "description": "felicity.apps.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.setup",
        "description": "felicity.apps.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.setup",
        "description": "felicity.apps.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.setup",
        "description": "felicity.apps.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "felicity.api.gql.shipment",
        "description": "felicity.api.gql.shipment",
        "isExtraImport": true,
        "detail": "felicity.api.gql.shipment",
        "documentation": {}
    },
    {
        "label": "shipment_types",
        "importPath": "felicity.api.gql.shipment",
        "description": "felicity.api.gql.shipment",
        "isExtraImport": true,
        "detail": "felicity.api.gql.shipment",
        "documentation": {}
    },
    {
        "label": "ShipmentType",
        "importPath": "felicity.api.gql.shipment.types",
        "description": "felicity.api.gql.shipment.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.shipment.types",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratoryType",
        "importPath": "felicity.api.gql.shipment.types",
        "description": "felicity.api.gql.shipment.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.shipment.types",
        "documentation": {}
    },
    {
        "label": "ShipmentCursorPage",
        "importPath": "felicity.api.gql.shipment.types",
        "description": "felicity.api.gql.shipment.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.shipment.types",
        "documentation": {}
    },
    {
        "label": "ShipmentEdge",
        "importPath": "felicity.api.gql.shipment.types",
        "description": "felicity.api.gql.shipment.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.shipment.types",
        "documentation": {}
    },
    {
        "label": "ShipmentType",
        "importPath": "felicity.api.gql.shipment.types",
        "description": "felicity.api.gql.shipment.types",
        "isExtraImport": true,
        "detail": "felicity.api.gql.shipment.types",
        "documentation": {}
    },
    {
        "label": "IdSequence",
        "importPath": "felicity.apps.common.models",
        "description": "felicity.apps.common.models",
        "isExtraImport": true,
        "detail": "felicity.apps.common.models",
        "documentation": {}
    },
    {
        "label": "IdSequence",
        "importPath": "felicity.apps.common.models",
        "description": "felicity.apps.common.models",
        "isExtraImport": true,
        "detail": "felicity.apps.common.models",
        "documentation": {}
    },
    {
        "label": "IdSequence",
        "importPath": "felicity.apps.common.models",
        "description": "felicity.apps.common.models",
        "isExtraImport": true,
        "detail": "felicity.apps.common.models",
        "documentation": {}
    },
    {
        "label": "IdSequence",
        "importPath": "felicity.apps.common.models",
        "description": "felicity.apps.common.models",
        "isExtraImport": true,
        "detail": "felicity.apps.common.models",
        "documentation": {}
    },
    {
        "label": "IdSequence",
        "importPath": "felicity.apps.common.models",
        "description": "felicity.apps.common.models",
        "isExtraImport": true,
        "detail": "felicity.apps.common.models",
        "documentation": {}
    },
    {
        "label": "IdSequence",
        "importPath": "felicity.apps.common.models",
        "description": "felicity.apps.common.models",
        "isExtraImport": true,
        "detail": "felicity.apps.common.models",
        "documentation": {}
    },
    {
        "label": "IdSequence",
        "importPath": "felicity.apps.common.models",
        "description": "felicity.apps.common.models",
        "isExtraImport": true,
        "detail": "felicity.apps.common.models",
        "documentation": {}
    },
    {
        "label": "IdSequence",
        "importPath": "felicity.apps.common.models",
        "description": "felicity.apps.common.models",
        "isExtraImport": true,
        "detail": "felicity.apps.common.models",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "felicity.apps.shipment",
        "description": "felicity.apps.shipment",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.shipment",
        "description": "felicity.apps.shipment",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.shipment",
        "description": "felicity.apps.shipment",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.shipment",
        "description": "felicity.apps.shipment",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "felicity.apps.shipment",
        "description": "felicity.apps.shipment",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.shipment",
        "description": "felicity.apps.shipment",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "felicity.apps.shipment",
        "description": "felicity.apps.shipment",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.shipment",
        "description": "felicity.apps.shipment",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "felicity.apps.shipment",
        "description": "felicity.apps.shipment",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment",
        "documentation": {}
    },
    {
        "label": "action_shipment",
        "importPath": "felicity.apps.shipment.utils",
        "description": "felicity.apps.shipment.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.utils",
        "documentation": {}
    },
    {
        "label": "shipment_recall",
        "importPath": "felicity.apps.shipment.utils",
        "description": "felicity.apps.shipment.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.utils",
        "documentation": {}
    },
    {
        "label": "shipment_recover",
        "importPath": "felicity.apps.shipment.utils",
        "description": "felicity.apps.shipment.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.utils",
        "documentation": {}
    },
    {
        "label": "shipment_assign",
        "importPath": "felicity.apps.shipment.utils",
        "description": "felicity.apps.shipment.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.utils",
        "documentation": {}
    },
    {
        "label": "shipment_receive",
        "importPath": "felicity.apps.shipment.utils",
        "description": "felicity.apps.shipment.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.utils",
        "documentation": {}
    },
    {
        "label": "shipment_reset_assigned_count",
        "importPath": "felicity.apps.shipment.utils",
        "description": "felicity.apps.shipment.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.utils",
        "documentation": {}
    },
    {
        "label": "shipment_result_update",
        "importPath": "felicity.apps.shipment.utils",
        "description": "felicity.apps.shipment.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.utils",
        "documentation": {}
    },
    {
        "label": "ShippedSample",
        "importPath": "felicity.apps.shipment.models",
        "description": "felicity.apps.shipment.models",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.models",
        "documentation": {}
    },
    {
        "label": "ShippedSample",
        "importPath": "felicity.apps.shipment.models",
        "description": "felicity.apps.shipment.models",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.models",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratory",
        "importPath": "felicity.apps.shipment.models",
        "description": "felicity.apps.shipment.models",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.models",
        "documentation": {}
    },
    {
        "label": "Shipment",
        "importPath": "felicity.apps.shipment.models",
        "description": "felicity.apps.shipment.models",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.models",
        "documentation": {}
    },
    {
        "label": "Shipment",
        "importPath": "felicity.apps.shipment.models",
        "description": "felicity.apps.shipment.models",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.models",
        "documentation": {}
    },
    {
        "label": "ShippedSample",
        "importPath": "felicity.apps.shipment.models",
        "description": "felicity.apps.shipment.models",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.models",
        "documentation": {}
    },
    {
        "label": "Shipment",
        "importPath": "felicity.apps.shipment.models",
        "description": "felicity.apps.shipment.models",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.models",
        "documentation": {}
    },
    {
        "label": "ShippedSample",
        "importPath": "felicity.apps.shipment.models",
        "description": "felicity.apps.shipment.models",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.models",
        "documentation": {}
    },
    {
        "label": "Shipment",
        "importPath": "felicity.apps.shipment.models",
        "description": "felicity.apps.shipment.models",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.models",
        "documentation": {}
    },
    {
        "label": "ShippedSample",
        "importPath": "felicity.apps.shipment.models",
        "description": "felicity.apps.shipment.models",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.models",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "felicity.api.gql.storage",
        "description": "felicity.api.gql.storage",
        "isExtraImport": true,
        "detail": "felicity.api.gql.storage",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "felicity.api.gql.storage",
        "description": "felicity.api.gql.storage",
        "isExtraImport": true,
        "detail": "felicity.api.gql.storage",
        "documentation": {}
    },
    {
        "label": "storage_types",
        "importPath": "felicity.api.gql.storage",
        "description": "felicity.api.gql.storage",
        "isExtraImport": true,
        "detail": "felicity.api.gql.storage",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.storage",
        "description": "felicity.apps.storage",
        "isExtraImport": true,
        "detail": "felicity.apps.storage",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.storage",
        "description": "felicity.apps.storage",
        "isExtraImport": true,
        "detail": "felicity.apps.storage",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.storage",
        "description": "felicity.apps.storage",
        "isExtraImport": true,
        "detail": "felicity.apps.storage",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.storage",
        "description": "felicity.apps.storage",
        "isExtraImport": true,
        "detail": "felicity.apps.storage",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.storage",
        "description": "felicity.apps.storage",
        "isExtraImport": true,
        "detail": "felicity.apps.storage",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.user",
        "description": "felicity.apps.user",
        "isExtraImport": true,
        "detail": "felicity.apps.user",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.user",
        "description": "felicity.apps.user",
        "isExtraImport": true,
        "detail": "felicity.apps.user",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.user",
        "description": "felicity.apps.user",
        "isExtraImport": true,
        "detail": "felicity.apps.user",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.user",
        "description": "felicity.apps.user",
        "isExtraImport": true,
        "detail": "felicity.apps.user",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.user",
        "description": "felicity.apps.user",
        "isExtraImport": true,
        "detail": "felicity.apps.user",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.user",
        "description": "felicity.apps.user",
        "isExtraImport": true,
        "detail": "felicity.apps.user",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.user",
        "description": "felicity.apps.user",
        "isExtraImport": true,
        "detail": "felicity.apps.user",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.user",
        "description": "felicity.apps.user",
        "isExtraImport": true,
        "detail": "felicity.apps.user",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.user",
        "description": "felicity.apps.user",
        "isExtraImport": true,
        "detail": "felicity.apps.user",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.user",
        "description": "felicity.apps.user",
        "isExtraImport": true,
        "detail": "felicity.apps.user",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.user",
        "description": "felicity.apps.user",
        "isExtraImport": true,
        "detail": "felicity.apps.user",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "felicity.apps.user",
        "description": "felicity.apps.user",
        "isExtraImport": true,
        "detail": "felicity.apps.user",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.user",
        "description": "felicity.apps.user",
        "isExtraImport": true,
        "detail": "felicity.apps.user",
        "documentation": {}
    },
    {
        "label": "security",
        "importPath": "felicity.core",
        "description": "felicity.core",
        "isExtraImport": true,
        "detail": "felicity.core",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "felicity.core",
        "description": "felicity.core",
        "isExtraImport": true,
        "detail": "felicity.core",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "felicity.core",
        "description": "felicity.core",
        "isExtraImport": true,
        "detail": "felicity.core",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "felicity.core",
        "description": "felicity.core",
        "isExtraImport": true,
        "detail": "felicity.core",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "isExtraImport": true,
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "isExtraImport": true,
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "isExtraImport": true,
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "isExtraImport": true,
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "isExtraImport": true,
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "isExtraImport": true,
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "isExtraImport": true,
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "isExtraImport": true,
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "isExtraImport": true,
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "isExtraImport": true,
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "isExtraImport": true,
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "isExtraImport": true,
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "isExtraImport": true,
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "isExtraImport": true,
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "isExtraImport": true,
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "isExtraImport": true,
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "isExtraImport": true,
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "isExtraImport": true,
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "isExtraImport": true,
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "post_event",
        "importPath": "felicity.core.events",
        "description": "felicity.core.events",
        "isExtraImport": true,
        "detail": "felicity.core.events",
        "documentation": {}
    },
    {
        "label": "subscribe",
        "importPath": "felicity.core.events",
        "description": "felicity.core.events",
        "isExtraImport": true,
        "detail": "felicity.core.events",
        "documentation": {}
    },
    {
        "label": "generate_password_reset_token",
        "importPath": "felicity.core.security",
        "description": "felicity.core.security",
        "isExtraImport": true,
        "detail": "felicity.core.security",
        "documentation": {}
    },
    {
        "label": "verify_password_reset_token",
        "importPath": "felicity.core.security",
        "description": "felicity.core.security",
        "isExtraImport": true,
        "detail": "felicity.core.security",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "importPath": "felicity.core.security",
        "description": "felicity.core.security",
        "isExtraImport": true,
        "detail": "felicity.core.security",
        "documentation": {}
    },
    {
        "label": "password_check",
        "importPath": "felicity.core.security",
        "description": "felicity.core.security",
        "isExtraImport": true,
        "detail": "felicity.core.security",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "felicity.core.security",
        "description": "felicity.core.security",
        "isExtraImport": true,
        "detail": "felicity.core.security",
        "documentation": {}
    },
    {
        "label": "deps",
        "importPath": "felicity.api",
        "description": "felicity.api",
        "isExtraImport": true,
        "detail": "felicity.api",
        "documentation": {}
    },
    {
        "label": "BasePermission",
        "importPath": "strawberry.permission",
        "description": "strawberry.permission",
        "isExtraImport": true,
        "detail": "strawberry.permission",
        "documentation": {}
    },
    {
        "label": "check_result_verification",
        "importPath": "felicity.apps.analysis.permissions",
        "description": "felicity.apps.analysis.permissions",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.permissions",
        "documentation": {}
    },
    {
        "label": "check_sample_verification",
        "importPath": "felicity.apps.analysis.permissions",
        "description": "felicity.apps.analysis.permissions",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.permissions",
        "documentation": {}
    },
    {
        "label": "AnalysisMutations",
        "importPath": "felicity.api.gql.analysis.mutations",
        "description": "felicity.api.gql.analysis.mutations",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.mutations",
        "documentation": {}
    },
    {
        "label": "AnalysisQuery",
        "importPath": "felicity.api.gql.analysis.query",
        "description": "felicity.api.gql.analysis.query",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analysis.query",
        "documentation": {}
    },
    {
        "label": "AnalyticsQuery",
        "importPath": "felicity.api.gql.analytics.query",
        "description": "felicity.api.gql.analytics.query",
        "isExtraImport": true,
        "detail": "felicity.api.gql.analytics.query",
        "documentation": {}
    },
    {
        "label": "audit_types",
        "importPath": "felicity.api.gql.audit",
        "description": "felicity.api.gql.audit",
        "isExtraImport": true,
        "detail": "felicity.api.gql.audit",
        "documentation": {}
    },
    {
        "label": "AuditLogQuery",
        "importPath": "felicity.api.gql.audit.query",
        "description": "felicity.api.gql.audit.query",
        "isExtraImport": true,
        "detail": "felicity.api.gql.audit.query",
        "documentation": {}
    },
    {
        "label": "BillingMutations",
        "importPath": "felicity.api.gql.billing.mutations",
        "description": "felicity.api.gql.billing.mutations",
        "isExtraImport": true,
        "detail": "felicity.api.gql.billing.mutations",
        "documentation": {}
    },
    {
        "label": "BillingQuery",
        "importPath": "felicity.api.gql.billing.query",
        "description": "felicity.api.gql.billing.query",
        "isExtraImport": true,
        "detail": "felicity.api.gql.billing.query",
        "documentation": {}
    },
    {
        "label": "client_types",
        "importPath": "felicity.api.gql.client",
        "description": "felicity.api.gql.client",
        "isExtraImport": true,
        "detail": "felicity.api.gql.client",
        "documentation": {}
    },
    {
        "label": "ClientMutations",
        "importPath": "felicity.api.gql.client.mutations",
        "description": "felicity.api.gql.client.mutations",
        "isExtraImport": true,
        "detail": "felicity.api.gql.client.mutations",
        "documentation": {}
    },
    {
        "label": "ClientQuery",
        "importPath": "felicity.api.gql.client.query",
        "description": "felicity.api.gql.client.query",
        "isExtraImport": true,
        "detail": "felicity.api.gql.client.query",
        "documentation": {}
    },
    {
        "label": "impress_types",
        "importPath": "felicity.api.gql.impress",
        "description": "felicity.api.gql.impress",
        "isExtraImport": true,
        "detail": "felicity.api.gql.impress",
        "documentation": {}
    },
    {
        "label": "ReportImpressQuery",
        "importPath": "felicity.api.gql.impress.query",
        "description": "felicity.api.gql.impress.query",
        "isExtraImport": true,
        "detail": "felicity.api.gql.impress.query",
        "documentation": {}
    },
    {
        "label": "instrument_types",
        "importPath": "felicity.api.gql.instrument",
        "description": "felicity.api.gql.instrument",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument",
        "documentation": {}
    },
    {
        "label": "InstrumentMutations",
        "importPath": "felicity.api.gql.instrument.mutations",
        "description": "felicity.api.gql.instrument.mutations",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.mutations",
        "documentation": {}
    },
    {
        "label": "InstrumentQuery",
        "importPath": "felicity.api.gql.instrument.query",
        "description": "felicity.api.gql.instrument.query",
        "isExtraImport": true,
        "detail": "felicity.api.gql.instrument.query",
        "documentation": {}
    },
    {
        "label": "InventoryMutations",
        "importPath": "felicity.api.gql.inventory.mutations",
        "description": "felicity.api.gql.inventory.mutations",
        "isExtraImport": true,
        "detail": "felicity.api.gql.inventory.mutations",
        "documentation": {}
    },
    {
        "label": "InventoryQuery",
        "importPath": "felicity.api.gql.inventory.query",
        "description": "felicity.api.gql.inventory.query",
        "isExtraImport": true,
        "detail": "felicity.api.gql.inventory.query",
        "documentation": {}
    },
    {
        "label": "messaging_types",
        "importPath": "felicity.api.gql.messaging",
        "description": "felicity.api.gql.messaging",
        "isExtraImport": true,
        "detail": "felicity.api.gql.messaging",
        "documentation": {}
    },
    {
        "label": "MessageMutations",
        "importPath": "felicity.api.gql.messaging.mutations",
        "description": "felicity.api.gql.messaging.mutations",
        "isExtraImport": true,
        "detail": "felicity.api.gql.messaging.mutations",
        "documentation": {}
    },
    {
        "label": "MessageQuery",
        "importPath": "felicity.api.gql.messaging.query",
        "description": "felicity.api.gql.messaging.query",
        "isExtraImport": true,
        "detail": "felicity.api.gql.messaging.query",
        "documentation": {}
    },
    {
        "label": "noticeboard_types",
        "importPath": "felicity.api.gql.noticeboard",
        "description": "felicity.api.gql.noticeboard",
        "isExtraImport": true,
        "detail": "felicity.api.gql.noticeboard",
        "documentation": {}
    },
    {
        "label": "NoticeMutations",
        "importPath": "felicity.api.gql.noticeboard.mutations",
        "description": "felicity.api.gql.noticeboard.mutations",
        "isExtraImport": true,
        "detail": "felicity.api.gql.noticeboard.mutations",
        "documentation": {}
    },
    {
        "label": "NoticeQuery",
        "importPath": "felicity.api.gql.noticeboard.query",
        "description": "felicity.api.gql.noticeboard.query",
        "isExtraImport": true,
        "detail": "felicity.api.gql.noticeboard.query",
        "documentation": {}
    },
    {
        "label": "notification_types",
        "importPath": "felicity.api.gql.notification",
        "description": "felicity.api.gql.notification",
        "isExtraImport": true,
        "detail": "felicity.api.gql.notification",
        "documentation": {}
    },
    {
        "label": "StreamNotificationQuery",
        "importPath": "felicity.api.gql.notification.query",
        "description": "felicity.api.gql.notification.query",
        "isExtraImport": true,
        "detail": "felicity.api.gql.notification.query",
        "documentation": {}
    },
    {
        "label": "StreamSubscription",
        "importPath": "felicity.api.gql.notification.subscription",
        "description": "felicity.api.gql.notification.subscription",
        "isExtraImport": true,
        "detail": "felicity.api.gql.notification.subscription",
        "documentation": {}
    },
    {
        "label": "patient_types",
        "importPath": "felicity.api.gql.patient",
        "description": "felicity.api.gql.patient",
        "isExtraImport": true,
        "detail": "felicity.api.gql.patient",
        "documentation": {}
    },
    {
        "label": "PatientMutations",
        "importPath": "felicity.api.gql.patient.mutations",
        "description": "felicity.api.gql.patient.mutations",
        "isExtraImport": true,
        "detail": "felicity.api.gql.patient.mutations",
        "documentation": {}
    },
    {
        "label": "PatientQuery",
        "importPath": "felicity.api.gql.patient.query",
        "description": "felicity.api.gql.patient.query",
        "isExtraImport": true,
        "detail": "felicity.api.gql.patient.query",
        "documentation": {}
    },
    {
        "label": "reflex_types",
        "importPath": "felicity.api.gql.reflex",
        "description": "felicity.api.gql.reflex",
        "isExtraImport": true,
        "detail": "felicity.api.gql.reflex",
        "documentation": {}
    },
    {
        "label": "ReflexRuleMutations",
        "importPath": "felicity.api.gql.reflex.mutations",
        "description": "felicity.api.gql.reflex.mutations",
        "isExtraImport": true,
        "detail": "felicity.api.gql.reflex.mutations",
        "documentation": {}
    },
    {
        "label": "ReflexRuleQuery",
        "importPath": "felicity.api.gql.reflex.query",
        "description": "felicity.api.gql.reflex.query",
        "isExtraImport": true,
        "detail": "felicity.api.gql.reflex.query",
        "documentation": {}
    },
    {
        "label": "SetupMutations",
        "importPath": "felicity.api.gql.setup.mutations",
        "description": "felicity.api.gql.setup.mutations",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.mutations",
        "documentation": {}
    },
    {
        "label": "SetupQuery",
        "importPath": "felicity.api.gql.setup.query",
        "description": "felicity.api.gql.setup.query",
        "isExtraImport": true,
        "detail": "felicity.api.gql.setup.query",
        "documentation": {}
    },
    {
        "label": "ShipmentMutations",
        "importPath": "felicity.api.gql.shipment.mutations",
        "description": "felicity.api.gql.shipment.mutations",
        "isExtraImport": true,
        "detail": "felicity.api.gql.shipment.mutations",
        "documentation": {}
    },
    {
        "label": "ShipmentQuery",
        "importPath": "felicity.api.gql.shipment.query",
        "description": "felicity.api.gql.shipment.query",
        "isExtraImport": true,
        "detail": "felicity.api.gql.shipment.query",
        "documentation": {}
    },
    {
        "label": "StorageMutations",
        "importPath": "felicity.api.gql.storage.mutations",
        "description": "felicity.api.gql.storage.mutations",
        "isExtraImport": true,
        "detail": "felicity.api.gql.storage.mutations",
        "documentation": {}
    },
    {
        "label": "StorageQuery",
        "importPath": "felicity.api.gql.storage.query",
        "description": "felicity.api.gql.storage.query",
        "isExtraImport": true,
        "detail": "felicity.api.gql.storage.query",
        "documentation": {}
    },
    {
        "label": "user_types",
        "importPath": "felicity.api.gql.user",
        "description": "felicity.api.gql.user",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user",
        "documentation": {}
    },
    {
        "label": "UserMutations",
        "importPath": "felicity.api.gql.user.mutations",
        "description": "felicity.api.gql.user.mutations",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.mutations",
        "documentation": {}
    },
    {
        "label": "UserQuery",
        "importPath": "felicity.api.gql.user.query",
        "description": "felicity.api.gql.user.query",
        "isExtraImport": true,
        "detail": "felicity.api.gql.user.query",
        "documentation": {}
    },
    {
        "label": "worksheet_types",
        "importPath": "felicity.api.gql.worksheet",
        "description": "felicity.api.gql.worksheet",
        "isExtraImport": true,
        "detail": "felicity.api.gql.worksheet",
        "documentation": {}
    },
    {
        "label": "WorkSheetMutations",
        "importPath": "felicity.api.gql.worksheet.mutations",
        "description": "felicity.api.gql.worksheet.mutations",
        "isExtraImport": true,
        "detail": "felicity.api.gql.worksheet.mutations",
        "documentation": {}
    },
    {
        "label": "WorkSheetQuery",
        "importPath": "felicity.api.gql.worksheet.query",
        "description": "felicity.api.gql.worksheet.query",
        "isExtraImport": true,
        "detail": "felicity.api.gql.worksheet.query",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "UserBasic",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "delete_file",
        "importPath": "felicity.utils.dirs",
        "description": "felicity.utils.dirs",
        "isExtraImport": true,
        "detail": "felicity.utils.dirs",
        "documentation": {}
    },
    {
        "label": "resolve_media_dirs_for",
        "importPath": "felicity.utils.dirs",
        "description": "felicity.utils.dirs",
        "isExtraImport": true,
        "detail": "felicity.utils.dirs",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "AnyHttpUrl",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationInfo",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "default_setup",
        "importPath": "felicity.lims.seeds",
        "description": "felicity.lims.seeds",
        "isExtraImport": true,
        "detail": "felicity.lims.seeds",
        "documentation": {}
    },
    {
        "label": "requisite_setup",
        "importPath": "felicity.lims.seeds",
        "description": "felicity.lims.seeds",
        "isExtraImport": true,
        "detail": "felicity.lims.seeds",
        "documentation": {}
    },
    {
        "label": "initialize_felicity",
        "importPath": "felicity.lims.seeds",
        "description": "felicity.lims.seeds",
        "isExtraImport": true,
        "detail": "felicity.lims.seeds",
        "documentation": {}
    },
    {
        "label": "FelicityVersion",
        "importPath": "felicity.version",
        "description": "felicity.version",
        "isExtraImport": true,
        "detail": "felicity.version",
        "documentation": {}
    },
    {
        "label": "BundleResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "DiagnosticReportResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "PatientResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "ServiceRequestResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "BundleResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "DiagnosticReportResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "PatientResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Reference",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "ServiceRequestResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "BundleResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "DiagnosticReportResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Identifier",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "PatientResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Reference",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "ServiceRequestResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "SpecimenResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "create_resource",
        "importPath": "felicity.apps.iol.fhir.utils",
        "description": "felicity.apps.iol.fhir.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.utils",
        "documentation": {}
    },
    {
        "label": "get_diagnostic_report_resource",
        "importPath": "felicity.apps.iol.fhir.utils",
        "description": "felicity.apps.iol.fhir.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.utils",
        "documentation": {}
    },
    {
        "label": "get_patient_resource",
        "importPath": "felicity.apps.iol.fhir.utils",
        "description": "felicity.apps.iol.fhir.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.utils",
        "documentation": {}
    },
    {
        "label": "get_diagnostic_report_resource",
        "importPath": "felicity.apps.iol.fhir.utils",
        "description": "felicity.apps.iol.fhir.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.utils",
        "documentation": {}
    },
    {
        "label": "get_shipment_bundle_resource",
        "importPath": "felicity.apps.iol.fhir.utils",
        "description": "felicity.apps.iol.fhir.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.utils",
        "documentation": {}
    },
    {
        "label": "get_shipment_bundle_resource",
        "importPath": "felicity.apps.iol.fhir.utils",
        "description": "felicity.apps.iol.fhir.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.utils",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "GraphQLError",
        "importPath": "graphql",
        "description": "graphql",
        "isExtraImport": true,
        "detail": "graphql",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "graphql",
        "description": "graphql",
        "isExtraImport": true,
        "detail": "graphql",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "BaseContext",
        "importPath": "strawberry.fastapi",
        "description": "strawberry.fastapi",
        "isExtraImport": true,
        "detail": "strawberry.fastapi",
        "documentation": {}
    },
    {
        "label": "GraphQLRouter",
        "importPath": "strawberry.fastapi",
        "description": "strawberry.fastapi",
        "isExtraImport": true,
        "detail": "strawberry.fastapi",
        "documentation": {}
    },
    {
        "label": "Info",
        "importPath": "strawberry.types.info",
        "description": "strawberry.types.info",
        "isExtraImport": true,
        "detail": "strawberry.types.info",
        "documentation": {}
    },
    {
        "label": "RootValueType",
        "importPath": "strawberry.types.info",
        "description": "strawberry.types.info",
        "isExtraImport": true,
        "detail": "strawberry.types.info",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.common",
        "description": "felicity.apps.common",
        "isExtraImport": true,
        "detail": "felicity.apps.common",
        "documentation": {}
    },
    {
        "label": "BaseMPTT",
        "importPath": "felicity.apps.common",
        "description": "felicity.apps.common",
        "isExtraImport": true,
        "detail": "felicity.apps.common",
        "documentation": {}
    },
    {
        "label": "BaseMPTT",
        "importPath": "felicity.apps.common",
        "description": "felicity.apps.common",
        "isExtraImport": true,
        "detail": "felicity.apps.common",
        "documentation": {}
    },
    {
        "label": "BaseMPTT",
        "importPath": "felicity.apps.common",
        "description": "felicity.apps.common",
        "isExtraImport": true,
        "detail": "felicity.apps.common",
        "documentation": {}
    },
    {
        "label": "declared_attr",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "declared_attr",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "declared_attr",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "class_mapper",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "backref",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "class_mapper",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "object_session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "backref",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "object_session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "backref",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "RelationshipProperty",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "aliased",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "subqueryload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "AuditHistoryMixin",
        "importPath": "felicity.apps.auditlog.mixin",
        "description": "felicity.apps.auditlog.mixin",
        "isExtraImport": true,
        "detail": "felicity.apps.auditlog.mixin",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.database.entity",
        "description": "felicity.database.entity",
        "isExtraImport": true,
        "detail": "felicity.database.entity",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.database.entity",
        "description": "felicity.database.entity",
        "isExtraImport": true,
        "detail": "felicity.database.entity",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.database.repository",
        "description": "felicity.database.repository",
        "isExtraImport": true,
        "detail": "felicity.database.repository",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.database.repository",
        "description": "felicity.database.repository",
        "isExtraImport": true,
        "detail": "felicity.database.repository",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.database.repository",
        "description": "felicity.database.repository",
        "isExtraImport": true,
        "detail": "felicity.database.repository",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.database.repository",
        "description": "felicity.database.repository",
        "isExtraImport": true,
        "detail": "felicity.database.repository",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.database.repository",
        "description": "felicity.database.repository",
        "isExtraImport": true,
        "detail": "felicity.database.repository",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseMPTT",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseMPTT",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseMPTT",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "QCLevel",
        "importPath": "felicity.apps.analysis.entities.quality_control",
        "description": "felicity.apps.analysis.entities.quality_control",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.quality_control",
        "documentation": {}
    },
    {
        "label": "QCSet",
        "importPath": "felicity.apps.analysis.entities.quality_control",
        "description": "felicity.apps.analysis.entities.quality_control",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.quality_control",
        "documentation": {}
    },
    {
        "label": "QCSet",
        "importPath": "felicity.apps.analysis.entities.quality_control",
        "description": "felicity.apps.analysis.entities.quality_control",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.quality_control",
        "documentation": {}
    },
    {
        "label": "QCReference",
        "importPath": "felicity.apps.analysis.entities.quality_control",
        "description": "felicity.apps.analysis.entities.quality_control",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.quality_control",
        "documentation": {}
    },
    {
        "label": "QCLevel",
        "importPath": "felicity.apps.analysis.entities.quality_control",
        "description": "felicity.apps.analysis.entities.quality_control",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.quality_control",
        "documentation": {}
    },
    {
        "label": "QCTemplate",
        "importPath": "felicity.apps.analysis.entities.quality_control",
        "description": "felicity.apps.analysis.entities.quality_control",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.quality_control",
        "documentation": {}
    },
    {
        "label": "QCSet",
        "importPath": "felicity.apps.analysis.entities.quality_control",
        "description": "felicity.apps.analysis.entities.quality_control",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.quality_control",
        "documentation": {}
    },
    {
        "label": "QCTemplate",
        "importPath": "felicity.apps.analysis.entities.quality_control",
        "description": "felicity.apps.analysis.entities.quality_control",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.quality_control",
        "documentation": {}
    },
    {
        "label": "QCLevel",
        "importPath": "felicity.apps.analysis.entities.quality_control",
        "description": "felicity.apps.analysis.entities.quality_control",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.quality_control",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "felicity.apps.setup.entities.setup",
        "description": "felicity.apps.setup.entities.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities.setup",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps",
        "description": "felicity.apps",
        "isExtraImport": true,
        "detail": "felicity.apps",
        "documentation": {}
    },
    {
        "label": "QCLevel",
        "importPath": "felicity.apps.analysis.models.qc",
        "description": "felicity.apps.analysis.models.qc",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.qc",
        "documentation": {}
    },
    {
        "label": "QCSet",
        "importPath": "felicity.apps.analysis.models.qc",
        "description": "felicity.apps.analysis.models.qc",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.qc",
        "documentation": {}
    },
    {
        "label": "QCSet",
        "importPath": "felicity.apps.analysis.models.qc",
        "description": "felicity.apps.analysis.models.qc",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.qc",
        "documentation": {}
    },
    {
        "label": "QCTemplate",
        "importPath": "felicity.apps.analysis.models.qc",
        "description": "felicity.apps.analysis.models.qc",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.qc",
        "documentation": {}
    },
    {
        "label": "QCLevel",
        "importPath": "felicity.apps.analysis.models.qc",
        "description": "felicity.apps.analysis.models.qc",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.qc",
        "documentation": {}
    },
    {
        "label": "QCSet",
        "importPath": "felicity.apps.analysis.models.qc",
        "description": "felicity.apps.analysis.models.qc",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.qc",
        "documentation": {}
    },
    {
        "label": "QCTemplate",
        "importPath": "felicity.apps.analysis.models.qc",
        "description": "felicity.apps.analysis.models.qc",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.qc",
        "documentation": {}
    },
    {
        "label": "QCLevel",
        "importPath": "felicity.apps.analysis.models.qc",
        "description": "felicity.apps.analysis.models.qc",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.models.qc",
        "documentation": {}
    },
    {
        "label": "sequencer",
        "importPath": "felicity.apps.common.utils",
        "description": "felicity.apps.common.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.common.utils",
        "documentation": {}
    },
    {
        "label": "is_valid_email",
        "importPath": "felicity.apps.common.utils",
        "description": "felicity.apps.common.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.common.utils",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "felicity.apps.setup.models.setup",
        "description": "felicity.apps.setup.models.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.models.setup",
        "documentation": {}
    },
    {
        "label": "Laboratory",
        "importPath": "felicity.apps.setup.models.setup",
        "description": "felicity.apps.setup.models.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.models.setup",
        "documentation": {}
    },
    {
        "label": "LaboratorySetting",
        "importPath": "felicity.apps.setup.models.setup",
        "description": "felicity.apps.setup.models.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.models.setup",
        "documentation": {}
    },
    {
        "label": "Laboratory",
        "importPath": "felicity.apps.setup.models.setup",
        "description": "felicity.apps.setup.models.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.models.setup",
        "documentation": {}
    },
    {
        "label": "LaboratorySetting",
        "importPath": "felicity.apps.setup.models.setup",
        "description": "felicity.apps.setup.models.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.models.setup",
        "documentation": {}
    },
    {
        "label": "Laboratory",
        "importPath": "felicity.apps.setup.models.setup",
        "description": "felicity.apps.setup.models.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.models.setup",
        "documentation": {}
    },
    {
        "label": "LaboratorySetting",
        "importPath": "felicity.apps.setup.models.setup",
        "description": "felicity.apps.setup.models.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.models.setup",
        "documentation": {}
    },
    {
        "label": "Laboratory",
        "importPath": "felicity.apps.setup.models.setup",
        "description": "felicity.apps.setup.models.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.models.setup",
        "documentation": {}
    },
    {
        "label": "Laboratory",
        "importPath": "felicity.apps.setup.models.setup",
        "description": "felicity.apps.setup.models.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.models.setup",
        "documentation": {}
    },
    {
        "label": "LaboratorySetting",
        "importPath": "felicity.apps.setup.models.setup",
        "description": "felicity.apps.setup.models.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.models.setup",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "felicity.apps.setup.models.setup",
        "description": "felicity.apps.setup.models.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.models.setup",
        "documentation": {}
    },
    {
        "label": "Unit",
        "importPath": "felicity.apps.setup.models.setup",
        "description": "felicity.apps.setup.models.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.models.setup",
        "documentation": {}
    },
    {
        "label": "ICodingStandardRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "ISampleTypeRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "ISampleTypeCodingRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisCategoryRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "IProfileRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "IProfileCodingRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisCodingRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisInterimRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisCorrectionFactorRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisDetectionLimitRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisUncertaintyRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisSpecificationRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "IResultOptionRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisRequestRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "IRejectionReasonRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "ISampleRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "ICodingStandardRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "ISampleTypeRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "ISampleTypeCodingRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "IProfileRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "IProfileCodingRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisInterimRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisCorrectionFactorRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisDetectionLimitRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisUncertaintyRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisSpecificationRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "IResultOptionRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisRequestRepository",
        "importPath": "domain.analysis.ports.repository.analysis",
        "description": "domain.analysis.ports.repository.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.analysis",
        "documentation": {}
    },
    {
        "label": "CodingStandard",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "SampleType",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "SampleTypeCoding",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCategory",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "ProfileCoding",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Analysis",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCoding",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisInterim",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactor",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimit",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertainty",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecification",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "ResultOption",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRequest",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "RejectionReason",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "profile_sample_type",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "analysis_profile",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "analysis_sample_type",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "analysis_method",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "sample_profile",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "sample_analysis",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "sample_rejection_reason",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "sample_analysis",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.repository.base",
        "description": "felicity.apps.repository.base",
        "isExtraImport": true,
        "detail": "felicity.apps.repository.base",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.repository.base",
        "description": "felicity.apps.repository.base",
        "isExtraImport": true,
        "detail": "felicity.apps.repository.base",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.repository.base",
        "description": "felicity.apps.repository.base",
        "isExtraImport": true,
        "detail": "felicity.apps.repository.base",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.repository.base",
        "description": "felicity.apps.repository.base",
        "isExtraImport": true,
        "detail": "felicity.apps.repository.base",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.repository.base",
        "description": "felicity.apps.repository.base",
        "isExtraImport": true,
        "detail": "felicity.apps.repository.base",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.repository.base",
        "description": "felicity.apps.repository.base",
        "isExtraImport": true,
        "detail": "felicity.apps.repository.base",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.repository.base",
        "description": "felicity.apps.repository.base",
        "isExtraImport": true,
        "detail": "felicity.apps.repository.base",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.repository.base",
        "description": "felicity.apps.repository.base",
        "isExtraImport": true,
        "detail": "felicity.apps.repository.base",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.repository.base",
        "description": "felicity.apps.repository.base",
        "isExtraImport": true,
        "detail": "felicity.apps.repository.base",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.repository.base",
        "description": "felicity.apps.repository.base",
        "isExtraImport": true,
        "detail": "felicity.apps.repository.base",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.repository.base",
        "description": "felicity.apps.repository.base",
        "isExtraImport": true,
        "detail": "felicity.apps.repository.base",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.repository.base",
        "description": "felicity.apps.repository.base",
        "isExtraImport": true,
        "detail": "felicity.apps.repository.base",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.repository.base",
        "description": "felicity.apps.repository.base",
        "isExtraImport": true,
        "detail": "felicity.apps.repository.base",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.repository.base",
        "description": "felicity.apps.repository.base",
        "isExtraImport": true,
        "detail": "felicity.apps.repository.base",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.repository.base",
        "description": "felicity.apps.repository.base",
        "isExtraImport": true,
        "detail": "felicity.apps.repository.base",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.repository.base",
        "description": "felicity.apps.repository.base",
        "isExtraImport": true,
        "detail": "felicity.apps.repository.base",
        "documentation": {}
    },
    {
        "label": "IQCSetRepository",
        "importPath": "domain.analysis.ports.repository.quality_control",
        "description": "domain.analysis.ports.repository.quality_control",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.quality_control",
        "documentation": {}
    },
    {
        "label": "IQCReferenceRepository",
        "importPath": "domain.analysis.ports.repository.quality_control",
        "description": "domain.analysis.ports.repository.quality_control",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.quality_control",
        "documentation": {}
    },
    {
        "label": "IQCLevelRepository",
        "importPath": "domain.analysis.ports.repository.quality_control",
        "description": "domain.analysis.ports.repository.quality_control",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.quality_control",
        "documentation": {}
    },
    {
        "label": "IQCTemplateRepository",
        "importPath": "domain.analysis.ports.repository.quality_control",
        "description": "domain.analysis.ports.repository.quality_control",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.quality_control",
        "documentation": {}
    },
    {
        "label": "IQCSetRepository",
        "importPath": "domain.analysis.ports.repository.quality_control",
        "description": "domain.analysis.ports.repository.quality_control",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.quality_control",
        "documentation": {}
    },
    {
        "label": "IQCSetRepository",
        "importPath": "domain.analysis.ports.repository.quality_control",
        "description": "domain.analysis.ports.repository.quality_control",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.quality_control",
        "documentation": {}
    },
    {
        "label": "IQCLevelRepository",
        "importPath": "domain.analysis.ports.repository.quality_control",
        "description": "domain.analysis.ports.repository.quality_control",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.quality_control",
        "documentation": {}
    },
    {
        "label": "IQCTemplateRepository",
        "importPath": "domain.analysis.ports.repository.quality_control",
        "description": "domain.analysis.ports.repository.quality_control",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.quality_control",
        "documentation": {}
    },
    {
        "label": "IResultMutationRepository",
        "importPath": "domain.analysis.ports.repository.result",
        "description": "domain.analysis.ports.repository.result",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.result",
        "documentation": {}
    },
    {
        "label": "IAnalysisResultRepository",
        "importPath": "domain.analysis.ports.repository.result",
        "description": "domain.analysis.ports.repository.result",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.result",
        "documentation": {}
    },
    {
        "label": "IAnalysisResultRepository",
        "importPath": "domain.analysis.ports.repository.result",
        "description": "domain.analysis.ports.repository.result",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.result",
        "documentation": {}
    },
    {
        "label": "IResultMutationRepository",
        "importPath": "domain.analysis.ports.repository.result",
        "description": "domain.analysis.ports.repository.result",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.repository.result",
        "documentation": {}
    },
    {
        "label": "ResultMutation",
        "importPath": "felicity.apps.analysis.entities.results",
        "description": "felicity.apps.analysis.entities.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.results",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "importPath": "felicity.apps.analysis.entities.results",
        "description": "felicity.apps.analysis.entities.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.results",
        "documentation": {}
    },
    {
        "label": "result_verification",
        "importPath": "felicity.apps.analysis.entities.results",
        "description": "felicity.apps.analysis.entities.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.results",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "api.gql.analysis.types",
        "description": "api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "api.gql.analysis.types",
        "description": "api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "api.gql.analysis.types",
        "description": "api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "api.gql.analysis.types",
        "description": "api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "results",
        "importPath": "api.gql.analysis.types",
        "description": "api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "results",
        "importPath": "api.gql.analysis.types",
        "description": "api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "api.gql.analysis.types",
        "description": "api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "api.gql.analysis.types",
        "description": "api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "api.gql.analysis.types",
        "description": "api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "api.gql.analysis.types",
        "description": "api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "api.gql.analysis.types",
        "description": "api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "api.gql.analysis.types",
        "description": "api.gql.analysis.types",
        "isExtraImport": true,
        "detail": "api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "api.gql.auth",
        "description": "api.gql.auth",
        "isExtraImport": true,
        "detail": "api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "api.gql.auth",
        "description": "api.gql.auth",
        "isExtraImport": true,
        "detail": "api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "api.gql.auth",
        "description": "api.gql.auth",
        "isExtraImport": true,
        "detail": "api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "api.gql.auth",
        "description": "api.gql.auth",
        "isExtraImport": true,
        "detail": "api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "api.gql.auth",
        "description": "api.gql.auth",
        "isExtraImport": true,
        "detail": "api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "api.gql.auth",
        "description": "api.gql.auth",
        "isExtraImport": true,
        "detail": "api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "api.gql.auth",
        "description": "api.gql.auth",
        "isExtraImport": true,
        "detail": "api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "api.gql.auth",
        "description": "api.gql.auth",
        "isExtraImport": true,
        "detail": "api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "api.gql.auth",
        "description": "api.gql.auth",
        "isExtraImport": true,
        "detail": "api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "api.gql.auth",
        "description": "api.gql.auth",
        "isExtraImport": true,
        "detail": "api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "api.gql.auth",
        "description": "api.gql.auth",
        "isExtraImport": true,
        "detail": "api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "api.gql.auth",
        "description": "api.gql.auth",
        "isExtraImport": true,
        "detail": "api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "api.gql.auth",
        "description": "api.gql.auth",
        "isExtraImport": true,
        "detail": "api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "api.gql.auth",
        "description": "api.gql.auth",
        "isExtraImport": true,
        "detail": "api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "api.gql.auth",
        "description": "api.gql.auth",
        "isExtraImport": true,
        "detail": "api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "api.gql.auth",
        "description": "api.gql.auth",
        "isExtraImport": true,
        "detail": "api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "api.gql.auth",
        "description": "api.gql.auth",
        "isExtraImport": true,
        "detail": "api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "api.gql.auth",
        "description": "api.gql.auth",
        "isExtraImport": true,
        "detail": "api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "api.gql.auth",
        "description": "api.gql.auth",
        "isExtraImport": true,
        "detail": "api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "api.gql.auth",
        "description": "api.gql.auth",
        "isExtraImport": true,
        "detail": "api.gql.auth",
        "documentation": {}
    },
    {
        "label": "auth_from_info",
        "importPath": "api.gql.auth",
        "description": "api.gql.auth",
        "isExtraImport": true,
        "detail": "api.gql.auth",
        "documentation": {}
    },
    {
        "label": "verify_user_auth",
        "importPath": "api.gql.auth",
        "description": "api.gql.auth",
        "isExtraImport": true,
        "detail": "api.gql.auth",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "api.gql.types",
        "description": "api.gql.types",
        "isExtraImport": true,
        "detail": "api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "api.gql.types",
        "description": "api.gql.types",
        "isExtraImport": true,
        "detail": "api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "api.gql.types",
        "description": "api.gql.types",
        "isExtraImport": true,
        "detail": "api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "api.gql.types",
        "description": "api.gql.types",
        "isExtraImport": true,
        "detail": "api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationSuccess",
        "importPath": "api.gql.types",
        "description": "api.gql.types",
        "isExtraImport": true,
        "detail": "api.gql.types",
        "documentation": {}
    },
    {
        "label": "SuccessErrorResponse",
        "importPath": "api.gql.types",
        "description": "api.gql.types",
        "isExtraImport": true,
        "detail": "api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "api.gql.types",
        "description": "api.gql.types",
        "isExtraImport": true,
        "detail": "api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationSuccess",
        "importPath": "api.gql.types",
        "description": "api.gql.types",
        "isExtraImport": true,
        "detail": "api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "api.gql.types",
        "description": "api.gql.types",
        "isExtraImport": true,
        "detail": "api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "api.gql.types",
        "description": "api.gql.types",
        "isExtraImport": true,
        "detail": "api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "api.gql.types",
        "description": "api.gql.types",
        "isExtraImport": true,
        "detail": "api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "api.gql.types",
        "description": "api.gql.types",
        "isExtraImport": true,
        "detail": "api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "api.gql.types",
        "description": "api.gql.types",
        "isExtraImport": true,
        "detail": "api.gql.types",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "importPath": "api.gql.types",
        "description": "api.gql.types",
        "isExtraImport": true,
        "detail": "api.gql.types",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "domain.analysis.models",
        "description": "domain.analysis.models",
        "isExtraImport": true,
        "detail": "domain.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "domain.analysis.models",
        "description": "domain.analysis.models",
        "isExtraImport": true,
        "detail": "domain.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "domain.analysis.models",
        "description": "domain.analysis.models",
        "isExtraImport": true,
        "detail": "domain.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "domain.analysis.models",
        "description": "domain.analysis.models",
        "isExtraImport": true,
        "detail": "domain.analysis.models",
        "documentation": {}
    },
    {
        "label": "results",
        "importPath": "domain.analysis.models",
        "description": "domain.analysis.models",
        "isExtraImport": true,
        "detail": "domain.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "domain.analysis.models",
        "description": "domain.analysis.models",
        "isExtraImport": true,
        "detail": "domain.analysis.models",
        "documentation": {}
    },
    {
        "label": "results",
        "importPath": "domain.analysis.models",
        "description": "domain.analysis.models",
        "isExtraImport": true,
        "detail": "domain.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "domain.analysis.models",
        "description": "domain.analysis.models",
        "isExtraImport": true,
        "detail": "domain.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "domain.analysis.models",
        "description": "domain.analysis.models",
        "isExtraImport": true,
        "detail": "domain.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "domain.analysis.models",
        "description": "domain.analysis.models",
        "isExtraImport": true,
        "detail": "domain.analysis.models",
        "documentation": {}
    },
    {
        "label": "qc",
        "importPath": "domain.analysis.models",
        "description": "domain.analysis.models",
        "isExtraImport": true,
        "detail": "domain.analysis.models",
        "documentation": {}
    },
    {
        "label": "results",
        "importPath": "domain.analysis.models",
        "description": "domain.analysis.models",
        "isExtraImport": true,
        "detail": "domain.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "domain.analysis.models",
        "description": "domain.analysis.models",
        "isExtraImport": true,
        "detail": "domain.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "domain.analysis.models",
        "description": "domain.analysis.models",
        "isExtraImport": true,
        "detail": "domain.analysis.models",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "domain.analysis.models",
        "description": "domain.analysis.models",
        "isExtraImport": true,
        "detail": "domain.analysis.models",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "domain.analysis",
        "description": "domain.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "domain.analysis",
        "description": "domain.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "domain.analysis",
        "description": "domain.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "domain.analysis",
        "description": "domain.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "domain.analysis",
        "description": "domain.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "domain.analysis",
        "description": "domain.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "domain.analysis",
        "description": "domain.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "domain.analysis",
        "description": "domain.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "domain.analysis",
        "description": "domain.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "domain.analysis",
        "description": "domain.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis",
        "documentation": {}
    },
    {
        "label": "CanVerifySample",
        "importPath": "api.gql.permissions",
        "description": "api.gql.permissions",
        "isExtraImport": true,
        "detail": "api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "CanVerifyAnalysisResult",
        "importPath": "api.gql.permissions",
        "description": "api.gql.permissions",
        "isExtraImport": true,
        "detail": "api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "FelicityStreamer",
        "importPath": "domain.notification.utils",
        "description": "domain.notification.utils",
        "isExtraImport": true,
        "detail": "domain.notification.utils",
        "documentation": {}
    },
    {
        "label": "FelicityStreamer",
        "importPath": "domain.notification.utils",
        "description": "domain.notification.utils",
        "isExtraImport": true,
        "detail": "domain.notification.utils",
        "documentation": {}
    },
    {
        "label": "ReflexUtil",
        "importPath": "domain.reflex.utils",
        "description": "domain.reflex.utils",
        "isExtraImport": true,
        "detail": "domain.reflex.utils",
        "documentation": {}
    },
    {
        "label": "states",
        "importPath": "domain.analysis.conf",
        "description": "domain.analysis.conf",
        "isExtraImport": true,
        "detail": "domain.analysis.conf",
        "documentation": {}
    },
    {
        "label": "states",
        "importPath": "domain.analysis.conf",
        "description": "domain.analysis.conf",
        "isExtraImport": true,
        "detail": "domain.analysis.conf",
        "documentation": {}
    },
    {
        "label": "states",
        "importPath": "domain.analysis.conf",
        "description": "domain.analysis.conf",
        "isExtraImport": true,
        "detail": "domain.analysis.conf",
        "documentation": {}
    },
    {
        "label": "SampleStates",
        "importPath": "domain.analysis.conf",
        "description": "domain.analysis.conf",
        "isExtraImport": true,
        "detail": "domain.analysis.conf",
        "documentation": {}
    },
    {
        "label": "ResultStates",
        "importPath": "domain.analysis.conf",
        "description": "domain.analysis.conf",
        "isExtraImport": true,
        "detail": "domain.analysis.conf",
        "documentation": {}
    },
    {
        "label": "SampleStates",
        "importPath": "domain.analysis.conf",
        "description": "domain.analysis.conf",
        "isExtraImport": true,
        "detail": "domain.analysis.conf",
        "documentation": {}
    },
    {
        "label": "ResultStates",
        "importPath": "domain.analysis.conf",
        "description": "domain.analysis.conf",
        "isExtraImport": true,
        "detail": "domain.analysis.conf",
        "documentation": {}
    },
    {
        "label": "ResultStates",
        "importPath": "domain.analysis.conf",
        "description": "domain.analysis.conf",
        "isExtraImport": true,
        "detail": "domain.analysis.conf",
        "documentation": {}
    },
    {
        "label": "SampleStates",
        "importPath": "domain.analysis.conf",
        "description": "domain.analysis.conf",
        "isExtraImport": true,
        "detail": "domain.analysis.conf",
        "documentation": {}
    },
    {
        "label": "ResultStates",
        "importPath": "domain.analysis.conf",
        "description": "domain.analysis.conf",
        "isExtraImport": true,
        "detail": "domain.analysis.conf",
        "documentation": {}
    },
    {
        "label": "ResultStates",
        "importPath": "domain.analysis.conf",
        "description": "domain.analysis.conf",
        "isExtraImport": true,
        "detail": "domain.analysis.conf",
        "documentation": {}
    },
    {
        "label": "SampleStates",
        "importPath": "domain.analysis.conf",
        "description": "domain.analysis.conf",
        "isExtraImport": true,
        "detail": "domain.analysis.conf",
        "documentation": {}
    },
    {
        "label": "SampleStates",
        "importPath": "domain.analysis.conf",
        "description": "domain.analysis.conf",
        "isExtraImport": true,
        "detail": "domain.analysis.conf",
        "documentation": {}
    },
    {
        "label": "ResultStates",
        "importPath": "domain.analysis.conf",
        "description": "domain.analysis.conf",
        "isExtraImport": true,
        "detail": "domain.analysis.conf",
        "documentation": {}
    },
    {
        "label": "SampleStates",
        "importPath": "domain.analysis.conf",
        "description": "domain.analysis.conf",
        "isExtraImport": true,
        "detail": "domain.analysis.conf",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "domain.client",
        "description": "domain.client",
        "isExtraImport": true,
        "detail": "domain.client",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "domain.job",
        "description": "domain.job",
        "isExtraImport": true,
        "detail": "domain.job",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "domain.job",
        "description": "domain.job",
        "isExtraImport": true,
        "detail": "domain.job",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "domain.job",
        "description": "domain.job",
        "isExtraImport": true,
        "detail": "domain.job",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "domain.job",
        "description": "domain.job",
        "isExtraImport": true,
        "detail": "domain.job",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "categories",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "priorities",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "states",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "actions",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "categories",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "priorities",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "states",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "JobActions",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "JobPriorities",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "JobStates",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "JobCategories",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "JobStates",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "JobPriorities",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "JobCategories",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "JobActions",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "JobStates",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "JobStates",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "JobActions",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "JobCategories",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "JobStates",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "JobStates",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "JobStates",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "JobPriorities",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "JobActions",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "JobPriorities",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "JobCategories",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "JobStates",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "JobActions",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "JobCategories",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "JobPriorities",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "JobStates",
        "importPath": "domain.job.conf",
        "description": "domain.job.conf",
        "isExtraImport": true,
        "detail": "domain.job.conf",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "domain.patient",
        "description": "domain.patient",
        "isExtraImport": true,
        "detail": "domain.patient",
        "documentation": {}
    },
    {
        "label": "retest_from_result_uids",
        "importPath": "domain.analysis.utils",
        "description": "domain.analysis.utils",
        "isExtraImport": true,
        "detail": "domain.analysis.utils",
        "documentation": {}
    },
    {
        "label": "get_qc_sample_type",
        "importPath": "domain.analysis.utils",
        "description": "domain.analysis.utils",
        "isExtraImport": true,
        "detail": "domain.analysis.utils",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "domain.worksheet",
        "description": "domain.worksheet",
        "isExtraImport": true,
        "detail": "domain.worksheet",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "domain.worksheet",
        "description": "domain.worksheet",
        "isExtraImport": true,
        "detail": "domain.worksheet",
        "documentation": {}
    },
    {
        "label": "Method",
        "importPath": "domain.instrument.models",
        "description": "domain.instrument.models",
        "isExtraImport": true,
        "detail": "domain.instrument.models",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "domain.setup.models",
        "description": "domain.setup.models",
        "isExtraImport": true,
        "detail": "domain.setup.models",
        "documentation": {}
    },
    {
        "label": "get_passed_args",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "ARSampleIn",
        "importPath": "domain.analysis.ports",
        "description": "domain.analysis.ports",
        "isExtraImport": true,
        "detail": "domain.analysis.ports",
        "documentation": {}
    },
    {
        "label": "SampleRejectIn",
        "importPath": "domain.analysis.ports",
        "description": "domain.analysis.ports",
        "isExtraImport": true,
        "detail": "domain.analysis.ports",
        "documentation": {}
    },
    {
        "label": "SamplePublishIn",
        "importPath": "domain.analysis.ports",
        "description": "domain.analysis.ports",
        "isExtraImport": true,
        "detail": "domain.analysis.ports",
        "documentation": {}
    },
    {
        "label": "QCSetIn",
        "importPath": "domain.analysis.ports",
        "description": "domain.analysis.ports",
        "isExtraImport": true,
        "detail": "domain.analysis.ports",
        "documentation": {}
    },
    {
        "label": "ARResultIn",
        "importPath": "domain.analysis.ports",
        "description": "domain.analysis.ports",
        "isExtraImport": true,
        "detail": "domain.analysis.ports",
        "documentation": {}
    },
    {
        "label": "ICodingStandardService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "ISampleTypeService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "ISampleTypeCodingService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisCategoryService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "IProfileService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "IProfileCodingService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisCodingService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisInterimService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisCorrectionFactorService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisDetectionLimitService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisUncertaintyService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisSpecificationService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "IResultOptionService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisRequestService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "IRejectionReasonService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "ISampleService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "IProfileService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "ISampleService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisRequestService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "ISampleService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "ISampleService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisRequestService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "ISampleTypeService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "ISampleService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "ISampleTypeService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "ISampleService",
        "importPath": "domain.analysis.ports.service.analysis",
        "description": "domain.analysis.ports.service.analysis",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.analysis",
        "documentation": {}
    },
    {
        "label": "IAnalysisResultService",
        "importPath": "domain.analysis.ports.service.result",
        "description": "domain.analysis.ports.service.result",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.result",
        "documentation": {}
    },
    {
        "label": "IAnalysisResultService",
        "importPath": "domain.analysis.ports.service.result",
        "description": "domain.analysis.ports.service.result",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.result",
        "documentation": {}
    },
    {
        "label": "IResultMutationService",
        "importPath": "domain.analysis.ports.service.result",
        "description": "domain.analysis.ports.service.result",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.result",
        "documentation": {}
    },
    {
        "label": "IAnalysisResultService",
        "importPath": "domain.analysis.ports.service.result",
        "description": "domain.analysis.ports.service.result",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.result",
        "documentation": {}
    },
    {
        "label": "IAnalysisResultService",
        "importPath": "domain.analysis.ports.service.result",
        "description": "domain.analysis.ports.service.result",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.result",
        "documentation": {}
    },
    {
        "label": "IAnalysisResultService",
        "importPath": "domain.analysis.ports.service.result",
        "description": "domain.analysis.ports.service.result",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.result",
        "documentation": {}
    },
    {
        "label": "IAnalysisResultService",
        "importPath": "domain.analysis.ports.service.result",
        "description": "domain.analysis.ports.service.result",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.result",
        "documentation": {}
    },
    {
        "label": "IAnalysisResultService",
        "importPath": "domain.analysis.ports.service.result",
        "description": "domain.analysis.ports.service.result",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.result",
        "documentation": {}
    },
    {
        "label": "CodingStandard",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleType",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeCoding",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCategory",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileCoding",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "Analysis",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCoding",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisInterim",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactor",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimit",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertainty",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecification",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ResultOption",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisRequest",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "RejectionReason",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "CodingStandardCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeUpdate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeCodingCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeCodingUpdate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryUpdate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileUpdate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileCodingCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileCodingUpdate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisUpdate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCodingCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCodingUpdate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "CodingStandardUpdate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisInterimCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisInterimUpdate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactorCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactorUpdate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimitCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimitUpdate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertaintyCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertaintyUpdate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecificationCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecificationUpdate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ResultOptionCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ResultOptionUpdate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "RejectionReasonCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "RejectionReasonUpdate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCSet",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "# QCReference",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCLevel",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCTemplate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCSetCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCLevelCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCTemplateUpdate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCTemplateCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultUpdate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "Analysis",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultUpdate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCSetCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleCreate",
        "importPath": "domain.analysis.schemas",
        "description": "domain.analysis.schemas",
        "isExtraImport": true,
        "detail": "domain.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "IClientService",
        "importPath": "domain.client.ports.service",
        "description": "domain.client.ports.service",
        "isExtraImport": true,
        "detail": "domain.client.ports.service",
        "documentation": {}
    },
    {
        "label": "IClientService",
        "importPath": "domain.client.ports.service",
        "description": "domain.client.ports.service",
        "isExtraImport": true,
        "detail": "domain.client.ports.service",
        "documentation": {}
    },
    {
        "label": "IClientService",
        "importPath": "domain.client.ports.service",
        "description": "domain.client.ports.service",
        "isExtraImport": true,
        "detail": "domain.client.ports.service",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "domain.exceptions",
        "description": "domain.exceptions",
        "isExtraImport": true,
        "detail": "domain.exceptions",
        "documentation": {}
    },
    {
        "label": "AlreadyExistsError",
        "importPath": "domain.exceptions",
        "description": "domain.exceptions",
        "isExtraImport": true,
        "detail": "domain.exceptions",
        "documentation": {}
    },
    {
        "label": "AlreadyExistsError",
        "importPath": "domain.exceptions",
        "description": "domain.exceptions",
        "isExtraImport": true,
        "detail": "domain.exceptions",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "domain.exceptions",
        "description": "domain.exceptions",
        "isExtraImport": true,
        "detail": "domain.exceptions",
        "documentation": {}
    },
    {
        "label": "AlreadyExistsError",
        "importPath": "domain.exceptions",
        "description": "domain.exceptions",
        "isExtraImport": true,
        "detail": "domain.exceptions",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "domain.exceptions",
        "description": "domain.exceptions",
        "isExtraImport": true,
        "detail": "domain.exceptions",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "domain.exceptions",
        "description": "domain.exceptions",
        "isExtraImport": true,
        "detail": "domain.exceptions",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "domain.exceptions",
        "description": "domain.exceptions",
        "isExtraImport": true,
        "detail": "domain.exceptions",
        "documentation": {}
    },
    {
        "label": "AlreadyExistsError",
        "importPath": "domain.exceptions",
        "description": "domain.exceptions",
        "isExtraImport": true,
        "detail": "domain.exceptions",
        "documentation": {}
    },
    {
        "label": "NotAllowedError",
        "importPath": "domain.exceptions",
        "description": "domain.exceptions",
        "isExtraImport": true,
        "detail": "domain.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundError",
        "importPath": "domain.exceptions",
        "description": "domain.exceptions",
        "isExtraImport": true,
        "detail": "domain.exceptions",
        "documentation": {}
    },
    {
        "label": "GenericError",
        "importPath": "domain.exceptions",
        "description": "domain.exceptions",
        "isExtraImport": true,
        "detail": "domain.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "domain.exceptions",
        "description": "domain.exceptions",
        "isExtraImport": true,
        "detail": "domain.exceptions",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "domain.exceptions",
        "description": "domain.exceptions",
        "isExtraImport": true,
        "detail": "domain.exceptions",
        "documentation": {}
    },
    {
        "label": "NotAllowedError",
        "importPath": "domain.exceptions",
        "description": "domain.exceptions",
        "isExtraImport": true,
        "detail": "domain.exceptions",
        "documentation": {}
    },
    {
        "label": "AlreadyExistsError",
        "importPath": "domain.exceptions",
        "description": "domain.exceptions",
        "isExtraImport": true,
        "detail": "domain.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "domain.exceptions",
        "description": "domain.exceptions",
        "isExtraImport": true,
        "detail": "domain.exceptions",
        "documentation": {}
    },
    {
        "label": "NotAllowedError",
        "importPath": "domain.exceptions",
        "description": "domain.exceptions",
        "isExtraImport": true,
        "detail": "domain.exceptions",
        "documentation": {}
    },
    {
        "label": "AlreadyExistsError",
        "importPath": "domain.exceptions",
        "description": "domain.exceptions",
        "isExtraImport": true,
        "detail": "domain.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "domain.exceptions",
        "description": "domain.exceptions",
        "isExtraImport": true,
        "detail": "domain.exceptions",
        "documentation": {}
    },
    {
        "label": "IIdSequenceService",
        "importPath": "domain.idsequence.ports.service",
        "description": "domain.idsequence.ports.service",
        "isExtraImport": true,
        "detail": "domain.idsequence.ports.service",
        "documentation": {}
    },
    {
        "label": "IIdSequenceService",
        "importPath": "domain.idsequence.ports.service",
        "description": "domain.idsequence.ports.service",
        "isExtraImport": true,
        "detail": "domain.idsequence.ports.service",
        "documentation": {}
    },
    {
        "label": "IIdSequenceService",
        "importPath": "domain.idsequence.ports.service",
        "description": "domain.idsequence.ports.service",
        "isExtraImport": true,
        "detail": "domain.idsequence.ports.service",
        "documentation": {}
    },
    {
        "label": "IIdSequenceService",
        "importPath": "domain.idsequence.ports.service",
        "description": "domain.idsequence.ports.service",
        "isExtraImport": true,
        "detail": "domain.idsequence.ports.service",
        "documentation": {}
    },
    {
        "label": "sequencer",
        "importPath": "domain.idsequence.utils",
        "description": "domain.idsequence.utils",
        "isExtraImport": true,
        "detail": "domain.idsequence.utils",
        "documentation": {}
    },
    {
        "label": "IMethodService",
        "importPath": "domain.instrument.ports.service",
        "description": "domain.instrument.ports.service",
        "isExtraImport": true,
        "detail": "domain.instrument.ports.service",
        "documentation": {}
    },
    {
        "label": "IJobService",
        "importPath": "domain.job.ports.service",
        "description": "domain.job.ports.service",
        "isExtraImport": true,
        "detail": "domain.job.ports.service",
        "documentation": {}
    },
    {
        "label": "IJobService",
        "importPath": "domain.job.ports.service",
        "description": "domain.job.ports.service",
        "isExtraImport": true,
        "detail": "domain.job.ports.service",
        "documentation": {}
    },
    {
        "label": "IJobService",
        "importPath": "domain.job.ports.service",
        "description": "domain.job.ports.service",
        "isExtraImport": true,
        "detail": "domain.job.ports.service",
        "documentation": {}
    },
    {
        "label": "IJobService",
        "importPath": "domain.job.ports.service",
        "description": "domain.job.ports.service",
        "isExtraImport": true,
        "detail": "domain.job.ports.service",
        "documentation": {}
    },
    {
        "label": "IJobService",
        "importPath": "domain.job.ports.service",
        "description": "domain.job.ports.service",
        "isExtraImport": true,
        "detail": "domain.job.ports.service",
        "documentation": {}
    },
    {
        "label": "IJobService",
        "importPath": "domain.job.ports.service",
        "description": "domain.job.ports.service",
        "isExtraImport": true,
        "detail": "domain.job.ports.service",
        "documentation": {}
    },
    {
        "label": "IJobWorkerService",
        "importPath": "domain.job.ports.service",
        "description": "domain.job.ports.service",
        "isExtraImport": true,
        "detail": "domain.job.ports.service",
        "documentation": {}
    },
    {
        "label": "IJobService",
        "importPath": "domain.job.ports.service",
        "description": "domain.job.ports.service",
        "isExtraImport": true,
        "detail": "domain.job.ports.service",
        "documentation": {}
    },
    {
        "label": "IJobService",
        "importPath": "domain.job.ports.service",
        "description": "domain.job.ports.service",
        "isExtraImport": true,
        "detail": "domain.job.ports.service",
        "documentation": {}
    },
    {
        "label": "JobCreate",
        "importPath": "domain.job.schemas",
        "description": "domain.job.schemas",
        "isExtraImport": true,
        "detail": "domain.job.schemas",
        "documentation": {}
    },
    {
        "label": "JobCreate",
        "importPath": "domain.job.schemas",
        "description": "domain.job.schemas",
        "isExtraImport": true,
        "detail": "domain.job.schemas",
        "documentation": {}
    },
    {
        "label": "JobCreate",
        "importPath": "domain.job.schemas",
        "description": "domain.job.schemas",
        "isExtraImport": true,
        "detail": "domain.job.schemas",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "domain.job.schemas",
        "description": "domain.job.schemas",
        "isExtraImport": true,
        "detail": "domain.job.schemas",
        "documentation": {}
    },
    {
        "label": "JobCreate",
        "importPath": "domain.job.schemas",
        "description": "domain.job.schemas",
        "isExtraImport": true,
        "detail": "domain.job.schemas",
        "documentation": {}
    },
    {
        "label": "JobCreate",
        "importPath": "domain.job.schemas",
        "description": "domain.job.schemas",
        "isExtraImport": true,
        "detail": "domain.job.schemas",
        "documentation": {}
    },
    {
        "label": "IActivityStreamService",
        "importPath": "domain.notification.ports.service",
        "description": "domain.notification.ports.service",
        "isExtraImport": true,
        "detail": "domain.notification.ports.service",
        "documentation": {}
    },
    {
        "label": "IActivityStreamService",
        "importPath": "domain.notification.ports.service",
        "description": "domain.notification.ports.service",
        "isExtraImport": true,
        "detail": "domain.notification.ports.service",
        "documentation": {}
    },
    {
        "label": "IActivityStreamService",
        "importPath": "domain.notification.ports.service",
        "description": "domain.notification.ports.service",
        "isExtraImport": true,
        "detail": "domain.notification.ports.service",
        "documentation": {}
    },
    {
        "label": "INotificationService",
        "importPath": "domain.notification.ports.service",
        "description": "domain.notification.ports.service",
        "isExtraImport": true,
        "detail": "domain.notification.ports.service",
        "documentation": {}
    },
    {
        "label": "IActivityStreamService",
        "importPath": "domain.notification.ports.service",
        "description": "domain.notification.ports.service",
        "isExtraImport": true,
        "detail": "domain.notification.ports.service",
        "documentation": {}
    },
    {
        "label": "IActivityFeedService",
        "importPath": "domain.notification.ports.service",
        "description": "domain.notification.ports.service",
        "isExtraImport": true,
        "detail": "domain.notification.ports.service",
        "documentation": {}
    },
    {
        "label": "IActivityStreamService",
        "importPath": "domain.notification.ports.service",
        "description": "domain.notification.ports.service",
        "isExtraImport": true,
        "detail": "domain.notification.ports.service",
        "documentation": {}
    },
    {
        "label": "INotificationService",
        "importPath": "domain.notification.ports.service",
        "description": "domain.notification.ports.service",
        "isExtraImport": true,
        "detail": "domain.notification.ports.service",
        "documentation": {}
    },
    {
        "label": "IActivityStreamService",
        "importPath": "domain.notification.ports.service",
        "description": "domain.notification.ports.service",
        "isExtraImport": true,
        "detail": "domain.notification.ports.service",
        "documentation": {}
    },
    {
        "label": "IPatientService",
        "importPath": "domain.patient.ports.service",
        "description": "domain.patient.ports.service",
        "isExtraImport": true,
        "detail": "domain.patient.ports.service",
        "documentation": {}
    },
    {
        "label": "IPatientService",
        "importPath": "domain.patient.ports.service",
        "description": "domain.patient.ports.service",
        "isExtraImport": true,
        "detail": "domain.patient.ports.service",
        "documentation": {}
    },
    {
        "label": "IIdentificationService",
        "importPath": "domain.patient.ports.service",
        "description": "domain.patient.ports.service",
        "isExtraImport": true,
        "detail": "domain.patient.ports.service",
        "documentation": {}
    },
    {
        "label": "IPatientIdentificationService",
        "importPath": "domain.patient.ports.service",
        "description": "domain.patient.ports.service",
        "isExtraImport": true,
        "detail": "domain.patient.ports.service",
        "documentation": {}
    },
    {
        "label": "IPatientService",
        "importPath": "domain.patient.ports.service",
        "description": "domain.patient.ports.service",
        "isExtraImport": true,
        "detail": "domain.patient.ports.service",
        "documentation": {}
    },
    {
        "label": "IPatientService",
        "importPath": "domain.patient.ports.service",
        "description": "domain.patient.ports.service",
        "isExtraImport": true,
        "detail": "domain.patient.ports.service",
        "documentation": {}
    },
    {
        "label": "IReflexEngineService",
        "importPath": "domain.reflex.ports.service",
        "description": "domain.reflex.ports.service",
        "isExtraImport": true,
        "detail": "domain.reflex.ports.service",
        "documentation": {}
    },
    {
        "label": "IReflexEngineService",
        "importPath": "domain.reflex.ports.service",
        "description": "domain.reflex.ports.service",
        "isExtraImport": true,
        "detail": "domain.reflex.ports.service",
        "documentation": {}
    },
    {
        "label": "IReflexRuleService",
        "importPath": "domain.reflex.ports.service",
        "description": "domain.reflex.ports.service",
        "isExtraImport": true,
        "detail": "domain.reflex.ports.service",
        "documentation": {}
    },
    {
        "label": "IReflexBrainAdditionService",
        "importPath": "domain.reflex.ports.service",
        "description": "domain.reflex.ports.service",
        "isExtraImport": true,
        "detail": "domain.reflex.ports.service",
        "documentation": {}
    },
    {
        "label": "IReflexBrainFinalService",
        "importPath": "domain.reflex.ports.service",
        "description": "domain.reflex.ports.service",
        "isExtraImport": true,
        "detail": "domain.reflex.ports.service",
        "documentation": {}
    },
    {
        "label": "IReflexBrainCriteriaService",
        "importPath": "domain.reflex.ports.service",
        "description": "domain.reflex.ports.service",
        "isExtraImport": true,
        "detail": "domain.reflex.ports.service",
        "documentation": {}
    },
    {
        "label": "IReflexBrainService",
        "importPath": "domain.reflex.ports.service",
        "description": "domain.reflex.ports.service",
        "isExtraImport": true,
        "detail": "domain.reflex.ports.service",
        "documentation": {}
    },
    {
        "label": "IReflexActionService",
        "importPath": "domain.reflex.ports.service",
        "description": "domain.reflex.ports.service",
        "isExtraImport": true,
        "detail": "domain.reflex.ports.service",
        "documentation": {}
    },
    {
        "label": "IReflexEngineService",
        "importPath": "domain.reflex.ports.service",
        "description": "domain.reflex.ports.service",
        "isExtraImport": true,
        "detail": "domain.reflex.ports.service",
        "documentation": {}
    },
    {
        "label": "IReflexEngineService",
        "importPath": "domain.reflex.ports.service",
        "description": "domain.reflex.ports.service",
        "isExtraImport": true,
        "detail": "domain.reflex.ports.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "domain.shared.services",
        "description": "domain.shared.services",
        "isExtraImport": true,
        "detail": "domain.shared.services",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "domain.shared.services",
        "description": "domain.shared.services",
        "isExtraImport": true,
        "detail": "domain.shared.services",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "domain.shared.services",
        "description": "domain.shared.services",
        "isExtraImport": true,
        "detail": "domain.shared.services",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "domain.shared.services",
        "description": "domain.shared.services",
        "isExtraImport": true,
        "detail": "domain.shared.services",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "domain.shared.services",
        "description": "domain.shared.services",
        "isExtraImport": true,
        "detail": "domain.shared.services",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "domain.shared.services",
        "description": "domain.shared.services",
        "isExtraImport": true,
        "detail": "domain.shared.services",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "domain.shared.services",
        "description": "domain.shared.services",
        "isExtraImport": true,
        "detail": "domain.shared.services",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "domain.shared.services",
        "description": "domain.shared.services",
        "isExtraImport": true,
        "detail": "domain.shared.services",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "domain.shared.services",
        "description": "domain.shared.services",
        "isExtraImport": true,
        "detail": "domain.shared.services",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "domain.shared.services",
        "description": "domain.shared.services",
        "isExtraImport": true,
        "detail": "domain.shared.services",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "domain.shared.services",
        "description": "domain.shared.services",
        "isExtraImport": true,
        "detail": "domain.shared.services",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "domain.shared.services",
        "description": "domain.shared.services",
        "isExtraImport": true,
        "detail": "domain.shared.services",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "domain.shared.services",
        "description": "domain.shared.services",
        "isExtraImport": true,
        "detail": "domain.shared.services",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "domain.shared.services",
        "description": "domain.shared.services",
        "isExtraImport": true,
        "detail": "domain.shared.services",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "domain.shared.services",
        "description": "domain.shared.services",
        "isExtraImport": true,
        "detail": "domain.shared.services",
        "documentation": {}
    },
    {
        "label": "marshal",
        "importPath": "domain.shared.utils.serialisers",
        "description": "domain.shared.utils.serialisers",
        "isExtraImport": true,
        "detail": "domain.shared.utils.serialisers",
        "documentation": {}
    },
    {
        "label": "marshal",
        "importPath": "domain.shared.utils.serialisers",
        "description": "domain.shared.utils.serialisers",
        "isExtraImport": true,
        "detail": "domain.shared.utils.serialisers",
        "documentation": {}
    },
    {
        "label": "marshal",
        "importPath": "domain.shared.utils.serialisers",
        "description": "domain.shared.utils.serialisers",
        "isExtraImport": true,
        "detail": "domain.shared.utils.serialisers",
        "documentation": {}
    },
    {
        "label": "marshal",
        "importPath": "domain.shared.utils.serialisers",
        "description": "domain.shared.utils.serialisers",
        "isExtraImport": true,
        "detail": "domain.shared.utils.serialisers",
        "documentation": {}
    },
    {
        "label": "marshal",
        "importPath": "domain.shared.utils.serialisers",
        "description": "domain.shared.utils.serialisers",
        "isExtraImport": true,
        "detail": "domain.shared.utils.serialisers",
        "documentation": {}
    },
    {
        "label": "marshal",
        "importPath": "domain.shared.utils.serialisers",
        "description": "domain.shared.utils.serialisers",
        "isExtraImport": true,
        "detail": "domain.shared.utils.serialisers",
        "documentation": {}
    },
    {
        "label": "marshal",
        "importPath": "domain.shared.utils.serialisers",
        "description": "domain.shared.utils.serialisers",
        "isExtraImport": true,
        "detail": "domain.shared.utils.serialisers",
        "documentation": {}
    },
    {
        "label": "marshal",
        "importPath": "domain.shared.utils.serialisers",
        "description": "domain.shared.utils.serialisers",
        "isExtraImport": true,
        "detail": "domain.shared.utils.serialisers",
        "documentation": {}
    },
    {
        "label": "marshal",
        "importPath": "domain.shared.utils.serialisers",
        "description": "domain.shared.utils.serialisers",
        "isExtraImport": true,
        "detail": "domain.shared.utils.serialisers",
        "documentation": {}
    },
    {
        "label": "marshal",
        "importPath": "domain.shared.utils.serialisers",
        "description": "domain.shared.utils.serialisers",
        "isExtraImport": true,
        "detail": "domain.shared.utils.serialisers",
        "documentation": {}
    },
    {
        "label": "marshal",
        "importPath": "domain.shared.utils.serialisers",
        "description": "domain.shared.utils.serialisers",
        "isExtraImport": true,
        "detail": "domain.shared.utils.serialisers",
        "documentation": {}
    },
    {
        "label": "marshal",
        "importPath": "domain.shared.utils.serialisers",
        "description": "domain.shared.utils.serialisers",
        "isExtraImport": true,
        "detail": "domain.shared.utils.serialisers",
        "documentation": {}
    },
    {
        "label": "marshal",
        "importPath": "domain.shared.utils.serialisers",
        "description": "domain.shared.utils.serialisers",
        "isExtraImport": true,
        "detail": "domain.shared.utils.serialisers",
        "documentation": {}
    },
    {
        "label": "marshal",
        "importPath": "domain.shared.utils.serialisers",
        "description": "domain.shared.utils.serialisers",
        "isExtraImport": true,
        "detail": "domain.shared.utils.serialisers",
        "documentation": {}
    },
    {
        "label": "marshal",
        "importPath": "domain.shared.utils.serialisers",
        "description": "domain.shared.utils.serialisers",
        "isExtraImport": true,
        "detail": "domain.shared.utils.serialisers",
        "documentation": {}
    },
    {
        "label": "marshal",
        "importPath": "domain.shared.utils.serialisers",
        "description": "domain.shared.utils.serialisers",
        "isExtraImport": true,
        "detail": "domain.shared.utils.serialisers",
        "documentation": {}
    },
    {
        "label": "marshal",
        "importPath": "domain.shared.utils.serialisers",
        "description": "domain.shared.utils.serialisers",
        "isExtraImport": true,
        "detail": "domain.shared.utils.serialisers",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "domain.user.schemas",
        "description": "domain.user.schemas",
        "isExtraImport": true,
        "detail": "domain.user.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "domain.user.schemas",
        "description": "domain.user.schemas",
        "isExtraImport": true,
        "detail": "domain.user.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "domain.user.schemas",
        "description": "domain.user.schemas",
        "isExtraImport": true,
        "detail": "domain.user.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "domain.user.schemas",
        "description": "domain.user.schemas",
        "isExtraImport": true,
        "detail": "domain.user.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "domain.user.schemas",
        "description": "domain.user.schemas",
        "isExtraImport": true,
        "detail": "domain.user.schemas",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "domain.user.schemas",
        "description": "domain.user.schemas",
        "isExtraImport": true,
        "detail": "domain.user.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "domain.user.schemas",
        "description": "domain.user.schemas",
        "isExtraImport": true,
        "detail": "domain.user.schemas",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "domain.user.schemas",
        "description": "domain.user.schemas",
        "isExtraImport": true,
        "detail": "domain.user.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "domain.user.schemas",
        "description": "domain.user.schemas",
        "isExtraImport": true,
        "detail": "domain.user.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "domain.user.schemas",
        "description": "domain.user.schemas",
        "isExtraImport": true,
        "detail": "domain.user.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "domain.user.schemas",
        "description": "domain.user.schemas",
        "isExtraImport": true,
        "detail": "domain.user.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "domain.user.schemas",
        "description": "domain.user.schemas",
        "isExtraImport": true,
        "detail": "domain.user.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "domain.user.schemas",
        "description": "domain.user.schemas",
        "isExtraImport": true,
        "detail": "domain.user.schemas",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "domain.user.schemas",
        "description": "domain.user.schemas",
        "isExtraImport": true,
        "detail": "domain.user.schemas",
        "documentation": {}
    },
    {
        "label": "UserUpdate",
        "importPath": "domain.user.schemas",
        "description": "domain.user.schemas",
        "isExtraImport": true,
        "detail": "domain.user.schemas",
        "documentation": {}
    },
    {
        "label": "AuthenticatedUser",
        "importPath": "domain.user.schemas",
        "description": "domain.user.schemas",
        "isExtraImport": true,
        "detail": "domain.user.schemas",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "domain.user.schemas",
        "description": "domain.user.schemas",
        "isExtraImport": true,
        "detail": "domain.user.schemas",
        "documentation": {}
    },
    {
        "label": "GroupCreate",
        "importPath": "domain.user.schemas",
        "description": "domain.user.schemas",
        "isExtraImport": true,
        "detail": "domain.user.schemas",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "domain.user.schemas",
        "description": "domain.user.schemas",
        "isExtraImport": true,
        "detail": "domain.user.schemas",
        "documentation": {}
    },
    {
        "label": "GroupPermission",
        "importPath": "domain.user.schemas",
        "description": "domain.user.schemas",
        "isExtraImport": true,
        "detail": "domain.user.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "domain.user.schemas",
        "description": "domain.user.schemas",
        "isExtraImport": true,
        "detail": "domain.user.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "domain.user.schemas",
        "description": "domain.user.schemas",
        "isExtraImport": true,
        "detail": "domain.user.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "domain.user.schemas",
        "description": "domain.user.schemas",
        "isExtraImport": true,
        "detail": "domain.user.schemas",
        "documentation": {}
    },
    {
        "label": "IQCSetService",
        "importPath": "domain.analysis.ports.service.quality_control",
        "description": "domain.analysis.ports.service.quality_control",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.quality_control",
        "documentation": {}
    },
    {
        "label": "IQCLevelService",
        "importPath": "domain.analysis.ports.service.quality_control",
        "description": "domain.analysis.ports.service.quality_control",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.quality_control",
        "documentation": {}
    },
    {
        "label": "IQCTemplateService",
        "importPath": "domain.analysis.ports.service.quality_control",
        "description": "domain.analysis.ports.service.quality_control",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.quality_control",
        "documentation": {}
    },
    {
        "label": "IQCTemplateService",
        "importPath": "domain.analysis.ports.service.quality_control",
        "description": "domain.analysis.ports.service.quality_control",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.quality_control",
        "documentation": {}
    },
    {
        "label": "IQCLevelService",
        "importPath": "domain.analysis.ports.service.quality_control",
        "description": "domain.analysis.ports.service.quality_control",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.quality_control",
        "documentation": {}
    },
    {
        "label": "IQCSetService",
        "importPath": "domain.analysis.ports.service.quality_control",
        "description": "domain.analysis.ports.service.quality_control",
        "isExtraImport": true,
        "detail": "domain.analysis.ports.service.quality_control",
        "documentation": {}
    },
    {
        "label": "IDepartmentService",
        "importPath": "domain.setup.ports.service",
        "description": "domain.setup.ports.service",
        "isExtraImport": true,
        "detail": "domain.setup.ports.service",
        "documentation": {}
    },
    {
        "label": "ILaboratoryService",
        "importPath": "domain.setup.ports.service",
        "description": "domain.setup.ports.service",
        "isExtraImport": true,
        "detail": "domain.setup.ports.service",
        "documentation": {}
    },
    {
        "label": "ILaboratorySettingService",
        "importPath": "domain.setup.ports.service",
        "description": "domain.setup.ports.service",
        "isExtraImport": true,
        "detail": "domain.setup.ports.service",
        "documentation": {}
    },
    {
        "label": "ILaboratoryService",
        "importPath": "domain.setup.ports.service",
        "description": "domain.setup.ports.service",
        "isExtraImport": true,
        "detail": "domain.setup.ports.service",
        "documentation": {}
    },
    {
        "label": "IDepartmentService",
        "importPath": "domain.setup.ports.service",
        "description": "domain.setup.ports.service",
        "isExtraImport": true,
        "detail": "domain.setup.ports.service",
        "documentation": {}
    },
    {
        "label": "ILaboratorySettingService",
        "importPath": "domain.setup.ports.service",
        "description": "domain.setup.ports.service",
        "isExtraImport": true,
        "detail": "domain.setup.ports.service",
        "documentation": {}
    },
    {
        "label": "ISupplierService",
        "importPath": "domain.setup.ports.service",
        "description": "domain.setup.ports.service",
        "isExtraImport": true,
        "detail": "domain.setup.ports.service",
        "documentation": {}
    },
    {
        "label": "IManufacturerService",
        "importPath": "domain.setup.ports.service",
        "description": "domain.setup.ports.service",
        "isExtraImport": true,
        "detail": "domain.setup.ports.service",
        "documentation": {}
    },
    {
        "label": "IDepartmentService",
        "importPath": "domain.setup.ports.service",
        "description": "domain.setup.ports.service",
        "isExtraImport": true,
        "detail": "domain.setup.ports.service",
        "documentation": {}
    },
    {
        "label": "IUnitService",
        "importPath": "domain.setup.ports.service",
        "description": "domain.setup.ports.service",
        "isExtraImport": true,
        "detail": "domain.setup.ports.service",
        "documentation": {}
    },
    {
        "label": "ILaboratoryService",
        "importPath": "domain.setup.ports.service",
        "description": "domain.setup.ports.service",
        "isExtraImport": true,
        "detail": "domain.setup.ports.service",
        "documentation": {}
    },
    {
        "label": "IDistrictService",
        "importPath": "domain.setup.ports.service",
        "description": "domain.setup.ports.service",
        "isExtraImport": true,
        "detail": "domain.setup.ports.service",
        "documentation": {}
    },
    {
        "label": "IProvinceService",
        "importPath": "domain.setup.ports.service",
        "description": "domain.setup.ports.service",
        "isExtraImport": true,
        "detail": "domain.setup.ports.service",
        "documentation": {}
    },
    {
        "label": "ICountryService",
        "importPath": "domain.setup.ports.service",
        "description": "domain.setup.ports.service",
        "isExtraImport": true,
        "detail": "domain.setup.ports.service",
        "documentation": {}
    },
    {
        "label": "WSStates",
        "importPath": "domain.worksheet.conf",
        "description": "domain.worksheet.conf",
        "isExtraImport": true,
        "detail": "domain.worksheet.conf",
        "documentation": {}
    },
    {
        "label": "WSStates",
        "importPath": "domain.worksheet.conf",
        "description": "domain.worksheet.conf",
        "isExtraImport": true,
        "detail": "domain.worksheet.conf",
        "documentation": {}
    },
    {
        "label": "IWorkSheetService",
        "importPath": "domain.worksheet.ports.service",
        "description": "domain.worksheet.ports.service",
        "isExtraImport": true,
        "detail": "domain.worksheet.ports.service",
        "documentation": {}
    },
    {
        "label": "IWorkSheetService",
        "importPath": "domain.worksheet.ports.service",
        "description": "domain.worksheet.ports.service",
        "isExtraImport": true,
        "detail": "domain.worksheet.ports.service",
        "documentation": {}
    },
    {
        "label": "IWorkSheetTemplateService",
        "importPath": "domain.worksheet.ports.service",
        "description": "domain.worksheet.ports.service",
        "isExtraImport": true,
        "detail": "domain.worksheet.ports.service",
        "documentation": {}
    },
    {
        "label": "BaseAuditModel",
        "importPath": "felicity.apps.common.schemas",
        "description": "felicity.apps.common.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "felicity.apps.common.schemas",
        "description": "felicity.apps.common.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas",
        "documentation": {}
    },
    {
        "label": "BaseAuditModel",
        "importPath": "felicity.apps.common.schemas",
        "description": "felicity.apps.common.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas",
        "documentation": {}
    },
    {
        "label": "BaseAuditModel",
        "importPath": "felicity.apps.common.schemas",
        "description": "felicity.apps.common.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas",
        "documentation": {}
    },
    {
        "label": "BaseAuditModel",
        "importPath": "felicity.apps.common.schemas",
        "description": "felicity.apps.common.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas",
        "documentation": {}
    },
    {
        "label": "BaseAuditModel",
        "importPath": "felicity.apps.common.schemas",
        "description": "felicity.apps.common.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas",
        "documentation": {}
    },
    {
        "label": "BaseAuditModel",
        "importPath": "felicity.apps.common.schemas",
        "description": "felicity.apps.common.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas",
        "documentation": {}
    },
    {
        "label": "BaseAuditModel",
        "importPath": "felicity.apps.common.schemas",
        "description": "felicity.apps.common.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas",
        "documentation": {}
    },
    {
        "label": "BaseAuditModel",
        "importPath": "felicity.apps.common.schemas",
        "description": "felicity.apps.common.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas",
        "documentation": {}
    },
    {
        "label": "BaseAuditModel",
        "importPath": "felicity.apps.common.schemas",
        "description": "felicity.apps.common.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas",
        "documentation": {}
    },
    {
        "label": "BaseAuditModel",
        "importPath": "felicity.apps.common.schemas",
        "description": "felicity.apps.common.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "felicity.apps.common.schemas",
        "description": "felicity.apps.common.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Unit",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "ManufacturerInDB",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "SupplierInDB",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "UnitCreate",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "felicity.apps.job.models",
        "description": "felicity.apps.job.models",
        "isExtraImport": true,
        "detail": "felicity.apps.job.models",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "felicity.apps.job.models",
        "description": "felicity.apps.job.models",
        "isExtraImport": true,
        "detail": "felicity.apps.job.models",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "felicity.apps.job.models",
        "description": "felicity.apps.job.models",
        "isExtraImport": true,
        "detail": "felicity.apps.job.models",
        "documentation": {}
    },
    {
        "label": "JobCreate",
        "importPath": "felicity.apps.job.schemas",
        "description": "felicity.apps.job.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.job.schemas",
        "documentation": {}
    },
    {
        "label": "JobCreate",
        "importPath": "felicity.apps.job.schemas",
        "description": "felicity.apps.job.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.job.schemas",
        "documentation": {}
    },
    {
        "label": "parser",
        "importPath": "dateutil",
        "description": "dateutil",
        "isExtraImport": true,
        "detail": "dateutil",
        "documentation": {}
    },
    {
        "label": "parser",
        "importPath": "dateutil",
        "description": "dateutil",
        "isExtraImport": true,
        "detail": "dateutil",
        "documentation": {}
    },
    {
        "label": "parser",
        "importPath": "dateutil",
        "description": "dateutil",
        "isExtraImport": true,
        "detail": "dateutil",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "operators",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "extract",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.database.base_class",
        "description": "felicity.database.base_class",
        "isExtraImport": true,
        "detail": "felicity.database.base_class",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.database.base_class",
        "description": "felicity.database.base_class",
        "isExtraImport": true,
        "detail": "felicity.database.base_class",
        "documentation": {}
    },
    {
        "label": "DBModel",
        "importPath": "felicity.database.base_class",
        "description": "felicity.database.base_class",
        "isExtraImport": true,
        "detail": "felicity.database.base_class",
        "documentation": {}
    },
    {
        "label": "DBModel",
        "importPath": "felicity.database.base_class",
        "description": "felicity.database.base_class",
        "isExtraImport": true,
        "detail": "felicity.database.base_class",
        "documentation": {}
    },
    {
        "label": "DBModel",
        "importPath": "felicity.database.base_class",
        "description": "felicity.database.base_class",
        "isExtraImport": true,
        "detail": "felicity.database.base_class",
        "documentation": {}
    },
    {
        "label": "IReportMetaRepository",
        "importPath": "domain.analytics.ports.repository",
        "description": "domain.analytics.ports.repository",
        "isExtraImport": true,
        "detail": "domain.analytics.ports.repository",
        "documentation": {}
    },
    {
        "label": "ISampleAnalyticsRepository",
        "importPath": "domain.analytics.ports.repository",
        "description": "domain.analytics.ports.repository",
        "isExtraImport": true,
        "detail": "domain.analytics.ports.repository",
        "documentation": {}
    },
    {
        "label": "IReportMetaRepository",
        "importPath": "domain.analytics.ports.repository",
        "description": "domain.analytics.ports.repository",
        "isExtraImport": true,
        "detail": "domain.analytics.ports.repository",
        "documentation": {}
    },
    {
        "label": "ISampleAnalyticsRepository",
        "importPath": "domain.analytics.ports.repository",
        "description": "domain.analytics.ports.repository",
        "isExtraImport": true,
        "detail": "domain.analytics.ports.repository",
        "documentation": {}
    },
    {
        "label": "ReportMeta",
        "importPath": "felicity.apps.analytics.entities",
        "description": "felicity.apps.analytics.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.analytics.entities",
        "documentation": {}
    },
    {
        "label": "AnalysisBasic",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleInDB",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "Analysis",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleType",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleBaseInDB",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisBaseInDB",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCLevelInDB",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCSetCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCLevelCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "RejectionReasonCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "ReportStates",
        "importPath": "domain.analytics.conf",
        "description": "domain.analytics.conf",
        "isExtraImport": true,
        "detail": "domain.analytics.conf",
        "documentation": {}
    },
    {
        "label": "IReportMetaService",
        "importPath": "domain.analytics.ports.service",
        "description": "domain.analytics.ports.service",
        "isExtraImport": true,
        "detail": "domain.analytics.ports.service",
        "documentation": {}
    },
    {
        "label": "ReportMeta",
        "importPath": "domain.analytics.schemas",
        "description": "domain.analytics.schemas",
        "isExtraImport": true,
        "detail": "domain.analytics.schemas",
        "documentation": {}
    },
    {
        "label": "get_history",
        "importPath": "sqlalchemy.orm.attributes",
        "description": "sqlalchemy.orm.attributes",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm.attributes",
        "documentation": {}
    },
    {
        "label": "get_history",
        "importPath": "sqlalchemy.orm.attributes",
        "description": "sqlalchemy.orm.attributes",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm.attributes",
        "documentation": {}
    },
    {
        "label": "AuditLog",
        "importPath": "felicity.apps.auditlog.entities",
        "description": "felicity.apps.auditlog.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.auditlog.entities",
        "documentation": {}
    },
    {
        "label": "AuditLog",
        "importPath": "felicity.apps.auditlog.entities",
        "description": "felicity.apps.auditlog.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.auditlog.entities",
        "documentation": {}
    },
    {
        "label": "AuditLog",
        "importPath": "felicity.apps.auditlog.entities",
        "description": "felicity.apps.auditlog.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.auditlog.entities",
        "documentation": {}
    },
    {
        "label": "AuditLogRepository",
        "importPath": "felicity.apps.auditlog.repositories",
        "description": "felicity.apps.auditlog.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.auditlog.repositories",
        "documentation": {}
    },
    {
        "label": "JSONB",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "JSONB",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "insert",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "JSONB",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "JSONB",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "JSONB",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "JSONB",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "JSONB",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "JSONB",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "JSONB",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "JSONB",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "JSONB",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscountRepository",
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "AnalysisPriceRepository",
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "ProfileDiscountRepository",
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "ProfilePriceRepository",
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "TestBillInvoiceRepository",
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "TestBillRepository",
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "TestBillTransactionRepository",
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "VoucherCodeRepository",
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "VoucherCustomerRepository",
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "VoucherRepository",
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "IdSequence",
        "importPath": "felicity.apps.idsequencer.entities",
        "description": "felicity.apps.idsequencer.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.idsequencer.entities",
        "documentation": {}
    },
    {
        "label": "IdSequence",
        "importPath": "felicity.apps.idsequencer.entities",
        "description": "felicity.apps.idsequencer.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.idsequencer.entities",
        "documentation": {}
    },
    {
        "label": "IdSequenceService",
        "importPath": "felicity.apps.idsequencer.service",
        "description": "felicity.apps.idsequencer.service",
        "isExtraImport": true,
        "detail": "felicity.apps.idsequencer.service",
        "documentation": {}
    },
    {
        "label": "IdSequenceService",
        "importPath": "felicity.apps.idsequencer.service",
        "description": "felicity.apps.idsequencer.service",
        "isExtraImport": true,
        "detail": "felicity.apps.idsequencer.service",
        "documentation": {}
    },
    {
        "label": "CustomerAlreadyUsedVoucherException",
        "importPath": "felicity.apps.billing.exceptions",
        "description": "felicity.apps.billing.exceptions",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.exceptions",
        "documentation": {}
    },
    {
        "label": "InactiveTestBillException",
        "importPath": "felicity.apps.billing.exceptions",
        "description": "felicity.apps.billing.exceptions",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.exceptions",
        "documentation": {}
    },
    {
        "label": "InactiveVoucherCodeException",
        "importPath": "felicity.apps.billing.exceptions",
        "description": "felicity.apps.billing.exceptions",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidVoucherCodeException",
        "importPath": "felicity.apps.billing.exceptions",
        "description": "felicity.apps.billing.exceptions",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.exceptions",
        "documentation": {}
    },
    {
        "label": "VoucherCodeLimitExceededException",
        "importPath": "felicity.apps.billing.exceptions",
        "description": "felicity.apps.billing.exceptions",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.exceptions",
        "documentation": {}
    },
    {
        "label": "VoucherLimitExceededException",
        "importPath": "felicity.apps.billing.exceptions",
        "description": "felicity.apps.billing.exceptions",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.exceptions",
        "documentation": {}
    },
    {
        "label": "District",
        "importPath": "felicity.apps.setup.entities",
        "description": "felicity.apps.setup.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities",
        "documentation": {}
    },
    {
        "label": "Province",
        "importPath": "felicity.apps.setup.entities",
        "description": "felicity.apps.setup.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities",
        "documentation": {}
    },
    {
        "label": "Country",
        "importPath": "felicity.apps.setup.entities",
        "description": "felicity.apps.setup.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities",
        "documentation": {}
    },
    {
        "label": "Province",
        "importPath": "felicity.apps.setup.entities",
        "description": "felicity.apps.setup.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities",
        "documentation": {}
    },
    {
        "label": "District",
        "importPath": "felicity.apps.setup.entities",
        "description": "felicity.apps.setup.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "felicity.apps.setup.entities",
        "description": "felicity.apps.setup.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities",
        "documentation": {}
    },
    {
        "label": "Laboratory",
        "importPath": "felicity.apps.setup.entities",
        "description": "felicity.apps.setup.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities",
        "documentation": {}
    },
    {
        "label": "LaboratorySetting",
        "importPath": "felicity.apps.setup.entities",
        "description": "felicity.apps.setup.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities",
        "documentation": {}
    },
    {
        "label": "Manufacturer",
        "importPath": "felicity.apps.setup.entities",
        "description": "felicity.apps.setup.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities",
        "documentation": {}
    },
    {
        "label": "Supplier",
        "importPath": "felicity.apps.setup.entities",
        "description": "felicity.apps.setup.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities",
        "documentation": {}
    },
    {
        "label": "Unit",
        "importPath": "felicity.apps.setup.entities",
        "description": "felicity.apps.setup.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "felicity.apps.user.abstract",
        "description": "felicity.apps.user.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.user.abstract",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "felicity.apps.user.abstract",
        "description": "felicity.apps.user.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.user.abstract",
        "documentation": {}
    },
    {
        "label": "CLIENT_CONTACT",
        "importPath": "felicity.apps.user.conf",
        "description": "felicity.apps.user.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.user.conf",
        "documentation": {}
    },
    {
        "label": "themes",
        "importPath": "felicity.apps.user.conf",
        "description": "felicity.apps.user.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.user.conf",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "felicity.apps.client.entities",
        "description": "felicity.apps.client.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.client.entities",
        "documentation": {}
    },
    {
        "label": "ClientContact",
        "importPath": "felicity.apps.client.entities",
        "description": "felicity.apps.client.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.client.entities",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "felicity.apps.client.entities",
        "description": "felicity.apps.client.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.client.entities",
        "documentation": {}
    },
    {
        "label": "ClientContact",
        "importPath": "felicity.apps.client.entities",
        "description": "felicity.apps.client.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.client.entities",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "felicity.apps.client.entities",
        "description": "felicity.apps.client.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.client.entities",
        "documentation": {}
    },
    {
        "label": "PageCursor",
        "importPath": "felicity.database.paging",
        "description": "felicity.database.paging",
        "isExtraImport": true,
        "detail": "felicity.database.paging",
        "documentation": {}
    },
    {
        "label": "PageCursor",
        "importPath": "felicity.database.paging",
        "description": "felicity.database.paging",
        "isExtraImport": true,
        "detail": "felicity.database.paging",
        "documentation": {}
    },
    {
        "label": "PageCursor",
        "importPath": "felicity.database.paging",
        "description": "felicity.database.paging",
        "isExtraImport": true,
        "detail": "felicity.database.paging",
        "documentation": {}
    },
    {
        "label": "PageCursor",
        "importPath": "felicity.database.paging",
        "description": "felicity.database.paging",
        "isExtraImport": true,
        "detail": "felicity.database.paging",
        "documentation": {}
    },
    {
        "label": "EdgeNode",
        "importPath": "felicity.database.paging",
        "description": "felicity.database.paging",
        "isExtraImport": true,
        "detail": "felicity.database.paging",
        "documentation": {}
    },
    {
        "label": "PageCursor",
        "importPath": "felicity.database.paging",
        "description": "felicity.database.paging",
        "isExtraImport": true,
        "detail": "felicity.database.paging",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.database.paging",
        "description": "felicity.database.paging",
        "isExtraImport": true,
        "detail": "felicity.database.paging",
        "documentation": {}
    },
    {
        "label": "PageCursor",
        "importPath": "felicity.database.paging",
        "description": "felicity.database.paging",
        "isExtraImport": true,
        "detail": "felicity.database.paging",
        "documentation": {}
    },
    {
        "label": "EdgeNode",
        "importPath": "felicity.database.paging",
        "description": "felicity.database.paging",
        "isExtraImport": true,
        "detail": "felicity.database.paging",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.database.paging",
        "description": "felicity.database.paging",
        "isExtraImport": true,
        "detail": "felicity.database.paging",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "ClientContactRepository",
        "importPath": "felicity.apps.client.repositories",
        "description": "felicity.apps.client.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.client.repositories",
        "documentation": {}
    },
    {
        "label": "ClientRepository",
        "importPath": "felicity.apps.client.repositories",
        "description": "felicity.apps.client.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.client.repositories",
        "documentation": {}
    },
    {
        "label": "ClientContactCreate",
        "importPath": "felicity.apps.client.schemas",
        "description": "felicity.apps.client.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientContactUpdate",
        "importPath": "felicity.apps.client.schemas",
        "description": "felicity.apps.client.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientCreate",
        "importPath": "felicity.apps.client.schemas",
        "description": "felicity.apps.client.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientUpdate",
        "importPath": "felicity.apps.client.schemas",
        "description": "felicity.apps.client.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.client.schemas",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "felicity.apps.common.hooks",
        "description": "felicity.apps.common.hooks",
        "isExtraImport": true,
        "detail": "felicity.apps.common.hooks",
        "documentation": {}
    },
    {
        "label": "weakref",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "weakref",
        "description": "weakref",
        "detail": "weakref",
        "documentation": {}
    },
    {
        "label": "NO_VALUE",
        "importPath": "sqlalchemy.orm.base",
        "description": "sqlalchemy.orm.base",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm.base",
        "documentation": {}
    },
    {
        "label": "hybrid_method",
        "importPath": "sqlalchemy.ext.hybrid",
        "description": "sqlalchemy.ext.hybrid",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.hybrid",
        "documentation": {}
    },
    {
        "label": "hybrid_property",
        "importPath": "sqlalchemy.ext.hybrid",
        "description": "sqlalchemy.ext.hybrid",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.hybrid",
        "documentation": {}
    },
    {
        "label": "hybrid_method",
        "importPath": "sqlalchemy.ext.hybrid",
        "description": "sqlalchemy.ext.hybrid",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.hybrid",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm.session",
        "description": "sqlalchemy.orm.session",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm.session",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "ErrorLog",
        "importPath": "felicity.apps.errlog.entities",
        "description": "felicity.apps.errlog.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.errlog.entities",
        "documentation": {}
    },
    {
        "label": "ErrorLog",
        "importPath": "felicity.apps.errlog.entities",
        "description": "felicity.apps.errlog.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.errlog.entities",
        "documentation": {}
    },
    {
        "label": "ErrorLogRepository",
        "importPath": "felicity.apps.errlog.repositories",
        "description": "felicity.apps.errlog.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.errlog.repositories",
        "documentation": {}
    },
    {
        "label": "ErrorLogCreate",
        "importPath": "felicity.apps.errlog.schemas",
        "description": "felicity.apps.errlog.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.errlog.schemas",
        "documentation": {}
    },
    {
        "label": "ErrorLogUpdate",
        "importPath": "felicity.apps.errlog.schemas",
        "description": "felicity.apps.errlog.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.errlog.schemas",
        "documentation": {}
    },
    {
        "label": "StrEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "auto",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "SequenceGenerateError",
        "importPath": "felicity.apps.idsequencer.exception",
        "description": "felicity.apps.idsequencer.exception",
        "isExtraImport": true,
        "detail": "felicity.apps.idsequencer.exception",
        "documentation": {}
    },
    {
        "label": "IncompleDataError",
        "importPath": "felicity.apps.idsequencer.exception",
        "description": "felicity.apps.idsequencer.exception",
        "isExtraImport": true,
        "detail": "felicity.apps.idsequencer.exception",
        "documentation": {}
    },
    {
        "label": "IdSequenceRepository",
        "importPath": "felicity.apps.idsequencer.repository",
        "description": "felicity.apps.idsequencer.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.idsequencer.repository",
        "documentation": {}
    },
    {
        "label": "sequence_alpha",
        "importPath": "felicity.apps.idsequencer.utils",
        "description": "felicity.apps.idsequencer.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.idsequencer.utils",
        "documentation": {}
    },
    {
        "label": "sequencer",
        "importPath": "felicity.apps.idsequencer.utils",
        "description": "felicity.apps.idsequencer.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.idsequencer.utils",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "NamedTemporaryFile",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "NamedTemporaryFile",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "Code128",
        "importPath": "barcode",
        "description": "barcode",
        "isExtraImport": true,
        "detail": "barcode",
        "documentation": {}
    },
    {
        "label": "Code128",
        "importPath": "barcode",
        "description": "barcode",
        "isExtraImport": true,
        "detail": "barcode",
        "documentation": {}
    },
    {
        "label": "Barcode",
        "importPath": "barcode.base",
        "description": "barcode.base",
        "isExtraImport": true,
        "detail": "barcode.base",
        "documentation": {}
    },
    {
        "label": "ImageWriter",
        "importPath": "barcode.writer",
        "description": "barcode.writer",
        "isExtraImport": true,
        "detail": "barcode.writer",
        "documentation": {}
    },
    {
        "label": "ImageWriter",
        "importPath": "barcode.writer",
        "description": "barcode.writer",
        "isExtraImport": true,
        "detail": "barcode.writer",
        "documentation": {}
    },
    {
        "label": "FPDF",
        "importPath": "fpdf",
        "description": "fpdf",
        "isExtraImport": true,
        "detail": "fpdf",
        "documentation": {}
    },
    {
        "label": "FPDF",
        "importPath": "fpdf",
        "description": "fpdf",
        "isExtraImport": true,
        "detail": "fpdf",
        "documentation": {}
    },
    {
        "label": "FPDF",
        "importPath": "fpdf",
        "description": "fpdf",
        "isExtraImport": true,
        "detail": "fpdf",
        "documentation": {}
    },
    {
        "label": "FPDF",
        "importPath": "fpdf",
        "description": "fpdf",
        "isExtraImport": true,
        "detail": "fpdf",
        "documentation": {}
    },
    {
        "label": "FelicityBarCoder",
        "importPath": "felicity.apps.impress.barcode.engine",
        "description": "felicity.apps.impress.barcode.engine",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.barcode.engine",
        "documentation": {}
    },
    {
        "label": "get_from_nested",
        "importPath": "felicity.utils.helpers",
        "description": "felicity.utils.helpers",
        "isExtraImport": true,
        "detail": "felicity.utils.helpers",
        "documentation": {}
    },
    {
        "label": "get_from_nested",
        "importPath": "felicity.utils.helpers",
        "description": "felicity.utils.helpers",
        "isExtraImport": true,
        "detail": "felicity.utils.helpers",
        "documentation": {}
    },
    {
        "label": "strtobool",
        "importPath": "felicity.utils.helpers",
        "description": "felicity.utils.helpers",
        "isExtraImport": true,
        "detail": "felicity.utils.helpers",
        "documentation": {}
    },
    {
        "label": "marshaller",
        "importPath": "felicity.apps.common.utils.serializer",
        "description": "felicity.apps.common.utils.serializer",
        "isExtraImport": true,
        "detail": "felicity.apps.common.utils.serializer",
        "documentation": {}
    },
    {
        "label": "marshaller",
        "importPath": "felicity.apps.common.utils.serializer",
        "description": "felicity.apps.common.utils.serializer",
        "isExtraImport": true,
        "detail": "felicity.apps.common.utils.serializer",
        "documentation": {}
    },
    {
        "label": "marshaller",
        "importPath": "felicity.apps.common.utils.serializer",
        "description": "felicity.apps.common.utils.serializer",
        "isExtraImport": true,
        "detail": "felicity.apps.common.utils.serializer",
        "documentation": {}
    },
    {
        "label": "FelicityInvoice",
        "importPath": "felicity.apps.impress.invoicing.engine",
        "description": "felicity.apps.impress.invoicing.engine",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.invoicing.engine",
        "documentation": {}
    },
    {
        "label": "get_laboratory_setting",
        "importPath": "felicity.apps.setup.caches",
        "description": "felicity.apps.setup.caches",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.caches",
        "documentation": {}
    },
    {
        "label": "get_laboratory",
        "importPath": "felicity.apps.setup.caches",
        "description": "felicity.apps.setup.caches",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.caches",
        "documentation": {}
    },
    {
        "label": "ReportImpressCreate",
        "importPath": "felicity.apps.impress.sample.schemas",
        "description": "felicity.apps.impress.sample.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.sample.schemas",
        "documentation": {}
    },
    {
        "label": "ReportImpressUpdate",
        "importPath": "felicity.apps.impress.sample.schemas",
        "description": "felicity.apps.impress.sample.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.sample.schemas",
        "documentation": {}
    },
    {
        "label": "ReportImpressCreate",
        "importPath": "felicity.apps.impress.sample.schemas",
        "description": "felicity.apps.impress.sample.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.sample.schemas",
        "documentation": {}
    },
    {
        "label": "ReportImpressCreate",
        "importPath": "felicity.apps.impress.sample.schemas",
        "description": "felicity.apps.impress.sample.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.sample.schemas",
        "documentation": {}
    },
    {
        "label": "ReportImpressUpdate",
        "importPath": "felicity.apps.impress.sample.schemas",
        "description": "felicity.apps.impress.sample.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.sample.schemas",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "felicity.apps.impress.sample",
        "description": "felicity.apps.impress.sample",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.sample",
        "documentation": {}
    },
    {
        "label": "FelicityImpress",
        "importPath": "felicity.apps.impress.sample.engine",
        "description": "felicity.apps.impress.sample.engine",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.sample.engine",
        "documentation": {}
    },
    {
        "label": "ManifetReport",
        "importPath": "felicity.apps.impress.shipment.engine",
        "description": "felicity.apps.impress.shipment.engine",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.shipment.engine",
        "documentation": {}
    },
    {
        "label": "ShipmentUpdate",
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShipmentCreate",
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ReportImpress",
        "importPath": "felicity.apps.impress.entities",
        "description": "felicity.apps.impress.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.entities",
        "documentation": {}
    },
    {
        "label": "ReportImpress",
        "importPath": "felicity.apps.impress.entities",
        "description": "felicity.apps.impress.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.entities",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetence",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrument",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "Method",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "Instrument",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "InstrumentType",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibration",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificate",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "Instrument",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "InstrumentType",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibration",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetence",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrument",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificate",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "Method",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "Instrument",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificateRepository",
        "importPath": "felicity.apps.instrument.repository",
        "description": "felicity.apps.instrument.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.repository",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibrationRepository",
        "importPath": "felicity.apps.instrument.repository",
        "description": "felicity.apps.instrument.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.repository",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetenceRepository",
        "importPath": "felicity.apps.instrument.repository",
        "description": "felicity.apps.instrument.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.repository",
        "documentation": {}
    },
    {
        "label": "InstrumentRepository",
        "importPath": "felicity.apps.instrument.repository",
        "description": "felicity.apps.instrument.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.repository",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeRepository",
        "importPath": "felicity.apps.instrument.repository",
        "description": "felicity.apps.instrument.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.repository",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentRepository",
        "importPath": "felicity.apps.instrument.repository",
        "description": "felicity.apps.instrument.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.repository",
        "documentation": {}
    },
    {
        "label": "MethodRepository",
        "importPath": "felicity.apps.instrument.repository",
        "description": "felicity.apps.instrument.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.repository",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificateCreate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificateUpdate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibrationCreate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibrationUpdate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetenceCreate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetenceUpdate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCreate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeCreate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeUpdate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentUpdate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentCreate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentUpdate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "MethodCreate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "MethodUpdate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract.audit",
        "description": "felicity.apps.abstract.audit",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.audit",
        "documentation": {}
    },
    {
        "label": "Hazard",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockAdjustment",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockCategory",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockItem",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockOrder",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockOrderProduct",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockUnit",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "Hazard",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockAdjustment",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockCategory",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockItem",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockOrder",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockOrderProduct",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockUnit",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "HazardRepository",
        "importPath": "felicity.apps.inventory.repository",
        "description": "felicity.apps.inventory.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockAdjustmentRepository",
        "importPath": "felicity.apps.inventory.repository",
        "description": "felicity.apps.inventory.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockCategoryRepository",
        "importPath": "felicity.apps.inventory.repository",
        "description": "felicity.apps.inventory.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockItemRepository",
        "importPath": "felicity.apps.inventory.repository",
        "description": "felicity.apps.inventory.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockOrderProductRepository",
        "importPath": "felicity.apps.inventory.repository",
        "description": "felicity.apps.inventory.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockOrderRepository",
        "importPath": "felicity.apps.inventory.repository",
        "description": "felicity.apps.inventory.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockUnitRepository",
        "importPath": "felicity.apps.inventory.repository",
        "description": "felicity.apps.inventory.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.repository",
        "documentation": {}
    },
    {
        "label": "HazardCreate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "HazardUpdate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockAdjustmentCreate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockAdjustmentUpdate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockCategoryCreate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockCategoryUpdate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockItemCreate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockItemUpdate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockOrderCreate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockOrderProductCreate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockOrderProductUpdate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockOrderUpdate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockUnitCreate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockUnitUpdate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "IIOLService",
        "importPath": "domain.iol.ports.service",
        "description": "domain.iol.ports.service",
        "isExtraImport": true,
        "detail": "domain.iol.ports.service",
        "documentation": {}
    },
    {
        "label": "IFhirReadService",
        "importPath": "domain.iol.ports.service",
        "description": "domain.iol.ports.service",
        "isExtraImport": true,
        "detail": "domain.iol.ports.service",
        "documentation": {}
    },
    {
        "label": "IFhirCreateService",
        "importPath": "domain.iol.ports.service",
        "description": "domain.iol.ports.service",
        "isExtraImport": true,
        "detail": "domain.iol.ports.service",
        "documentation": {}
    },
    {
        "label": "IFhirCreateService",
        "importPath": "domain.iol.ports.service",
        "description": "domain.iol.ports.service",
        "isExtraImport": true,
        "detail": "domain.iol.ports.service",
        "documentation": {}
    },
    {
        "label": "IFhirReadService",
        "importPath": "domain.iol.ports.service",
        "description": "domain.iol.ports.service",
        "isExtraImport": true,
        "detail": "domain.iol.ports.service",
        "documentation": {}
    },
    {
        "label": "post_data",
        "importPath": "domain.iol.relay",
        "description": "domain.iol.relay",
        "isExtraImport": true,
        "detail": "domain.iol.relay",
        "documentation": {}
    },
    {
        "label": "ShipmentStates",
        "importPath": "domain.shipment.conf",
        "description": "domain.shipment.conf",
        "isExtraImport": true,
        "detail": "domain.shipment.conf",
        "documentation": {}
    },
    {
        "label": "ShipmentStates",
        "importPath": "domain.shipment.conf",
        "description": "domain.shipment.conf",
        "isExtraImport": true,
        "detail": "domain.shipment.conf",
        "documentation": {}
    },
    {
        "label": "ShipmentStates",
        "importPath": "domain.shipment.conf",
        "description": "domain.shipment.conf",
        "isExtraImport": true,
        "detail": "domain.shipment.conf",
        "documentation": {}
    },
    {
        "label": "IShipmentService",
        "importPath": "domain.shipment.ports.service",
        "description": "domain.shipment.ports.service",
        "isExtraImport": true,
        "detail": "domain.shipment.ports.service",
        "documentation": {}
    },
    {
        "label": "IShippedSampleService",
        "importPath": "domain.shipment.ports.service",
        "description": "domain.shipment.ports.service",
        "isExtraImport": true,
        "detail": "domain.shipment.ports.service",
        "documentation": {}
    },
    {
        "label": "IShipmentService",
        "importPath": "domain.shipment.ports.service",
        "description": "domain.shipment.ports.service",
        "isExtraImport": true,
        "detail": "domain.shipment.ports.service",
        "documentation": {}
    },
    {
        "label": "IReferralLaboratoryService",
        "importPath": "domain.shipment.ports.service",
        "description": "domain.shipment.ports.service",
        "isExtraImport": true,
        "detail": "domain.shipment.ports.service",
        "documentation": {}
    },
    {
        "label": "IShipmentService",
        "importPath": "domain.shipment.ports.service",
        "description": "domain.shipment.ports.service",
        "isExtraImport": true,
        "detail": "domain.shipment.ports.service",
        "documentation": {}
    },
    {
        "label": "IShippedSampleService",
        "importPath": "domain.shipment.ports.service",
        "description": "domain.shipment.ports.service",
        "isExtraImport": true,
        "detail": "domain.shipment.ports.service",
        "documentation": {}
    },
    {
        "label": "IReferralLaboratoryService",
        "importPath": "domain.shipment.ports.service",
        "description": "domain.shipment.ports.service",
        "isExtraImport": true,
        "detail": "domain.shipment.ports.service",
        "documentation": {}
    },
    {
        "label": "IShippedSampleService",
        "importPath": "domain.shipment.ports.service",
        "description": "domain.shipment.ports.service",
        "isExtraImport": true,
        "detail": "domain.shipment.ports.service",
        "documentation": {}
    },
    {
        "label": "IShipmentService",
        "importPath": "domain.shipment.ports.service",
        "description": "domain.shipment.ports.service",
        "isExtraImport": true,
        "detail": "domain.shipment.ports.service",
        "documentation": {}
    },
    {
        "label": "IUserService",
        "importPath": "domain.user.ports.service",
        "description": "domain.user.ports.service",
        "isExtraImport": true,
        "detail": "domain.user.ports.service",
        "documentation": {}
    },
    {
        "label": "IUserService",
        "importPath": "domain.user.ports.service",
        "description": "domain.user.ports.service",
        "isExtraImport": true,
        "detail": "domain.user.ports.service",
        "documentation": {}
    },
    {
        "label": "IGroupService",
        "importPath": "domain.user.ports.service",
        "description": "domain.user.ports.service",
        "isExtraImport": true,
        "detail": "domain.user.ports.service",
        "documentation": {}
    },
    {
        "label": "IUserService",
        "importPath": "domain.user.ports.service",
        "description": "domain.user.ports.service",
        "isExtraImport": true,
        "detail": "domain.user.ports.service",
        "documentation": {}
    },
    {
        "label": "IUserService",
        "importPath": "domain.user.ports.service",
        "description": "domain.user.ports.service",
        "isExtraImport": true,
        "detail": "domain.user.ports.service",
        "documentation": {}
    },
    {
        "label": "IUserService",
        "importPath": "domain.user.ports.service",
        "description": "domain.user.ports.service",
        "isExtraImport": true,
        "detail": "domain.user.ports.service",
        "documentation": {}
    },
    {
        "label": "IGroupService",
        "importPath": "domain.user.ports.service",
        "description": "domain.user.ports.service",
        "isExtraImport": true,
        "detail": "domain.user.ports.service",
        "documentation": {}
    },
    {
        "label": "IPermissionService",
        "importPath": "domain.user.ports.service",
        "description": "domain.user.ports.service",
        "isExtraImport": true,
        "detail": "domain.user.ports.service",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "sanic",
        "description": "sanic",
        "isExtraImport": true,
        "detail": "sanic",
        "documentation": {}
    },
    {
        "label": "BundleResource",
        "importPath": "domain.iol.fhir.schema",
        "description": "domain.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "domain.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "PatientResource",
        "importPath": "domain.iol.fhir.schema",
        "description": "domain.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "domain.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "ServiceRequestResource",
        "importPath": "domain.iol.fhir.schema",
        "description": "domain.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "domain.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "DiagnosticReportResource",
        "importPath": "domain.iol.fhir.schema",
        "description": "domain.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "domain.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Reference",
        "importPath": "domain.iol.fhir.schema",
        "description": "domain.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "domain.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "BundleResource",
        "importPath": "domain.iol.fhir.schema",
        "description": "domain.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "domain.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "PatientResource",
        "importPath": "domain.iol.fhir.schema",
        "description": "domain.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "domain.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "ServiceRequestResource",
        "importPath": "domain.iol.fhir.schema",
        "description": "domain.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "domain.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "DiagnosticReportResource",
        "importPath": "domain.iol.fhir.schema",
        "description": "domain.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "domain.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Reference",
        "importPath": "domain.iol.fhir.schema",
        "description": "domain.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "domain.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Identifier",
        "importPath": "domain.iol.fhir.schema",
        "description": "domain.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "domain.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "SpecimenResource",
        "importPath": "domain.iol.fhir.schema",
        "description": "domain.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "domain.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "ShipmentCreate",
        "importPath": "domain.shipment.schemas",
        "description": "domain.shipment.schemas",
        "isExtraImport": true,
        "detail": "domain.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratory",
        "importPath": "domain.shipment.schemas",
        "description": "domain.shipment.schemas",
        "isExtraImport": true,
        "detail": "domain.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShippedSample",
        "importPath": "domain.shipment.schemas",
        "description": "domain.shipment.schemas",
        "isExtraImport": true,
        "detail": "domain.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "Shipment",
        "importPath": "domain.shipment.schemas",
        "description": "domain.shipment.schemas",
        "isExtraImport": true,
        "detail": "domain.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShipmentCreate",
        "importPath": "domain.shipment.schemas",
        "description": "domain.shipment.schemas",
        "isExtraImport": true,
        "detail": "domain.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShipmentUpdate",
        "importPath": "domain.shipment.schemas",
        "description": "domain.shipment.schemas",
        "isExtraImport": true,
        "detail": "domain.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratoryCreate",
        "importPath": "domain.shipment.schemas",
        "description": "domain.shipment.schemas",
        "isExtraImport": true,
        "detail": "domain.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratoryUpdate",
        "importPath": "domain.shipment.schemas",
        "description": "domain.shipment.schemas",
        "isExtraImport": true,
        "detail": "domain.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "shipment_states",
        "importPath": "felicity.apps.shipment.conf",
        "description": "felicity.apps.shipment.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.conf",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "felicity.apps.patient.models",
        "description": "felicity.apps.patient.models",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.models",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "felicity.apps.patient.models",
        "description": "felicity.apps.patient.models",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "felicity.apps.patient.models",
        "description": "felicity.apps.patient.models",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.models",
        "documentation": {}
    },
    {
        "label": "Identification",
        "importPath": "felicity.apps.patient.models",
        "description": "felicity.apps.patient.models",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "felicity.apps.patient.models",
        "description": "felicity.apps.patient.models",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.models",
        "documentation": {}
    },
    {
        "label": "httpx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "httpx",
        "description": "httpx",
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "IJobRepository",
        "importPath": "domain.job.ports.repository",
        "description": "domain.job.ports.repository",
        "isExtraImport": true,
        "detail": "domain.job.ports.repository",
        "documentation": {}
    },
    {
        "label": "IJobRepository",
        "importPath": "domain.job.ports.repository",
        "description": "domain.job.ports.repository",
        "isExtraImport": true,
        "detail": "domain.job.ports.repository",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "felicity.apps.job.entities",
        "description": "felicity.apps.job.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.job.entities",
        "documentation": {}
    },
    {
        "label": "AsyncIOScheduler",
        "importPath": "apscheduler.schedulers.asyncio",
        "description": "apscheduler.schedulers.asyncio",
        "isExtraImport": true,
        "detail": "apscheduler.schedulers.asyncio",
        "documentation": {}
    },
    {
        "label": "IntervalTrigger",
        "importPath": "apscheduler.triggers.interval",
        "description": "apscheduler.triggers.interval",
        "isExtraImport": true,
        "detail": "apscheduler.triggers.interval",
        "documentation": {}
    },
    {
        "label": "submit_results",
        "importPath": "felicity.apps.analysis.tasks",
        "description": "felicity.apps.analysis.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.tasks",
        "documentation": {}
    },
    {
        "label": "verify_results",
        "importPath": "felicity.apps.analysis.tasks",
        "description": "felicity.apps.analysis.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.tasks",
        "documentation": {}
    },
    {
        "label": "submit_results",
        "importPath": "felicity.apps.analysis.tasks",
        "description": "felicity.apps.analysis.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.tasks",
        "documentation": {}
    },
    {
        "label": "verify_results",
        "importPath": "felicity.apps.analysis.tasks",
        "description": "felicity.apps.analysis.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.tasks",
        "documentation": {}
    },
    {
        "label": "generate_report",
        "importPath": "felicity.apps.analytics.tasks",
        "description": "felicity.apps.analytics.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.analytics.tasks",
        "documentation": {}
    },
    {
        "label": "impress_results",
        "importPath": "felicity.apps.impress.sample.tasks",
        "description": "felicity.apps.impress.sample.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.sample.tasks",
        "documentation": {}
    },
    {
        "label": "prepare_for_impress",
        "importPath": "felicity.apps.impress.sample.tasks",
        "description": "felicity.apps.impress.sample.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.sample.tasks",
        "documentation": {}
    },
    {
        "label": "dispatch_shipment",
        "importPath": "felicity.apps.shipment.tasks",
        "description": "felicity.apps.shipment.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.tasks",
        "documentation": {}
    },
    {
        "label": "populate_shipment_manually",
        "importPath": "felicity.apps.shipment.tasks",
        "description": "felicity.apps.shipment.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.tasks",
        "documentation": {}
    },
    {
        "label": "process_shipped_report",
        "importPath": "felicity.apps.shipment.tasks",
        "description": "felicity.apps.shipment.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.tasks",
        "documentation": {}
    },
    {
        "label": "return_shipped_report",
        "importPath": "felicity.apps.shipment.tasks",
        "description": "felicity.apps.shipment.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.tasks",
        "documentation": {}
    },
    {
        "label": "shipment_receive",
        "importPath": "felicity.apps.shipment.tasks",
        "description": "felicity.apps.shipment.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.tasks",
        "documentation": {}
    },
    {
        "label": "populate_worksheet_plate",
        "importPath": "felicity.apps.worksheet.tasks",
        "description": "felicity.apps.worksheet.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.tasks",
        "documentation": {}
    },
    {
        "label": "populate_worksheet_plate_manually",
        "importPath": "felicity.apps.worksheet.tasks",
        "description": "felicity.apps.worksheet.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.tasks",
        "documentation": {}
    },
    {
        "label": "populate_worksheet_plate",
        "importPath": "felicity.apps.worksheet.tasks",
        "description": "felicity.apps.worksheet.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.tasks",
        "documentation": {}
    },
    {
        "label": "IMessageThreadRepository",
        "importPath": "domain.messaging.ports.repository",
        "description": "domain.messaging.ports.repository",
        "isExtraImport": true,
        "detail": "domain.messaging.ports.repository",
        "documentation": {}
    },
    {
        "label": "IMessageRepository",
        "importPath": "domain.messaging.ports.repository",
        "description": "domain.messaging.ports.repository",
        "isExtraImport": true,
        "detail": "domain.messaging.ports.repository",
        "documentation": {}
    },
    {
        "label": "IMessageThreadRepository",
        "importPath": "domain.messaging.ports.repository",
        "description": "domain.messaging.ports.repository",
        "isExtraImport": true,
        "detail": "domain.messaging.ports.repository",
        "documentation": {}
    },
    {
        "label": "IMessageRepository",
        "importPath": "domain.messaging.ports.repository",
        "description": "domain.messaging.ports.repository",
        "isExtraImport": true,
        "detail": "domain.messaging.ports.repository",
        "documentation": {}
    },
    {
        "label": "MessageThread",
        "importPath": "felicity.apps.messaging.entities",
        "description": "felicity.apps.messaging.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.messaging.entities",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "felicity.apps.messaging.entities",
        "description": "felicity.apps.messaging.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.messaging.entities",
        "documentation": {}
    },
    {
        "label": "IMessageThreadService",
        "importPath": "domain.messaging.ports.service",
        "description": "domain.messaging.ports.service",
        "isExtraImport": true,
        "detail": "domain.messaging.ports.service",
        "documentation": {}
    },
    {
        "label": "IMessageService",
        "importPath": "domain.messaging.ports.service",
        "description": "domain.messaging.ports.service",
        "isExtraImport": true,
        "detail": "domain.messaging.ports.service",
        "documentation": {}
    },
    {
        "label": "MessageThread",
        "importPath": "domain.messaging.schemas",
        "description": "domain.messaging.schemas",
        "isExtraImport": true,
        "detail": "domain.messaging.schemas",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "domain.messaging.schemas",
        "description": "domain.messaging.schemas",
        "isExtraImport": true,
        "detail": "domain.messaging.schemas",
        "documentation": {}
    },
    {
        "label": "MessageCreate",
        "importPath": "domain.messaging.schemas",
        "description": "domain.messaging.schemas",
        "isExtraImport": true,
        "detail": "domain.messaging.schemas",
        "documentation": {}
    },
    {
        "label": "MessageThreadCreate",
        "importPath": "domain.messaging.schemas",
        "description": "domain.messaging.schemas",
        "isExtraImport": true,
        "detail": "domain.messaging.schemas",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "postgresql",
        "importPath": "sqlalchemy.dialects",
        "description": "sqlalchemy.dialects",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects",
        "documentation": {}
    },
    {
        "label": "postgresql",
        "importPath": "sqlalchemy.dialects",
        "description": "sqlalchemy.dialects",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects",
        "documentation": {}
    },
    {
        "label": "postgresql",
        "importPath": "sqlalchemy.dialects",
        "description": "sqlalchemy.dialects",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.sqla_base",
        "description": "felicity.apps.sqla_base",
        "isExtraImport": true,
        "detail": "felicity.apps.sqla_base",
        "documentation": {}
    },
    {
        "label": "AsyncEngine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncAttrs",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncAttrs",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_scoped_session",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_sessionmaker",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncEngine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "INoticeRepository",
        "importPath": "domain.noticeboard.ports.repository",
        "description": "domain.noticeboard.ports.repository",
        "isExtraImport": true,
        "detail": "domain.noticeboard.ports.repository",
        "documentation": {}
    },
    {
        "label": "INoticeRepository",
        "importPath": "domain.noticeboard.ports.repository",
        "description": "domain.noticeboard.ports.repository",
        "isExtraImport": true,
        "detail": "domain.noticeboard.ports.repository",
        "documentation": {}
    },
    {
        "label": "Notice",
        "importPath": "felicity.apps.noticeboard.entities",
        "description": "felicity.apps.noticeboard.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.noticeboard.entities",
        "documentation": {}
    },
    {
        "label": "INoticeService",
        "importPath": "domain.noticeboard.ports.service",
        "description": "domain.noticeboard.ports.service",
        "isExtraImport": true,
        "detail": "domain.noticeboard.ports.service",
        "documentation": {}
    },
    {
        "label": "Notice",
        "importPath": "domain.noticeboard.schemas",
        "description": "domain.noticeboard.schemas",
        "isExtraImport": true,
        "detail": "domain.noticeboard.schemas",
        "documentation": {}
    },
    {
        "label": "NoticeCreate",
        "importPath": "domain.noticeboard.schemas",
        "description": "domain.noticeboard.schemas",
        "isExtraImport": true,
        "detail": "domain.noticeboard.schemas",
        "documentation": {}
    },
    {
        "label": "NoticeUpdate",
        "importPath": "domain.noticeboard.schemas",
        "description": "domain.noticeboard.schemas",
        "isExtraImport": true,
        "detail": "domain.noticeboard.schemas",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratorySetting",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Supplier",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Manufacturer",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Unit",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Laboratory",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "District",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Province",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Country",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryUpdate",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "SupplierCreate",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "SupplierUpdate",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "ManufacturerCreate",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "ManufacturerUpdate",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "DepartmentCreate",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "DepartmentUpdate",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "UnitCreate",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "UnitUpdate",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "DistrictCreate",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "DistrictUpdate",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "ProvinceCreate",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "ProvinceUpdate",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "CountryCreate",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "CountryUpdate",
        "importPath": "domain.setup.schemas",
        "description": "domain.setup.schemas",
        "isExtraImport": true,
        "detail": "domain.setup.schemas",
        "documentation": {}
    },
    {
        "label": "IActivityFeedRepository",
        "importPath": "domain.notification.ports.repository",
        "description": "domain.notification.ports.repository",
        "isExtraImport": true,
        "detail": "domain.notification.ports.repository",
        "documentation": {}
    },
    {
        "label": "IActivityStreamRepository",
        "importPath": "domain.notification.ports.repository",
        "description": "domain.notification.ports.repository",
        "isExtraImport": true,
        "detail": "domain.notification.ports.repository",
        "documentation": {}
    },
    {
        "label": "INotificationRepository",
        "importPath": "domain.notification.ports.repository",
        "description": "domain.notification.ports.repository",
        "isExtraImport": true,
        "detail": "domain.notification.ports.repository",
        "documentation": {}
    },
    {
        "label": "INotificationRepository",
        "importPath": "domain.notification.ports.repository",
        "description": "domain.notification.ports.repository",
        "isExtraImport": true,
        "detail": "domain.notification.ports.repository",
        "documentation": {}
    },
    {
        "label": "IActivityFeedRepository",
        "importPath": "domain.notification.ports.repository",
        "description": "domain.notification.ports.repository",
        "isExtraImport": true,
        "detail": "domain.notification.ports.repository",
        "documentation": {}
    },
    {
        "label": "IActivityStreamRepository",
        "importPath": "domain.notification.ports.repository",
        "description": "domain.notification.ports.repository",
        "isExtraImport": true,
        "detail": "domain.notification.ports.repository",
        "documentation": {}
    },
    {
        "label": "ActivityFeed",
        "importPath": "felicity.apps.notification.entities",
        "description": "felicity.apps.notification.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.entities",
        "documentation": {}
    },
    {
        "label": "ActivityStream",
        "importPath": "felicity.apps.notification.entities",
        "description": "felicity.apps.notification.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.entities",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "felicity.apps.notification.entities",
        "description": "felicity.apps.notification.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.entities",
        "documentation": {}
    },
    {
        "label": "channels",
        "importPath": "domain.notification.conf",
        "description": "domain.notification.conf",
        "isExtraImport": true,
        "detail": "domain.notification.conf",
        "documentation": {}
    },
    {
        "label": "ActivityFeed",
        "importPath": "domain.notification.schemas",
        "description": "domain.notification.schemas",
        "isExtraImport": true,
        "detail": "domain.notification.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityStream",
        "importPath": "domain.notification.schemas",
        "description": "domain.notification.schemas",
        "isExtraImport": true,
        "detail": "domain.notification.schemas",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "domain.notification.schemas",
        "description": "domain.notification.schemas",
        "isExtraImport": true,
        "detail": "domain.notification.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityStreamCreate",
        "importPath": "domain.notification.schemas",
        "description": "domain.notification.schemas",
        "isExtraImport": true,
        "detail": "domain.notification.schemas",
        "documentation": {}
    },
    {
        "label": "NotificationCreate",
        "importPath": "domain.notification.schemas",
        "description": "domain.notification.schemas",
        "isExtraImport": true,
        "detail": "domain.notification.schemas",
        "documentation": {}
    },
    {
        "label": "broadcast",
        "importPath": "domain.shared.channel",
        "description": "domain.shared.channel",
        "isExtraImport": true,
        "detail": "domain.shared.channel",
        "documentation": {}
    },
    {
        "label": "channels",
        "importPath": "felicity.apps.notification.conf",
        "description": "felicity.apps.notification.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.conf",
        "documentation": {}
    },
    {
        "label": "ActivityStreamCreate",
        "importPath": "felicity.apps.notification.schemas",
        "description": "felicity.apps.notification.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.schemas",
        "documentation": {}
    },
    {
        "label": "NotificationCreate",
        "importPath": "felicity.apps.notification.schemas",
        "description": "felicity.apps.notification.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.schemas",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "felicity.apps.client.models",
        "description": "felicity.apps.client.models",
        "isExtraImport": true,
        "detail": "felicity.apps.client.models",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "felicity.apps.client.models",
        "description": "felicity.apps.client.models",
        "isExtraImport": true,
        "detail": "felicity.apps.client.models",
        "documentation": {}
    },
    {
        "label": "ClientContact",
        "importPath": "felicity.apps.client.models",
        "description": "felicity.apps.client.models",
        "isExtraImport": true,
        "detail": "felicity.apps.client.models",
        "documentation": {}
    },
    {
        "label": "IPatientRepository",
        "importPath": "domain.patient.ports.repository",
        "description": "domain.patient.ports.repository",
        "isExtraImport": true,
        "detail": "domain.patient.ports.repository",
        "documentation": {}
    },
    {
        "label": "IIdentificationRepository",
        "importPath": "domain.patient.ports.repository",
        "description": "domain.patient.ports.repository",
        "isExtraImport": true,
        "detail": "domain.patient.ports.repository",
        "documentation": {}
    },
    {
        "label": "IPatientIdentificationRepository",
        "importPath": "domain.patient.ports.repository",
        "description": "domain.patient.ports.repository",
        "isExtraImport": true,
        "detail": "domain.patient.ports.repository",
        "documentation": {}
    },
    {
        "label": "IPatientRepository",
        "importPath": "domain.patient.ports.repository",
        "description": "domain.patient.ports.repository",
        "isExtraImport": true,
        "detail": "domain.patient.ports.repository",
        "documentation": {}
    },
    {
        "label": "IIdentificationRepository",
        "importPath": "domain.patient.ports.repository",
        "description": "domain.patient.ports.repository",
        "isExtraImport": true,
        "detail": "domain.patient.ports.repository",
        "documentation": {}
    },
    {
        "label": "IPatientIdentificationRepository",
        "importPath": "domain.patient.ports.repository",
        "description": "domain.patient.ports.repository",
        "isExtraImport": true,
        "detail": "domain.patient.ports.repository",
        "documentation": {}
    },
    {
        "label": "PageCursor",
        "importPath": "domain.shared.ports.paginator.cursor",
        "description": "domain.shared.ports.paginator.cursor",
        "isExtraImport": true,
        "detail": "domain.shared.ports.paginator.cursor",
        "documentation": {}
    },
    {
        "label": "PageCursor",
        "importPath": "domain.shared.ports.paginator.cursor",
        "description": "domain.shared.ports.paginator.cursor",
        "isExtraImport": true,
        "detail": "domain.shared.ports.paginator.cursor",
        "documentation": {}
    },
    {
        "label": "PageCursor",
        "importPath": "domain.shared.ports.paginator.cursor",
        "description": "domain.shared.ports.paginator.cursor",
        "isExtraImport": true,
        "detail": "domain.shared.ports.paginator.cursor",
        "documentation": {}
    },
    {
        "label": "PageCursor",
        "importPath": "domain.shared.ports.paginator.cursor",
        "description": "domain.shared.ports.paginator.cursor",
        "isExtraImport": true,
        "detail": "domain.shared.ports.paginator.cursor",
        "documentation": {}
    },
    {
        "label": "PageCursor",
        "importPath": "domain.shared.ports.paginator.cursor",
        "description": "domain.shared.ports.paginator.cursor",
        "isExtraImport": true,
        "detail": "domain.shared.ports.paginator.cursor",
        "documentation": {}
    },
    {
        "label": "PageCursor",
        "importPath": "domain.shared.ports.paginator.cursor",
        "description": "domain.shared.ports.paginator.cursor",
        "isExtraImport": true,
        "detail": "domain.shared.ports.paginator.cursor",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "felicity.apps.patient.entities",
        "description": "felicity.apps.patient.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.entities",
        "documentation": {}
    },
    {
        "label": "Identification",
        "importPath": "felicity.apps.patient.entities",
        "description": "felicity.apps.patient.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.entities",
        "documentation": {}
    },
    {
        "label": "PatientIdentification",
        "importPath": "felicity.apps.patient.entities",
        "description": "felicity.apps.patient.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.entities",
        "documentation": {}
    },
    {
        "label": "IdentificationIn",
        "importPath": "domain.patient.ports",
        "description": "domain.patient.ports",
        "isExtraImport": true,
        "detail": "domain.patient.ports",
        "documentation": {}
    },
    {
        "label": "Identification",
        "importPath": "domain.patient.schemas",
        "description": "domain.patient.schemas",
        "isExtraImport": true,
        "detail": "domain.patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientIdentification",
        "importPath": "domain.patient.schemas",
        "description": "domain.patient.schemas",
        "isExtraImport": true,
        "detail": "domain.patient.schemas",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "domain.patient.schemas",
        "description": "domain.patient.schemas",
        "isExtraImport": true,
        "detail": "domain.patient.schemas",
        "documentation": {}
    },
    {
        "label": "IdentificationCreate",
        "importPath": "domain.patient.schemas",
        "description": "domain.patient.schemas",
        "isExtraImport": true,
        "detail": "domain.patient.schemas",
        "documentation": {}
    },
    {
        "label": "IdentificationUpdate",
        "importPath": "domain.patient.schemas",
        "description": "domain.patient.schemas",
        "isExtraImport": true,
        "detail": "domain.patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientCreate",
        "importPath": "domain.patient.schemas",
        "description": "domain.patient.schemas",
        "isExtraImport": true,
        "detail": "domain.patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientIdentificationCreate",
        "importPath": "domain.patient.schemas",
        "description": "domain.patient.schemas",
        "isExtraImport": true,
        "detail": "domain.patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientUpdate",
        "importPath": "domain.patient.schemas",
        "description": "domain.patient.schemas",
        "isExtraImport": true,
        "detail": "domain.patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientIdentificationUpdate",
        "importPath": "domain.patient.schemas",
        "description": "domain.patient.schemas",
        "isExtraImport": true,
        "detail": "domain.patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientCreate",
        "importPath": "domain.patient.schemas",
        "description": "domain.patient.schemas",
        "isExtraImport": true,
        "detail": "domain.patient.schemas",
        "documentation": {}
    },
    {
        "label": "IReflexRuleRepository",
        "importPath": "domain.reflex.ports.repository",
        "description": "domain.reflex.ports.repository",
        "isExtraImport": true,
        "detail": "domain.reflex.ports.repository",
        "documentation": {}
    },
    {
        "label": "IReflexBrainAdditionRepository",
        "importPath": "domain.reflex.ports.repository",
        "description": "domain.reflex.ports.repository",
        "isExtraImport": true,
        "detail": "domain.reflex.ports.repository",
        "documentation": {}
    },
    {
        "label": "IReflexBrainFinalRepository",
        "importPath": "domain.reflex.ports.repository",
        "description": "domain.reflex.ports.repository",
        "isExtraImport": true,
        "detail": "domain.reflex.ports.repository",
        "documentation": {}
    },
    {
        "label": "IReflexBrainCriteriaRepository",
        "importPath": "domain.reflex.ports.repository",
        "description": "domain.reflex.ports.repository",
        "isExtraImport": true,
        "detail": "domain.reflex.ports.repository",
        "documentation": {}
    },
    {
        "label": "IReflexBrainRepository",
        "importPath": "domain.reflex.ports.repository",
        "description": "domain.reflex.ports.repository",
        "isExtraImport": true,
        "detail": "domain.reflex.ports.repository",
        "documentation": {}
    },
    {
        "label": "IReflexActionRepository",
        "importPath": "domain.reflex.ports.repository",
        "description": "domain.reflex.ports.repository",
        "isExtraImport": true,
        "detail": "domain.reflex.ports.repository",
        "documentation": {}
    },
    {
        "label": "IReflexRuleRepository",
        "importPath": "domain.reflex.ports.repository",
        "description": "domain.reflex.ports.repository",
        "isExtraImport": true,
        "detail": "domain.reflex.ports.repository",
        "documentation": {}
    },
    {
        "label": "IReflexActionRepository",
        "importPath": "domain.reflex.ports.repository",
        "description": "domain.reflex.ports.repository",
        "isExtraImport": true,
        "detail": "domain.reflex.ports.repository",
        "documentation": {}
    },
    {
        "label": "IReflexBrainRepository",
        "importPath": "domain.reflex.ports.repository",
        "description": "domain.reflex.ports.repository",
        "isExtraImport": true,
        "detail": "domain.reflex.ports.repository",
        "documentation": {}
    },
    {
        "label": "IReflexBrainCriteriaRepository",
        "importPath": "domain.reflex.ports.repository",
        "description": "domain.reflex.ports.repository",
        "isExtraImport": true,
        "detail": "domain.reflex.ports.repository",
        "documentation": {}
    },
    {
        "label": "IReflexBrainFinalRepository",
        "importPath": "domain.reflex.ports.repository",
        "description": "domain.reflex.ports.repository",
        "isExtraImport": true,
        "detail": "domain.reflex.ports.repository",
        "documentation": {}
    },
    {
        "label": "IReflexBrainAdditionRepository",
        "importPath": "domain.reflex.ports.repository",
        "description": "domain.reflex.ports.repository",
        "isExtraImport": true,
        "detail": "domain.reflex.ports.repository",
        "documentation": {}
    },
    {
        "label": "ReflexRule",
        "importPath": "felicity.apps.reflex.entities",
        "description": "felicity.apps.reflex.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.entities",
        "documentation": {}
    },
    {
        "label": "ReflexBrainAddition",
        "importPath": "felicity.apps.reflex.entities",
        "description": "felicity.apps.reflex.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.entities",
        "documentation": {}
    },
    {
        "label": "ReflexBrainFinal",
        "importPath": "felicity.apps.reflex.entities",
        "description": "felicity.apps.reflex.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.entities",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCriteria",
        "importPath": "felicity.apps.reflex.entities",
        "description": "felicity.apps.reflex.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.entities",
        "documentation": {}
    },
    {
        "label": "ReflexBrain",
        "importPath": "felicity.apps.reflex.entities",
        "description": "felicity.apps.reflex.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.entities",
        "documentation": {}
    },
    {
        "label": "ReflexAction",
        "importPath": "felicity.apps.reflex.entities",
        "description": "felicity.apps.reflex.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.entities",
        "documentation": {}
    },
    {
        "label": "ReflexCriteriaIn",
        "importPath": "domain.reflex.ports",
        "description": "domain.reflex.ports",
        "isExtraImport": true,
        "detail": "domain.reflex.ports",
        "documentation": {}
    },
    {
        "label": "ReflexAddNewIn",
        "importPath": "domain.reflex.ports",
        "description": "domain.reflex.ports",
        "isExtraImport": true,
        "detail": "domain.reflex.ports",
        "documentation": {}
    },
    {
        "label": "ReflexFinalIn",
        "importPath": "domain.reflex.ports",
        "description": "domain.reflex.ports",
        "isExtraImport": true,
        "detail": "domain.reflex.ports",
        "documentation": {}
    },
    {
        "label": "ReflexRule",
        "importPath": "domain.reflex.schemas",
        "description": "domain.reflex.schemas",
        "isExtraImport": true,
        "detail": "domain.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainAddition",
        "importPath": "domain.reflex.schemas",
        "description": "domain.reflex.schemas",
        "isExtraImport": true,
        "detail": "domain.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainFinal",
        "importPath": "domain.reflex.schemas",
        "description": "domain.reflex.schemas",
        "isExtraImport": true,
        "detail": "domain.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCriteria",
        "importPath": "domain.reflex.schemas",
        "description": "domain.reflex.schemas",
        "isExtraImport": true,
        "detail": "domain.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrain",
        "importPath": "domain.reflex.schemas",
        "description": "domain.reflex.schemas",
        "isExtraImport": true,
        "detail": "domain.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexAction",
        "importPath": "domain.reflex.schemas",
        "description": "domain.reflex.schemas",
        "isExtraImport": true,
        "detail": "domain.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexRuleCreate",
        "importPath": "domain.reflex.schemas",
        "description": "domain.reflex.schemas",
        "isExtraImport": true,
        "detail": "domain.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexRuleUpdate",
        "importPath": "domain.reflex.schemas",
        "description": "domain.reflex.schemas",
        "isExtraImport": true,
        "detail": "domain.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCreate",
        "importPath": "domain.reflex.schemas",
        "description": "domain.reflex.schemas",
        "isExtraImport": true,
        "detail": "domain.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainUpdate",
        "importPath": "domain.reflex.schemas",
        "description": "domain.reflex.schemas",
        "isExtraImport": true,
        "detail": "domain.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexActionCreate",
        "importPath": "domain.reflex.schemas",
        "description": "domain.reflex.schemas",
        "isExtraImport": true,
        "detail": "domain.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexActionUpdate",
        "importPath": "domain.reflex.schemas",
        "description": "domain.reflex.schemas",
        "isExtraImport": true,
        "detail": "domain.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCriteria",
        "importPath": "felicity.apps.reflex.models",
        "description": "felicity.apps.reflex.models",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.models",
        "documentation": {}
    },
    {
        "label": "ReflexAction",
        "importPath": "felicity.apps.reflex.models",
        "description": "felicity.apps.reflex.models",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.models",
        "documentation": {}
    },
    {
        "label": "ReflexBrain",
        "importPath": "felicity.apps.reflex.models",
        "description": "felicity.apps.reflex.models",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.models",
        "documentation": {}
    },
    {
        "label": "ReflexBrainAddition",
        "importPath": "felicity.apps.reflex.models",
        "description": "felicity.apps.reflex.models",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.models",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCriteria",
        "importPath": "felicity.apps.reflex.models",
        "description": "felicity.apps.reflex.models",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.models",
        "documentation": {}
    },
    {
        "label": "ReflexBrainFinal",
        "importPath": "felicity.apps.reflex.models",
        "description": "felicity.apps.reflex.models",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.models",
        "documentation": {}
    },
    {
        "label": "ReflexRule",
        "importPath": "felicity.apps.reflex.models",
        "description": "felicity.apps.reflex.models",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.models",
        "documentation": {}
    },
    {
        "label": "ICountryRepository",
        "importPath": "domain.setup.ports.repository",
        "description": "domain.setup.ports.repository",
        "isExtraImport": true,
        "detail": "domain.setup.ports.repository",
        "documentation": {}
    },
    {
        "label": "IProvinceRepository",
        "importPath": "domain.setup.ports.repository",
        "description": "domain.setup.ports.repository",
        "isExtraImport": true,
        "detail": "domain.setup.ports.repository",
        "documentation": {}
    },
    {
        "label": "IDistrictRepository",
        "importPath": "domain.setup.ports.repository",
        "description": "domain.setup.ports.repository",
        "isExtraImport": true,
        "detail": "domain.setup.ports.repository",
        "documentation": {}
    },
    {
        "label": "IDepartmentRepository",
        "importPath": "domain.setup.ports.repository",
        "description": "domain.setup.ports.repository",
        "isExtraImport": true,
        "detail": "domain.setup.ports.repository",
        "documentation": {}
    },
    {
        "label": "ILaboratoryRepository",
        "importPath": "domain.setup.ports.repository",
        "description": "domain.setup.ports.repository",
        "isExtraImport": true,
        "detail": "domain.setup.ports.repository",
        "documentation": {}
    },
    {
        "label": "ILaboratorySettingRepository",
        "importPath": "domain.setup.ports.repository",
        "description": "domain.setup.ports.repository",
        "isExtraImport": true,
        "detail": "domain.setup.ports.repository",
        "documentation": {}
    },
    {
        "label": "IManufacturerRepository",
        "importPath": "domain.setup.ports.repository",
        "description": "domain.setup.ports.repository",
        "isExtraImport": true,
        "detail": "domain.setup.ports.repository",
        "documentation": {}
    },
    {
        "label": "ISupplierRepository",
        "importPath": "domain.setup.ports.repository",
        "description": "domain.setup.ports.repository",
        "isExtraImport": true,
        "detail": "domain.setup.ports.repository",
        "documentation": {}
    },
    {
        "label": "IUnitRepository",
        "importPath": "domain.setup.ports.repository",
        "description": "domain.setup.ports.repository",
        "isExtraImport": true,
        "detail": "domain.setup.ports.repository",
        "documentation": {}
    },
    {
        "label": "ILaboratoryRepository",
        "importPath": "domain.setup.ports.repository",
        "description": "domain.setup.ports.repository",
        "isExtraImport": true,
        "detail": "domain.setup.ports.repository",
        "documentation": {}
    },
    {
        "label": "ICountryRepository",
        "importPath": "domain.setup.ports.repository",
        "description": "domain.setup.ports.repository",
        "isExtraImport": true,
        "detail": "domain.setup.ports.repository",
        "documentation": {}
    },
    {
        "label": "ILaboratorySettingRepository",
        "importPath": "domain.setup.ports.repository",
        "description": "domain.setup.ports.repository",
        "isExtraImport": true,
        "detail": "domain.setup.ports.repository",
        "documentation": {}
    },
    {
        "label": "ISupplierRepository",
        "importPath": "domain.setup.ports.repository",
        "description": "domain.setup.ports.repository",
        "isExtraImport": true,
        "detail": "domain.setup.ports.repository",
        "documentation": {}
    },
    {
        "label": "IManufacturerRepository",
        "importPath": "domain.setup.ports.repository",
        "description": "domain.setup.ports.repository",
        "isExtraImport": true,
        "detail": "domain.setup.ports.repository",
        "documentation": {}
    },
    {
        "label": "IDepartmentRepository",
        "importPath": "domain.setup.ports.repository",
        "description": "domain.setup.ports.repository",
        "isExtraImport": true,
        "detail": "domain.setup.ports.repository",
        "documentation": {}
    },
    {
        "label": "IUnitRepository",
        "importPath": "domain.setup.ports.repository",
        "description": "domain.setup.ports.repository",
        "isExtraImport": true,
        "detail": "domain.setup.ports.repository",
        "documentation": {}
    },
    {
        "label": "IDistrictRepository",
        "importPath": "domain.setup.ports.repository",
        "description": "domain.setup.ports.repository",
        "isExtraImport": true,
        "detail": "domain.setup.ports.repository",
        "documentation": {}
    },
    {
        "label": "IProvinceRepository",
        "importPath": "domain.setup.ports.repository",
        "description": "domain.setup.ports.repository",
        "isExtraImport": true,
        "detail": "domain.setup.ports.repository",
        "documentation": {}
    },
    {
        "label": "AsyncLRU",
        "importPath": "cache",
        "description": "cache",
        "isExtraImport": true,
        "detail": "cache",
        "documentation": {}
    },
    {
        "label": "IReferralLaboratoryRepository",
        "importPath": "domain.shipment.ports.repository",
        "description": "domain.shipment.ports.repository",
        "isExtraImport": true,
        "detail": "domain.shipment.ports.repository",
        "documentation": {}
    },
    {
        "label": "IShipmentRepository",
        "importPath": "domain.shipment.ports.repository",
        "description": "domain.shipment.ports.repository",
        "isExtraImport": true,
        "detail": "domain.shipment.ports.repository",
        "documentation": {}
    },
    {
        "label": "IShippedSampleRepository",
        "importPath": "domain.shipment.ports.repository",
        "description": "domain.shipment.ports.repository",
        "isExtraImport": true,
        "detail": "domain.shipment.ports.repository",
        "documentation": {}
    },
    {
        "label": "IReferralLaboratoryRepository",
        "importPath": "domain.shipment.ports.repository",
        "description": "domain.shipment.ports.repository",
        "isExtraImport": true,
        "detail": "domain.shipment.ports.repository",
        "documentation": {}
    },
    {
        "label": "IShippedSampleRepository",
        "importPath": "domain.shipment.ports.repository",
        "description": "domain.shipment.ports.repository",
        "isExtraImport": true,
        "detail": "domain.shipment.ports.repository",
        "documentation": {}
    },
    {
        "label": "IShipmentRepository",
        "importPath": "domain.shipment.ports.repository",
        "description": "domain.shipment.ports.repository",
        "isExtraImport": true,
        "detail": "domain.shipment.ports.repository",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratory",
        "importPath": "felicity.apps.shipment.entities",
        "description": "felicity.apps.shipment.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.entities",
        "documentation": {}
    },
    {
        "label": "Shipment",
        "importPath": "felicity.apps.shipment.entities",
        "description": "felicity.apps.shipment.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.entities",
        "documentation": {}
    },
    {
        "label": "ShippedSample",
        "importPath": "felicity.apps.shipment.entities",
        "description": "felicity.apps.shipment.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.entities",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "ManifetReport",
        "importPath": "domain.shipment.manifest",
        "description": "domain.shipment.manifest",
        "isExtraImport": true,
        "detail": "domain.shipment.manifest",
        "documentation": {}
    },
    {
        "label": "ReferenceSampleIn",
        "importPath": "domain.shipment.ports",
        "description": "domain.shipment.ports",
        "isExtraImport": true,
        "detail": "domain.shipment.ports",
        "documentation": {}
    },
    {
        "label": "post_data",
        "importPath": "felicity.apps.iol.relay",
        "description": "felicity.apps.iol.relay",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.relay",
        "documentation": {}
    },
    {
        "label": "post_data",
        "importPath": "felicity.apps.iol.relay",
        "description": "felicity.apps.iol.relay",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.relay",
        "documentation": {}
    },
    {
        "label": "gen_pdf_manifest",
        "importPath": "felicity.apps.impress.shipment.utils",
        "description": "felicity.apps.impress.shipment.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.shipment.utils",
        "documentation": {}
    },
    {
        "label": "PatientCreate",
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "IStoreRoomRepository",
        "importPath": "domain.storage.ports.repository",
        "description": "domain.storage.ports.repository",
        "isExtraImport": true,
        "detail": "domain.storage.ports.repository",
        "documentation": {}
    },
    {
        "label": "IStorageLocationRepository",
        "importPath": "domain.storage.ports.repository",
        "description": "domain.storage.ports.repository",
        "isExtraImport": true,
        "detail": "domain.storage.ports.repository",
        "documentation": {}
    },
    {
        "label": "IStorageSectionRepository",
        "importPath": "domain.storage.ports.repository",
        "description": "domain.storage.ports.repository",
        "isExtraImport": true,
        "detail": "domain.storage.ports.repository",
        "documentation": {}
    },
    {
        "label": "IStorageContainerRepository",
        "importPath": "domain.storage.ports.repository",
        "description": "domain.storage.ports.repository",
        "isExtraImport": true,
        "detail": "domain.storage.ports.repository",
        "documentation": {}
    },
    {
        "label": "IStoreRoomRepository",
        "importPath": "domain.storage.ports.repository",
        "description": "domain.storage.ports.repository",
        "isExtraImport": true,
        "detail": "domain.storage.ports.repository",
        "documentation": {}
    },
    {
        "label": "IStorageLocationRepository",
        "importPath": "domain.storage.ports.repository",
        "description": "domain.storage.ports.repository",
        "isExtraImport": true,
        "detail": "domain.storage.ports.repository",
        "documentation": {}
    },
    {
        "label": "IStorageSectionRepository",
        "importPath": "domain.storage.ports.repository",
        "description": "domain.storage.ports.repository",
        "isExtraImport": true,
        "detail": "domain.storage.ports.repository",
        "documentation": {}
    },
    {
        "label": "IStorageContainerRepository",
        "importPath": "domain.storage.ports.repository",
        "description": "domain.storage.ports.repository",
        "isExtraImport": true,
        "detail": "domain.storage.ports.repository",
        "documentation": {}
    },
    {
        "label": "StoreRoom",
        "importPath": "felicity.apps.storage.entities",
        "description": "felicity.apps.storage.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.entities",
        "documentation": {}
    },
    {
        "label": "StorageLocation",
        "importPath": "felicity.apps.storage.entities",
        "description": "felicity.apps.storage.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.entities",
        "documentation": {}
    },
    {
        "label": "StorageSection",
        "importPath": "felicity.apps.storage.entities",
        "description": "felicity.apps.storage.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.entities",
        "documentation": {}
    },
    {
        "label": "StorageContainer",
        "importPath": "felicity.apps.storage.entities",
        "description": "felicity.apps.storage.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.entities",
        "documentation": {}
    },
    {
        "label": "StoreSampleIn",
        "importPath": "domain.storage.ports",
        "description": "domain.storage.ports",
        "isExtraImport": true,
        "detail": "domain.storage.ports",
        "documentation": {}
    },
    {
        "label": "IStoreRoomService",
        "importPath": "domain.storage.ports.service",
        "description": "domain.storage.ports.service",
        "isExtraImport": true,
        "detail": "domain.storage.ports.service",
        "documentation": {}
    },
    {
        "label": "IStorageLocationService",
        "importPath": "domain.storage.ports.service",
        "description": "domain.storage.ports.service",
        "isExtraImport": true,
        "detail": "domain.storage.ports.service",
        "documentation": {}
    },
    {
        "label": "IStorageSectionService",
        "importPath": "domain.storage.ports.service",
        "description": "domain.storage.ports.service",
        "isExtraImport": true,
        "detail": "domain.storage.ports.service",
        "documentation": {}
    },
    {
        "label": "IStorageContainerService",
        "importPath": "domain.storage.ports.service",
        "description": "domain.storage.ports.service",
        "isExtraImport": true,
        "detail": "domain.storage.ports.service",
        "documentation": {}
    },
    {
        "label": "StoreRoom",
        "importPath": "domain.storage.schemas",
        "description": "domain.storage.schemas",
        "isExtraImport": true,
        "detail": "domain.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageLocation",
        "importPath": "domain.storage.schemas",
        "description": "domain.storage.schemas",
        "isExtraImport": true,
        "detail": "domain.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageSection",
        "importPath": "domain.storage.schemas",
        "description": "domain.storage.schemas",
        "isExtraImport": true,
        "detail": "domain.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageContainer",
        "importPath": "domain.storage.schemas",
        "description": "domain.storage.schemas",
        "isExtraImport": true,
        "detail": "domain.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StoreRoomCreate",
        "importPath": "domain.storage.schemas",
        "description": "domain.storage.schemas",
        "isExtraImport": true,
        "detail": "domain.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StoreRoomUpdate",
        "importPath": "domain.storage.schemas",
        "description": "domain.storage.schemas",
        "isExtraImport": true,
        "detail": "domain.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageLocationCreate",
        "importPath": "domain.storage.schemas",
        "description": "domain.storage.schemas",
        "isExtraImport": true,
        "detail": "domain.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageLocationUpdate",
        "importPath": "domain.storage.schemas",
        "description": "domain.storage.schemas",
        "isExtraImport": true,
        "detail": "domain.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageSectionCreate",
        "importPath": "domain.storage.schemas",
        "description": "domain.storage.schemas",
        "isExtraImport": true,
        "detail": "domain.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageSectionUpdate",
        "importPath": "domain.storage.schemas",
        "description": "domain.storage.schemas",
        "isExtraImport": true,
        "detail": "domain.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageContainerCreate",
        "importPath": "domain.storage.schemas",
        "description": "domain.storage.schemas",
        "isExtraImport": true,
        "detail": "domain.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageContainerUpdate",
        "importPath": "domain.storage.schemas",
        "description": "domain.storage.schemas",
        "isExtraImport": true,
        "detail": "domain.storage.schemas",
        "documentation": {}
    },
    {
        "label": "send_new_account_email",
        "importPath": "felicity.utils.email.email",
        "description": "felicity.utils.email.email",
        "isExtraImport": true,
        "detail": "felicity.utils.email.email",
        "documentation": {}
    },
    {
        "label": "send_reset_password_email",
        "importPath": "felicity.utils.email.email",
        "description": "felicity.utils.email.email",
        "isExtraImport": true,
        "detail": "felicity.utils.email.email",
        "documentation": {}
    },
    {
        "label": "IUserRepository",
        "importPath": "domain.user.ports.repository",
        "description": "domain.user.ports.repository",
        "isExtraImport": true,
        "detail": "domain.user.ports.repository",
        "documentation": {}
    },
    {
        "label": "IPermissionRepository",
        "importPath": "domain.user.ports.repository",
        "description": "domain.user.ports.repository",
        "isExtraImport": true,
        "detail": "domain.user.ports.repository",
        "documentation": {}
    },
    {
        "label": "IGroupRepository",
        "importPath": "domain.user.ports.repository",
        "description": "domain.user.ports.repository",
        "isExtraImport": true,
        "detail": "domain.user.ports.repository",
        "documentation": {}
    },
    {
        "label": "IUserRepository",
        "importPath": "domain.user.ports.repository",
        "description": "domain.user.ports.repository",
        "isExtraImport": true,
        "detail": "domain.user.ports.repository",
        "documentation": {}
    },
    {
        "label": "IGroupRepository",
        "importPath": "domain.user.ports.repository",
        "description": "domain.user.ports.repository",
        "isExtraImport": true,
        "detail": "domain.user.ports.repository",
        "documentation": {}
    },
    {
        "label": "IUserRepository",
        "importPath": "domain.user.ports.repository",
        "description": "domain.user.ports.repository",
        "isExtraImport": true,
        "detail": "domain.user.ports.repository",
        "documentation": {}
    },
    {
        "label": "IUserRepository",
        "importPath": "domain.user.ports.repository",
        "description": "domain.user.ports.repository",
        "isExtraImport": true,
        "detail": "domain.user.ports.repository",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "core.security",
        "description": "core.security",
        "isExtraImport": true,
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "core.security",
        "description": "core.security",
        "isExtraImport": true,
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "generate_password_reset_token",
        "importPath": "core.security",
        "description": "core.security",
        "isExtraImport": true,
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "importPath": "core.security",
        "description": "core.security",
        "isExtraImport": true,
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "password_check",
        "importPath": "core.security",
        "description": "core.security",
        "isExtraImport": true,
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "importPath": "core.security",
        "description": "core.security",
        "isExtraImport": true,
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "core.security",
        "description": "core.security",
        "isExtraImport": true,
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "core.security",
        "description": "core.security",
        "isExtraImport": true,
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "generate_password_reset_token",
        "importPath": "core.security",
        "description": "core.security",
        "isExtraImport": true,
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "verify_password_reset_token",
        "importPath": "core.security",
        "description": "core.security",
        "isExtraImport": true,
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "password_similarity",
        "importPath": "core.security",
        "description": "core.security",
        "isExtraImport": true,
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "password_check",
        "importPath": "core.security",
        "description": "core.security",
        "isExtraImport": true,
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.setting",
        "description": "core.setting",
        "isExtraImport": true,
        "detail": "core.setting",
        "documentation": {}
    },
    {
        "label": "is_valid_email",
        "importPath": "domain.shared.utils.validator",
        "description": "domain.shared.utils.validator",
        "isExtraImport": true,
        "detail": "domain.shared.utils.validator",
        "documentation": {}
    },
    {
        "label": "UserType",
        "importPath": "domain.user.conf",
        "description": "domain.user.conf",
        "isExtraImport": true,
        "detail": "domain.user.conf",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.apps.analysis.entities",
        "description": "felicity.apps.analysis.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities",
        "documentation": {}
    },
    {
        "label": "IWorkSheetRepository",
        "importPath": "domain.worksheet.ports.repository",
        "description": "domain.worksheet.ports.repository",
        "isExtraImport": true,
        "detail": "domain.worksheet.ports.repository",
        "documentation": {}
    },
    {
        "label": "IWorkSheetTemplateRepository",
        "importPath": "domain.worksheet.ports.repository",
        "description": "domain.worksheet.ports.repository",
        "isExtraImport": true,
        "detail": "domain.worksheet.ports.repository",
        "documentation": {}
    },
    {
        "label": "IWorkSheetRepository",
        "importPath": "domain.worksheet.ports.repository",
        "description": "domain.worksheet.ports.repository",
        "isExtraImport": true,
        "detail": "domain.worksheet.ports.repository",
        "documentation": {}
    },
    {
        "label": "IWorkSheetTemplateRepository",
        "importPath": "domain.worksheet.ports.repository",
        "description": "domain.worksheet.ports.repository",
        "isExtraImport": true,
        "detail": "domain.worksheet.ports.repository",
        "documentation": {}
    },
    {
        "label": "WorkSheet",
        "importPath": "felicity.apps.worksheet.entities",
        "description": "felicity.apps.worksheet.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.entities",
        "documentation": {}
    },
    {
        "label": "WorkSheetTemplate",
        "importPath": "felicity.apps.worksheet.entities",
        "description": "felicity.apps.worksheet.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.entities",
        "documentation": {}
    },
    {
        "label": "ReservedIn",
        "importPath": "domain.worksheet.ports",
        "description": "domain.worksheet.ports",
        "isExtraImport": true,
        "detail": "domain.worksheet.ports",
        "documentation": {}
    },
    {
        "label": "WorkSheet",
        "importPath": "domain.worksheet.schemas",
        "description": "domain.worksheet.schemas",
        "isExtraImport": true,
        "detail": "domain.worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WSTemplate",
        "importPath": "domain.worksheet.schemas",
        "description": "domain.worksheet.schemas",
        "isExtraImport": true,
        "detail": "domain.worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WorkSheetCreate",
        "importPath": "domain.worksheet.schemas",
        "description": "domain.worksheet.schemas",
        "isExtraImport": true,
        "detail": "domain.worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WorkSheetUpdate",
        "importPath": "domain.worksheet.schemas",
        "description": "domain.worksheet.schemas",
        "isExtraImport": true,
        "detail": "domain.worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WSTemplateCreate",
        "importPath": "domain.worksheet.schemas",
        "description": "domain.worksheet.schemas",
        "isExtraImport": true,
        "detail": "domain.worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WSTemplateUpdate",
        "importPath": "domain.worksheet.schemas",
        "description": "domain.worksheet.schemas",
        "isExtraImport": true,
        "detail": "domain.worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "init_user_events",
        "importPath": "felicity.apps.user.events",
        "description": "felicity.apps.user.events",
        "isExtraImport": true,
        "detail": "felicity.apps.user.events",
        "documentation": {}
    },
    {
        "label": "ipaddress",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ipaddress",
        "description": "ipaddress",
        "detail": "ipaddress",
        "documentation": {}
    },
    {
        "label": "gethostbyname",
        "importPath": "socket",
        "description": "socket",
        "isExtraImport": true,
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "gethostname",
        "importPath": "socket",
        "description": "socket",
        "isExtraImport": true,
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "getenv_boolean",
        "importPath": "felicity.utils.env",
        "description": "felicity.utils.env",
        "isExtraImport": true,
        "detail": "felicity.utils.env",
        "documentation": {}
    },
    {
        "label": "getenv_value",
        "importPath": "felicity.utils.env",
        "description": "felicity.utils.env",
        "isExtraImport": true,
        "detail": "felicity.utils.env",
        "documentation": {}
    },
    {
        "label": "format_exception",
        "importPath": "traceback",
        "description": "traceback",
        "isExtraImport": true,
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "run_in_threadpool",
        "importPath": "starlette.concurrency",
        "description": "starlette.concurrency",
        "isExtraImport": true,
        "detail": "starlette.concurrency",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "SequenceMatcher",
        "importPath": "difflib",
        "description": "difflib",
        "isExtraImport": true,
        "detail": "difflib",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "abc",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "AliasedClass",
        "importPath": "sqlalchemy.orm.util",
        "description": "sqlalchemy.orm.util",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm.util",
        "documentation": {}
    },
    {
        "label": "Hazard",
        "importPath": "felicity.apps.inventory.models",
        "description": "felicity.apps.inventory.models",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.models",
        "documentation": {}
    },
    {
        "label": "StockAdjustment",
        "importPath": "felicity.apps.inventory.models",
        "description": "felicity.apps.inventory.models",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.models",
        "documentation": {}
    },
    {
        "label": "StockCategory",
        "importPath": "felicity.apps.inventory.models",
        "description": "felicity.apps.inventory.models",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.models",
        "documentation": {}
    },
    {
        "label": "StockItem",
        "importPath": "felicity.apps.inventory.models",
        "description": "felicity.apps.inventory.models",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.models",
        "documentation": {}
    },
    {
        "label": "StockItemVariant",
        "importPath": "felicity.apps.inventory.models",
        "description": "felicity.apps.inventory.models",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.models",
        "documentation": {}
    },
    {
        "label": "StockLot",
        "importPath": "felicity.apps.inventory.models",
        "description": "felicity.apps.inventory.models",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.models",
        "documentation": {}
    },
    {
        "label": "StockOrder",
        "importPath": "felicity.apps.inventory.models",
        "description": "felicity.apps.inventory.models",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.models",
        "documentation": {}
    },
    {
        "label": "StockOrderProduct",
        "importPath": "felicity.apps.inventory.models",
        "description": "felicity.apps.inventory.models",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.models",
        "documentation": {}
    },
    {
        "label": "StockProductInventory",
        "importPath": "felicity.apps.inventory.models",
        "description": "felicity.apps.inventory.models",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.models",
        "documentation": {}
    },
    {
        "label": "StockReceipt",
        "importPath": "felicity.apps.inventory.models",
        "description": "felicity.apps.inventory.models",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.models",
        "documentation": {}
    },
    {
        "label": "StockUnit",
        "importPath": "felicity.apps.inventory.models",
        "description": "felicity.apps.inventory.models",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "felicity.apps.messaging.models",
        "description": "felicity.apps.messaging.models",
        "isExtraImport": true,
        "detail": "felicity.apps.messaging.models",
        "documentation": {}
    },
    {
        "label": "Notice",
        "importPath": "felicity.apps.noticeboard.models",
        "description": "felicity.apps.noticeboard.models",
        "isExtraImport": true,
        "detail": "felicity.apps.noticeboard.models",
        "documentation": {}
    },
    {
        "label": "bindparam",
        "importPath": "sqlalchemy.sql.expression",
        "description": "sqlalchemy.sql.expression",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.expression",
        "documentation": {}
    },
    {
        "label": "bindparam",
        "importPath": "sqlalchemy.sql.expression",
        "description": "sqlalchemy.sql.expression",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.expression",
        "documentation": {}
    },
    {
        "label": "ActiveRecordMixinAsync",
        "importPath": "sqlalchemy_mixins",
        "description": "sqlalchemy_mixins",
        "isExtraImport": true,
        "detail": "sqlalchemy_mixins",
        "documentation": {}
    },
    {
        "label": "AllFeaturesMixin",
        "importPath": "sqlalchemy_mixins",
        "description": "sqlalchemy_mixins",
        "isExtraImport": true,
        "detail": "sqlalchemy_mixins",
        "documentation": {}
    },
    {
        "label": "smart_query",
        "importPath": "sqlalchemy_mixins",
        "description": "sqlalchemy_mixins",
        "isExtraImport": true,
        "detail": "sqlalchemy_mixins",
        "documentation": {}
    },
    {
        "label": "get_flake_uid",
        "importPath": "felicity.core.uid_gen",
        "description": "felicity.core.uid_gen",
        "isExtraImport": true,
        "detail": "felicity.core.uid_gen",
        "documentation": {}
    },
    {
        "label": "get_flake_uid",
        "importPath": "core.uid_gen",
        "description": "core.uid_gen",
        "isExtraImport": true,
        "detail": "core.uid_gen",
        "documentation": {}
    },
    {
        "label": "QueryBuilder",
        "importPath": "felicity.database.queryset",
        "description": "felicity.database.queryset",
        "isExtraImport": true,
        "detail": "felicity.database.queryset",
        "documentation": {}
    },
    {
        "label": "settable_attributes",
        "importPath": "felicity.database.queryset",
        "description": "felicity.database.queryset",
        "isExtraImport": true,
        "detail": "felicity.database.queryset",
        "documentation": {}
    },
    {
        "label": "smart_query",
        "importPath": "felicity.database.queryset",
        "description": "felicity.database.queryset",
        "isExtraImport": true,
        "detail": "felicity.database.queryset",
        "documentation": {}
    },
    {
        "label": "after_log",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "before_log",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "retry",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "stop_after_attempt",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "wait_fixed",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "trace",
        "importPath": "opentelemetry",
        "description": "opentelemetry",
        "isExtraImport": true,
        "detail": "opentelemetry",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "opentelemetry.exporter.otlp.proto.grpc.trace_exporter",
        "description": "opentelemetry.exporter.otlp.proto.grpc.trace_exporter",
        "isExtraImport": true,
        "detail": "opentelemetry.exporter.otlp.proto.grpc.trace_exporter",
        "documentation": {}
    },
    {
        "label": "FastAPIInstrumentor",
        "importPath": "opentelemetry.instrumentation.fastapi",
        "description": "opentelemetry.instrumentation.fastapi",
        "isExtraImport": true,
        "detail": "opentelemetry.instrumentation.fastapi",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyInstrumentor",
        "importPath": "opentelemetry.instrumentation.sqlalchemy",
        "description": "opentelemetry.instrumentation.sqlalchemy",
        "isExtraImport": true,
        "detail": "opentelemetry.instrumentation.sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "opentelemetry.sdk.resources",
        "description": "opentelemetry.sdk.resources",
        "isExtraImport": true,
        "detail": "opentelemetry.sdk.resources",
        "documentation": {}
    },
    {
        "label": "TracerProvider",
        "importPath": "opentelemetry.sdk.trace",
        "description": "opentelemetry.sdk.trace",
        "isExtraImport": true,
        "detail": "opentelemetry.sdk.trace",
        "documentation": {}
    },
    {
        "label": "SimpleSpanProcessor",
        "importPath": "opentelemetry.sdk.trace.export",
        "description": "opentelemetry.sdk.trace.export",
        "isExtraImport": true,
        "detail": "opentelemetry.sdk.trace.export",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "starlette.middleware.cors",
        "description": "starlette.middleware.cors",
        "isExtraImport": true,
        "detail": "starlette.middleware.cors",
        "documentation": {}
    },
    {
        "label": "OpenTelemetryExtension",
        "importPath": "strawberry.extensions.tracing",
        "description": "strawberry.extensions.tracing",
        "isExtraImport": true,
        "detail": "strawberry.extensions.tracing",
        "documentation": {}
    },
    {
        "label": "GRAPHQL_TRANSPORT_WS_PROTOCOL",
        "importPath": "strawberry.subscriptions",
        "description": "strawberry.subscriptions",
        "isExtraImport": true,
        "detail": "strawberry.subscriptions",
        "documentation": {}
    },
    {
        "label": "GRAPHQL_WS_PROTOCOL",
        "importPath": "strawberry.subscriptions",
        "description": "strawberry.subscriptions",
        "isExtraImport": true,
        "detail": "strawberry.subscriptions",
        "documentation": {}
    },
    {
        "label": "schema",
        "importPath": "felicity.api.gql.schema",
        "description": "felicity.api.gql.schema",
        "isExtraImport": true,
        "detail": "felicity.api.gql.schema",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "felicity.api.rest.api_v1",
        "description": "felicity.api.rest.api_v1",
        "isExtraImport": true,
        "detail": "felicity.api.rest.api_v1",
        "documentation": {}
    },
    {
        "label": "observe_events",
        "importPath": "felicity.apps.events",
        "description": "felicity.apps.events",
        "isExtraImport": true,
        "detail": "felicity.apps.events",
        "documentation": {}
    },
    {
        "label": "felicity_workforce_init",
        "importPath": "felicity.apps.job.sched",
        "description": "felicity.apps.job.sched",
        "isExtraImport": true,
        "detail": "felicity.apps.job.sched",
        "documentation": {}
    },
    {
        "label": "setup_webapp",
        "importPath": "felicity.views",
        "description": "felicity.views",
        "isExtraImport": true,
        "detail": "felicity.views",
        "documentation": {}
    },
    {
        "label": "DBModel",
        "importPath": "felicity.database.base",
        "description": "felicity.database.base",
        "isExtraImport": true,
        "detail": "felicity.database.base",
        "documentation": {}
    },
    {
        "label": "multiprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "pytest_asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest_asyncio",
        "description": "pytest_asyncio",
        "detail": "pytest_asyncio",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "add_auth_mutation",
        "importPath": "tests.integration.utils.user",
        "description": "tests.integration.utils.user",
        "isExtraImport": true,
        "detail": "tests.integration.utils.user",
        "documentation": {}
    },
    {
        "label": "add_user_mutation",
        "importPath": "tests.integration.utils.user",
        "description": "tests.integration.utils.user",
        "isExtraImport": true,
        "detail": "tests.integration.utils.user",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "tests.integration.utils.user",
        "description": "tests.integration.utils.user",
        "isExtraImport": true,
        "detail": "tests.integration.utils.user",
        "documentation": {}
    },
    {
        "label": "make_username",
        "importPath": "tests.integration.utils.user",
        "description": "tests.integration.utils.user",
        "isExtraImport": true,
        "detail": "tests.integration.utils.user",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "tests.integration.utils.user",
        "description": "tests.integration.utils.user",
        "isExtraImport": true,
        "detail": "tests.integration.utils.user",
        "documentation": {}
    },
    {
        "label": "make_username",
        "importPath": "tests.integration.utils.user",
        "description": "tests.integration.utils.user",
        "isExtraImport": true,
        "detail": "tests.integration.utils.user",
        "documentation": {}
    },
    {
        "label": "genders",
        "importPath": "felicity.apps.patient.conf",
        "description": "felicity.apps.patient.conf",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.conf",
        "documentation": {}
    },
    {
        "label": "create_super_user",
        "importPath": "lims",
        "description": "lims",
        "isExtraImport": true,
        "detail": "lims",
        "documentation": {}
    },
    {
        "label": "check_db_conn_status",
        "importPath": "lims",
        "description": "lims",
        "isExtraImport": true,
        "detail": "lims",
        "documentation": {}
    },
    {
        "label": "check_db_conn_status",
        "importPath": "lims",
        "description": "lims",
        "isExtraImport": true,
        "detail": "lims",
        "documentation": {}
    },
    {
        "label": "felicity",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "passlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "passlib",
        "description": "passlib",
        "detail": "passlib",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "mock",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "UserService",
        "importPath": "domain.user.services",
        "description": "domain.user.services",
        "isExtraImport": true,
        "detail": "domain.user.services",
        "documentation": {}
    },
    {
        "label": "UserService",
        "importPath": "domain.user.services",
        "description": "domain.user.services",
        "isExtraImport": true,
        "detail": "domain.user.services",
        "documentation": {}
    },
    {
        "label": "AsyncMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "emails",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "emails",
        "description": "emails",
        "detail": "emails",
        "documentation": {}
    },
    {
        "label": "JinjaTemplate",
        "importPath": "emails.template",
        "description": "emails.template",
        "isExtraImport": true,
        "detail": "emails.template",
        "documentation": {}
    },
    {
        "label": "dir_util",
        "importPath": "distutils",
        "description": "distutils",
        "isExtraImport": true,
        "detail": "distutils",
        "documentation": {}
    },
    {
        "label": "GraphQLSyntaxError",
        "importPath": "graphql.error",
        "description": "graphql.error",
        "isExtraImport": true,
        "detail": "graphql.error",
        "documentation": {}
    },
    {
        "label": "factory",
        "importPath": "felicity.lims",
        "description": "felicity.lims",
        "isExtraImport": true,
        "detail": "felicity.lims",
        "documentation": {}
    },
    {
        "label": "celery_app",
        "importPath": "felicity.core.celery_app",
        "description": "felicity.core.celery_app",
        "isExtraImport": true,
        "detail": "felicity.core.celery_app",
        "documentation": {}
    },
    {
        "label": "scipy.optimize",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_category",
        "description": "felicity.api.gql.analysis.mutations.analysis_category",
        "peekOfCode": "class AnalysisCategoryInputType:\n    name: str\n    department_uid: str | None = None\n    description: str | None = None\n    active: bool | None = True\n@strawberry.mutation(permission_classes=[IsAuthenticated])\nasync def create_analysis_category(\n    info, payload: AnalysisCategoryInputType\n) -> AnalysisCategoryResponse:\n    is_authenticated, felicity_user = await auth_from_info(info)",
        "detail": "felicity.api.gql.analysis.mutations.analysis_category",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_category",
        "description": "felicity.api.gql.analysis.mutations.analysis_category",
        "peekOfCode": "logger = logging.getLogger(__name__)\nAnalysisCategoryResponse = strawberry.union(\n    \"AnalysisCategoryResponse\",\n    (a_types.AnalysisCategoryType, OperationError),  # noqa\n    description=\"Union of possible outcomes when adding a new notice\",\n)\n@strawberry.input\nclass AnalysisCategoryInputType:\n    name: str\n    department_uid: str | None = None",
        "detail": "felicity.api.gql.analysis.mutations.analysis_category",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_category",
        "description": "felicity.api.gql.analysis.mutations.analysis_category",
        "peekOfCode": "AnalysisCategoryResponse = strawberry.union(\n    \"AnalysisCategoryResponse\",\n    (a_types.AnalysisCategoryType, OperationError),  # noqa\n    description=\"Union of possible outcomes when adding a new notice\",\n)\n@strawberry.input\nclass AnalysisCategoryInputType:\n    name: str\n    department_uid: str | None = None\n    description: str | None = None",
        "detail": "felicity.api.gql.analysis.mutations.analysis_category",
        "documentation": {}
    },
    {
        "label": "AnalysisInterimInput",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_other",
        "description": "felicity.api.gql.analysis.mutations.analysis_other",
        "peekOfCode": "class AnalysisInterimInput:\n    key: int\n    value: str\n    analysis_uid: str\n    instrument_uid: str\n@strawberry.input\nclass AnalysisCorrectionFactorInput:\n    factor: float\n    analysis_uid: str\n    instrument_uid: str",
        "detail": "felicity.api.gql.analysis.mutations.analysis_other",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactorInput",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_other",
        "description": "felicity.api.gql.analysis.mutations.analysis_other",
        "peekOfCode": "class AnalysisCorrectionFactorInput:\n    factor: float\n    analysis_uid: str\n    instrument_uid: str\n    method_uid: str\n@strawberry.input\nclass AnalysisDetectionLimitInput:\n    lower_limit: float\n    upper_limit: float\n    analysis_uid: str",
        "detail": "felicity.api.gql.analysis.mutations.analysis_other",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimitInput",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_other",
        "description": "felicity.api.gql.analysis.mutations.analysis_other",
        "peekOfCode": "class AnalysisDetectionLimitInput:\n    lower_limit: float\n    upper_limit: float\n    analysis_uid: str\n    instrument_uid: str\n    method_uid: str\n@strawberry.input\nclass AnalysisUncertaintyInput:\n    min: float\n    max: float",
        "detail": "felicity.api.gql.analysis.mutations.analysis_other",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertaintyInput",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_other",
        "description": "felicity.api.gql.analysis.mutations.analysis_other",
        "peekOfCode": "class AnalysisUncertaintyInput:\n    min: float\n    max: float\n    value: float\n    analysis_uid: str\n    instrument_uid: str\n    method_uid: str\n@strawberry.input\nclass AnalysisSpecificationInput:\n    analysis_uid: str",
        "detail": "felicity.api.gql.analysis.mutations.analysis_other",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecificationInput",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_other",
        "description": "felicity.api.gql.analysis.mutations.analysis_other",
        "peekOfCode": "class AnalysisSpecificationInput:\n    analysis_uid: str\n    min: float | None = None\n    max: float | None = None\n    min_warn: float | None = None\n    max_warn: float | None = None\n    min_report: str | None = None\n    max_report: str | None = None\n    warn_values: str | None = None\n    warn_report: str | None = None",
        "detail": "felicity.api.gql.analysis.mutations.analysis_other",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_other",
        "description": "felicity.api.gql.analysis.mutations.analysis_other",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@strawberry.input\nclass AnalysisInterimInput:\n    key: int\n    value: str\n    analysis_uid: str\n    instrument_uid: str\n@strawberry.input\nclass AnalysisCorrectionFactorInput:\n    factor: float",
        "detail": "felicity.api.gql.analysis.mutations.analysis_other",
        "documentation": {}
    },
    {
        "label": "AnalysisInterimResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_other",
        "description": "felicity.api.gql.analysis.mutations.analysis_other",
        "peekOfCode": "AnalysisInterimResponse = strawberry.union(\n    \"AnalysisInterimResponse\",\n    (a_types.AnalysisInterimType, OperationError),  # noqa\n    description=\"\",\n)\nAnalysisCorrectionFactorResponse = strawberry.union(\n    \"AnalysisCorrectionFactorResponse\",\n    (a_types.AnalysisCorrectionFactorType, OperationError),  # noqa\n    description=\"\",\n)",
        "detail": "felicity.api.gql.analysis.mutations.analysis_other",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactorResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_other",
        "description": "felicity.api.gql.analysis.mutations.analysis_other",
        "peekOfCode": "AnalysisCorrectionFactorResponse = strawberry.union(\n    \"AnalysisCorrectionFactorResponse\",\n    (a_types.AnalysisCorrectionFactorType, OperationError),  # noqa\n    description=\"\",\n)\nAnalysisDetectionLimitResponse = strawberry.union(\n    \"AnalysisDetectionLimitResponse\",\n    (a_types.AnalysisDetectionLimitType, OperationError),  # noqa\n    description=\"\",\n)",
        "detail": "felicity.api.gql.analysis.mutations.analysis_other",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimitResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_other",
        "description": "felicity.api.gql.analysis.mutations.analysis_other",
        "peekOfCode": "AnalysisDetectionLimitResponse = strawberry.union(\n    \"AnalysisDetectionLimitResponse\",\n    (a_types.AnalysisDetectionLimitType, OperationError),  # noqa\n    description=\"\",\n)\nAnalysisUncertaintyResponse = strawberry.union(\n    \"AnalysisUncertaintyResponse\",\n    (a_types.AnalysisUncertaintyType, OperationError),  # noqa\n    description=\"\",\n)",
        "detail": "felicity.api.gql.analysis.mutations.analysis_other",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertaintyResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_other",
        "description": "felicity.api.gql.analysis.mutations.analysis_other",
        "peekOfCode": "AnalysisUncertaintyResponse = strawberry.union(\n    \"AnalysisUncertaintyResponse\",\n    (a_types.AnalysisUncertaintyType, OperationError),  # noqa\n    description=\"\",\n)\nAnalysisSpecificationResponse = strawberry.union(\n    \"AnalysisSpecificationResponse\",\n    (a_types.AnalysisSpecificationType, OperationError),  # noqa\n    description=\"\",\n)",
        "detail": "felicity.api.gql.analysis.mutations.analysis_other",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecificationResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_other",
        "description": "felicity.api.gql.analysis.mutations.analysis_other",
        "peekOfCode": "AnalysisSpecificationResponse = strawberry.union(\n    \"AnalysisSpecificationResponse\",\n    (a_types.AnalysisSpecificationType, OperationError),  # noqa\n    description=\"\",\n)\n@strawberry.mutation(permission_classes=[IsAuthenticated])\nasync def create_analysis_interim(\n    info, payload: AnalysisInterimInput\n) -> AnalysisInterimResponse:\n    is_authenticated, felicity_user = await auth_from_info(info)",
        "detail": "felicity.api.gql.analysis.mutations.analysis_other",
        "documentation": {}
    },
    {
        "label": "ProfileInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_profile",
        "description": "felicity.api.gql.analysis.mutations.analysis_profile",
        "peekOfCode": "class ProfileInputType:\n    name: str\n    description: str = \"\"\n    department_uid: str | None = None\n    sample_types: Optional[List[str]] = field(default_factory=list)\n    services: Optional[List[str]] = field(default_factory=list)\n    keyword: str | None = None\n    active: bool | None = True\nAnalysisTemplateResponse = strawberry.union(\n    \"AnalysisTemplateResponse\",",
        "detail": "felicity.api.gql.analysis.mutations.analysis_profile",
        "documentation": {}
    },
    {
        "label": "AnalysisTemplateInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_profile",
        "description": "felicity.api.gql.analysis.mutations.analysis_profile",
        "peekOfCode": "class AnalysisTemplateInputType:\n    name: str\n    description: str = \"\"\n    department_uid: str | None = None\n    services: Optional[List[str]] = field(default_factory=list)\nProfileMappingResponse = strawberry.union(\n    \"ProfileMappingResponse\",\n    (a_types.ProfileMappingType, OperationError),  # noqa\n    description=\"Union of possible outcomes when adding a new notice\",\n)",
        "detail": "felicity.api.gql.analysis.mutations.analysis_profile",
        "documentation": {}
    },
    {
        "label": "ProfileMappingInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_profile",
        "description": "felicity.api.gql.analysis.mutations.analysis_profile",
        "peekOfCode": "class ProfileMappingInputType:\n    profile_uid: str\n    coding_standard_uid: str\n    name: str\n    code: str\n    description: str | None = None\n@strawberry.mutation(permission_classes=[IsAuthenticated])\nasync def create_profile(info, payload: ProfileInputType) -> AnalysisProfileResponse:\n    is_authenticated, felicity_user = await auth_from_info(info)\n    verify_user_auth(",
        "detail": "felicity.api.gql.analysis.mutations.analysis_profile",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_profile",
        "description": "felicity.api.gql.analysis.mutations.analysis_profile",
        "peekOfCode": "logger = logging.getLogger(__name__)\nAnalysisProfileResponse = strawberry.union(\n    \"AnalysisProfileResponse\",\n    (a_types.ProfileType, OperationError),  # noqa\n    description=\"Union of possible outcomes when adding a new notice\",\n)\n@strawberry.input\nclass ProfileInputType:\n    name: str\n    description: str = \"\"",
        "detail": "felicity.api.gql.analysis.mutations.analysis_profile",
        "documentation": {}
    },
    {
        "label": "AnalysisProfileResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_profile",
        "description": "felicity.api.gql.analysis.mutations.analysis_profile",
        "peekOfCode": "AnalysisProfileResponse = strawberry.union(\n    \"AnalysisProfileResponse\",\n    (a_types.ProfileType, OperationError),  # noqa\n    description=\"Union of possible outcomes when adding a new notice\",\n)\n@strawberry.input\nclass ProfileInputType:\n    name: str\n    description: str = \"\"\n    department_uid: str | None = None",
        "detail": "felicity.api.gql.analysis.mutations.analysis_profile",
        "documentation": {}
    },
    {
        "label": "AnalysisTemplateResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_profile",
        "description": "felicity.api.gql.analysis.mutations.analysis_profile",
        "peekOfCode": "AnalysisTemplateResponse = strawberry.union(\n    \"AnalysisTemplateResponse\",\n    (a_types.AnalysisTemplateType, OperationError),  # noqa\n    description=\"Union of possible outcomes\",\n)\n@strawberry.input\nclass AnalysisTemplateInputType:\n    name: str\n    description: str = \"\"\n    department_uid: str | None = None",
        "detail": "felicity.api.gql.analysis.mutations.analysis_profile",
        "documentation": {}
    },
    {
        "label": "ProfileMappingResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_profile",
        "description": "felicity.api.gql.analysis.mutations.analysis_profile",
        "peekOfCode": "ProfileMappingResponse = strawberry.union(\n    \"ProfileMappingResponse\",\n    (a_types.ProfileMappingType, OperationError),  # noqa\n    description=\"Union of possible outcomes when adding a new notice\",\n)\n@strawberry.input\nclass ProfileMappingInputType:\n    profile_uid: str\n    coding_standard_uid: str\n    name: str",
        "detail": "felicity.api.gql.analysis.mutations.analysis_profile",
        "documentation": {}
    },
    {
        "label": "ARSampleInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_request",
        "description": "felicity.api.gql.analysis.mutations.analysis_request",
        "peekOfCode": "class ARSampleInputType:\n    sample_type: str\n    profiles: List[str]\n    analyses: List[str]\n    date_collected: str\n@strawberry.input\nclass SampleRejectInputType:\n    uid: str\n    reasons: List[str]\n    other: str | None = \"\"",
        "detail": "felicity.api.gql.analysis.mutations.analysis_request",
        "documentation": {}
    },
    {
        "label": "SampleRejectInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_request",
        "description": "felicity.api.gql.analysis.mutations.analysis_request",
        "peekOfCode": "class SampleRejectInputType:\n    uid: str\n    reasons: List[str]\n    other: str | None = \"\"\n@strawberry.input\nclass SamplePublishInputType:\n    uid: str\n    action: str = \"\"\nAnalysisRequestResponse = strawberry.union(\n    \"AnalysisRequestResponse\",",
        "detail": "felicity.api.gql.analysis.mutations.analysis_request",
        "documentation": {}
    },
    {
        "label": "SamplePublishInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_request",
        "description": "felicity.api.gql.analysis.mutations.analysis_request",
        "peekOfCode": "class SamplePublishInputType:\n    uid: str\n    action: str = \"\"\nAnalysisRequestResponse = strawberry.union(\n    \"AnalysisRequestResponse\",\n    (a_types.AnalysisRequestWithSamples, OperationError),  # noqa\n    description=\"Union of possible outcomes when adding/editing analysis \" \"requests \",\n)\n@strawberry.type\nclass ResultedSampleListingType:",
        "detail": "felicity.api.gql.analysis.mutations.analysis_request",
        "documentation": {}
    },
    {
        "label": "ResultedSampleListingType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_request",
        "description": "felicity.api.gql.analysis.mutations.analysis_request",
        "peekOfCode": "class ResultedSampleListingType:\n    samples: List[r_types.SamplesWithResults]\nResultedSampleActionResponse = strawberry.union(\n    \"ResultedSampleActionResponse\",\n    (ResultedSampleListingType, OperationError),  # noqa\n    description=\"Union of possible outcomes when actioning samples\",\n)\n@strawberry.type\nclass SampleListingType:\n    samples: List[r_types.SampleType]",
        "detail": "felicity.api.gql.analysis.mutations.analysis_request",
        "documentation": {}
    },
    {
        "label": "SampleListingType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_request",
        "description": "felicity.api.gql.analysis.mutations.analysis_request",
        "peekOfCode": "class SampleListingType:\n    samples: List[r_types.SampleType]\nSampleActionResponse = strawberry.union(\n    \"SampleActionResponse\",\n    (SampleListingType, OperationError),  # noqa\n    description=\"Union of possible outcomes when actioning samples\",\n)\n@strawberry.input\nclass AnalysisRequestInputType:\n    patient_uid: str",
        "detail": "felicity.api.gql.analysis.mutations.analysis_request",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_request",
        "description": "felicity.api.gql.analysis.mutations.analysis_request",
        "peekOfCode": "class AnalysisRequestInputType:\n    patient_uid: str\n    client_uid: str\n    client_contact_uid: str\n    clinicalData: str | None = \"\"\n    samples: List[ARSampleInputType] = None\n    client_request_id: str | None = None\n    internal_use: bool | None = False\n    priority: int = priorities.NORMAL\n@strawberry.input",
        "detail": "felicity.api.gql.analysis.mutations.analysis_request",
        "documentation": {}
    },
    {
        "label": "ManageAnalysisInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_request",
        "description": "felicity.api.gql.analysis.mutations.analysis_request",
        "peekOfCode": "class ManageAnalysisInputType:\n    cancel: List[str] = None\n    add: List[str] = None\n@strawberry.mutation(permission_classes=[IsAuthenticated])\nasync def create_analysis_request(\n        info, payload: AnalysisRequestInputType\n) -> AnalysisRequestResponse:\n    logger.info(\"Received request to create analysis request\")\n    is_authenticated, felicity_user = await auth_from_info(info)\n    verify_user_auth(",
        "detail": "felicity.api.gql.analysis.mutations.analysis_request",
        "documentation": {}
    },
    {
        "label": "streamer",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_request",
        "description": "felicity.api.gql.analysis.mutations.analysis_request",
        "peekOfCode": "streamer = FelicityStreamer()\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n@strawberry.input\nclass ARSampleInputType:\n    sample_type: str\n    profiles: List[str]\n    analyses: List[str]\n    date_collected: str\n@strawberry.input",
        "detail": "felicity.api.gql.analysis.mutations.analysis_request",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_request",
        "description": "felicity.api.gql.analysis.mutations.analysis_request",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@strawberry.input\nclass ARSampleInputType:\n    sample_type: str\n    profiles: List[str]\n    analyses: List[str]\n    date_collected: str\n@strawberry.input\nclass SampleRejectInputType:\n    uid: str",
        "detail": "felicity.api.gql.analysis.mutations.analysis_request",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_request",
        "description": "felicity.api.gql.analysis.mutations.analysis_request",
        "peekOfCode": "AnalysisRequestResponse = strawberry.union(\n    \"AnalysisRequestResponse\",\n    (a_types.AnalysisRequestWithSamples, OperationError),  # noqa\n    description=\"Union of possible outcomes when adding/editing analysis \" \"requests \",\n)\n@strawberry.type\nclass ResultedSampleListingType:\n    samples: List[r_types.SamplesWithResults]\nResultedSampleActionResponse = strawberry.union(\n    \"ResultedSampleActionResponse\",",
        "detail": "felicity.api.gql.analysis.mutations.analysis_request",
        "documentation": {}
    },
    {
        "label": "ResultedSampleActionResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_request",
        "description": "felicity.api.gql.analysis.mutations.analysis_request",
        "peekOfCode": "ResultedSampleActionResponse = strawberry.union(\n    \"ResultedSampleActionResponse\",\n    (ResultedSampleListingType, OperationError),  # noqa\n    description=\"Union of possible outcomes when actioning samples\",\n)\n@strawberry.type\nclass SampleListingType:\n    samples: List[r_types.SampleType]\nSampleActionResponse = strawberry.union(\n    \"SampleActionResponse\",",
        "detail": "felicity.api.gql.analysis.mutations.analysis_request",
        "documentation": {}
    },
    {
        "label": "SampleActionResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_request",
        "description": "felicity.api.gql.analysis.mutations.analysis_request",
        "peekOfCode": "SampleActionResponse = strawberry.union(\n    \"SampleActionResponse\",\n    (SampleListingType, OperationError),  # noqa\n    description=\"Union of possible outcomes when actioning samples\",\n)\n@strawberry.input\nclass AnalysisRequestInputType:\n    patient_uid: str\n    client_uid: str\n    client_contact_uid: str",
        "detail": "felicity.api.gql.analysis.mutations.analysis_request",
        "documentation": {}
    },
    {
        "label": "ARResultInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_result",
        "description": "felicity.api.gql.analysis.mutations.analysis_result",
        "peekOfCode": "class ARResultInputType:\n    uid: str\n    result: str\n    method_uid: str\n    laboratory_instrument_uid: str\n    reportable: bool | None = True\n@strawberry.type\nclass ResultListingType:\n    results: List[r_types.AnalysisResultType]\nAnalysisResultResponse = strawberry.union(",
        "detail": "felicity.api.gql.analysis.mutations.analysis_result",
        "documentation": {}
    },
    {
        "label": "ResultListingType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_result",
        "description": "felicity.api.gql.analysis.mutations.analysis_result",
        "peekOfCode": "class ResultListingType:\n    results: List[r_types.AnalysisResultType]\nAnalysisResultResponse = strawberry.union(\n    \"AnalysisResultResponse\",\n    (ResultListingType, OperationError),  # noqa\n    description=\"Union of possible outcomes when actioning samples\",\n)\nAnalysisResultOperationResponse = strawberry.union(\n    \"AnalysisResultSubmitResponse\",\n    (OperationSuccess, OperationError),  # noqa",
        "detail": "felicity.api.gql.analysis.mutations.analysis_result",
        "documentation": {}
    },
    {
        "label": "streamer",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_result",
        "description": "felicity.api.gql.analysis.mutations.analysis_result",
        "peekOfCode": "streamer = FelicityStreamer()\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n@strawberry.input\nclass ARResultInputType:\n    uid: str\n    result: str\n    method_uid: str\n    laboratory_instrument_uid: str\n    reportable: bool | None = True",
        "detail": "felicity.api.gql.analysis.mutations.analysis_result",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_result",
        "description": "felicity.api.gql.analysis.mutations.analysis_result",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@strawberry.input\nclass ARResultInputType:\n    uid: str\n    result: str\n    method_uid: str\n    laboratory_instrument_uid: str\n    reportable: bool | None = True\n@strawberry.type\nclass ResultListingType:",
        "detail": "felicity.api.gql.analysis.mutations.analysis_result",
        "documentation": {}
    },
    {
        "label": "AnalysisResultResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_result",
        "description": "felicity.api.gql.analysis.mutations.analysis_result",
        "peekOfCode": "AnalysisResultResponse = strawberry.union(\n    \"AnalysisResultResponse\",\n    (ResultListingType, OperationError),  # noqa\n    description=\"Union of possible outcomes when actioning samples\",\n)\nAnalysisResultOperationResponse = strawberry.union(\n    \"AnalysisResultSubmitResponse\",\n    (OperationSuccess, OperationError),  # noqa\n    description=\"Union of possible outcomes when submitting/verifying results\",\n)",
        "detail": "felicity.api.gql.analysis.mutations.analysis_result",
        "documentation": {}
    },
    {
        "label": "AnalysisResultOperationResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_result",
        "description": "felicity.api.gql.analysis.mutations.analysis_result",
        "peekOfCode": "AnalysisResultOperationResponse = strawberry.union(\n    \"AnalysisResultSubmitResponse\",\n    (OperationSuccess, OperationError),  # noqa\n    description=\"Union of possible outcomes when submitting/verifying results\",\n)\n@strawberry.mutation(permission_classes=[IsAuthenticated])\nasync def submit_analysis_results(\n        info,\n        analysis_results: List[ARResultInputType],\n        source_object: str,",
        "detail": "felicity.api.gql.analysis.mutations.analysis_result",
        "documentation": {}
    },
    {
        "label": "AnalysisInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_service",
        "description": "felicity.api.gql.analysis.mutations.analysis_service",
        "peekOfCode": "class AnalysisInputType:\n    name: str\n    keyword: str\n    sort_key: int\n    description: str = \"\"\n    department_uid: str | None = None\n    sample_types: Optional[List[str]] = field(default_factory=list)\n    methods: Optional[List[str]] = field(default_factory=list)\n    category_uid: str | None = None\n    unit_uid: str | None = None",
        "detail": "felicity.api.gql.analysis.mutations.analysis_service",
        "documentation": {}
    },
    {
        "label": "AnalysisMappingInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_service",
        "description": "felicity.api.gql.analysis.mutations.analysis_service",
        "peekOfCode": "class AnalysisMappingInputType:\n    analysis_uid: str\n    coding_standard_uid: str\n    name: str\n    code: str\n    description: str | None = None\n@strawberry.mutation(permission_classes=[IsAuthenticated])\nasync def create_analysis(info, payload: AnalysisInputType) -> ProfilesServiceResponse:\n    is_authenticated, felicity_user = await auth_from_info(info)\n    verify_user_auth(",
        "detail": "felicity.api.gql.analysis.mutations.analysis_service",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_service",
        "description": "felicity.api.gql.analysis.mutations.analysis_service",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@strawberry.input\nclass AnalysisInputType:\n    name: str\n    keyword: str\n    sort_key: int\n    description: str = \"\"\n    department_uid: str | None = None\n    sample_types: Optional[List[str]] = field(default_factory=list)\n    methods: Optional[List[str]] = field(default_factory=list)",
        "detail": "felicity.api.gql.analysis.mutations.analysis_service",
        "documentation": {}
    },
    {
        "label": "ProfilesServiceResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_service",
        "description": "felicity.api.gql.analysis.mutations.analysis_service",
        "peekOfCode": "ProfilesServiceResponse = strawberry.union(\n    \"ProfilesServiceResponse\",\n    (a_types.AnalysisWithProfiles, OperationError),  # noqa\n    description=\"\",\n)\nAnalysisMappingResponse = strawberry.union(\n    \"AnalysisMappingResponse\",\n    (a_types.AnalysisMappingType, OperationError),  # noqa\n    description=\"Union of possible outcomes when adding a new notice\",\n)",
        "detail": "felicity.api.gql.analysis.mutations.analysis_service",
        "documentation": {}
    },
    {
        "label": "AnalysisMappingResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.analysis_service",
        "description": "felicity.api.gql.analysis.mutations.analysis_service",
        "peekOfCode": "AnalysisMappingResponse = strawberry.union(\n    \"AnalysisMappingResponse\",\n    (a_types.AnalysisMappingType, OperationError),  # noqa\n    description=\"Union of possible outcomes when adding a new notice\",\n)\n@strawberry.input\nclass AnalysisMappingInputType:\n    analysis_uid: str\n    coding_standard_uid: str\n    name: str",
        "detail": "felicity.api.gql.analysis.mutations.analysis_service",
        "documentation": {}
    },
    {
        "label": "CodingStandardInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.coding_standard",
        "description": "felicity.api.gql.analysis.mutations.coding_standard",
        "peekOfCode": "class CodingStandardInputType:\n    name: str\n    description: str | None = \"\"\nCodingStandardResponse = strawberry.union(\n    \"CodingStandardResponse\",\n    (a_types.CodingStandardType, OperationError),  # noqa\n    description=\"\",\n)\n@strawberry.mutation(permission_classes=[IsAuthenticated])\nasync def create_coding_standard(",
        "detail": "felicity.api.gql.analysis.mutations.coding_standard",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.coding_standard",
        "description": "felicity.api.gql.analysis.mutations.coding_standard",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@strawberry.input\nclass CodingStandardInputType:\n    name: str\n    description: str | None = \"\"\nCodingStandardResponse = strawberry.union(\n    \"CodingStandardResponse\",\n    (a_types.CodingStandardType, OperationError),  # noqa\n    description=\"\",\n)",
        "detail": "felicity.api.gql.analysis.mutations.coding_standard",
        "documentation": {}
    },
    {
        "label": "CodingStandardResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.coding_standard",
        "description": "felicity.api.gql.analysis.mutations.coding_standard",
        "peekOfCode": "CodingStandardResponse = strawberry.union(\n    \"CodingStandardResponse\",\n    (a_types.CodingStandardType, OperationError),  # noqa\n    description=\"\",\n)\n@strawberry.mutation(permission_classes=[IsAuthenticated])\nasync def create_coding_standard(\n    info, payload: CodingStandardInputType\n) -> CodingStandardResponse:\n    is_authenticated, felicity_user = await auth_from_info(info)",
        "detail": "felicity.api.gql.analysis.mutations.coding_standard",
        "documentation": {}
    },
    {
        "label": "QCSetInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.quality_control",
        "description": "felicity.api.gql.analysis.mutations.quality_control",
        "peekOfCode": "class QCSetInputType:\n    qcTemplateUid: str | None\n    qcLevels: List[str]\n    analysisProfiles: List[str]\n    analysisServices: List[str]\n@strawberry.type\nclass CreateQCSetData:\n    qc_sets: List[r_types.QCSetWithSamples]\n@strawberry.input\nclass QCTemplateInputType:",
        "detail": "felicity.api.gql.analysis.mutations.quality_control",
        "documentation": {}
    },
    {
        "label": "CreateQCSetData",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.quality_control",
        "description": "felicity.api.gql.analysis.mutations.quality_control",
        "peekOfCode": "class CreateQCSetData:\n    qc_sets: List[r_types.QCSetWithSamples]\n@strawberry.input\nclass QCTemplateInputType:\n    name: str\n    description: str = \"\"\n    departments: Optional[List[str]] = None\n    levels: List[str] = None\nQCSetResponse = strawberry.union(\n    \"QCSetResponse\", (CreateQCSetData, OperationError), description=\"\"  # noqa",
        "detail": "felicity.api.gql.analysis.mutations.quality_control",
        "documentation": {}
    },
    {
        "label": "QCTemplateInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.quality_control",
        "description": "felicity.api.gql.analysis.mutations.quality_control",
        "peekOfCode": "class QCTemplateInputType:\n    name: str\n    description: str = \"\"\n    departments: Optional[List[str]] = None\n    levels: List[str] = None\nQCSetResponse = strawberry.union(\n    \"QCSetResponse\", (CreateQCSetData, OperationError), description=\"\"  # noqa\n)\nQCLevelResponse = strawberry.union(\n    \"QCLevelResponse\", (a_types.QCLevelType, OperationError), description=\"\"  # noqa",
        "detail": "felicity.api.gql.analysis.mutations.quality_control",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.quality_control",
        "description": "felicity.api.gql.analysis.mutations.quality_control",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@strawberry.input\nclass QCSetInputType:\n    qcTemplateUid: str | None\n    qcLevels: List[str]\n    analysisProfiles: List[str]\n    analysisServices: List[str]\n@strawberry.type\nclass CreateQCSetData:\n    qc_sets: List[r_types.QCSetWithSamples]",
        "detail": "felicity.api.gql.analysis.mutations.quality_control",
        "documentation": {}
    },
    {
        "label": "QCSetResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.quality_control",
        "description": "felicity.api.gql.analysis.mutations.quality_control",
        "peekOfCode": "QCSetResponse = strawberry.union(\n    \"QCSetResponse\", (CreateQCSetData, OperationError), description=\"\"  # noqa\n)\nQCLevelResponse = strawberry.union(\n    \"QCLevelResponse\", (a_types.QCLevelType, OperationError), description=\"\"  # noqa\n)\nQCTemplateResponse = strawberry.union(\n    \"QCTemplateResponse\",\n    (a_types.QCTemplateType, OperationError),  # noqa\n    description=\"\",",
        "detail": "felicity.api.gql.analysis.mutations.quality_control",
        "documentation": {}
    },
    {
        "label": "QCLevelResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.quality_control",
        "description": "felicity.api.gql.analysis.mutations.quality_control",
        "peekOfCode": "QCLevelResponse = strawberry.union(\n    \"QCLevelResponse\", (a_types.QCLevelType, OperationError), description=\"\"  # noqa\n)\nQCTemplateResponse = strawberry.union(\n    \"QCTemplateResponse\",\n    (a_types.QCTemplateType, OperationError),  # noqa\n    description=\"\",\n)\n@strawberry.mutation(permission_classes=[IsAuthenticated])\nasync def create_QC_set(info, samples: List[QCSetInputType]) -> QCSetResponse:",
        "detail": "felicity.api.gql.analysis.mutations.quality_control",
        "documentation": {}
    },
    {
        "label": "QCTemplateResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.quality_control",
        "description": "felicity.api.gql.analysis.mutations.quality_control",
        "peekOfCode": "QCTemplateResponse = strawberry.union(\n    \"QCTemplateResponse\",\n    (a_types.QCTemplateType, OperationError),  # noqa\n    description=\"\",\n)\n@strawberry.mutation(permission_classes=[IsAuthenticated])\nasync def create_QC_set(info, samples: List[QCSetInputType]) -> QCSetResponse:\n    is_authenticated, felicity_user = await auth_from_info(info)\n    verify_user_auth(\n        is_authenticated, felicity_user, \"Only Authenticated user can create qc-sets\"",
        "detail": "felicity.api.gql.analysis.mutations.quality_control",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.rejection_reason",
        "description": "felicity.api.gql.analysis.mutations.rejection_reason",
        "peekOfCode": "logger = logging.getLogger(__name__)\nRejectionReasonResponse = strawberry.union(\n    \"RejectionReasonResponse\",\n    (a_types.RejectionReasonType, OperationError),  # noqa\n    description=\"\",\n)\n@strawberry.mutation(permission_classes=[IsAuthenticated])\nasync def create_rejection_reason(info, reason: str) -> RejectionReasonResponse:\n    is_authenticated, felicity_user = await auth_from_info(info)\n    verify_user_auth(",
        "detail": "felicity.api.gql.analysis.mutations.rejection_reason",
        "documentation": {}
    },
    {
        "label": "RejectionReasonResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.rejection_reason",
        "description": "felicity.api.gql.analysis.mutations.rejection_reason",
        "peekOfCode": "RejectionReasonResponse = strawberry.union(\n    \"RejectionReasonResponse\",\n    (a_types.RejectionReasonType, OperationError),  # noqa\n    description=\"\",\n)\n@strawberry.mutation(permission_classes=[IsAuthenticated])\nasync def create_rejection_reason(info, reason: str) -> RejectionReasonResponse:\n    is_authenticated, felicity_user = await auth_from_info(info)\n    verify_user_auth(\n        is_authenticated,",
        "detail": "felicity.api.gql.analysis.mutations.rejection_reason",
        "documentation": {}
    },
    {
        "label": "ResultOptionInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.result_option",
        "description": "felicity.api.gql.analysis.mutations.result_option",
        "peekOfCode": "class ResultOptionInputType:\n    analysis_uid: str\n    sample_types: Optional[List[str]] = field(default_factory=list)\n    option_key: int\n    value: str\nResultOptionResponse = strawberry.union(\n    \"ResultOptionResponse\",\n    (a_types.ResultOptionType, OperationError),  # noqa\n    description=\"\",\n)",
        "detail": "felicity.api.gql.analysis.mutations.result_option",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.result_option",
        "description": "felicity.api.gql.analysis.mutations.result_option",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@strawberry.input\nclass ResultOptionInputType:\n    analysis_uid: str\n    sample_types: Optional[List[str]] = field(default_factory=list)\n    option_key: int\n    value: str\nResultOptionResponse = strawberry.union(\n    \"ResultOptionResponse\",\n    (a_types.ResultOptionType, OperationError),  # noqa",
        "detail": "felicity.api.gql.analysis.mutations.result_option",
        "documentation": {}
    },
    {
        "label": "ResultOptionResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.result_option",
        "description": "felicity.api.gql.analysis.mutations.result_option",
        "peekOfCode": "ResultOptionResponse = strawberry.union(\n    \"ResultOptionResponse\",\n    (a_types.ResultOptionType, OperationError),  # noqa\n    description=\"\",\n)\n@strawberry.mutation(permission_classes=[IsAuthenticated])\nasync def create_result_option(\n    info, payload: ResultOptionInputType\n) -> ResultOptionResponse:\n    is_authenticated, felicity_user = await auth_from_info(info)",
        "detail": "felicity.api.gql.analysis.mutations.result_option",
        "documentation": {}
    },
    {
        "label": "SampleTypeInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.sample_type",
        "description": "felicity.api.gql.analysis.mutations.sample_type",
        "peekOfCode": "class SampleTypeInputType:\n    name: str\n    abbr: str\n    description: str | None = \"\"\n    internal_use: bool | None = False\n    active: bool | None = True\nSampleTypeResponse = strawberry.union(\n    \"SampleTypeResponse\",\n    (a_types.SampleTypeTyp, OperationError),  # noqa\n    description=\"\",",
        "detail": "felicity.api.gql.analysis.mutations.sample_type",
        "documentation": {}
    },
    {
        "label": "SampleTypeMappingInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.mutations.sample_type",
        "description": "felicity.api.gql.analysis.mutations.sample_type",
        "peekOfCode": "class SampleTypeMappingInputType:\n    sample_type_uid: str\n    coding_standard_uid: str\n    name: str\n    code: str\n    description: str | None = None\n@strawberry.mutation(permission_classes=[IsAuthenticated])\nasync def create_sample_type(info, payload: SampleTypeInputType) -> SampleTypeResponse:\n    is_authenticated, felicity_user = await auth_from_info(info)\n    verify_user_auth(",
        "detail": "felicity.api.gql.analysis.mutations.sample_type",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.sample_type",
        "description": "felicity.api.gql.analysis.mutations.sample_type",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@strawberry.input\nclass SampleTypeInputType:\n    name: str\n    abbr: str\n    description: str | None = \"\"\n    internal_use: bool | None = False\n    active: bool | None = True\nSampleTypeResponse = strawberry.union(\n    \"SampleTypeResponse\",",
        "detail": "felicity.api.gql.analysis.mutations.sample_type",
        "documentation": {}
    },
    {
        "label": "SampleTypeResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.sample_type",
        "description": "felicity.api.gql.analysis.mutations.sample_type",
        "peekOfCode": "SampleTypeResponse = strawberry.union(\n    \"SampleTypeResponse\",\n    (a_types.SampleTypeTyp, OperationError),  # noqa\n    description=\"\",\n)\nSampleTypeMappingResponse = strawberry.union(\n    \"SampleTypeMappingResponse\",\n    (a_types.SampleTypeMappingType, OperationError),  # noqa\n    description=\"Union of possible outcomes when adding a new notice\",\n)",
        "detail": "felicity.api.gql.analysis.mutations.sample_type",
        "documentation": {}
    },
    {
        "label": "SampleTypeMappingResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.mutations.sample_type",
        "description": "felicity.api.gql.analysis.mutations.sample_type",
        "peekOfCode": "SampleTypeMappingResponse = strawberry.union(\n    \"SampleTypeMappingResponse\",\n    (a_types.SampleTypeMappingType, OperationError),  # noqa\n    description=\"Union of possible outcomes when adding a new notice\",\n)\n@strawberry.input\nclass SampleTypeMappingInputType:\n    sample_type_uid: str\n    coding_standard_uid: str\n    name: str",
        "detail": "felicity.api.gql.analysis.mutations.sample_type",
        "documentation": {}
    },
    {
        "label": "CodingStandardType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class CodingStandardType:\n    uid: str\n    name: str\n    description: str | None\n    #\n    created_by_uid: str | None\n    created_by: UserType | None\n    created_at: str | None\n    updated_by_uid: str | None\n    updated_by: UserType | None",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "SampleTypeTyp",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class SampleTypeTyp:\n    uid: str\n    name: str\n    description: str | None\n    active: bool\n    internal_use: bool\n    abbr: str\n    #\n    created_by_uid: str | None\n    created_by: UserType | None",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "SampleTypeMappingType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class SampleTypeMappingType:\n    uid: str\n    sample_type_uid: str\n    sample_type: SampleTypeTyp | None\n    coding_standard_uid: str\n    coding_standard: CodingStandardType | None\n    name: str | None\n    description: str | None\n    code: str\n    #",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "QCLevelType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class QCLevelType:\n    uid: str\n    level: str\n    #\n    created_by_uid: str | None\n    created_by: UserType | None\n    created_at: str | None\n    updated_by_uid: str | None\n    updated_by: UserType | None\n    updated_at: str | None",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "QCSetType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class QCSetType:\n    uid: str\n    name: str\n    note: str\n    #\n    created_by_uid: str | None\n    created_by: UserType | None\n    created_at: str | None\n    updated_by_uid: str | None\n    updated_by: UserType | None",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "RejectionReasonType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class RejectionReasonType:\n    uid: str\n    reason: str\n    #\n    created_by_uid: str | None\n    created_by: UserType | None\n    created_at: str | None\n    updated_by_uid: str | None\n    updated_by: UserType | None\n    updated_at: str | None",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class AnalysisRequestType:\n    uid: str\n    patient_uid: str\n    patient: PatientType\n    client_uid: str\n    client: ClientType\n    request_id: str\n    client_request_id: str\n    internal_use: bool\n    #",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class AnalysisCategoryType:\n    uid: str\n    name: str\n    department_uid: str | None\n    department: Optional[DepartmentType]\n    description: str | None\n    active: bool\n    #\n    created_by_uid: str | None\n    created_by: UserType | None",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "ResultOptionType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class ResultOptionType:\n    uid: str\n    option_key: int\n    value: str\n    analysis_uid: str\n    # analysis: Optional['AnalysisType']\n    sample_types: Optional[list[SampleTypeTyp]]\n    #\n    created_by_uid: str | None\n    created_by: UserType | None",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class AnalysisType:\n    uid: str\n    name: str\n    description: str | None\n    keyword: str | None\n    department_uid: str | None\n    department: Optional[DepartmentType]\n    unit_uid: str | None\n    unit: Optional[UnitType]\n    sample_types: Optional[List[SampleTypeTyp]]",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisMappingType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class AnalysisMappingType:\n    uid: str\n    analysis_uid: str\n    analysis: AnalysisType | None\n    coding_standard_uid: str\n    coding_standard: CodingStandardType | None\n    name: str | None\n    description: str | None\n    code: str\n    #",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "ProfileType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class ProfileType:\n    uid: str\n    name: str\n    description: str | None\n    keyword: str | None\n    department_uid: str | None\n    department: Optional[DepartmentType]\n    tat_length_minutes: int | None\n    analyses: Optional[List[AnalysisType]]\n    sample_types: Optional[List[SampleTypeTyp]]",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "ProfileMappingType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class ProfileMappingType:\n    uid: str\n    profile_uid: str\n    profile: ProfileType | None\n    coding_standard_uid: str\n    coding_standard: CodingStandardType | None\n    name: str | None\n    description: str | None\n    code: str\n    #",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisWithProfiles",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class AnalysisWithProfiles(AnalysisType):\n    profiles: Optional[List[ProfileType]]\n@strawberry.type\nclass AnalysisEdge:\n    cursor: str\n    node: AnalysisWithProfiles\n@strawberry.type\nclass AnalysisCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[AnalysisEdge]]",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class AnalysisEdge:\n    cursor: str\n    node: AnalysisWithProfiles\n@strawberry.type\nclass AnalysisCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[AnalysisEdge]]\n    items: Optional[List[AnalysisWithProfiles]]\n    total_count: int\n@strawberry.type",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class AnalysisCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[AnalysisEdge]]\n    items: Optional[List[AnalysisWithProfiles]]\n    total_count: int\n@strawberry.type\nclass AnalysisTemplateType:\n    uid: str\n    name: str\n    description: str | None",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisTemplateType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class AnalysisTemplateType:\n    uid: str\n    name: str\n    description: str | None\n    department_uid: str | None\n    department: Optional[DepartmentType]\n    analyses: Optional[List[AnalysisType]]\n    #\n    created_by_uid: str | None\n    created_by: UserType | None",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "SampleType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class SampleType:  # for Sample\n    uid: str\n    analysis_request_uid: str\n    analysis_request: Optional[AnalysisRequestType]\n    sample_type_uid: str\n    sample_type: Optional[SampleTypeTyp]\n    sample_id: str\n    profiles: Optional[List[ProfileType]]\n    analyses: Optional[List[AnalysisType]]\n    priority: int",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestWithSamples",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class AnalysisRequestWithSamples(AnalysisRequestType):\n    samples: Optional[List[SampleType]]\n@strawberry.type\nclass AnalysisRequestEdge:\n    cursor: str\n    node: AnalysisRequestWithSamples\n@strawberry.type\nclass AnalysisRequestCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[AnalysisRequestEdge]]",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class AnalysisRequestEdge:\n    cursor: str\n    node: AnalysisRequestWithSamples\n@strawberry.type\nclass AnalysisRequestCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[AnalysisRequestEdge]]\n    items: Optional[List[AnalysisRequestWithSamples]]\n    total_count: int\n@strawberry.type",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class AnalysisRequestCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[AnalysisRequestEdge]]\n    items: Optional[List[AnalysisRequestWithSamples]]\n    total_count: int\n@strawberry.type\nclass QCTemplateType:\n    uid: str\n    name: str\n    description: str | None",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "QCTemplateType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class QCTemplateType:\n    uid: str\n    name: str\n    description: str | None\n    departments: List[DepartmentType]\n    qc_levels: List[QCLevelType]\n    #\n    created_by_uid: str | None\n    created_by: UserType | None\n    created_at: str | None",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisInterimType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class AnalysisInterimType:\n    uid: str\n    key: int\n    value: str\n    analysis_uid: str\n    instrument_uid: str\n    #\n    created_by_uid: str | None\n    created_by: UserType | None\n    created_at: str | None",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactorType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class AnalysisCorrectionFactorType:\n    uid: str\n    factor: float\n    analysis_uid: str\n    instrument_uid: str\n    method_uid: str\n    #\n    created_by_uid: str | None\n    created_by: UserType | None\n    created_at: str | None",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimitType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class AnalysisDetectionLimitType:\n    uid: str\n    lower_limit: float\n    upper_limit: float\n    analysis_uid: str\n    instrument_uid: str\n    method_uid: str\n    #\n    created_by_uid: str | None\n    created_by: UserType | None",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertaintyType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class AnalysisUncertaintyType:\n    uid: str\n    min: float\n    max: float\n    value: float\n    analysis_uid: str\n    instrument_uid: str\n    method_uid: str\n    #\n    created_by_uid: str | None",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecificationType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.analysis",
        "description": "felicity.api.gql.analysis.types.analysis",
        "peekOfCode": "class AnalysisSpecificationType:\n    uid: str\n    analysis_uid: str\n    min: float | None\n    max: float | None\n    min_warn: float | None\n    max_warn: float | None\n    min_report: str | None\n    max_report: str | None\n    warn_values: str | None",
        "detail": "felicity.api.gql.analysis.types.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisResultType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.results",
        "description": "felicity.api.gql.analysis.types.results",
        "peekOfCode": "class AnalysisResultType:\n    uid: str\n    sample_uid: str\n    sample: SampleType\n    worksheet_uid: str | None\n    worksheet_position: int | None\n    assigned: bool\n    analysis_uid: str | None\n    analysis: AnalysisType | None\n    laboratory_instrument_uid: str | None",
        "detail": "felicity.api.gql.analysis.types.results",
        "documentation": {}
    },
    {
        "label": "SamplesWithResults",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.results",
        "description": "felicity.api.gql.analysis.types.results",
        "peekOfCode": "class SamplesWithResults(SampleType):\n    analysis_results: list[AnalysisResultType] | None\n@strawberry.type\nclass SampleEdge:\n    cursor: str\n    node: SamplesWithResults\n@strawberry.type\nclass SampleCursorPage:\n    page_info: PageInfo\n    edges: list[SampleEdge] | None",
        "detail": "felicity.api.gql.analysis.types.results",
        "documentation": {}
    },
    {
        "label": "SampleEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.results",
        "description": "felicity.api.gql.analysis.types.results",
        "peekOfCode": "class SampleEdge:\n    cursor: str\n    node: SamplesWithResults\n@strawberry.type\nclass SampleCursorPage:\n    page_info: PageInfo\n    edges: list[SampleEdge] | None\n    items: list[SamplesWithResults] | None\n    total_count: int\n@strawberry.type",
        "detail": "felicity.api.gql.analysis.types.results",
        "documentation": {}
    },
    {
        "label": "SampleCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.results",
        "description": "felicity.api.gql.analysis.types.results",
        "peekOfCode": "class SampleCursorPage:\n    page_info: PageInfo\n    edges: list[SampleEdge] | None\n    items: list[SamplesWithResults] | None\n    total_count: int\n@strawberry.type\nclass AnalysisResultEdge:\n    cursor: str\n    node: AnalysisResultType\n@strawberry.type",
        "detail": "felicity.api.gql.analysis.types.results",
        "documentation": {}
    },
    {
        "label": "AnalysisResultEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.results",
        "description": "felicity.api.gql.analysis.types.results",
        "peekOfCode": "class AnalysisResultEdge:\n    cursor: str\n    node: AnalysisResultType\n@strawberry.type\nclass AnalysisResultCursorPage:\n    page_info: PageInfo\n    edges: list[AnalysisResultEdge] | None\n    items: list[AnalysisResultType] | None\n    total_count: int\n@strawberry.type",
        "detail": "felicity.api.gql.analysis.types.results",
        "documentation": {}
    },
    {
        "label": "AnalysisResultCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.results",
        "description": "felicity.api.gql.analysis.types.results",
        "peekOfCode": "class AnalysisResultCursorPage:\n    page_info: PageInfo\n    edges: list[AnalysisResultEdge] | None\n    items: list[AnalysisResultType] | None\n    total_count: int\n@strawberry.type\nclass QCSetWithSamples(QCSetType):\n    # samples: list[SampleEdge] | None\n    samples: list[SamplesWithResults] | None\n@strawberry.type",
        "detail": "felicity.api.gql.analysis.types.results",
        "documentation": {}
    },
    {
        "label": "QCSetWithSamples",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.results",
        "description": "felicity.api.gql.analysis.types.results",
        "peekOfCode": "class QCSetWithSamples(QCSetType):\n    # samples: list[SampleEdge] | None\n    samples: list[SamplesWithResults] | None\n@strawberry.type\nclass QCSetEdge:\n    cursor: str\n    node: QCSetWithSamples\n@strawberry.type\nclass QCSetCursorPage:\n    page_info: PageInfo",
        "detail": "felicity.api.gql.analysis.types.results",
        "documentation": {}
    },
    {
        "label": "QCSetEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.results",
        "description": "felicity.api.gql.analysis.types.results",
        "peekOfCode": "class QCSetEdge:\n    cursor: str\n    node: QCSetWithSamples\n@strawberry.type\nclass QCSetCursorPage:\n    page_info: PageInfo\n    edges: list[QCSetEdge] | None\n    items: list[QCSetWithSamples] | None\n    total_count: int\n@strawberry.type",
        "detail": "felicity.api.gql.analysis.types.results",
        "documentation": {}
    },
    {
        "label": "QCSetCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.results",
        "description": "felicity.api.gql.analysis.types.results",
        "peekOfCode": "class QCSetCursorPage:\n    page_info: PageInfo\n    edges: list[QCSetEdge] | None\n    items: list[QCSetWithSamples] | None\n    total_count: int\n@strawberry.type\nclass ResultMutationType:\n    uid: str\n    result_uid: str\n    before: str",
        "detail": "felicity.api.gql.analysis.types.results",
        "documentation": {}
    },
    {
        "label": "ResultMutationType",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.types.results",
        "description": "felicity.api.gql.analysis.types.results",
        "peekOfCode": "class ResultMutationType:\n    uid: str\n    result_uid: str\n    before: str\n    after: str\n    mutation: str\n    date: str | None\n    created_by_uid: str | None\n    created_by: UserType | None\n    created_at: str | None",
        "detail": "felicity.api.gql.analysis.types.results",
        "documentation": {}
    },
    {
        "label": "AnalysisQuery",
        "kind": 6,
        "importPath": "felicity.api.gql.analysis.query",
        "description": "felicity.api.gql.analysis.query",
        "peekOfCode": "class AnalysisQuery:\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def coding_standard_all(self, info) -> List[a_types.CodingStandardType]:\n        return await a_models.CodingStandard.all_async()\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def sample_type_all(self, info) -> List[a_types.SampleTypeTyp]:\n        return await a_models.SampleType.all_async()\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def sample_type_by_uid(self, info, uid: str) -> a_types.SampleTypeTyp:\n        return await a_models.SampleType.get(uid=uid)",
        "detail": "felicity.api.gql.analysis.query",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.analysis.query",
        "description": "felicity.api.gql.analysis.query",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@strawberry.type\nclass AnalysisQuery:\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def coding_standard_all(self, info) -> List[a_types.CodingStandardType]:\n        return await a_models.CodingStandard.all_async()\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def sample_type_all(self, info) -> List[a_types.SampleTypeTyp]:\n        return await a_models.SampleType.all_async()\n    @strawberry.field(permission_classes=[IsAuthenticated])",
        "detail": "felicity.api.gql.analysis.query",
        "documentation": {}
    },
    {
        "label": "group_exists",
        "kind": 2,
        "importPath": "felicity.api.gql.analytics.query.dashboard",
        "description": "felicity.api.gql.analytics.query.dashboard",
        "peekOfCode": "def group_exists(val):\n    if has_value_or_is_truthy(val):\n        return str(val)\n    return \"unknown\"\nasync def get_username(val):\n    if val == \"unknown\":\n        return val\n    user = await User.get(uid=val)\n    return user.auth.user_name\nasync def get_instrument(val):",
        "detail": "felicity.api.gql.analytics.query.dashboard",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.analytics.query.dashboard",
        "description": "felicity.api.gql.analytics.query.dashboard",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef group_exists(val):\n    if has_value_or_is_truthy(val):\n        return str(val)\n    return \"unknown\"\nasync def get_username(val):\n    if val == \"unknown\":\n        return val\n    user = await User.get(uid=val)\n    return user.auth.user_name",
        "detail": "felicity.api.gql.analytics.query.dashboard",
        "documentation": {}
    },
    {
        "label": "group_exists",
        "kind": 2,
        "importPath": "felicity.api.gql.analytics.query.listing",
        "description": "felicity.api.gql.analytics.query.listing",
        "peekOfCode": "def group_exists(val):\n    if has_value_or_is_truthy(val):\n        return str(val)\n    return \"unknown\"\nasync def get_username(val):\n    if val == \"unknown\":\n        return val\n    user = await User.get(uid=val)\n    return user.auth.user_name\nasync def get_instrument(val):",
        "detail": "felicity.api.gql.analytics.query.listing",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.analytics.query.listing",
        "description": "felicity.api.gql.analytics.query.listing",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef group_exists(val):\n    if has_value_or_is_truthy(val):\n        return str(val)\n    return \"unknown\"\nasync def get_username(val):\n    if val == \"unknown\":\n        return val\n    user = await User.get(uid=val)\n    return user.auth.user_name",
        "detail": "felicity.api.gql.analytics.query.listing",
        "documentation": {}
    },
    {
        "label": "Nothing",
        "kind": 6,
        "importPath": "felicity.api.gql.analytics.types",
        "description": "felicity.api.gql.analytics.types",
        "peekOfCode": "class Nothing:\n    data: str | None\n@strawberry.type\nclass GroupCount:\n    group: str\n    count: int | None\n@strawberry.type\nclass GroupData:\n    group: str\n    counts: Optional[List[GroupCount]]",
        "detail": "felicity.api.gql.analytics.types",
        "documentation": {}
    },
    {
        "label": "GroupCount",
        "kind": 6,
        "importPath": "felicity.api.gql.analytics.types",
        "description": "felicity.api.gql.analytics.types",
        "peekOfCode": "class GroupCount:\n    group: str\n    count: int | None\n@strawberry.type\nclass GroupData:\n    group: str\n    counts: Optional[List[GroupCount]]\n@strawberry.type\nclass GroupedCounts:\n    data: List[GroupCount]",
        "detail": "felicity.api.gql.analytics.types",
        "documentation": {}
    },
    {
        "label": "GroupData",
        "kind": 6,
        "importPath": "felicity.api.gql.analytics.types",
        "description": "felicity.api.gql.analytics.types",
        "peekOfCode": "class GroupData:\n    group: str\n    counts: Optional[List[GroupCount]]\n@strawberry.type\nclass GroupedCounts:\n    data: List[GroupCount]\n@strawberry.type\nclass GroupedData:\n    data: List[GroupData]\n@strawberry.type",
        "detail": "felicity.api.gql.analytics.types",
        "documentation": {}
    },
    {
        "label": "GroupedCounts",
        "kind": 6,
        "importPath": "felicity.api.gql.analytics.types",
        "description": "felicity.api.gql.analytics.types",
        "peekOfCode": "class GroupedCounts:\n    data: List[GroupCount]\n@strawberry.type\nclass GroupedData:\n    data: List[GroupData]\n@strawberry.type\nclass ProcessCounts:\n    total_samples: int | None\n    total_late: int | None\n    total_not_late: int | None",
        "detail": "felicity.api.gql.analytics.types",
        "documentation": {}
    },
    {
        "label": "GroupedData",
        "kind": 6,
        "importPath": "felicity.api.gql.analytics.types",
        "description": "felicity.api.gql.analytics.types",
        "peekOfCode": "class GroupedData:\n    data: List[GroupData]\n@strawberry.type\nclass ProcessCounts:\n    total_samples: int | None\n    total_late: int | None\n    total_not_late: int | None\n    process_average: int | None\n    avg_extra_days: int | None\n    service: str | None = None",
        "detail": "felicity.api.gql.analytics.types",
        "documentation": {}
    },
    {
        "label": "ProcessCounts",
        "kind": 6,
        "importPath": "felicity.api.gql.analytics.types",
        "description": "felicity.api.gql.analytics.types",
        "peekOfCode": "class ProcessCounts:\n    total_samples: int | None\n    total_late: int | None\n    total_not_late: int | None\n    process_average: int | None\n    avg_extra_days: int | None\n    service: str | None = None\n@strawberry.type\nclass ProcessData:\n    process: str",
        "detail": "felicity.api.gql.analytics.types",
        "documentation": {}
    },
    {
        "label": "ProcessData",
        "kind": 6,
        "importPath": "felicity.api.gql.analytics.types",
        "description": "felicity.api.gql.analytics.types",
        "peekOfCode": "class ProcessData:\n    process: str\n    counts: Optional[ProcessCounts]\n    groups: Optional[List[ProcessCounts]]\n@strawberry.type\nclass ProcessStatistics:\n    data: List[ProcessData]\n@strawberry.type\nclass LaggardCounts:\n    lessThanTen: int | None",
        "detail": "felicity.api.gql.analytics.types",
        "documentation": {}
    },
    {
        "label": "ProcessStatistics",
        "kind": 6,
        "importPath": "felicity.api.gql.analytics.types",
        "description": "felicity.api.gql.analytics.types",
        "peekOfCode": "class ProcessStatistics:\n    data: List[ProcessData]\n@strawberry.type\nclass LaggardCounts:\n    lessThanTen: int | None\n    tenToTwenty: int | None\n    twentyToThirty: int | None\n    graterThanThirty: int | None\n    #\n    total_incomplete: int | None = None",
        "detail": "felicity.api.gql.analytics.types",
        "documentation": {}
    },
    {
        "label": "LaggardCounts",
        "kind": 6,
        "importPath": "felicity.api.gql.analytics.types",
        "description": "felicity.api.gql.analytics.types",
        "peekOfCode": "class LaggardCounts:\n    lessThanTen: int | None\n    tenToTwenty: int | None\n    twentyToThirty: int | None\n    graterThanThirty: int | None\n    #\n    total_incomplete: int | None = None\n    total_delayed: int | None = None\n    total_not_delayed: int | None = None\n@strawberry.type",
        "detail": "felicity.api.gql.analytics.types",
        "documentation": {}
    },
    {
        "label": "LaggardData",
        "kind": 6,
        "importPath": "felicity.api.gql.analytics.types",
        "description": "felicity.api.gql.analytics.types",
        "peekOfCode": "class LaggardData:\n    category: str\n    counts: Optional[LaggardCounts]\n@strawberry.type\nclass LaggardStatistics:\n    data: List[LaggardData]\n@strawberry.type\nclass ReportMetaType:\n    uid: str\n    period_start: datetime",
        "detail": "felicity.api.gql.analytics.types",
        "documentation": {}
    },
    {
        "label": "LaggardStatistics",
        "kind": 6,
        "importPath": "felicity.api.gql.analytics.types",
        "description": "felicity.api.gql.analytics.types",
        "peekOfCode": "class LaggardStatistics:\n    data: List[LaggardData]\n@strawberry.type\nclass ReportMetaType:\n    uid: str\n    period_start: datetime\n    period_end: datetime\n    date_column: str\n    location: str | None\n    sample_states: str | None",
        "detail": "felicity.api.gql.analytics.types",
        "documentation": {}
    },
    {
        "label": "ReportMetaType",
        "kind": 6,
        "importPath": "felicity.api.gql.analytics.types",
        "description": "felicity.api.gql.analytics.types",
        "peekOfCode": "class ReportMetaType:\n    uid: str\n    period_start: datetime\n    period_end: datetime\n    date_column: str\n    location: str | None\n    sample_states: str | None\n    report_type: str\n    status: str | None\n    temp: str | None",
        "detail": "felicity.api.gql.analytics.types",
        "documentation": {}
    },
    {
        "label": "AuditLogQuery",
        "kind": 6,
        "importPath": "felicity.api.gql.audit.query",
        "description": "felicity.api.gql.audit.query",
        "peekOfCode": "class AuditLogQuery:\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def audit_logs_filter(\n        self, info, target_type: str, target_id: str\n    ) -> List[AuditLogType]:\n        return await AuditLog.get_all(target_type=target_type, target_id=target_id)",
        "detail": "felicity.api.gql.audit.query",
        "documentation": {}
    },
    {
        "label": "AuditLogType",
        "kind": 6,
        "importPath": "felicity.api.gql.audit.types",
        "description": "felicity.api.gql.audit.types",
        "peekOfCode": "class AuditLogType:\n    uid: str\n    user_id: str | None\n    target_type: str | None\n    target_id: str | None\n    action: int | None\n    state_before: Optional[Text]\n    state_after: Optional[Text]",
        "detail": "felicity.api.gql.audit.types",
        "documentation": {}
    },
    {
        "label": "PriceInput",
        "kind": 6,
        "importPath": "felicity.api.gql.billing.mutations",
        "description": "felicity.api.gql.billing.mutations",
        "peekOfCode": "class PriceInput:\n    amount: float\n    is_active: bool | None = True\n@strawberry.input\nclass PriceDiscountInput:\n    discount_type: str\n    value_type: str | None = None\n    start_date: datetime\n    end_date: datetime\n    voucher_uid: str | None = None",
        "detail": "felicity.api.gql.billing.mutations",
        "documentation": {}
    },
    {
        "label": "PriceDiscountInput",
        "kind": 6,
        "importPath": "felicity.api.gql.billing.mutations",
        "description": "felicity.api.gql.billing.mutations",
        "peekOfCode": "class PriceDiscountInput:\n    discount_type: str\n    value_type: str | None = None\n    start_date: datetime\n    end_date: datetime\n    voucher_uid: str | None = None\n    value_percent: float | None = None\n    value_amount: float | None = None\n    is_active: bool\n@strawberry.input",
        "detail": "felicity.api.gql.billing.mutations",
        "documentation": {}
    },
    {
        "label": "VoucherInput",
        "kind": 6,
        "importPath": "felicity.api.gql.billing.mutations",
        "description": "felicity.api.gql.billing.mutations",
        "peekOfCode": "class VoucherInput:\n    name: str\n    usage_limit: int\n    start_date: datetime\n    end_date: datetime\n    once_per_customer: bool\n    once_per_order: bool\n@strawberry.input\nclass VoucherCodeInput:\n    code: str",
        "detail": "felicity.api.gql.billing.mutations",
        "documentation": {}
    },
    {
        "label": "VoucherCodeInput",
        "kind": 6,
        "importPath": "felicity.api.gql.billing.mutations",
        "description": "felicity.api.gql.billing.mutations",
        "peekOfCode": "class VoucherCodeInput:\n    code: str\n    voucher_uid: str\n    usage_limit: int\n    is_active: bool\n@strawberry.input\nclass BillTransactionInput:\n    test_bill_uid: str\n    kind: str\n    amount: float",
        "detail": "felicity.api.gql.billing.mutations",
        "documentation": {}
    },
    {
        "label": "BillTransactionInput",
        "kind": 6,
        "importPath": "felicity.api.gql.billing.mutations",
        "description": "felicity.api.gql.billing.mutations",
        "peekOfCode": "class BillTransactionInput:\n    test_bill_uid: str\n    kind: str\n    amount: float\n    notes: str | None = \"\"\n@strawberry.input\nclass ApplyVoucherInput:\n    voucher_code: str\n    test_bill_uid: str\n    customer_uid: str",
        "detail": "felicity.api.gql.billing.mutations",
        "documentation": {}
    },
    {
        "label": "ApplyVoucherInput",
        "kind": 6,
        "importPath": "felicity.api.gql.billing.mutations",
        "description": "felicity.api.gql.billing.mutations",
        "peekOfCode": "class ApplyVoucherInput:\n    voucher_code: str\n    test_bill_uid: str\n    customer_uid: str\n@strawberry.type\nclass BillingMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def update_profile_price(\n            self, info: Info, uid: str, payload: PriceInput\n    ) -> ProfilePriceResponse:",
        "detail": "felicity.api.gql.billing.mutations",
        "documentation": {}
    },
    {
        "label": "BillingMutations",
        "kind": 6,
        "importPath": "felicity.api.gql.billing.mutations",
        "description": "felicity.api.gql.billing.mutations",
        "peekOfCode": "class BillingMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def update_profile_price(\n            self, info: Info, uid: str, payload: PriceInput\n    ) -> ProfilePriceResponse:\n        _, felicity_user = await auth_from_info(info)\n        profile_price = await entities.ProfilePrice.get(uid=uid)\n        incoming: dict = {\n            \"amount\": payload.amount,\n            \"is_active\": payload.is_active,",
        "detail": "felicity.api.gql.billing.mutations",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.billing.mutations",
        "description": "felicity.api.gql.billing.mutations",
        "peekOfCode": "logger = logging.getLogger(__name__)\nProfilePriceResponse = strawberry.union(\n    \"ProfilePriceResponse\", (ProfilePriceType, OperationError), description=\"\"  # noqa\n)\nAnalysisPriceResponse = strawberry.union(\n    \"AnalysisPriceResponse\", (AnalysisPriceType, OperationError), description=\"\"  #\n)\nProfileDiscountResponse = strawberry.union(\n    \"ProfileDiscountResponse\",\n    (ProfileDiscountType, OperationError),",
        "detail": "felicity.api.gql.billing.mutations",
        "documentation": {}
    },
    {
        "label": "ProfilePriceResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.billing.mutations",
        "description": "felicity.api.gql.billing.mutations",
        "peekOfCode": "ProfilePriceResponse = strawberry.union(\n    \"ProfilePriceResponse\", (ProfilePriceType, OperationError), description=\"\"  # noqa\n)\nAnalysisPriceResponse = strawberry.union(\n    \"AnalysisPriceResponse\", (AnalysisPriceType, OperationError), description=\"\"  #\n)\nProfileDiscountResponse = strawberry.union(\n    \"ProfileDiscountResponse\",\n    (ProfileDiscountType, OperationError),\n    description=\"\",  # noqa",
        "detail": "felicity.api.gql.billing.mutations",
        "documentation": {}
    },
    {
        "label": "AnalysisPriceResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.billing.mutations",
        "description": "felicity.api.gql.billing.mutations",
        "peekOfCode": "AnalysisPriceResponse = strawberry.union(\n    \"AnalysisPriceResponse\", (AnalysisPriceType, OperationError), description=\"\"  #\n)\nProfileDiscountResponse = strawberry.union(\n    \"ProfileDiscountResponse\",\n    (ProfileDiscountType, OperationError),\n    description=\"\",  # noqa\n)\nAnalysisDiscountResponse = strawberry.union(\n    \"AnalysisDiscountResponse\",",
        "detail": "felicity.api.gql.billing.mutations",
        "documentation": {}
    },
    {
        "label": "ProfileDiscountResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.billing.mutations",
        "description": "felicity.api.gql.billing.mutations",
        "peekOfCode": "ProfileDiscountResponse = strawberry.union(\n    \"ProfileDiscountResponse\",\n    (ProfileDiscountType, OperationError),\n    description=\"\",  # noqa\n)\nAnalysisDiscountResponse = strawberry.union(\n    \"AnalysisDiscountResponse\",\n    (AnalysisDiscountType, OperationError),\n    description=\"\",  #\n)",
        "detail": "felicity.api.gql.billing.mutations",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscountResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.billing.mutations",
        "description": "felicity.api.gql.billing.mutations",
        "peekOfCode": "AnalysisDiscountResponse = strawberry.union(\n    \"AnalysisDiscountResponse\",\n    (AnalysisDiscountType, OperationError),\n    description=\"\",  #\n)\nVoucherResponse = strawberry.union(\n    \"VoucherResponse\", (VoucherType, OperationError), description=\"\"  #\n)\nVoucherCodeResponse = strawberry.union(\n    \"VoucherCodeResponse\", (VoucherCodeType, OperationError), description=\"\"  #",
        "detail": "felicity.api.gql.billing.mutations",
        "documentation": {}
    },
    {
        "label": "VoucherResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.billing.mutations",
        "description": "felicity.api.gql.billing.mutations",
        "peekOfCode": "VoucherResponse = strawberry.union(\n    \"VoucherResponse\", (VoucherType, OperationError), description=\"\"  #\n)\nVoucherCodeResponse = strawberry.union(\n    \"VoucherCodeResponse\", (VoucherCodeType, OperationError), description=\"\"  #\n)\nTestBillTransactionResponse = strawberry.union(\n    \"TestBillTransactionResponse\",\n    (TestBillTransactionType, OperationError),\n    description=\"\",  #",
        "detail": "felicity.api.gql.billing.mutations",
        "documentation": {}
    },
    {
        "label": "VoucherCodeResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.billing.mutations",
        "description": "felicity.api.gql.billing.mutations",
        "peekOfCode": "VoucherCodeResponse = strawberry.union(\n    \"VoucherCodeResponse\", (VoucherCodeType, OperationError), description=\"\"  #\n)\nTestBillTransactionResponse = strawberry.union(\n    \"TestBillTransactionResponse\",\n    (TestBillTransactionType, OperationError),\n    description=\"\",  #\n)\nTestBillResponse = strawberry.union(\n    \"TestBillResponse\", (TestBillType, OperationError), description=\"\"  #",
        "detail": "felicity.api.gql.billing.mutations",
        "documentation": {}
    },
    {
        "label": "TestBillTransactionResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.billing.mutations",
        "description": "felicity.api.gql.billing.mutations",
        "peekOfCode": "TestBillTransactionResponse = strawberry.union(\n    \"TestBillTransactionResponse\",\n    (TestBillTransactionType, OperationError),\n    description=\"\",  #\n)\nTestBillResponse = strawberry.union(\n    \"TestBillResponse\", (TestBillType, OperationError), description=\"\"  #\n)\n@strawberry.input\nclass PriceInput:",
        "detail": "felicity.api.gql.billing.mutations",
        "documentation": {}
    },
    {
        "label": "TestBillResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.billing.mutations",
        "description": "felicity.api.gql.billing.mutations",
        "peekOfCode": "TestBillResponse = strawberry.union(\n    \"TestBillResponse\", (TestBillType, OperationError), description=\"\"  #\n)\n@strawberry.input\nclass PriceInput:\n    amount: float\n    is_active: bool | None = True\n@strawberry.input\nclass PriceDiscountInput:\n    discount_type: str",
        "detail": "felicity.api.gql.billing.mutations",
        "documentation": {}
    },
    {
        "label": "BillingQuery",
        "kind": 6,
        "importPath": "felicity.api.gql.billing.query",
        "description": "felicity.api.gql.billing.query",
        "peekOfCode": "class BillingQuery:\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def bills(\n        self,\n        info,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,\n        text: str | None = None,\n        is_active: bool | None = None,",
        "detail": "felicity.api.gql.billing.query",
        "documentation": {}
    },
    {
        "label": "AnalysisPriceType",
        "kind": 6,
        "importPath": "felicity.api.gql.billing.types",
        "description": "felicity.api.gql.billing.types",
        "peekOfCode": "class AnalysisPriceType:\n    uid: str\n    analysis_uid: str\n    analysis: AnalysisType\n    is_active: bool\n    amount: float\n    created_at: str | None\n    created_by_uid: str | None\n    created_by: UserType | None\n    updated_at: str | None",
        "detail": "felicity.api.gql.billing.types",
        "documentation": {}
    },
    {
        "label": "ProfilePriceType",
        "kind": 6,
        "importPath": "felicity.api.gql.billing.types",
        "description": "felicity.api.gql.billing.types",
        "peekOfCode": "class ProfilePriceType:\n    uid: str\n    profile_uid: str\n    profile: ProfileType\n    is_active: bool\n    amount: float\n    created_at: str | None\n    created_by_uid: str | None\n    created_by: UserType | None\n    updated_at: str | None",
        "detail": "felicity.api.gql.billing.types",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscountType",
        "kind": 6,
        "importPath": "felicity.api.gql.billing.types",
        "description": "felicity.api.gql.billing.types",
        "peekOfCode": "class AnalysisDiscountType:\n    uid: str\n    analysis_uid: str\n    analysis: AnalysisType\n    name: str\n    discount_type: str\n    value_type: str\n    start_date: datetime\n    end_date: datetime\n    voucher_uid: str | None",
        "detail": "felicity.api.gql.billing.types",
        "documentation": {}
    },
    {
        "label": "ProfileDiscountType",
        "kind": 6,
        "importPath": "felicity.api.gql.billing.types",
        "description": "felicity.api.gql.billing.types",
        "peekOfCode": "class ProfileDiscountType:\n    uid: str\n    profile_uid: str\n    profile: ProfileType\n    name: str\n    discount_type: str\n    value_type: str\n    start_date: datetime\n    end_date: datetime\n    voucher_uid: str | None",
        "detail": "felicity.api.gql.billing.types",
        "documentation": {}
    },
    {
        "label": "VoucherType",
        "kind": 6,
        "importPath": "felicity.api.gql.billing.types",
        "description": "felicity.api.gql.billing.types",
        "peekOfCode": "class VoucherType:\n    uid: str\n    name: str\n    usage_limit: int\n    used: int\n    start_date: str\n    end_date: str\n    once_per_customer: bool\n    once_per_order: bool\n    created_at: str | None",
        "detail": "felicity.api.gql.billing.types",
        "documentation": {}
    },
    {
        "label": "VoucherCodeType",
        "kind": 6,
        "importPath": "felicity.api.gql.billing.types",
        "description": "felicity.api.gql.billing.types",
        "peekOfCode": "class VoucherCodeType:\n    uid: str\n    code: str\n    voucher_uid: str\n    voucher: VoucherType\n    usage_limit: int\n    used: int\n    is_active: bool\n    created_at: str\n    created_by_uid: str | None",
        "detail": "felicity.api.gql.billing.types",
        "documentation": {}
    },
    {
        "label": "VoucherCustomerType",
        "kind": 6,
        "importPath": "felicity.api.gql.billing.types",
        "description": "felicity.api.gql.billing.types",
        "peekOfCode": "class VoucherCustomerType:\n    uid: str\n    patient_uid: str\n    patient: PatientType\n    voucher_code_uid: str\n    voucher_code: VoucherCodeType\n    created_at: str | None\n    created_by_uid: str | None\n    created_by: UserType | None\n    updated_at: str | None",
        "detail": "felicity.api.gql.billing.types",
        "documentation": {}
    },
    {
        "label": "TestBillType",
        "kind": 6,
        "importPath": "felicity.api.gql.billing.types",
        "description": "felicity.api.gql.billing.types",
        "peekOfCode": "class TestBillType:\n    uid: str\n    bill_id: str\n    patient_uid: str\n    patient: PatientType\n    client_uid: str\n    client: ClientType\n    is_active: bool\n    to_confirm: bool\n    partial: bool",
        "detail": "felicity.api.gql.billing.types",
        "documentation": {}
    },
    {
        "label": "TestBillEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.billing.types",
        "description": "felicity.api.gql.billing.types",
        "peekOfCode": "class TestBillEdge:\n    cursor: str\n    node: TestBillType\n@strawberry.type\nclass TestBillCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[TestBillEdge]]\n    items: Optional[List[TestBillType]]\n    total_count: int\n@strawberry.type",
        "detail": "felicity.api.gql.billing.types",
        "documentation": {}
    },
    {
        "label": "TestBillCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.billing.types",
        "description": "felicity.api.gql.billing.types",
        "peekOfCode": "class TestBillCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[TestBillEdge]]\n    items: Optional[List[TestBillType]]\n    total_count: int\n@strawberry.type\nclass TestBillTransactionType:\n    uid: str\n    test_bill_uid: str\n    test_bill: TestBillType",
        "detail": "felicity.api.gql.billing.types",
        "documentation": {}
    },
    {
        "label": "TestBillTransactionType",
        "kind": 6,
        "importPath": "felicity.api.gql.billing.types",
        "description": "felicity.api.gql.billing.types",
        "peekOfCode": "class TestBillTransactionType:\n    uid: str\n    test_bill_uid: str\n    test_bill: TestBillType\n    kind: str\n    amount: float\n    is_success: bool\n    action_required: bool\n    processed: bool\n    notes: str",
        "detail": "felicity.api.gql.billing.types",
        "documentation": {}
    },
    {
        "label": "TestBillInvoiceType",
        "kind": 6,
        "importPath": "felicity.api.gql.billing.types",
        "description": "felicity.api.gql.billing.types",
        "peekOfCode": "class TestBillInvoiceType:\n    uid: str\n    test_bill_uid: str\n    test_bill: TestBillType\n    json_content: JSONScalar | None\n    pdf_content: BytesScalar | None\n    created_at: str | None\n    created_by_uid: str | None\n    created_by: UserType | None\n    updated_at: str | None",
        "detail": "felicity.api.gql.billing.types",
        "documentation": {}
    },
    {
        "label": "ClientInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.client.mutations",
        "description": "felicity.api.gql.client.mutations",
        "peekOfCode": "class ClientInputType:\n    name: str\n    code: str\n    district_uid: str | None = None\n    email: str | None = None\n    email_cc: str | None = None\n    consent_email: bool | None = False\n    phone_mobile: str | None = None\n    phone_business: str | None = None\n    consent_sms: bool | None = False",
        "detail": "felicity.api.gql.client.mutations",
        "documentation": {}
    },
    {
        "label": "ClientContactInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.client.mutations",
        "description": "felicity.api.gql.client.mutations",
        "peekOfCode": "class ClientContactInputType:\n    first_name: str\n    client_uid: str\n    last_name: str | None = None\n    email: str | None = None\n    email_cc: str | None = None\n    mobile_phone: str | None = None\n    consent_sms: bool | None = False\n    is_active: bool = True\n@strawberry.type",
        "detail": "felicity.api.gql.client.mutations",
        "documentation": {}
    },
    {
        "label": "ClientMutations",
        "kind": 6,
        "importPath": "felicity.api.gql.client.mutations",
        "description": "felicity.api.gql.client.mutations",
        "peekOfCode": "class ClientMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def create_client(\n        self, info: Info, payload: ClientInputType\n    ) -> ClientResponse:\n        is_authenticated, felicity_user = await auth_from_info(info)\n        success, auth_err = verify_user_auth(\n            is_authenticated,\n            felicity_user,\n            \"Only Authenticated user can create clients\",",
        "detail": "felicity.api.gql.client.mutations",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.client.mutations",
        "description": "felicity.api.gql.client.mutations",
        "peekOfCode": "logger = logging.getLogger(__name__)\nClientResponse = strawberry.union(\n    \"ClientResponse\", (ClientType, OperationError), description=\"\"  # noqa\n)\nClientContactResponse = strawberry.union(\n    \"ClientContactResponse\", (ClientContactType, OperationError), description=\"\"  # noqa\n)\nDeleteContactResponse = strawberry.union(\n    \"DeleteContactResponse\", (DeletedItem, OperationError), description=\"\"  # noqa\n)",
        "detail": "felicity.api.gql.client.mutations",
        "documentation": {}
    },
    {
        "label": "ClientResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.client.mutations",
        "description": "felicity.api.gql.client.mutations",
        "peekOfCode": "ClientResponse = strawberry.union(\n    \"ClientResponse\", (ClientType, OperationError), description=\"\"  # noqa\n)\nClientContactResponse = strawberry.union(\n    \"ClientContactResponse\", (ClientContactType, OperationError), description=\"\"  # noqa\n)\nDeleteContactResponse = strawberry.union(\n    \"DeleteContactResponse\", (DeletedItem, OperationError), description=\"\"  # noqa\n)\n@strawberry.input",
        "detail": "felicity.api.gql.client.mutations",
        "documentation": {}
    },
    {
        "label": "ClientContactResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.client.mutations",
        "description": "felicity.api.gql.client.mutations",
        "peekOfCode": "ClientContactResponse = strawberry.union(\n    \"ClientContactResponse\", (ClientContactType, OperationError), description=\"\"  # noqa\n)\nDeleteContactResponse = strawberry.union(\n    \"DeleteContactResponse\", (DeletedItem, OperationError), description=\"\"  # noqa\n)\n@strawberry.input\nclass ClientInputType:\n    name: str\n    code: str",
        "detail": "felicity.api.gql.client.mutations",
        "documentation": {}
    },
    {
        "label": "DeleteContactResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.client.mutations",
        "description": "felicity.api.gql.client.mutations",
        "peekOfCode": "DeleteContactResponse = strawberry.union(\n    \"DeleteContactResponse\", (DeletedItem, OperationError), description=\"\"  # noqa\n)\n@strawberry.input\nclass ClientInputType:\n    name: str\n    code: str\n    district_uid: str | None = None\n    email: str | None = None\n    email_cc: str | None = None",
        "detail": "felicity.api.gql.client.mutations",
        "documentation": {}
    },
    {
        "label": "ClientQuery",
        "kind": 6,
        "importPath": "felicity.api.gql.client.query",
        "description": "felicity.api.gql.client.query",
        "peekOfCode": "class ClientQuery:\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def client_all(\n        self,\n        info: Info,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,\n        text: str | None = None,\n        sort_by: list[str] | None = None,",
        "detail": "felicity.api.gql.client.query",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.client.query",
        "description": "felicity.api.gql.client.query",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@strawberry.type\nclass ClientQuery:\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def client_all(\n        self,\n        info: Info,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,",
        "detail": "felicity.api.gql.client.query",
        "documentation": {}
    },
    {
        "label": "ClientType",
        "kind": 6,
        "importPath": "felicity.api.gql.client.types",
        "description": "felicity.api.gql.client.types",
        "peekOfCode": "class ClientType:\n    uid: str\n    name: str\n    code: str\n    district_uid: str | None\n    district: Optional[DistrictType]\n    province_uid: str | None\n    province: Optional[ProvinceType]\n    email: str | None\n    email_cc: str | None",
        "detail": "felicity.api.gql.client.types",
        "documentation": {}
    },
    {
        "label": "ClientContactType",
        "kind": 6,
        "importPath": "felicity.api.gql.client.types",
        "description": "felicity.api.gql.client.types",
        "peekOfCode": "class ClientContactType:\n    uid: str\n    first_name: str | None\n    last_name: str | None\n    email: str | None\n    mobile_phone: str | None\n    business_phone: str | None\n    is_active: bool | None\n    email: str | None\n    email_cc: str | None",
        "detail": "felicity.api.gql.client.types",
        "documentation": {}
    },
    {
        "label": "ClientEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.client.types",
        "description": "felicity.api.gql.client.types",
        "peekOfCode": "class ClientEdge:\n    cursor: str\n    node: ClientType\n@strawberry.type\nclass ClientCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[ClientEdge]]\n    items: Optional[List[ClientType]]\n    total_count: int",
        "detail": "felicity.api.gql.client.types",
        "documentation": {}
    },
    {
        "label": "ClientCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.client.types",
        "description": "felicity.api.gql.client.types",
        "peekOfCode": "class ClientCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[ClientEdge]]\n    items: Optional[List[ClientType]]\n    total_count: int",
        "detail": "felicity.api.gql.client.types",
        "documentation": {}
    },
    {
        "label": "ReportImpressQuery",
        "kind": 6,
        "importPath": "felicity.api.gql.impress.query",
        "description": "felicity.api.gql.impress.query",
        "peekOfCode": "class ReportImpressQuery:\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def impress_reports_meta(\n            self, info, uids: List[str]\n    ) -> List[ReportImpressType]:\n        return await ReportImpress.get_all(sample_uid__in=uids)\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def impress_reports_download(\n            self, info, uids: List[str]\n    ) -> BytesScalar | None:",
        "detail": "felicity.api.gql.impress.query",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.impress.query",
        "description": "felicity.api.gql.impress.query",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@strawberry.type\nclass ReportImpressQuery:\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def impress_reports_meta(\n            self, info, uids: List[str]\n    ) -> List[ReportImpressType]:\n        return await ReportImpress.get_all(sample_uid__in=uids)\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def impress_reports_download(",
        "detail": "felicity.api.gql.impress.query",
        "documentation": {}
    },
    {
        "label": "ReportImpressType",
        "kind": 6,
        "importPath": "felicity.api.gql.impress.types",
        "description": "felicity.api.gql.impress.types",
        "peekOfCode": "class ReportImpressType:\n    uid: str\n    state: str | None\n    sample_uid: str | None\n    sample: Optional[SampleType]\n    json_content: Optional[JSONScalar]\n    pdf_content: Optional[BytesScalar]\n    email_required: bool | None\n    email_sent: bool | None\n    sms_required: bool | None",
        "detail": "felicity.api.gql.impress.types",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.instrument.mutations",
        "description": "felicity.api.gql.instrument.mutations",
        "peekOfCode": "class InstrumentTypeInputType:\n    name: str\n    description: str | None = \"\"\n@strawberry.input\nclass InstrumentInputType:\n    name: str\n    keyword: str\n    description: str | None = \"\"\n    instrument_type_uid: str | None = None\n    supplier_uid: str | None = None",
        "detail": "felicity.api.gql.instrument.mutations",
        "documentation": {}
    },
    {
        "label": "InstrumentInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.instrument.mutations",
        "description": "felicity.api.gql.instrument.mutations",
        "peekOfCode": "class InstrumentInputType:\n    name: str\n    keyword: str\n    description: str | None = \"\"\n    instrument_type_uid: str | None = None\n    supplier_uid: str | None = None\n    manufacturer_uid: str | None = None\n@strawberry.input\nclass LaboratoryInstrumentInputType:\n    instrument_uid: str",
        "detail": "felicity.api.gql.instrument.mutations",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.instrument.mutations",
        "description": "felicity.api.gql.instrument.mutations",
        "peekOfCode": "class LaboratoryInstrumentInputType:\n    instrument_uid: str\n    lab_name: str\n    serial_number: str | None = None\n    date_commissioned: datetime | None = None\n    date_decommissioned: datetime | None = None\n@strawberry.input\nclass MethodInputType:\n    name: str\n    instruments: Optional[List[str]] = field(default_factory=list)",
        "detail": "felicity.api.gql.instrument.mutations",
        "documentation": {}
    },
    {
        "label": "MethodInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.instrument.mutations",
        "description": "felicity.api.gql.instrument.mutations",
        "peekOfCode": "class MethodInputType:\n    name: str\n    instruments: Optional[List[str]] = field(default_factory=list)\n    analyses: Optional[List[str]] = field(default_factory=list)\n    keyword: str | None = None\n    description: str | None = \"\"\n@strawberry.input\nclass InstrumentCalibrationInput:\n    laboratory_instrument_uid: str\n    date_reported: datetime | None",
        "detail": "felicity.api.gql.instrument.mutations",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibrationInput",
        "kind": 6,
        "importPath": "felicity.api.gql.instrument.mutations",
        "description": "felicity.api.gql.instrument.mutations",
        "peekOfCode": "class InstrumentCalibrationInput:\n    laboratory_instrument_uid: str\n    date_reported: datetime | None\n    start_date: str | None\n    end_date: str | None\n    calibration_id: str | None = \"\"\n    report_id: str | None = \"\"\n    performed_by: str | None = \"\"\n    notes_before: str | None = \"\"\n    work_done: str | None = \"\"",
        "detail": "felicity.api.gql.instrument.mutations",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificateInput",
        "kind": 6,
        "importPath": "felicity.api.gql.instrument.mutations",
        "description": "felicity.api.gql.instrument.mutations",
        "peekOfCode": "class CalibrationCertificateInput:\n    laboratory_instrument_uid: str\n    date_issued: datetime | None\n    valid_from_date: str | None\n    valid_to_date: str | None\n    certificate_code: str | None = \"\"\n    issuer: str | None = \"\"\n    performed_by: str | None = \"\"\n    approved_by: str | None = \"\"\n    remarks: str | None = \"\"",
        "detail": "felicity.api.gql.instrument.mutations",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetenceInput",
        "kind": 6,
        "importPath": "felicity.api.gql.instrument.mutations",
        "description": "felicity.api.gql.instrument.mutations",
        "peekOfCode": "class InstrumentCompetenceInput:\n    instrument_uid: str\n    description: str\n    user_uid: str\n    issue_date: datetime\n    expiry_date: datetime\n    internal: bool\n    competence: str\n@strawberry.type\nclass InstrumentMutations:",
        "detail": "felicity.api.gql.instrument.mutations",
        "documentation": {}
    },
    {
        "label": "InstrumentMutations",
        "kind": 6,
        "importPath": "felicity.api.gql.instrument.mutations",
        "description": "felicity.api.gql.instrument.mutations",
        "peekOfCode": "class InstrumentMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def create_instrument_type(\n        self, info, payload: InstrumentTypeInputType\n    ) -> InstrumentTypeResponse:  # noqa\n        if not payload.name:\n            return OperationError(error=\"Please a name for your instrument type\")\n        exists = await models.InstrumentType.get(name=payload.name)\n        if exists:\n            return OperationError(",
        "detail": "felicity.api.gql.instrument.mutations",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.instrument.mutations",
        "description": "felicity.api.gql.instrument.mutations",
        "peekOfCode": "logger = logging.getLogger(__name__)\nInstrumentTypeResponse = strawberry.union(\n    \"InstrumentTypeResponse\",\n    (InstrumentTypeType, OperationError),\n    description=\"\",  # noqa\n)\nInstrumentResponse = strawberry.union(\n    \"InstrumentResponse\", (InstrumentType, OperationError), description=\"\"  # noqa\n)\nLaboratoryInstrumentResponse = strawberry.union(",
        "detail": "felicity.api.gql.instrument.mutations",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.instrument.mutations",
        "description": "felicity.api.gql.instrument.mutations",
        "peekOfCode": "InstrumentTypeResponse = strawberry.union(\n    \"InstrumentTypeResponse\",\n    (InstrumentTypeType, OperationError),\n    description=\"\",  # noqa\n)\nInstrumentResponse = strawberry.union(\n    \"InstrumentResponse\", (InstrumentType, OperationError), description=\"\"  # noqa\n)\nLaboratoryInstrumentResponse = strawberry.union(\n    \"LaboratoryInstrumentResponse\",",
        "detail": "felicity.api.gql.instrument.mutations",
        "documentation": {}
    },
    {
        "label": "InstrumentResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.instrument.mutations",
        "description": "felicity.api.gql.instrument.mutations",
        "peekOfCode": "InstrumentResponse = strawberry.union(\n    \"InstrumentResponse\", (InstrumentType, OperationError), description=\"\"  # noqa\n)\nLaboratoryInstrumentResponse = strawberry.union(\n    \"LaboratoryInstrumentResponse\",\n    (LaboratoryInstrumentType, OperationError),\n    description=\"\",  # noqa\n)\nInstrumentCompetenceResponse = strawberry.union(\n    \"InstrumentCompetenceResponse\",",
        "detail": "felicity.api.gql.instrument.mutations",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.instrument.mutations",
        "description": "felicity.api.gql.instrument.mutations",
        "peekOfCode": "LaboratoryInstrumentResponse = strawberry.union(\n    \"LaboratoryInstrumentResponse\",\n    (LaboratoryInstrumentType, OperationError),\n    description=\"\",  # noqa\n)\nInstrumentCompetenceResponse = strawberry.union(\n    \"InstrumentCompetenceResponse\",\n    (InstrumentCompetenceType, OperationError),\n    description=\"\",  # noqa\n)",
        "detail": "felicity.api.gql.instrument.mutations",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetenceResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.instrument.mutations",
        "description": "felicity.api.gql.instrument.mutations",
        "peekOfCode": "InstrumentCompetenceResponse = strawberry.union(\n    \"InstrumentCompetenceResponse\",\n    (InstrumentCompetenceType, OperationError),\n    description=\"\",  # noqa\n)\nMethodResponse = strawberry.union(\n    \"MethodResponse\", (MethodType, OperationError), description=\"\"  # noqa\n)\nInstrumentCalibrationResponse = strawberry.union(\n    \"InstrumentCalibrationResponse\",",
        "detail": "felicity.api.gql.instrument.mutations",
        "documentation": {}
    },
    {
        "label": "MethodResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.instrument.mutations",
        "description": "felicity.api.gql.instrument.mutations",
        "peekOfCode": "MethodResponse = strawberry.union(\n    \"MethodResponse\", (MethodType, OperationError), description=\"\"  # noqa\n)\nInstrumentCalibrationResponse = strawberry.union(\n    \"InstrumentCalibrationResponse\",\n    (InstrumentCalibrationType, OperationError),\n    description=\"\",  # noqa\n)\nCalibrationCertificateResponse = strawberry.union(\n    \"CalibrationCertificateResponse\",",
        "detail": "felicity.api.gql.instrument.mutations",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibrationResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.instrument.mutations",
        "description": "felicity.api.gql.instrument.mutations",
        "peekOfCode": "InstrumentCalibrationResponse = strawberry.union(\n    \"InstrumentCalibrationResponse\",\n    (InstrumentCalibrationType, OperationError),\n    description=\"\",  # noqa\n)\nCalibrationCertificateResponse = strawberry.union(\n    \"CalibrationCertificateResponse\",\n    (CalibrationCertificateType, OperationError),\n    description=\"\",  # noqa\n)",
        "detail": "felicity.api.gql.instrument.mutations",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificateResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.instrument.mutations",
        "description": "felicity.api.gql.instrument.mutations",
        "peekOfCode": "CalibrationCertificateResponse = strawberry.union(\n    \"CalibrationCertificateResponse\",\n    (CalibrationCertificateType, OperationError),\n    description=\"\",  # noqa\n)\n@strawberry.input\nclass InstrumentTypeInputType:\n    name: str\n    description: str | None = \"\"\n@strawberry.input",
        "detail": "felicity.api.gql.instrument.mutations",
        "documentation": {}
    },
    {
        "label": "InstrumentQuery",
        "kind": 6,
        "importPath": "felicity.api.gql.instrument.query",
        "description": "felicity.api.gql.instrument.query",
        "peekOfCode": "class InstrumentQuery:\n    instrument_type_all: InstrumentTypeCursorPage = strawberry.field(\n        resolver=get_all_instrument_types, permission_classes=[IsAuthenticated]\n    )\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def instrument_type_by_uid(self, info, uid: str) -> InstrumentTypeType:\n        query = await models.InstrumentType.get(uid=uid)\n        return query\n    instrument_all: InstrumentCursorPage = strawberry.field(\n        resolver=get_all_instruments, permission_classes=[IsAuthenticated]",
        "detail": "felicity.api.gql.instrument.query",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeType",
        "kind": 6,
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "peekOfCode": "class InstrumentTypeType:\n    uid: str\n    name: str | None\n    description: str | None\n    #\n    created_by_uid: str | None\n    created_by: Optional[\"UserType\"]\n    created_at: str | None\n    updated_by_uid: str | None\n    updated_by: Optional[\"UserType\"]",
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "peekOfCode": "class InstrumentTypeEdge:\n    cursor: str\n    node: InstrumentTypeType\n@strawberry.type\nclass InstrumentTypeCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[InstrumentTypeEdge]]\n    items: Optional[List[InstrumentTypeType]]\n    total_count: int\n@strawberry.type",
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "peekOfCode": "class InstrumentTypeCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[InstrumentTypeEdge]]\n    items: Optional[List[InstrumentTypeType]]\n    total_count: int\n@strawberry.type\nclass InstrumentType:\n    uid: str\n    name: str | None\n    description: str | None",
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "InstrumentType",
        "kind": 6,
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "peekOfCode": "class InstrumentType:\n    uid: str\n    name: str | None\n    description: str | None\n    keyword: str | None\n    supplier_uid: str | None\n    supplier: Optional[SupplierType]\n    manufacturer_uid: str | None\n    manufacturer: Optional[ManufacturerType]\n    instrument_type_uid: str | None",
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "InstrumentEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "peekOfCode": "class InstrumentEdge:\n    cursor: str\n    node: InstrumentType\n@strawberry.type\nclass InstrumentCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[InstrumentEdge]]\n    items: Optional[List[InstrumentType]]\n    total_count: int\n@strawberry.type",
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "InstrumentCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "peekOfCode": "class InstrumentCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[InstrumentEdge]]\n    items: Optional[List[InstrumentType]]\n    total_count: int\n@strawberry.type\nclass LaboratoryInstrumentType:\n    uid: str\n    instrument_uid: str | None = None\n    instrument: InstrumentType | None = None",
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentType",
        "kind": 6,
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "peekOfCode": "class LaboratoryInstrumentType:\n    uid: str\n    instrument_uid: str | None = None\n    instrument: InstrumentType | None = None\n    lab_name: str | None = None\n    serial_number: str | None = None\n    date_commissioned: datetime | None = None\n    date_decommissioned: datetime | None = None\n    #\n    created_by_uid: str | None",
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "peekOfCode": "class LaboratoryInstrumentEdge:\n    cursor: str\n    node: LaboratoryInstrumentType\n@strawberry.type\nclass LaboratoryInstrumentCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[LaboratoryInstrumentEdge]]\n    items: Optional[List[LaboratoryInstrumentType]]\n    total_count: int\n@strawberry.type",
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "peekOfCode": "class LaboratoryInstrumentCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[LaboratoryInstrumentEdge]]\n    items: Optional[List[LaboratoryInstrumentType]]\n    total_count: int\n@strawberry.type\nclass InstrumentCalibrationType:\n    uid: str\n    laboratory_instrument_uid: str\n    laboratory_instrument: LaboratoryInstrumentType | None",
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibrationType",
        "kind": 6,
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "peekOfCode": "class InstrumentCalibrationType:\n    uid: str\n    laboratory_instrument_uid: str\n    laboratory_instrument: LaboratoryInstrumentType | None\n    calibration_id: str\n    date_reported: datetime\n    report_id: str\n    performed_by: str\n    start_date: datetime\n    end_date: datetime",
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificateType",
        "kind": 6,
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "peekOfCode": "class CalibrationCertificateType:\n    uid: str\n    laboratory_instrument_uid: str\n    laboratory_instrument: LaboratoryInstrumentType | None\n    certificate_code: str\n    internal: bool\n    issuer: str\n    date_issued: datetime\n    valid_from_date: datetime\n    valid_to_date: datetime",
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetenceType",
        "kind": 6,
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "peekOfCode": "class InstrumentCompetenceType:\n    uid: str\n    instrument_uid: str\n    instrument: InstrumentType | None\n    description: str\n    user_uid: str\n    user: UserType | None\n    issue_date: datetime\n    expiry_date: datetime\n    internal: bool",
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "MethodType",
        "kind": 6,
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "peekOfCode": "class MethodType:\n    uid: str\n    name: str | None\n    description: str | None\n    keyword: str | None\n    #\n    created_by_uid: str | None\n    created_by: Optional[\"UserType\"]\n    created_at: str | None\n    updated_by_uid: str | None",
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "MethodEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "peekOfCode": "class MethodEdge:\n    cursor: str\n    node: MethodType\n@strawberry.type\nclass MethodCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[MethodEdge]]\n    items: Optional[List[MethodType]]\n    total_count: int",
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "MethodCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.instrument.types",
        "description": "felicity.api.gql.instrument.types",
        "peekOfCode": "class MethodCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[MethodEdge]]\n    items: Optional[List[MethodType]]\n    total_count: int",
        "detail": "felicity.api.gql.instrument.types",
        "documentation": {}
    },
    {
        "label": "StockItemInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.mutations",
        "description": "felicity.api.gql.inventory.mutations",
        "peekOfCode": "class StockItemInputType:\n    name: str\n    description: str\n    category_uid: str | None = None\n    hazard_uid: str | None = None\n    maximum_level: int | None = None\n    minimum_level: int | None = None\nStockItemVariantResponse = strawberry.union(\n    \"StockItemVariantResponse\", (types.StockItemVariantType, OperationError), description=\"\"  # noqa\n)",
        "detail": "felicity.api.gql.inventory.mutations",
        "documentation": {}
    },
    {
        "label": "StockItemVariantInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.mutations",
        "description": "felicity.api.gql.inventory.mutations",
        "peekOfCode": "class StockItemVariantInputType:\n    name: str\n    description: str\n    maximum_level: int | None = None\n    minimum_level: int | None = None\nStockCategoryResponse = strawberry.union(\n    \"StockCategoryResponse\",\n    (types.StockCategoryType, OperationError),\n    description=\"\",  # noqa\n)",
        "detail": "felicity.api.gql.inventory.mutations",
        "documentation": {}
    },
    {
        "label": "StockCategoryInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.mutations",
        "description": "felicity.api.gql.inventory.mutations",
        "peekOfCode": "class StockCategoryInputType:\n    name: str\n    description: str\nHazardResponse = strawberry.union(\n    \"HazardResponse\", (types.HazardType, OperationError), description=\"\"  # noqa\n)\n@strawberry.input\nclass HazardInputType:\n    name: str\n    description: str",
        "detail": "felicity.api.gql.inventory.mutations",
        "documentation": {}
    },
    {
        "label": "HazardInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.mutations",
        "description": "felicity.api.gql.inventory.mutations",
        "peekOfCode": "class HazardInputType:\n    name: str\n    description: str\nStockUnitResponse = strawberry.union(\n    \"StockUnitResponse\", (types.StockUnitType, OperationError), description=\"\"  # noqa\n)\n@strawberry.input\nclass StockUnitInputType:\n    name: str\n@strawberry.input",
        "detail": "felicity.api.gql.inventory.mutations",
        "documentation": {}
    },
    {
        "label": "StockUnitInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.mutations",
        "description": "felicity.api.gql.inventory.mutations",
        "peekOfCode": "class StockUnitInputType:\n    name: str\n@strawberry.input\nclass StockReceiptInputType:\n    product_uid: str\n    lot_number: str\n    unit_price: float | None = None\n    total_price: float | None = None\n    supplier_uid: str\n    unit_uid: str",
        "detail": "felicity.api.gql.inventory.mutations",
        "documentation": {}
    },
    {
        "label": "StockReceiptInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.mutations",
        "description": "felicity.api.gql.inventory.mutations",
        "peekOfCode": "class StockReceiptInputType:\n    product_uid: str\n    lot_number: str\n    unit_price: float | None = None\n    total_price: float | None = None\n    supplier_uid: str\n    unit_uid: str\n    singles_received: int\n    packages_received: int\n    package_factor: int",
        "detail": "felicity.api.gql.inventory.mutations",
        "documentation": {}
    },
    {
        "label": "StockOrderLineType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.mutations",
        "description": "felicity.api.gql.inventory.mutations",
        "peekOfCode": "class StockOrderLineType:\n    stock_order: types.StockOrderType\n    order_products: List[types.StockOrderProductType]\nStockOrderResponse = strawberry.union(\n    \"StockOrderResponse\",\n    (StockOrderLineType, types.StockOrderType, OperationError),\n    description=\"\",  # noqa\n)\n@strawberry.input\nclass StockOrderProductLineInputType:",
        "detail": "felicity.api.gql.inventory.mutations",
        "documentation": {}
    },
    {
        "label": "StockOrderProductLineInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.mutations",
        "description": "felicity.api.gql.inventory.mutations",
        "peekOfCode": "class StockOrderProductLineInputType:\n    product_uid: str\n    stock_lot_uid: str\n    quantity: int\n    price: float = 0.0\n    remarks: str | None = None\n@strawberry.input\nclass StockOrderInputType:\n    order_products: List[StockOrderProductLineInputType]\n    department_uid: str | None = None",
        "detail": "felicity.api.gql.inventory.mutations",
        "documentation": {}
    },
    {
        "label": "StockOrderInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.mutations",
        "description": "felicity.api.gql.inventory.mutations",
        "peekOfCode": "class StockOrderInputType:\n    order_products: List[StockOrderProductLineInputType]\n    department_uid: str | None = None\n@strawberry.input\nclass StockOrderApprovalInputType:\n    remarks: str\n    status: str\nStockTransactionResponse = strawberry.union(\n    \"StockTransactionResponse\",\n    (types.StockTransactionType, OperationError),",
        "detail": "felicity.api.gql.inventory.mutations",
        "documentation": {}
    },
    {
        "label": "StockOrderApprovalInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.mutations",
        "description": "felicity.api.gql.inventory.mutations",
        "peekOfCode": "class StockOrderApprovalInputType:\n    remarks: str\n    status: str\nStockTransactionResponse = strawberry.union(\n    \"StockTransactionResponse\",\n    (types.StockTransactionType, OperationError),\n    description=\"\",  # noqa\n)\n@strawberry.input\nclass StockTransactionInputType:",
        "detail": "felicity.api.gql.inventory.mutations",
        "documentation": {}
    },
    {
        "label": "StockTransactionInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.mutations",
        "description": "felicity.api.gql.inventory.mutations",
        "peekOfCode": "class StockTransactionInputType:\n    product_uid: str\n    issued: int\n    issued_to_uid: str\n    department_uid: str | None = None\nStockAdjustmentResponse = strawberry.union(\n    \"StockAdjustmentResponse\",\n    (types.StockAdjustmentType, OperationError),\n    description=\"\",  # noqa\n)",
        "detail": "felicity.api.gql.inventory.mutations",
        "documentation": {}
    },
    {
        "label": "StockAdjustmentInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.mutations",
        "description": "felicity.api.gql.inventory.mutations",
        "peekOfCode": "class StockAdjustmentInputType:\n    product_uid: str\n    stock_lot_uid: str\n    adjustment_type: str\n    adjust: int\n    remarks: str | None = None\n@strawberry.type\nclass InventoryMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def create_stock_item(",
        "detail": "felicity.api.gql.inventory.mutations",
        "documentation": {}
    },
    {
        "label": "InventoryMutations",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.mutations",
        "description": "felicity.api.gql.inventory.mutations",
        "peekOfCode": "class InventoryMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def create_stock_item(\n            self, info, payload: StockItemInputType\n    ) -> StockItemResponse:\n        is_authenticated, felicity_user = await auth_from_info(info)\n        auth_success, auth_error = verify_user_auth(\n            is_authenticated,\n            felicity_user,\n            \"Only Authenticated user can create stock item\",",
        "detail": "felicity.api.gql.inventory.mutations",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.inventory.mutations",
        "description": "felicity.api.gql.inventory.mutations",
        "peekOfCode": "logger = logging.getLogger(__name__)\nStockItemResponse = strawberry.union(\n    \"StockItemResponse\", (types.StockItemType, OperationError), description=\"\"  # noqa\n)\n@strawberry.input\nclass StockItemInputType:\n    name: str\n    description: str\n    category_uid: str | None = None\n    hazard_uid: str | None = None",
        "detail": "felicity.api.gql.inventory.mutations",
        "documentation": {}
    },
    {
        "label": "StockItemResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.inventory.mutations",
        "description": "felicity.api.gql.inventory.mutations",
        "peekOfCode": "StockItemResponse = strawberry.union(\n    \"StockItemResponse\", (types.StockItemType, OperationError), description=\"\"  # noqa\n)\n@strawberry.input\nclass StockItemInputType:\n    name: str\n    description: str\n    category_uid: str | None = None\n    hazard_uid: str | None = None\n    maximum_level: int | None = None",
        "detail": "felicity.api.gql.inventory.mutations",
        "documentation": {}
    },
    {
        "label": "StockItemVariantResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.inventory.mutations",
        "description": "felicity.api.gql.inventory.mutations",
        "peekOfCode": "StockItemVariantResponse = strawberry.union(\n    \"StockItemVariantResponse\", (types.StockItemVariantType, OperationError), description=\"\"  # noqa\n)\n@strawberry.input\nclass StockItemVariantInputType:\n    name: str\n    description: str\n    maximum_level: int | None = None\n    minimum_level: int | None = None\nStockCategoryResponse = strawberry.union(",
        "detail": "felicity.api.gql.inventory.mutations",
        "documentation": {}
    },
    {
        "label": "StockCategoryResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.inventory.mutations",
        "description": "felicity.api.gql.inventory.mutations",
        "peekOfCode": "StockCategoryResponse = strawberry.union(\n    \"StockCategoryResponse\",\n    (types.StockCategoryType, OperationError),\n    description=\"\",  # noqa\n)\n@strawberry.input\nclass StockCategoryInputType:\n    name: str\n    description: str\nHazardResponse = strawberry.union(",
        "detail": "felicity.api.gql.inventory.mutations",
        "documentation": {}
    },
    {
        "label": "HazardResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.inventory.mutations",
        "description": "felicity.api.gql.inventory.mutations",
        "peekOfCode": "HazardResponse = strawberry.union(\n    \"HazardResponse\", (types.HazardType, OperationError), description=\"\"  # noqa\n)\n@strawberry.input\nclass HazardInputType:\n    name: str\n    description: str\nStockUnitResponse = strawberry.union(\n    \"StockUnitResponse\", (types.StockUnitType, OperationError), description=\"\"  # noqa\n)",
        "detail": "felicity.api.gql.inventory.mutations",
        "documentation": {}
    },
    {
        "label": "StockUnitResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.inventory.mutations",
        "description": "felicity.api.gql.inventory.mutations",
        "peekOfCode": "StockUnitResponse = strawberry.union(\n    \"StockUnitResponse\", (types.StockUnitType, OperationError), description=\"\"  # noqa\n)\n@strawberry.input\nclass StockUnitInputType:\n    name: str\n@strawberry.input\nclass StockReceiptInputType:\n    product_uid: str\n    lot_number: str",
        "detail": "felicity.api.gql.inventory.mutations",
        "documentation": {}
    },
    {
        "label": "StockReceiptResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.inventory.mutations",
        "description": "felicity.api.gql.inventory.mutations",
        "peekOfCode": "StockReceiptResponse = strawberry.union(\n    \"StockReceiptResponse\",\n    (types.StockReceiptType, OperationError),\n    description=\"\",  # noqa\n)\n@strawberry.type\nclass StockOrderLineType:\n    stock_order: types.StockOrderType\n    order_products: List[types.StockOrderProductType]\nStockOrderResponse = strawberry.union(",
        "detail": "felicity.api.gql.inventory.mutations",
        "documentation": {}
    },
    {
        "label": "StockOrderResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.inventory.mutations",
        "description": "felicity.api.gql.inventory.mutations",
        "peekOfCode": "StockOrderResponse = strawberry.union(\n    \"StockOrderResponse\",\n    (StockOrderLineType, types.StockOrderType, OperationError),\n    description=\"\",  # noqa\n)\n@strawberry.input\nclass StockOrderProductLineInputType:\n    product_uid: str\n    stock_lot_uid: str\n    quantity: int",
        "detail": "felicity.api.gql.inventory.mutations",
        "documentation": {}
    },
    {
        "label": "StockTransactionResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.inventory.mutations",
        "description": "felicity.api.gql.inventory.mutations",
        "peekOfCode": "StockTransactionResponse = strawberry.union(\n    \"StockTransactionResponse\",\n    (types.StockTransactionType, OperationError),\n    description=\"\",  # noqa\n)\n@strawberry.input\nclass StockTransactionInputType:\n    product_uid: str\n    issued: int\n    issued_to_uid: str",
        "detail": "felicity.api.gql.inventory.mutations",
        "documentation": {}
    },
    {
        "label": "StockAdjustmentResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.inventory.mutations",
        "description": "felicity.api.gql.inventory.mutations",
        "peekOfCode": "StockAdjustmentResponse = strawberry.union(\n    \"StockAdjustmentResponse\",\n    (types.StockAdjustmentType, OperationError),\n    description=\"\",  # noqa\n)\n@strawberry.input\nclass StockAdjustmentInputType:\n    product_uid: str\n    stock_lot_uid: str\n    adjustment_type: str",
        "detail": "felicity.api.gql.inventory.mutations",
        "documentation": {}
    },
    {
        "label": "InventoryQuery",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.query",
        "description": "felicity.api.gql.inventory.query",
        "peekOfCode": "class InventoryQuery:\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def stock_item_all(\n            self,\n            info,\n            page_size: int | None = None,\n            after_cursor: str | None = None,\n            before_cursor: str | None = None,\n            text: str | None = None,\n            sort_by: list[str] | None = None,",
        "detail": "felicity.api.gql.inventory.query",
        "documentation": {}
    },
    {
        "label": "StockItemType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockItemType:\n    uid: str\n    name: str\n    category_uid: str | None = None\n    category: Optional[\"StockCategoryType\"]\n    hazard_uid: str | None = None\n    hazard: Optional[\"HazardType\"]\n    minimum_level: int | None\n    maximum_level: int | None\n    description: str | None",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockItemEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockItemEdge:\n    cursor: str\n    node: StockItemType\n@strawberry.type\nclass StockItemCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[StockItemEdge]]\n    items: Optional[List[StockItemType]]\n    total_count: int\n@strawberry.type",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockItemCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockItemCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[StockItemEdge]]\n    items: Optional[List[StockItemType]]\n    total_count: int\n@strawberry.type\nclass StockItemVariantType:\n    uid: str\n    name: str\n    stock_item_uid: str | None",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockItemVariantType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockItemVariantType:\n    uid: str\n    name: str\n    stock_item_uid: str | None\n    stock_item: Optional[StockItemType]\n    minimum_level: int | None\n    maximum_level: int | None\n    description: str | None\n    created_at: str | None\n    created_by_uid: str | None",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockItemVariantEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockItemVariantEdge:\n    cursor: str\n    node: StockItemVariantType\n@strawberry.type\nclass StockItemVariantCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[StockItemVariantType]]\n    items: Optional[List[StockItemVariantType]]\n    total_count: int\n@strawberry.type",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockItemVariantCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockItemVariantCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[StockItemVariantType]]\n    items: Optional[List[StockItemVariantType]]\n    total_count: int\n@strawberry.type\nclass StockCategoryType:\n    uid: str\n    name: str\n    description: str | None",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockCategoryType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockCategoryType:\n    uid: str\n    name: str\n    description: str | None\n    created_at: str | None\n    created_by_uid: str | None\n    created_by: UserType | None\n    updated_at: str | None\n    updated_by_uid: str | None\n    updated_by: UserType | None",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "HazardType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class HazardType:\n    uid: str\n    name: str\n    description: str | None\n    created_at: str | None\n    created_by_uid: str | None\n    created_by: UserType | None\n    updated_at: str | None\n    updated_by_uid: str | None\n    updated_by: UserType | None",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockUnitType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockUnitType:\n    uid: str\n    name: str\n    description: str\n    synonyms: str\n    created_at: str | None\n    created_by_uid: str | None\n    created_by: UserType | None\n    updated_at: str | None\n    updated_by_uid: str | None",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockPackagingType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockPackagingType:\n    uid: str\n    name: str\n    created_at: str | None\n    created_by_uid: str | None\n    created_by: UserType | None\n    updated_at: str | None\n    updated_by_uid: str | None\n    updated_by: UserType | None\n@strawberry.type",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockLotType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockLotType:\n    uid: str\n    product_uid: str\n    product: Optional[StockItemVariantType]\n    lot_number: str\n    expiry_date: datetime\n    remarks: str | None\n    quantity: int\n    @strawberry.field\n    async def quantity(self, info) -> int:",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockLotEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockLotEdge:\n    cursor: str\n    node: StockLotType\n@strawberry.type\nclass StockLotCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[StockLotEdge]]\n    items: Optional[List[StockLotType]]\n    total_count: int\n@strawberry.type",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockLotCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockLotCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[StockLotEdge]]\n    items: Optional[List[StockLotType]]\n    total_count: int\n@strawberry.type\nclass StockProductInventoryType:\n    uid: str\n    product_uid: str\n    product: Optional[StockItemVariantType]",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockProductInventoryType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockProductInventoryType:\n    uid: str\n    product_uid: str\n    product: Optional[StockItemVariantType]\n    stock_lot_uid: str\n    stock_lot: Optional[StockLotType]\n    quantity: int\n    remarks: str | None\n@strawberry.type\nclass StockProductInventoryEdge:",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockProductInventoryEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockProductInventoryEdge:\n    cursor: str\n    node: StockProductInventoryType\n@strawberry.type\nclass StockProductInventoryCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[StockProductInventoryEdge]]\n    items: Optional[List[StockProductInventoryType]]\n    total_count: int\n@strawberry.type",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockProductInventoryCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockProductInventoryCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[StockProductInventoryEdge]]\n    items: Optional[List[StockProductInventoryType]]\n    total_count: int\n@strawberry.type\nclass StockOrderType:\n    uid: str\n    fulfilled_by_uid: str | None\n    fulfilled_by: UserType | None",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockOrderType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockOrderType:\n    uid: str\n    fulfilled_by_uid: str | None\n    fulfilled_by: UserType | None\n    order_by_uid: str | None\n    order_by: UserType | None\n    department_uid: str | None\n    department: Optional[DepartmentType]\n    status: str | None\n    remarks: str | None",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockOrderEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockOrderEdge:\n    cursor: str\n    node: StockOrderType\n@strawberry.type\nclass StockOrderCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[StockOrderEdge]]\n    items: Optional[List[StockOrderType]]\n    total_count: int\n@strawberry.type",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockOrderCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockOrderCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[StockOrderEdge]]\n    items: Optional[List[StockOrderType]]\n    total_count: int\n@strawberry.type\nclass StockOrderProductType:\n    uid: str\n    product_uid: str | None\n    product: Optional[StockItemVariantType]",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockOrderProductType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockOrderProductType:\n    uid: str\n    product_uid: str | None\n    product: Optional[StockItemVariantType]\n    stock_lot_uid: str\n    stock_lot: Optional[StockLotType]\n    order_uid: str | None\n    order: Optional[StockOrderType]\n    quantity: int | None\n    created_at: str | None",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockReceiptType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockReceiptType:\n    uid: str\n    product_uid: str | None\n    product: Optional[StockItemVariantType]\n    stock_lot_uid: str | None\n    stock_lot: Optional[StockLotType]\n    unit_price: float\n    total_price: float\n    supplier_uid: str | None\n    supplier: Optional[SupplierType]",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockReceiptEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockReceiptEdge:\n    cursor: str\n    node: StockReceiptType\n@strawberry.type\nclass StockReceiptCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[StockReceiptEdge]]\n    items: Optional[List[StockReceiptType]]\n    total_count: int\n@strawberry.type",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockReceiptCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockReceiptCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[StockReceiptEdge]]\n    items: Optional[List[StockReceiptType]]\n    total_count: int\n@strawberry.type\nclass StockIssueType:\n    uid: str\n    product_uid: str | None\n    product: Optional[StockItemVariantType]",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockIssueType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockIssueType:\n    uid: str\n    product_uid: str | None\n    product: Optional[StockItemVariantType]\n    stock_lot_uid: str | None\n    stock_lot: Optional[StockLotType]\n    issued: int\n    issued_to_uid: str\n    issued_to: Optional[UserType]\n    department_uid: str",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockIssueEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockIssueEdge:\n    cursor: str\n    node: StockIssueType\n@strawberry.type\nclass StockIssueCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[StockIssueEdge]]\n    items: Optional[List[StockIssueType]]\n    total_count: int\n@strawberry.type",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockIssueCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockIssueCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[StockIssueEdge]]\n    items: Optional[List[StockIssueType]]\n    total_count: int\n@strawberry.type\nclass StockTransactionType:\n    uid: str\n    product_uid: str | None\n    product: Optional[StockItemVariantType]",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockTransactionType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockTransactionType:\n    uid: str\n    product_uid: str | None\n    product: Optional[StockItemVariantType]\n    issued: int | None\n    issued_to_uid: str | None\n    issued_to: UserType | None\n    department_uid: str | None\n    department: Optional[DepartmentType]\n    date_issued: datetime | None",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockTransactionEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockTransactionEdge:\n    cursor: str\n    node: StockTransactionType\n@strawberry.type\nclass StockTransactionCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[StockTransactionEdge]]\n    items: Optional[List[StockTransactionType]]\n    total_count: int\n@strawberry.type",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockTransactionCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockTransactionCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[StockTransactionEdge]]\n    items: Optional[List[StockTransactionType]]\n    total_count: int\n@strawberry.type\nclass StockAdjustmentType:\n    uid: str\n    product_uid: str | None\n    product: Optional[StockItemVariantType]",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockAdjustmentType",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockAdjustmentType:\n    uid: str\n    product_uid: str | None\n    product: Optional[StockItemVariantType]\n    stock_lot_uid: str | None\n    stock_lot: Optional[StockLotType]\n    adjustment_type: str | None\n    adjust: int | None\n    adjustment_date: str | None\n    remarks: str | None",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockAdjustmentEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockAdjustmentEdge:\n    cursor: str\n    node: StockAdjustmentType\n@strawberry.type\nclass StockAdjustmentCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[StockAdjustmentEdge]]\n    items: Optional[List[StockAdjustmentType]]\n    total_count: int",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "StockAdjustmentCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.inventory.types",
        "description": "felicity.api.gql.inventory.types",
        "peekOfCode": "class StockAdjustmentCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[StockAdjustmentEdge]]\n    items: Optional[List[StockAdjustmentType]]\n    total_count: int",
        "detail": "felicity.api.gql.inventory.types",
        "documentation": {}
    },
    {
        "label": "MessageMutations",
        "kind": 6,
        "importPath": "felicity.api.gql.messaging.mutations",
        "description": "felicity.api.gql.messaging.mutations",
        "peekOfCode": "class MessageMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def send_message(\n        self, info, recipients: List[str], body: str\n    ) -> MessageResponse:\n        inspector = inspect.getargvalues(inspect.currentframe())\n        passed_args = get_passed_args(inspector)\n        is_authenticated, felicity_user = await auth_from_info(info)\n        verify_user_auth(\n            is_authenticated, felicity_user, \"Only Authenticated user can send messages\"",
        "detail": "felicity.api.gql.messaging.mutations",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.messaging.mutations",
        "description": "felicity.api.gql.messaging.mutations",
        "peekOfCode": "logger = logging.getLogger(__name__)\nMessageResponse = strawberry.union(\n    \"MessageResponse\", (MessageType, OperationError), description=\"\"  # noqa\n)\n@strawberry.type\nclass MessageMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def send_message(\n        self, info, recipients: List[str], body: str\n    ) -> MessageResponse:",
        "detail": "felicity.api.gql.messaging.mutations",
        "documentation": {}
    },
    {
        "label": "MessageResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.messaging.mutations",
        "description": "felicity.api.gql.messaging.mutations",
        "peekOfCode": "MessageResponse = strawberry.union(\n    \"MessageResponse\", (MessageType, OperationError), description=\"\"  # noqa\n)\n@strawberry.type\nclass MessageMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def send_message(\n        self, info, recipients: List[str], body: str\n    ) -> MessageResponse:\n        inspector = inspect.getargvalues(inspect.currentframe())",
        "detail": "felicity.api.gql.messaging.mutations",
        "documentation": {}
    },
    {
        "label": "MessageQuery",
        "kind": 6,
        "importPath": "felicity.api.gql.messaging.query",
        "description": "felicity.api.gql.messaging.query",
        "peekOfCode": "class MessageQuery:\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def threads_for_user(\n        self, info, uid: str\n    ) -> Optional[List[MessageThreadType]]:\n        return await models.MessageThread.get_all(recipients__uid__in=[uid])\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def thread_by_uid(self, info, uid: str) -> Optional[MessageThreadType]:\n        return await models.MessageThread.get(uid=uid)",
        "detail": "felicity.api.gql.messaging.query",
        "documentation": {}
    },
    {
        "label": "MessageThreadType",
        "kind": 6,
        "importPath": "felicity.api.gql.messaging.types",
        "description": "felicity.api.gql.messaging.types",
        "peekOfCode": "class MessageThreadType:\n    uid: str\n    recipients: List[UserType]\n    messages: Optional[List[\"MessageType\"]]\n    broadcast: bool\n    deleted_by: list[UserType] | None\n    created_by_uid: str | None\n    created_at: str | None\n    created_by_uid: str | None\n    created_by: UserType | None",
        "detail": "felicity.api.gql.messaging.types",
        "documentation": {}
    },
    {
        "label": "MessageType",
        "kind": 6,
        "importPath": "felicity.api.gql.messaging.types",
        "description": "felicity.api.gql.messaging.types",
        "peekOfCode": "class MessageType:\n    uid: str\n    thread_uid: str\n    thread: Optional[\"MessageThreadType\"]\n    body: str\n    viewers: list[UserType] | None\n    deleted_by: list[UserType] | None\n    parent_id: str\n    parent: Optional[\"MessageType\"]\n    left: int",
        "detail": "felicity.api.gql.messaging.types",
        "documentation": {}
    },
    {
        "label": "NoticeInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.noticeboard.mutations",
        "description": "felicity.api.gql.noticeboard.mutations",
        "peekOfCode": "class NoticeInputType:\n    title: str\n    body: str\n    expiry: str\n    groups: Optional[List[str]]\n    departments: Optional[List[str]]\n@strawberry.type\nclass NoticeMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def create_notice(self, info, payload: NoticeInputType) -> NoticeResponse:",
        "detail": "felicity.api.gql.noticeboard.mutations",
        "documentation": {}
    },
    {
        "label": "NoticeMutations",
        "kind": 6,
        "importPath": "felicity.api.gql.noticeboard.mutations",
        "description": "felicity.api.gql.noticeboard.mutations",
        "peekOfCode": "class NoticeMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def create_notice(self, info, payload: NoticeInputType) -> NoticeResponse:\n        is_authenticated, felicity_user = await auth_from_info(info)\n        verify_user_auth(\n            is_authenticated,\n            felicity_user,\n            \"Only Authenticated user can create notices\",\n        )\n        if not payload.title or not payload.body or not payload.expiry:",
        "detail": "felicity.api.gql.noticeboard.mutations",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.noticeboard.mutations",
        "description": "felicity.api.gql.noticeboard.mutations",
        "peekOfCode": "logger = logging.getLogger(__name__)\nNoticeResponse = strawberry.union(\n    \"NoticeResponse\",\n    (NoticeType, OperationError),  # noqa\n    description=\"Union of possible outcomes when adding a new notice\",\n)\n@strawberry.input\nclass NoticeInputType:\n    title: str\n    body: str",
        "detail": "felicity.api.gql.noticeboard.mutations",
        "documentation": {}
    },
    {
        "label": "NoticeResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.noticeboard.mutations",
        "description": "felicity.api.gql.noticeboard.mutations",
        "peekOfCode": "NoticeResponse = strawberry.union(\n    \"NoticeResponse\",\n    (NoticeType, OperationError),  # noqa\n    description=\"Union of possible outcomes when adding a new notice\",\n)\n@strawberry.input\nclass NoticeInputType:\n    title: str\n    body: str\n    expiry: str",
        "detail": "felicity.api.gql.noticeboard.mutations",
        "documentation": {}
    },
    {
        "label": "NoticeQuery",
        "kind": 6,
        "importPath": "felicity.api.gql.noticeboard.query",
        "description": "felicity.api.gql.noticeboard.query",
        "peekOfCode": "class NoticeQuery:\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def notice_by_uid(self, info, uid: str) -> Optional[NoticeType]:\n        return await models.Notice.get(uid=uid)\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def notices_by_creator(self, info, uid: str) -> Optional[List[NoticeType]]:\n        return await models.Notice.get_all(created_by_uid=uid, expiry__gt=get_time_now(str_format=False))\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def notice_filter(\n        self,",
        "detail": "felicity.api.gql.noticeboard.query",
        "documentation": {}
    },
    {
        "label": "NoticeType",
        "kind": 6,
        "importPath": "felicity.api.gql.noticeboard.types",
        "description": "felicity.api.gql.noticeboard.types",
        "peekOfCode": "class NoticeType:\n    uid: str\n    departments: Optional[List[DepartmentType]]\n    groups: Optional[List[GroupType]]\n    title: str\n    body: str\n    viewers: list[UserType] | None\n    expiry: str  # datetime\n    created_at: str | None\n    created_by_uid: str | None",
        "detail": "felicity.api.gql.noticeboard.types",
        "documentation": {}
    },
    {
        "label": "StreamNotificationQuery",
        "kind": 6,
        "importPath": "felicity.api.gql.notification.query",
        "description": "felicity.api.gql.notification.query",
        "peekOfCode": "class StreamNotificationQuery:\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def notification_filter(\n        self,\n        info,\n        group_uid: str | None,\n        department_uid: str | None,\n        user_uid: str | None,\n    ) -> List[NotificationType]:\n        filters = {}",
        "detail": "felicity.api.gql.notification.query",
        "documentation": {}
    },
    {
        "label": "StreamSubscription",
        "kind": 6,
        "importPath": "felicity.api.gql.notification.subscription",
        "description": "felicity.api.gql.notification.subscription",
        "peekOfCode": "class StreamSubscription:\n    @strawberry.subscription()  # permission_classes=[IsAuthenticated]\n    async def latest_activity(self) -> AsyncGenerator[ActivityStreamType, None]:  # noqa\n        subscriber: Subscriber\n        async with broadcast.subscribe(channel=\"activities\") as subscriber:\n            logger.info(\"Subscribed\")\n            event: BroadcastEvent\n            try:\n                async for event in subscriber:\n                    logger.info(event)",
        "detail": "felicity.api.gql.notification.subscription",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.notification.subscription",
        "description": "felicity.api.gql.notification.subscription",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@strawberry.type\nclass StreamSubscription:\n    @strawberry.subscription()  # permission_classes=[IsAuthenticated]\n    async def latest_activity(self) -> AsyncGenerator[ActivityStreamType, None]:  # noqa\n        subscriber: Subscriber\n        async with broadcast.subscribe(channel=\"activities\") as subscriber:\n            logger.info(\"Subscribed\")\n            event: BroadcastEvent\n            try:",
        "detail": "felicity.api.gql.notification.subscription",
        "documentation": {}
    },
    {
        "label": "UnknownObjectType",
        "kind": 6,
        "importPath": "felicity.api.gql.notification.types",
        "description": "felicity.api.gql.notification.types",
        "peekOfCode": "class UnknownObjectType:\n    message: str\nactionObject = strawberry.union(\n    \"actionObject\",\n    [WorkSheetType, SampleType, AnalysisResultType, ReportMetaType],\n    description=\"Union of possible object types for streams\",\n)\n@strawberry.type\nclass ActivityFeedType:\n    uid: str",
        "detail": "felicity.api.gql.notification.types",
        "documentation": {}
    },
    {
        "label": "ActivityFeedType",
        "kind": 6,
        "importPath": "felicity.api.gql.notification.types",
        "description": "felicity.api.gql.notification.types",
        "peekOfCode": "class ActivityFeedType:\n    uid: str\n    name: str\n    subscribers: list[UserType] | None\n@strawberry.type\nclass ActivityStreamType:\n    uid: str\n    feeds: Optional[List[ActivityFeedType]]\n    actor_uid: str | None\n    actor: UserType | None",
        "detail": "felicity.api.gql.notification.types",
        "documentation": {}
    },
    {
        "label": "ActivityStreamType",
        "kind": 6,
        "importPath": "felicity.api.gql.notification.types",
        "description": "felicity.api.gql.notification.types",
        "peekOfCode": "class ActivityStreamType:\n    uid: str\n    feeds: Optional[List[ActivityFeedType]]\n    actor_uid: str | None\n    actor: UserType | None\n    verb: str | None\n    action_object_type: str | None\n    action_object_uid: str | None\n    target_uid: str | None\n    target: str | None",
        "detail": "felicity.api.gql.notification.types",
        "documentation": {}
    },
    {
        "label": "NotificationType",
        "kind": 6,
        "importPath": "felicity.api.gql.notification.types",
        "description": "felicity.api.gql.notification.types",
        "peekOfCode": "class NotificationType:\n    uid: str\n    departments: Optional[DepartmentType]\n    groups: Optional[GroupType]\n    users: UserType | None\n    message: str\n    viewers: UserType | None\n    created_at: str | None\n    created_by_uid: str | None\n    created_by: UserType | None",
        "detail": "felicity.api.gql.notification.types",
        "documentation": {}
    },
    {
        "label": "actionObject",
        "kind": 5,
        "importPath": "felicity.api.gql.notification.types",
        "description": "felicity.api.gql.notification.types",
        "peekOfCode": "actionObject = strawberry.union(\n    \"actionObject\",\n    [WorkSheetType, SampleType, AnalysisResultType, ReportMetaType],\n    description=\"Union of possible object types for streams\",\n)\n@strawberry.type\nclass ActivityFeedType:\n    uid: str\n    name: str\n    subscribers: list[UserType] | None",
        "detail": "felicity.api.gql.notification.types",
        "documentation": {}
    },
    {
        "label": "PatientidentificationInput",
        "kind": 6,
        "importPath": "felicity.api.gql.patient.mutations",
        "description": "felicity.api.gql.patient.mutations",
        "peekOfCode": "class PatientidentificationInput:\n    value: str\n    identification_uid: str\n@strawberry.input\nclass PatientInputType:\n    client_patient_id: str\n    first_name: str\n    last_name: str\n    client_uid: str\n    gender: str",
        "detail": "felicity.api.gql.patient.mutations",
        "documentation": {}
    },
    {
        "label": "PatientInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.patient.mutations",
        "description": "felicity.api.gql.patient.mutations",
        "peekOfCode": "class PatientInputType:\n    client_patient_id: str\n    first_name: str\n    last_name: str\n    client_uid: str\n    gender: str\n    middle_name: str | None = None\n    age: int | None = None\n    date_of_birth: datetime | None = None\n    age_dob_estimated: bool | None = False",
        "detail": "felicity.api.gql.patient.mutations",
        "documentation": {}
    },
    {
        "label": "PatientMutations",
        "kind": 6,
        "importPath": "felicity.api.gql.patient.mutations",
        "description": "felicity.api.gql.patient.mutations",
        "peekOfCode": "class PatientMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def create_identification(info, name: str) -> IdentificationResponse:\n        is_authenticated, felicity_user = await auth_from_info(info)\n        verify_user_auth(\n            is_authenticated,\n            felicity_user,\n            \"Only Authenticated user can create person identification\",\n        )\n        if not name:",
        "detail": "felicity.api.gql.patient.mutations",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.patient.mutations",
        "description": "felicity.api.gql.patient.mutations",
        "peekOfCode": "logger = logging.getLogger(__name__)\nPatientResponse = strawberry.union(\n    \"PatientResponse\", (PatientType, OperationError), description=\"\"  # noqa\n)\n@strawberry.input\nclass PatientidentificationInput:\n    value: str\n    identification_uid: str\n@strawberry.input\nclass PatientInputType:",
        "detail": "felicity.api.gql.patient.mutations",
        "documentation": {}
    },
    {
        "label": "PatientResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.patient.mutations",
        "description": "felicity.api.gql.patient.mutations",
        "peekOfCode": "PatientResponse = strawberry.union(\n    \"PatientResponse\", (PatientType, OperationError), description=\"\"  # noqa\n)\n@strawberry.input\nclass PatientidentificationInput:\n    value: str\n    identification_uid: str\n@strawberry.input\nclass PatientInputType:\n    client_patient_id: str",
        "detail": "felicity.api.gql.patient.mutations",
        "documentation": {}
    },
    {
        "label": "IdentificationResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.patient.mutations",
        "description": "felicity.api.gql.patient.mutations",
        "peekOfCode": "IdentificationResponse = strawberry.union(\n    \"IdentificationResponse\",\n    (IdentificationType, OperationError),  # noqa\n    description=\"\",\n)\n@strawberry.type\nclass PatientMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def create_identification(info, name: str) -> IdentificationResponse:\n        is_authenticated, felicity_user = await auth_from_info(info)",
        "detail": "felicity.api.gql.patient.mutations",
        "documentation": {}
    },
    {
        "label": "PatientQuery",
        "kind": 6,
        "importPath": "felicity.api.gql.patient.query",
        "description": "felicity.api.gql.patient.query",
        "peekOfCode": "class PatientQuery:\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def patient_all(\n        self,\n        info,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,\n        text: str | None = None,\n        sort_by: list[str] | None = None,",
        "detail": "felicity.api.gql.patient.query",
        "documentation": {}
    },
    {
        "label": "IdentificationType",
        "kind": 6,
        "importPath": "felicity.api.gql.patient.types",
        "description": "felicity.api.gql.patient.types",
        "peekOfCode": "class IdentificationType:\n    uid: str\n    name: str\n    #\n    created_by_uid: str | None\n    created_by: UserType | None\n    created_at: str | None\n    updated_by_uid: str | None\n    updated_by: UserType | None\n    updated_at: str | None",
        "detail": "felicity.api.gql.patient.types",
        "documentation": {}
    },
    {
        "label": "PatientIdentificationType",
        "kind": 6,
        "importPath": "felicity.api.gql.patient.types",
        "description": "felicity.api.gql.patient.types",
        "peekOfCode": "class PatientIdentificationType:\n    uid: str\n    patient_uid: str\n    identification_uid: str\n    identification: Optional[IdentificationType]\n    value: str\n    #\n    created_by_uid: str | None\n    created_by: UserType | None\n    created_at: str | None",
        "detail": "felicity.api.gql.patient.types",
        "documentation": {}
    },
    {
        "label": "PatientType",
        "kind": 6,
        "importPath": "felicity.api.gql.patient.types",
        "description": "felicity.api.gql.patient.types",
        "peekOfCode": "class PatientType:\n    uid: str\n    client_patient_id: str\n    patient_id: str\n    client_uid: str\n    client: Optional[ClientType]\n    first_name: str | None\n    middle_name: str | None\n    last_name: str | None\n    gender: str | None",
        "detail": "felicity.api.gql.patient.types",
        "documentation": {}
    },
    {
        "label": "PatientEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.patient.types",
        "description": "felicity.api.gql.patient.types",
        "peekOfCode": "class PatientEdge:\n    cursor: str\n    node: PatientType\n@strawberry.type\nclass PatientCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[PatientEdge]]\n    items: Optional[List[PatientType]]\n    total_count: int",
        "detail": "felicity.api.gql.patient.types",
        "documentation": {}
    },
    {
        "label": "PatientCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.patient.types",
        "description": "felicity.api.gql.patient.types",
        "peekOfCode": "class PatientCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[PatientEdge]]\n    items: Optional[List[PatientType]]\n    total_count: int",
        "detail": "felicity.api.gql.patient.types",
        "documentation": {}
    },
    {
        "label": "ReflexRuleInput",
        "kind": 6,
        "importPath": "felicity.api.gql.reflex.mutations",
        "description": "felicity.api.gql.reflex.mutations",
        "peekOfCode": "class ReflexRuleInput:\n    name: str\n    description: str\nReflexRuleResponse = strawberry.union(\n    \"ReflexRuleResponse\", (ReflexRuleType, OperationError), description=\"\"  # noqa\n)\n@strawberry.input\nclass ReflexActionInput:\n    level: int\n    description: str",
        "detail": "felicity.api.gql.reflex.mutations",
        "documentation": {}
    },
    {
        "label": "ReflexActionInput",
        "kind": 6,
        "importPath": "felicity.api.gql.reflex.mutations",
        "description": "felicity.api.gql.reflex.mutations",
        "peekOfCode": "class ReflexActionInput:\n    level: int\n    description: str\n    analyses: List[str]\n    reflex_rule_uid: str\n    sample_type_uid: str | None = None\nReflexActionResponse = strawberry.union(\n    \"ReflexActionResponse\", (ReflexActionType, OperationError), description=\"\"  # noqa\n)\n@strawberry.input",
        "detail": "felicity.api.gql.reflex.mutations",
        "documentation": {}
    },
    {
        "label": "ReflexCriteriaInput",
        "kind": 6,
        "importPath": "felicity.api.gql.reflex.mutations",
        "description": "felicity.api.gql.reflex.mutations",
        "peekOfCode": "class ReflexCriteriaInput:\n    analysis_uid: str\n    operator: str\n    value: str\n@strawberry.input\nclass ReflexAddNewInput:\n    analysis_uid: str\n    count: int\n@strawberry.input\nclass ReflexFinalInput:",
        "detail": "felicity.api.gql.reflex.mutations",
        "documentation": {}
    },
    {
        "label": "ReflexAddNewInput",
        "kind": 6,
        "importPath": "felicity.api.gql.reflex.mutations",
        "description": "felicity.api.gql.reflex.mutations",
        "peekOfCode": "class ReflexAddNewInput:\n    analysis_uid: str\n    count: int\n@strawberry.input\nclass ReflexFinalInput:\n    analysis_uid: str\n    value: str\n@strawberry.input\nclass ReflexBrainInput:\n    reflex_action_uid: str",
        "detail": "felicity.api.gql.reflex.mutations",
        "documentation": {}
    },
    {
        "label": "ReflexFinalInput",
        "kind": 6,
        "importPath": "felicity.api.gql.reflex.mutations",
        "description": "felicity.api.gql.reflex.mutations",
        "peekOfCode": "class ReflexFinalInput:\n    analysis_uid: str\n    value: str\n@strawberry.input\nclass ReflexBrainInput:\n    reflex_action_uid: str\n    description: str\n    analyses_values: Optional[List[ReflexCriteriaInput]] = None\n    add_new: Optional[List[ReflexAddNewInput]] = None\n    finalise: Optional[List[ReflexFinalInput]] = None",
        "detail": "felicity.api.gql.reflex.mutations",
        "documentation": {}
    },
    {
        "label": "ReflexBrainInput",
        "kind": 6,
        "importPath": "felicity.api.gql.reflex.mutations",
        "description": "felicity.api.gql.reflex.mutations",
        "peekOfCode": "class ReflexBrainInput:\n    reflex_action_uid: str\n    description: str\n    analyses_values: Optional[List[ReflexCriteriaInput]] = None\n    add_new: Optional[List[ReflexAddNewInput]] = None\n    finalise: Optional[List[ReflexFinalInput]] = None\nReflexBrainResponse = strawberry.union(\n    \"ReflexBrainResponse\", (ReflexBrainType, OperationError), description=\"\"  # noqa\n)\n@strawberry.type",
        "detail": "felicity.api.gql.reflex.mutations",
        "documentation": {}
    },
    {
        "label": "ReflexRuleMutations",
        "kind": 6,
        "importPath": "felicity.api.gql.reflex.mutations",
        "description": "felicity.api.gql.reflex.mutations",
        "peekOfCode": "class ReflexRuleMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def create_reflex_rule(\n        self, info, payload: ReflexRuleInput\n    ) -> ReflexRuleResponse:\n        is_authenticated, felicity_user = await auth_from_info(info)\n        verify_user_auth(\n            is_authenticated,\n            felicity_user,\n            \"Only Authenticated user can add reflex rules\",",
        "detail": "felicity.api.gql.reflex.mutations",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.reflex.mutations",
        "description": "felicity.api.gql.reflex.mutations",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@strawberry.input\nclass ReflexRuleInput:\n    name: str\n    description: str\nReflexRuleResponse = strawberry.union(\n    \"ReflexRuleResponse\", (ReflexRuleType, OperationError), description=\"\"  # noqa\n)\n@strawberry.input\nclass ReflexActionInput:",
        "detail": "felicity.api.gql.reflex.mutations",
        "documentation": {}
    },
    {
        "label": "ReflexRuleResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.reflex.mutations",
        "description": "felicity.api.gql.reflex.mutations",
        "peekOfCode": "ReflexRuleResponse = strawberry.union(\n    \"ReflexRuleResponse\", (ReflexRuleType, OperationError), description=\"\"  # noqa\n)\n@strawberry.input\nclass ReflexActionInput:\n    level: int\n    description: str\n    analyses: List[str]\n    reflex_rule_uid: str\n    sample_type_uid: str | None = None",
        "detail": "felicity.api.gql.reflex.mutations",
        "documentation": {}
    },
    {
        "label": "ReflexActionResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.reflex.mutations",
        "description": "felicity.api.gql.reflex.mutations",
        "peekOfCode": "ReflexActionResponse = strawberry.union(\n    \"ReflexActionResponse\", (ReflexActionType, OperationError), description=\"\"  # noqa\n)\n@strawberry.input\nclass ReflexCriteriaInput:\n    analysis_uid: str\n    operator: str\n    value: str\n@strawberry.input\nclass ReflexAddNewInput:",
        "detail": "felicity.api.gql.reflex.mutations",
        "documentation": {}
    },
    {
        "label": "ReflexBrainResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.reflex.mutations",
        "description": "felicity.api.gql.reflex.mutations",
        "peekOfCode": "ReflexBrainResponse = strawberry.union(\n    \"ReflexBrainResponse\", (ReflexBrainType, OperationError), description=\"\"  # noqa\n)\n@strawberry.type\nclass ReflexRuleMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def create_reflex_rule(\n        self, info, payload: ReflexRuleInput\n    ) -> ReflexRuleResponse:\n        is_authenticated, felicity_user = await auth_from_info(info)",
        "detail": "felicity.api.gql.reflex.mutations",
        "documentation": {}
    },
    {
        "label": "ReflexRuleQuery",
        "kind": 6,
        "importPath": "felicity.api.gql.reflex.query",
        "description": "felicity.api.gql.reflex.query",
        "peekOfCode": "class ReflexRuleQuery:\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def reflex_rule_all(\n        self,\n        info,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,\n        text: str | None = None,\n        sort_by: list[str] | None = None,",
        "detail": "felicity.api.gql.reflex.query",
        "documentation": {}
    },
    {
        "label": "ReflexRuleType",
        "kind": 6,
        "importPath": "felicity.api.gql.reflex.types",
        "description": "felicity.api.gql.reflex.types",
        "peekOfCode": "class ReflexRuleType:\n    uid: str\n    name: str\n    description: str\n    reflex_actions: Optional[List[\"ReflexActionType\"]]\n    #\n    created_by_uid: str | None\n    created_by: UserType | None\n    created_at: str | None\n    updated_by_uid: str | None",
        "detail": "felicity.api.gql.reflex.types",
        "documentation": {}
    },
    {
        "label": "ReflexRuleEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.reflex.types",
        "description": "felicity.api.gql.reflex.types",
        "peekOfCode": "class ReflexRuleEdge:\n    cursor: str\n    node: ReflexRuleType\n@strawberry.type\nclass ReflexRuleCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[ReflexRuleEdge]]\n    items: Optional[List[ReflexRuleType]]\n    total_count: int\n@strawberry.type",
        "detail": "felicity.api.gql.reflex.types",
        "documentation": {}
    },
    {
        "label": "ReflexRuleCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.reflex.types",
        "description": "felicity.api.gql.reflex.types",
        "peekOfCode": "class ReflexRuleCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[ReflexRuleEdge]]\n    items: Optional[List[ReflexRuleType]]\n    total_count: int\n@strawberry.type\nclass ReflexBrainAdditionType:\n    analysis_uid: str\n    analysis: AnalysisType | None\n    reflex_brain_uid: str",
        "detail": "felicity.api.gql.reflex.types",
        "documentation": {}
    },
    {
        "label": "ReflexBrainAdditionType",
        "kind": 6,
        "importPath": "felicity.api.gql.reflex.types",
        "description": "felicity.api.gql.reflex.types",
        "peekOfCode": "class ReflexBrainAdditionType:\n    analysis_uid: str\n    analysis: AnalysisType | None\n    reflex_brain_uid: str\n    reflex_brain: Optional[\"ReflexBrainType\"]\n    count: int\n@strawberry.type\nclass ReflexBrainCriteriaType:\n    analysis_uid: str\n    analysis: AnalysisType | None",
        "detail": "felicity.api.gql.reflex.types",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCriteriaType",
        "kind": 6,
        "importPath": "felicity.api.gql.reflex.types",
        "description": "felicity.api.gql.reflex.types",
        "peekOfCode": "class ReflexBrainCriteriaType:\n    analysis_uid: str\n    analysis: AnalysisType | None\n    reflex_brain_uid: str\n    reflex_brain: Optional[\"ReflexBrainType\"]\n    operator: str\n    value: str\n@strawberry.type\nclass ReflexBrainFinalType:\n    analysis_uid: str",
        "detail": "felicity.api.gql.reflex.types",
        "documentation": {}
    },
    {
        "label": "ReflexBrainFinalType",
        "kind": 6,
        "importPath": "felicity.api.gql.reflex.types",
        "description": "felicity.api.gql.reflex.types",
        "peekOfCode": "class ReflexBrainFinalType:\n    analysis_uid: str\n    analysis: AnalysisType | None\n    reflex_brain_uid: str\n    reflex_brain: Optional[\"ReflexBrainType\"]\n    value: str\n@strawberry.type\nclass ReflexBrainType:\n    reflex_action_uid: str\n    reflex_action: Optional[\"ReflexBrainType\"]",
        "detail": "felicity.api.gql.reflex.types",
        "documentation": {}
    },
    {
        "label": "ReflexBrainType",
        "kind": 6,
        "importPath": "felicity.api.gql.reflex.types",
        "description": "felicity.api.gql.reflex.types",
        "peekOfCode": "class ReflexBrainType:\n    reflex_action_uid: str\n    reflex_action: Optional[\"ReflexBrainType\"]\n    uid: str\n    description: str\n    analyses_values: Optional[List[ReflexBrainCriteriaType]]\n    add_new: Optional[List[ReflexBrainAdditionType]]\n    finalise: Optional[List[ReflexBrainFinalType]]\n    #\n    created_by_uid: str | None",
        "detail": "felicity.api.gql.reflex.types",
        "documentation": {}
    },
    {
        "label": "ReflexActionType",
        "kind": 6,
        "importPath": "felicity.api.gql.reflex.types",
        "description": "felicity.api.gql.reflex.types",
        "peekOfCode": "class ReflexActionType:\n    uid: str\n    level: int\n    description: str\n    analyses: Optional[List[AnalysisType]]\n    sample_type_uid: str | None\n    sample_type: Optional[SampleTypeTyp]\n    reflex_rule_uid: str\n    reflex_rule: Optional[ReflexRuleType]\n    brains: Optional[List[ReflexBrainType]]",
        "detail": "felicity.api.gql.reflex.types",
        "documentation": {}
    },
    {
        "label": "DepartmentType",
        "kind": 6,
        "importPath": "felicity.api.gql.setup.types.department",
        "description": "felicity.api.gql.setup.types.department",
        "peekOfCode": "class DepartmentType:\n    uid: str\n    name: str | None\n    description: str | None\n    code: str | None\n    #\n    created_by_uid: str | None\n    created_at: str | None\n    updated_by_uid: str | None\n    updated_at: str | None",
        "detail": "felicity.api.gql.setup.types.department",
        "documentation": {}
    },
    {
        "label": "LaboratoryType",
        "kind": 6,
        "importPath": "felicity.api.gql.setup.types.setup",
        "description": "felicity.api.gql.setup.types.setup",
        "peekOfCode": "class LaboratoryType:\n    uid: str\n    setup_name: str\n    lab_name: str\n    tag_line: str | None\n    lab_manager_uid: str | None\n    lab_manager: Optional[\"UserType\"]\n    code: str | None\n    email: str | None\n    email_cc: str | None",
        "detail": "felicity.api.gql.setup.types.setup",
        "documentation": {}
    },
    {
        "label": "LaboratorySettingType",
        "kind": 6,
        "importPath": "felicity.api.gql.setup.types.setup",
        "description": "felicity.api.gql.setup.types.setup",
        "peekOfCode": "class LaboratorySettingType:\n    created_by_uid: str | None\n    created_by: Optional[\"UserType\"]\n    created_at: str | None\n    updated_by_uid: str | None\n    updated_by: Optional[\"UserType\"]\n    updated_at: str | None\n    uid: str\n    laboratory_uid: str\n    laboratory: LaboratoryType",
        "detail": "felicity.api.gql.setup.types.setup",
        "documentation": {}
    },
    {
        "label": "SupplierType",
        "kind": 6,
        "importPath": "felicity.api.gql.setup.types.setup",
        "description": "felicity.api.gql.setup.types.setup",
        "peekOfCode": "class SupplierType:\n    uid: str\n    name: str | None\n    description: str | None\n    #\n    created_by_uid: str | None\n    created_by: Optional[\"UserType\"]\n    created_at: str | None\n    updated_by_uid: str | None\n    updated_by: Optional[\"UserType\"]",
        "detail": "felicity.api.gql.setup.types.setup",
        "documentation": {}
    },
    {
        "label": "ManufacturerType",
        "kind": 6,
        "importPath": "felicity.api.gql.setup.types.setup",
        "description": "felicity.api.gql.setup.types.setup",
        "peekOfCode": "class ManufacturerType:\n    uid: str\n    name: str | None\n    description: str | None\n    #\n    created_by_uid: str | None\n    created_by: Optional[\"UserType\"]\n    created_at: str | None\n    updated_by_uid: str | None\n    updated_by: Optional[\"UserType\"]",
        "detail": "felicity.api.gql.setup.types.setup",
        "documentation": {}
    },
    {
        "label": "UnitType",
        "kind": 6,
        "importPath": "felicity.api.gql.setup.types.setup",
        "description": "felicity.api.gql.setup.types.setup",
        "peekOfCode": "class UnitType:\n    uid: str\n    name: str\n    description: str | None\n    #\n    created_by_uid: str | None\n    created_by: Optional[\"UserType\"]\n    created_at: str | None\n    updated_by_uid: str | None\n    updated_by: Optional[\"UserType\"]",
        "detail": "felicity.api.gql.setup.types.setup",
        "documentation": {}
    },
    {
        "label": "CountryType",
        "kind": 6,
        "importPath": "felicity.api.gql.setup.types.setup",
        "description": "felicity.api.gql.setup.types.setup",
        "peekOfCode": "class CountryType:\n    uid: str\n    name: str | None\n    code: str | None\n    active: str | None\n    #\n    created_by_uid: str | None\n    created_by: Optional[\"UserType\"]\n    created_at: str | None\n    updated_by_uid: str | None",
        "detail": "felicity.api.gql.setup.types.setup",
        "documentation": {}
    },
    {
        "label": "ProvinceType",
        "kind": 6,
        "importPath": "felicity.api.gql.setup.types.setup",
        "description": "felicity.api.gql.setup.types.setup",
        "peekOfCode": "class ProvinceType:\n    uid: str\n    code: str | None\n    name: str | None\n    email: str | None\n    email_cc: str | None\n    mobile_phone: str | None\n    business_phone: str | None\n    active: bool | None\n    country_uid: str | None",
        "detail": "felicity.api.gql.setup.types.setup",
        "documentation": {}
    },
    {
        "label": "ProvinceEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.setup.types.setup",
        "description": "felicity.api.gql.setup.types.setup",
        "peekOfCode": "class ProvinceEdge:\n    cursor: str\n    node: ProvinceType\n@strawberry.type\nclass ProvinceCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[ProvinceEdge]]\n    items: Optional[List[ProvinceType]]\n    total_count: int\n@strawberry.type",
        "detail": "felicity.api.gql.setup.types.setup",
        "documentation": {}
    },
    {
        "label": "ProvinceCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.setup.types.setup",
        "description": "felicity.api.gql.setup.types.setup",
        "peekOfCode": "class ProvinceCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[ProvinceEdge]]\n    items: Optional[List[ProvinceType]]\n    total_count: int\n@strawberry.type\nclass DistrictType:\n    uid: str\n    code: str | None\n    name: str | None",
        "detail": "felicity.api.gql.setup.types.setup",
        "documentation": {}
    },
    {
        "label": "DistrictType",
        "kind": 6,
        "importPath": "felicity.api.gql.setup.types.setup",
        "description": "felicity.api.gql.setup.types.setup",
        "peekOfCode": "class DistrictType:\n    uid: str\n    code: str | None\n    name: str | None\n    email: str | None\n    email_cc: str | None\n    mobile_phone: str | None\n    business_phone: str | None\n    active: bool | None\n    province_uid: str | None",
        "detail": "felicity.api.gql.setup.types.setup",
        "documentation": {}
    },
    {
        "label": "DistrictEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.setup.types.setup",
        "description": "felicity.api.gql.setup.types.setup",
        "peekOfCode": "class DistrictEdge:\n    cursor: str\n    node: DistrictType\n@strawberry.type\nclass DistrictCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[DistrictEdge]]\n    items: Optional[List[DistrictType]]\n    total_count: int",
        "detail": "felicity.api.gql.setup.types.setup",
        "documentation": {}
    },
    {
        "label": "DistrictCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.setup.types.setup",
        "description": "felicity.api.gql.setup.types.setup",
        "peekOfCode": "class DistrictCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[DistrictEdge]]\n    items: Optional[List[DistrictType]]\n    total_count: int",
        "detail": "felicity.api.gql.setup.types.setup",
        "documentation": {}
    },
    {
        "label": "LaboratoryInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.setup.mutations",
        "description": "felicity.api.gql.setup.mutations",
        "peekOfCode": "class LaboratoryInputType:\n    lab_name: str\n    setup_name: str = \"felicity\"\n    tag_line: str | None = \"\"\n    email: str | None = None\n    email_cc: str | None = None\n    mobile_phone: str | None = None\n    business_phone: str | None = None\n    lab_manager_uid: str | None = None\n    address: str | None = None",
        "detail": "felicity.api.gql.setup.mutations",
        "documentation": {}
    },
    {
        "label": "LaboratorySettingInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.setup.mutations",
        "description": "felicity.api.gql.setup.mutations",
        "peekOfCode": "class LaboratorySettingInputType:\n    laboratory_uid: str\n    allow_self_verification: bool | None = False\n    allow_patient_registration: bool | None = True\n    allow_sample_registration: bool | None = True\n    allow_worksheet_creation: bool | None = True\n    default_route: str | None = None\n    password_lifetime: int | None = None\n    inactivity_log_out: int | None = None\n    default_theme: str | None = None",
        "detail": "felicity.api.gql.setup.mutations",
        "documentation": {}
    },
    {
        "label": "DepartmentInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.setup.mutations",
        "description": "felicity.api.gql.setup.mutations",
        "peekOfCode": "class DepartmentInputType:\n    name: str\n    description: str | None = \"\"\n    code: str | None = \"\"\n@strawberry.input\nclass SupplierInputType:\n    name: str\n    description: str | None = \"\"\n    code: str | None = \"\"\n@strawberry.input",
        "detail": "felicity.api.gql.setup.mutations",
        "documentation": {}
    },
    {
        "label": "SupplierInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.setup.mutations",
        "description": "felicity.api.gql.setup.mutations",
        "peekOfCode": "class SupplierInputType:\n    name: str\n    description: str | None = \"\"\n    code: str | None = \"\"\n@strawberry.input\nclass ManufacturerInputType:\n    name: str\n    description: str | None = \"\"\n@strawberry.input\nclass CountryInputType:",
        "detail": "felicity.api.gql.setup.mutations",
        "documentation": {}
    },
    {
        "label": "ManufacturerInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.setup.mutations",
        "description": "felicity.api.gql.setup.mutations",
        "peekOfCode": "class ManufacturerInputType:\n    name: str\n    description: str | None = \"\"\n@strawberry.input\nclass CountryInputType:\n    name: str\n    code: str\n    active: bool | None = True\n@strawberry.input\nclass ProvinceInputType:",
        "detail": "felicity.api.gql.setup.mutations",
        "documentation": {}
    },
    {
        "label": "CountryInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.setup.mutations",
        "description": "felicity.api.gql.setup.mutations",
        "peekOfCode": "class CountryInputType:\n    name: str\n    code: str\n    active: bool | None = True\n@strawberry.input\nclass ProvinceInputType:\n    name: str | None\n    country_uid: str | None\n    code: str | None = \"\"\n    email: str | None = \"\"",
        "detail": "felicity.api.gql.setup.mutations",
        "documentation": {}
    },
    {
        "label": "ProvinceInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.setup.mutations",
        "description": "felicity.api.gql.setup.mutations",
        "peekOfCode": "class ProvinceInputType:\n    name: str | None\n    country_uid: str | None\n    code: str | None = \"\"\n    email: str | None = \"\"\n    email_cc: str | None = \"\"\n    mobile_phone: str | None = \"\"\n    business_phone: str | None = \"\"\n    active: bool | None = True\n@strawberry.input",
        "detail": "felicity.api.gql.setup.mutations",
        "documentation": {}
    },
    {
        "label": "DistrictInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.setup.mutations",
        "description": "felicity.api.gql.setup.mutations",
        "peekOfCode": "class DistrictInputType:\n    name: str\n    province_uid: str | None\n    code: str | None = \"\"\n    email: str | None = \"\"\n    email_cc: str | None = \"\"\n    mobile_phone: str | None = \"\"\n    business_phone: str | None = \"\"\n    active: bool | None = True\n@strawberry.input",
        "detail": "felicity.api.gql.setup.mutations",
        "documentation": {}
    },
    {
        "label": "UnitInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.setup.mutations",
        "description": "felicity.api.gql.setup.mutations",
        "peekOfCode": "class UnitInputType:\n    name: str\n    is_si_unit: bool\n@strawberry.type\nclass SetupMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def update_laboratory(\n        self, info, uid: str, payload: LaboratoryInputType\n    ) -> LaboratoryResponse:  # noqa\n        if not uid:",
        "detail": "felicity.api.gql.setup.mutations",
        "documentation": {}
    },
    {
        "label": "SetupMutations",
        "kind": 6,
        "importPath": "felicity.api.gql.setup.mutations",
        "description": "felicity.api.gql.setup.mutations",
        "peekOfCode": "class SetupMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def update_laboratory(\n        self, info, uid: str, payload: LaboratoryInputType\n    ) -> LaboratoryResponse:  # noqa\n        if not uid:\n            return OperationError(error=\"No uid provided to identity update obj\")\n        laboratory = await models.Laboratory.get(uid=uid)\n        if not laboratory:\n            return OperationError(",
        "detail": "felicity.api.gql.setup.mutations",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.setup.mutations",
        "description": "felicity.api.gql.setup.mutations",
        "peekOfCode": "logger = logging.getLogger(__name__)\nLaboratoryResponse = strawberry.union(\n    \"LaboratoryResponse\", (LaboratoryType, OperationError), description=\"\"  # noqa\n)\nLaboratorySettingResponse = strawberry.union(\n    \"LaboratorySettingResponse\",\n    (LaboratorySettingType, OperationError),\n    description=\"\",  # noqa\n)\nCountryResponse = strawberry.union(",
        "detail": "felicity.api.gql.setup.mutations",
        "documentation": {}
    },
    {
        "label": "LaboratoryResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.setup.mutations",
        "description": "felicity.api.gql.setup.mutations",
        "peekOfCode": "LaboratoryResponse = strawberry.union(\n    \"LaboratoryResponse\", (LaboratoryType, OperationError), description=\"\"  # noqa\n)\nLaboratorySettingResponse = strawberry.union(\n    \"LaboratorySettingResponse\",\n    (LaboratorySettingType, OperationError),\n    description=\"\",  # noqa\n)\nCountryResponse = strawberry.union(\n    \"CountryResponse\", (CountryType, OperationError), description=\"\"  # noqa",
        "detail": "felicity.api.gql.setup.mutations",
        "documentation": {}
    },
    {
        "label": "LaboratorySettingResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.setup.mutations",
        "description": "felicity.api.gql.setup.mutations",
        "peekOfCode": "LaboratorySettingResponse = strawberry.union(\n    \"LaboratorySettingResponse\",\n    (LaboratorySettingType, OperationError),\n    description=\"\",  # noqa\n)\nCountryResponse = strawberry.union(\n    \"CountryResponse\", (CountryType, OperationError), description=\"\"  # noqa\n)\nProvinceResponse = strawberry.union(\n    \"ProvinceResponse\", (ProvinceType, OperationError), description=\"\"  # noqa",
        "detail": "felicity.api.gql.setup.mutations",
        "documentation": {}
    },
    {
        "label": "CountryResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.setup.mutations",
        "description": "felicity.api.gql.setup.mutations",
        "peekOfCode": "CountryResponse = strawberry.union(\n    \"CountryResponse\", (CountryType, OperationError), description=\"\"  # noqa\n)\nProvinceResponse = strawberry.union(\n    \"ProvinceResponse\", (ProvinceType, OperationError), description=\"\"  # noqa\n)\nDistrictResponse = strawberry.union(\n    \"DistrictResponse\", (DistrictType, OperationError), description=\"\"  # noqa\n)\nSupplierResponse = strawberry.union(",
        "detail": "felicity.api.gql.setup.mutations",
        "documentation": {}
    },
    {
        "label": "ProvinceResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.setup.mutations",
        "description": "felicity.api.gql.setup.mutations",
        "peekOfCode": "ProvinceResponse = strawberry.union(\n    \"ProvinceResponse\", (ProvinceType, OperationError), description=\"\"  # noqa\n)\nDistrictResponse = strawberry.union(\n    \"DistrictResponse\", (DistrictType, OperationError), description=\"\"  # noqa\n)\nSupplierResponse = strawberry.union(\n    \"SupplierResponse\", (SupplierType, OperationError), description=\"\"  # noqa\n)\nManufacturerResponse = strawberry.union(",
        "detail": "felicity.api.gql.setup.mutations",
        "documentation": {}
    },
    {
        "label": "DistrictResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.setup.mutations",
        "description": "felicity.api.gql.setup.mutations",
        "peekOfCode": "DistrictResponse = strawberry.union(\n    \"DistrictResponse\", (DistrictType, OperationError), description=\"\"  # noqa\n)\nSupplierResponse = strawberry.union(\n    \"SupplierResponse\", (SupplierType, OperationError), description=\"\"  # noqa\n)\nManufacturerResponse = strawberry.union(\n    \"ManufacturerResponse\", (ManufacturerType, OperationError), description=\"\"  # noqa\n)\nDepartmentResponse = strawberry.union(",
        "detail": "felicity.api.gql.setup.mutations",
        "documentation": {}
    },
    {
        "label": "SupplierResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.setup.mutations",
        "description": "felicity.api.gql.setup.mutations",
        "peekOfCode": "SupplierResponse = strawberry.union(\n    \"SupplierResponse\", (SupplierType, OperationError), description=\"\"  # noqa\n)\nManufacturerResponse = strawberry.union(\n    \"ManufacturerResponse\", (ManufacturerType, OperationError), description=\"\"  # noqa\n)\nDepartmentResponse = strawberry.union(\n    \"DepartmentResponse\", (DepartmentType, OperationError), description=\"\"  # noqa\n)\nUnitResponse = strawberry.union(",
        "detail": "felicity.api.gql.setup.mutations",
        "documentation": {}
    },
    {
        "label": "ManufacturerResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.setup.mutations",
        "description": "felicity.api.gql.setup.mutations",
        "peekOfCode": "ManufacturerResponse = strawberry.union(\n    \"ManufacturerResponse\", (ManufacturerType, OperationError), description=\"\"  # noqa\n)\nDepartmentResponse = strawberry.union(\n    \"DepartmentResponse\", (DepartmentType, OperationError), description=\"\"  # noqa\n)\nUnitResponse = strawberry.union(\n    \"UnitResponse\", (UnitType, OperationError), description=\"\"  # noqa\n)\n@strawberry.input",
        "detail": "felicity.api.gql.setup.mutations",
        "documentation": {}
    },
    {
        "label": "DepartmentResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.setup.mutations",
        "description": "felicity.api.gql.setup.mutations",
        "peekOfCode": "DepartmentResponse = strawberry.union(\n    \"DepartmentResponse\", (DepartmentType, OperationError), description=\"\"  # noqa\n)\nUnitResponse = strawberry.union(\n    \"UnitResponse\", (UnitType, OperationError), description=\"\"  # noqa\n)\n@strawberry.input\nclass LaboratoryInputType:\n    lab_name: str\n    setup_name: str = \"felicity\"",
        "detail": "felicity.api.gql.setup.mutations",
        "documentation": {}
    },
    {
        "label": "UnitResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.setup.mutations",
        "description": "felicity.api.gql.setup.mutations",
        "peekOfCode": "UnitResponse = strawberry.union(\n    \"UnitResponse\", (UnitType, OperationError), description=\"\"  # noqa\n)\n@strawberry.input\nclass LaboratoryInputType:\n    lab_name: str\n    setup_name: str = \"felicity\"\n    tag_line: str | None = \"\"\n    email: str | None = None\n    email_cc: str | None = None",
        "detail": "felicity.api.gql.setup.mutations",
        "documentation": {}
    },
    {
        "label": "SetupQuery",
        "kind": 6,
        "importPath": "felicity.api.gql.setup.query",
        "description": "felicity.api.gql.setup.query",
        "peekOfCode": "class SetupQuery:\n    laboratory: LaboratoryType = strawberry.field(resolver=get_laboratory)\n    laboratory_setting: LaboratorySettingType = strawberry.field(\n        resolver=get_laboratory_setting, permission_classes=[IsAuthenticated]\n    )\n    manufacturer_all: List[ManufacturerType] = strawberry.field(\n        resolver=get_all_manufacturers, permission_classes=[IsAuthenticated]\n    )\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def manufacturer_by_uid(self, info, uid: str) -> ManufacturerType:",
        "detail": "felicity.api.gql.setup.query",
        "documentation": {}
    },
    {
        "label": "ShipmentInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.shipment.mutations",
        "description": "felicity.api.gql.shipment.mutations",
        "peekOfCode": "class ShipmentInputType:\n    laboratory_uid: str | None\n    courier: str\n    comment: str | None\n    count: int | None = 1\n@strawberry.input\nclass ShipmentUpdateInputType:\n    laboratory_uid: str | None\n    courier: str\n    comment: str | None = \"\"",
        "detail": "felicity.api.gql.shipment.mutations",
        "documentation": {}
    },
    {
        "label": "ShipmentUpdateInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.shipment.mutations",
        "description": "felicity.api.gql.shipment.mutations",
        "peekOfCode": "class ShipmentUpdateInputType:\n    laboratory_uid: str | None\n    courier: str\n    comment: str | None = \"\"\n@strawberry.input\nclass ReferenceSampleInput:\n    sample_uid: str | None = None\n    shiped_sample_uid: str | None = None\n    analyses: list[str]  # list of analysis uids being assignes/unassigned\n@strawberry.input",
        "detail": "felicity.api.gql.shipment.mutations",
        "documentation": {}
    },
    {
        "label": "ReferenceSampleInput",
        "kind": 6,
        "importPath": "felicity.api.gql.shipment.mutations",
        "description": "felicity.api.gql.shipment.mutations",
        "peekOfCode": "class ReferenceSampleInput:\n    sample_uid: str | None = None\n    shiped_sample_uid: str | None = None\n    analyses: list[str]  # list of analysis uids being assignes/unassigned\n@strawberry.input\nclass ShipmentManageSamplesInput:\n    samples: List[ReferenceSampleInput]\n    action: str\n@strawberry.type\nclass ShipmentListingType:",
        "detail": "felicity.api.gql.shipment.mutations",
        "documentation": {}
    },
    {
        "label": "ShipmentManageSamplesInput",
        "kind": 6,
        "importPath": "felicity.api.gql.shipment.mutations",
        "description": "felicity.api.gql.shipment.mutations",
        "peekOfCode": "class ShipmentManageSamplesInput:\n    samples: List[ReferenceSampleInput]\n    action: str\n@strawberry.type\nclass ShipmentListingType:\n    shipments: Optional[List[ShipmentType]]\n@strawberry.input\nclass ReferralLaboratoryInputType:\n    name: str\n    code: str",
        "detail": "felicity.api.gql.shipment.mutations",
        "documentation": {}
    },
    {
        "label": "ShipmentListingType",
        "kind": 6,
        "importPath": "felicity.api.gql.shipment.mutations",
        "description": "felicity.api.gql.shipment.mutations",
        "peekOfCode": "class ShipmentListingType:\n    shipments: Optional[List[ShipmentType]]\n@strawberry.input\nclass ReferralLaboratoryInputType:\n    name: str\n    code: str\n    url: str\n    username: str\n    password: str\n    is_reference: bool = False",
        "detail": "felicity.api.gql.shipment.mutations",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratoryInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.shipment.mutations",
        "description": "felicity.api.gql.shipment.mutations",
        "peekOfCode": "class ReferralLaboratoryInputType:\n    name: str\n    code: str\n    url: str\n    username: str\n    password: str\n    is_reference: bool = False\n    is_referral: bool = False\nReferralLaboratoryResponse = strawberry.union(\n    \"ReferralLaboratoryResponse\",",
        "detail": "felicity.api.gql.shipment.mutations",
        "documentation": {}
    },
    {
        "label": "ShipmentMutations",
        "kind": 6,
        "importPath": "felicity.api.gql.shipment.mutations",
        "description": "felicity.api.gql.shipment.mutations",
        "peekOfCode": "class ShipmentMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def create_shipment(\n        self, info, payload: ShipmentInputType\n    ) -> ShipmentsResponse:\n        is_authenticated, felicity_user = await auth_from_info(info)\n        verify_user_auth(\n            is_authenticated,\n            felicity_user,\n            \"Only Authenticated user can create shipments\",",
        "detail": "felicity.api.gql.shipment.mutations",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.shipment.mutations",
        "description": "felicity.api.gql.shipment.mutations",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@strawberry.input\nclass ShipmentInputType:\n    laboratory_uid: str | None\n    courier: str\n    comment: str | None\n    count: int | None = 1\n@strawberry.input\nclass ShipmentUpdateInputType:\n    laboratory_uid: str | None",
        "detail": "felicity.api.gql.shipment.mutations",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratoryResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.shipment.mutations",
        "description": "felicity.api.gql.shipment.mutations",
        "peekOfCode": "ReferralLaboratoryResponse = strawberry.union(\n    \"ReferralLaboratoryResponse\",\n    (types.ReferralLaboratoryType, OperationError),  # noqa\n    description=\"\",\n)\nShipmentsResponse = strawberry.union(\n    \"ShipmentsResponse\", (ShipmentListingType, OperationError), description=\"\"  # noqa\n)\nShipmentResponse = strawberry.union(\n    \"ShipmentResponse\", (ShipmentType, OperationError), description=\"\"  # noqa",
        "detail": "felicity.api.gql.shipment.mutations",
        "documentation": {}
    },
    {
        "label": "ShipmentsResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.shipment.mutations",
        "description": "felicity.api.gql.shipment.mutations",
        "peekOfCode": "ShipmentsResponse = strawberry.union(\n    \"ShipmentsResponse\", (ShipmentListingType, OperationError), description=\"\"  # noqa\n)\nShipmentResponse = strawberry.union(\n    \"ShipmentResponse\", (ShipmentType, OperationError), description=\"\"  # noqa\n)\n@strawberry.type\nclass ShipmentMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def create_shipment(",
        "detail": "felicity.api.gql.shipment.mutations",
        "documentation": {}
    },
    {
        "label": "ShipmentResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.shipment.mutations",
        "description": "felicity.api.gql.shipment.mutations",
        "peekOfCode": "ShipmentResponse = strawberry.union(\n    \"ShipmentResponse\", (ShipmentType, OperationError), description=\"\"  # noqa\n)\n@strawberry.type\nclass ShipmentMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def create_shipment(\n        self, info, payload: ShipmentInputType\n    ) -> ShipmentsResponse:\n        is_authenticated, felicity_user = await auth_from_info(info)",
        "detail": "felicity.api.gql.shipment.mutations",
        "documentation": {}
    },
    {
        "label": "ShipmentQuery",
        "kind": 6,
        "importPath": "felicity.api.gql.shipment.query",
        "description": "felicity.api.gql.shipment.query",
        "peekOfCode": "class ShipmentQuery:\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def shipment_all(\n        self,\n        info,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,\n        text: str | None = None,\n        incoming: bool = False,",
        "detail": "felicity.api.gql.shipment.query",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.shipment.query",
        "description": "felicity.api.gql.shipment.query",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@strawberry.type\nclass ShipmentQuery:\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def shipment_all(\n        self,\n        info,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,",
        "detail": "felicity.api.gql.shipment.query",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratoryType",
        "kind": 6,
        "importPath": "felicity.api.gql.shipment.types",
        "description": "felicity.api.gql.shipment.types",
        "peekOfCode": "class ReferralLaboratoryType:\n    uid: str\n    name: str | None\n    code: str | None\n    url: str | None\n    username: str | None\n    password: str | None\n    is_reference: bool | None\n    is_referral: bool | None\n    created_by_uid: str | None",
        "detail": "felicity.api.gql.shipment.types",
        "documentation": {}
    },
    {
        "label": "ShipmentType",
        "kind": 6,
        "importPath": "felicity.api.gql.shipment.types",
        "description": "felicity.api.gql.shipment.types",
        "peekOfCode": "class ShipmentType:\n    uid: str\n    shipment_id: str | None\n    comment: str | None\n    courier: str | None\n    assigned_count: int | None\n    data: JSONScalar | None\n    samples: list[SampleType] | None\n    shipped_samples: list[\"ShippedSampleType\"] | None\n    state: str | None",
        "detail": "felicity.api.gql.shipment.types",
        "documentation": {}
    },
    {
        "label": "ShipmentEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.shipment.types",
        "description": "felicity.api.gql.shipment.types",
        "peekOfCode": "class ShipmentEdge:\n    cursor: str\n    node: ShipmentType\n@strawberry.type\nclass ShipmentCursorPage:\n    page_info: PageInfo\n    edges: list[ShipmentEdge] | None\n    items: list[ShipmentType] | None\n    total_count: int\n@strawberry.type",
        "detail": "felicity.api.gql.shipment.types",
        "documentation": {}
    },
    {
        "label": "ShipmentCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.shipment.types",
        "description": "felicity.api.gql.shipment.types",
        "peekOfCode": "class ShipmentCursorPage:\n    page_info: PageInfo\n    edges: list[ShipmentEdge] | None\n    items: list[ShipmentType] | None\n    total_count: int\n@strawberry.type\nclass ShippedSampleType:\n    sample_uid: str\n    sample: SampleType\n    shipment_uid: str",
        "detail": "felicity.api.gql.shipment.types",
        "documentation": {}
    },
    {
        "label": "ShippedSampleType",
        "kind": 6,
        "importPath": "felicity.api.gql.shipment.types",
        "description": "felicity.api.gql.shipment.types",
        "peekOfCode": "class ShippedSampleType:\n    sample_uid: str\n    sample: SampleType\n    shipment_uid: str\n    shipment: ShipmentType\n    result_notified: bool | None\n    ext_sample_uid: str | None\n    ext_sample_id: str | None",
        "detail": "felicity.api.gql.shipment.types",
        "documentation": {}
    },
    {
        "label": "StoreRoomInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.storage.mutations",
        "description": "felicity.api.gql.storage.mutations",
        "peekOfCode": "class StoreRoomInputType:\n    name: str\n    description: str\nStorageLocationResponse = strawberry.union(\n    \"StorageLocationResponse\",\n    (types.StorageLocationType, OperationError),\n    description=\"\",  # noqa\n)\n@strawberry.input\nclass StorageLocationInputType:",
        "detail": "felicity.api.gql.storage.mutations",
        "documentation": {}
    },
    {
        "label": "StorageLocationInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.storage.mutations",
        "description": "felicity.api.gql.storage.mutations",
        "peekOfCode": "class StorageLocationInputType:\n    name: str\n    description: str | None\n    store_room_uid: str\nStorageSectionResponse = strawberry.union(\n    \"StorageSectionResponse\",\n    (types.StorageSectionType, OperationError),\n    description=\"\",  # noqa\n)\n@strawberry.input",
        "detail": "felicity.api.gql.storage.mutations",
        "documentation": {}
    },
    {
        "label": "StorageSectionInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.storage.mutations",
        "description": "felicity.api.gql.storage.mutations",
        "peekOfCode": "class StorageSectionInputType:\n    name: str\n    description: str | None\n    storage_location_uid: str\nStorageContainerResponse = strawberry.union(\n    \"StorageContainerResponse\",\n    (types.StorageContainerType, OperationError),\n    description=\"\",  # noqa\n)\n@strawberry.input",
        "detail": "felicity.api.gql.storage.mutations",
        "documentation": {}
    },
    {
        "label": "StorageContainerInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.storage.mutations",
        "description": "felicity.api.gql.storage.mutations",
        "peekOfCode": "class StorageContainerInputType:\n    name: str\n    description: str | None\n    storage_section_uid: str\n    grid: bool | None = False\n    row_wise: bool | None = False\n    cols: int | None = 0\n    rows: int | None = 0\n    slots: int | None = 0\n@strawberry.type",
        "detail": "felicity.api.gql.storage.mutations",
        "documentation": {}
    },
    {
        "label": "StoredSamplesType",
        "kind": 6,
        "importPath": "felicity.api.gql.storage.mutations",
        "description": "felicity.api.gql.storage.mutations",
        "peekOfCode": "class StoredSamplesType:\n    samples: List[SampleType]\nStoreSampleResponse = strawberry.union(\n    \"StoreSampleResponse\", (StoredSamplesType, OperationError), description=\"\"  # noqa\n)\n@strawberry.input\nclass StoreSamplesInputType:\n    sample_uid: str\n    storage_slot: str\n    storage_slot_index: int",
        "detail": "felicity.api.gql.storage.mutations",
        "documentation": {}
    },
    {
        "label": "StoreSamplesInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.storage.mutations",
        "description": "felicity.api.gql.storage.mutations",
        "peekOfCode": "class StoreSamplesInputType:\n    sample_uid: str\n    storage_slot: str\n    storage_slot_index: int\n    storage_container_uid: str\n@strawberry.type\nclass StorageMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def create_store_room(\n        self, info, payload: StoreRoomInputType",
        "detail": "felicity.api.gql.storage.mutations",
        "documentation": {}
    },
    {
        "label": "StorageMutations",
        "kind": 6,
        "importPath": "felicity.api.gql.storage.mutations",
        "description": "felicity.api.gql.storage.mutations",
        "peekOfCode": "class StorageMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def create_store_room(\n        self, info, payload: StoreRoomInputType\n    ) -> StoreRoomResponse:\n        is_authenticated, felicity_user = await auth_from_info(info)\n        auth_success, auth_error = verify_user_auth(\n            is_authenticated,\n            felicity_user,\n            \"Only Authenticated user can create store rooms\",",
        "detail": "felicity.api.gql.storage.mutations",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.storage.mutations",
        "description": "felicity.api.gql.storage.mutations",
        "peekOfCode": "logger = logging.getLogger(__name__)\nStoreRoomResponse = strawberry.union(\n    \"StoreRoomResponse\", (types.StoreRoomType, OperationError), description=\"\"  # noqa\n)\n@strawberry.input\nclass StoreRoomInputType:\n    name: str\n    description: str\nStorageLocationResponse = strawberry.union(\n    \"StorageLocationResponse\",",
        "detail": "felicity.api.gql.storage.mutations",
        "documentation": {}
    },
    {
        "label": "StoreRoomResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.storage.mutations",
        "description": "felicity.api.gql.storage.mutations",
        "peekOfCode": "StoreRoomResponse = strawberry.union(\n    \"StoreRoomResponse\", (types.StoreRoomType, OperationError), description=\"\"  # noqa\n)\n@strawberry.input\nclass StoreRoomInputType:\n    name: str\n    description: str\nStorageLocationResponse = strawberry.union(\n    \"StorageLocationResponse\",\n    (types.StorageLocationType, OperationError),",
        "detail": "felicity.api.gql.storage.mutations",
        "documentation": {}
    },
    {
        "label": "StorageLocationResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.storage.mutations",
        "description": "felicity.api.gql.storage.mutations",
        "peekOfCode": "StorageLocationResponse = strawberry.union(\n    \"StorageLocationResponse\",\n    (types.StorageLocationType, OperationError),\n    description=\"\",  # noqa\n)\n@strawberry.input\nclass StorageLocationInputType:\n    name: str\n    description: str | None\n    store_room_uid: str",
        "detail": "felicity.api.gql.storage.mutations",
        "documentation": {}
    },
    {
        "label": "StorageSectionResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.storage.mutations",
        "description": "felicity.api.gql.storage.mutations",
        "peekOfCode": "StorageSectionResponse = strawberry.union(\n    \"StorageSectionResponse\",\n    (types.StorageSectionType, OperationError),\n    description=\"\",  # noqa\n)\n@strawberry.input\nclass StorageSectionInputType:\n    name: str\n    description: str | None\n    storage_location_uid: str",
        "detail": "felicity.api.gql.storage.mutations",
        "documentation": {}
    },
    {
        "label": "StorageContainerResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.storage.mutations",
        "description": "felicity.api.gql.storage.mutations",
        "peekOfCode": "StorageContainerResponse = strawberry.union(\n    \"StorageContainerResponse\",\n    (types.StorageContainerType, OperationError),\n    description=\"\",  # noqa\n)\n@strawberry.input\nclass StorageContainerInputType:\n    name: str\n    description: str | None\n    storage_section_uid: str",
        "detail": "felicity.api.gql.storage.mutations",
        "documentation": {}
    },
    {
        "label": "StoreSampleResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.storage.mutations",
        "description": "felicity.api.gql.storage.mutations",
        "peekOfCode": "StoreSampleResponse = strawberry.union(\n    \"StoreSampleResponse\", (StoredSamplesType, OperationError), description=\"\"  # noqa\n)\n@strawberry.input\nclass StoreSamplesInputType:\n    sample_uid: str\n    storage_slot: str\n    storage_slot_index: int\n    storage_container_uid: str\n@strawberry.type",
        "detail": "felicity.api.gql.storage.mutations",
        "documentation": {}
    },
    {
        "label": "StorageQuery",
        "kind": 6,
        "importPath": "felicity.api.gql.storage.query",
        "description": "felicity.api.gql.storage.query",
        "peekOfCode": "class StorageQuery:\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def store_room_all(self, info) -> List[types.StoreRoomType]:\n        return await models.StoreRoom.all_async()\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def store_room_by_uid(self, info, uid: str) -> Optional[types.StoreRoomType]:\n        return await models.StoreRoom.get(uid=uid)\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def storage_locations(\n        self, info, store_room_uid: str",
        "detail": "felicity.api.gql.storage.query",
        "documentation": {}
    },
    {
        "label": "StoreRoomType",
        "kind": 6,
        "importPath": "felicity.api.gql.storage.types",
        "description": "felicity.api.gql.storage.types",
        "peekOfCode": "class StoreRoomType:\n    uid: str\n    name: str\n    description: str | None\n    created_at: str | None\n    created_by_uid: str | None\n    created_by: UserType | None\n    updated_at: str | None\n    updated_by_uid: str | None\n    updated_by: UserType | None",
        "detail": "felicity.api.gql.storage.types",
        "documentation": {}
    },
    {
        "label": "StorageLocationType",
        "kind": 6,
        "importPath": "felicity.api.gql.storage.types",
        "description": "felicity.api.gql.storage.types",
        "peekOfCode": "class StorageLocationType:\n    uid: str\n    name: str\n    description: str | None\n    store_room_uid: str\n    store_room: Optional[StoreRoomType]\n    created_at: str | None\n    created_by_uid: str | None\n    created_by: UserType | None\n    updated_at: str | None",
        "detail": "felicity.api.gql.storage.types",
        "documentation": {}
    },
    {
        "label": "StorageSectionType",
        "kind": 6,
        "importPath": "felicity.api.gql.storage.types",
        "description": "felicity.api.gql.storage.types",
        "peekOfCode": "class StorageSectionType:\n    uid: str\n    name: str\n    description: str | None\n    storage_location_uid: str\n    storage_location: Optional[StorageLocationType]\n    created_at: str | None\n    created_by_uid: str | None\n    created_by: UserType | None\n    updated_at: str | None",
        "detail": "felicity.api.gql.storage.types",
        "documentation": {}
    },
    {
        "label": "StorageContainerType",
        "kind": 6,
        "importPath": "felicity.api.gql.storage.types",
        "description": "felicity.api.gql.storage.types",
        "peekOfCode": "class StorageContainerType:\n    uid: str\n    name: str\n    description: str | None\n    storage_section_uid: str\n    storage_section: Optional[StorageSectionType]\n    grid: bool | None\n    row_wise: bool | None\n    cols: int | None\n    rows: int | None",
        "detail": "felicity.api.gql.storage.types",
        "documentation": {}
    },
    {
        "label": "BytesEncoder",
        "kind": 6,
        "importPath": "felicity.api.gql.types.generic",
        "description": "felicity.api.gql.types.generic",
        "peekOfCode": "class BytesEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, bytes):\n            return obj.decode(\"utf-8\")\n        return json.JSONEncoder.default(self, obj)\nBytesScalar = strawberry.scalar(\n    NewType(\"BytesScalar\", bytes),\n    serialize=lambda v: base64.b64encode(v).decode(\"utf-8\"),\n    parse_value=lambda v: base64.b64decode(v).encode(\"utf-8\"),\n)",
        "detail": "felicity.api.gql.types.generic",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "kind": 6,
        "importPath": "felicity.api.gql.types.generic",
        "description": "felicity.api.gql.types.generic",
        "peekOfCode": "class PageInfo:\n    has_next_page: bool\n    has_previous_page: bool\n    start_cursor: str | None\n    end_cursor: str | None\n@strawberry.type\nclass DeletedItem:\n    uid: str\n@strawberry.type\nclass MessagesType:",
        "detail": "felicity.api.gql.types.generic",
        "documentation": {}
    },
    {
        "label": "DeletedItem",
        "kind": 6,
        "importPath": "felicity.api.gql.types.generic",
        "description": "felicity.api.gql.types.generic",
        "peekOfCode": "class DeletedItem:\n    uid: str\n@strawberry.type\nclass MessagesType:\n    message: str\n@strawberry.type\nclass OperationError:\n    error: str\n    suggestion: str | None = \"\"\n@strawberry.type",
        "detail": "felicity.api.gql.types.generic",
        "documentation": {}
    },
    {
        "label": "MessagesType",
        "kind": 6,
        "importPath": "felicity.api.gql.types.generic",
        "description": "felicity.api.gql.types.generic",
        "peekOfCode": "class MessagesType:\n    message: str\n@strawberry.type\nclass OperationError:\n    error: str\n    suggestion: str | None = \"\"\n@strawberry.type\nclass OperationSuccess:\n    message: str\nDeleteResponse = strawberry.union(",
        "detail": "felicity.api.gql.types.generic",
        "documentation": {}
    },
    {
        "label": "OperationError",
        "kind": 6,
        "importPath": "felicity.api.gql.types.generic",
        "description": "felicity.api.gql.types.generic",
        "peekOfCode": "class OperationError:\n    error: str\n    suggestion: str | None = \"\"\n@strawberry.type\nclass OperationSuccess:\n    message: str\nDeleteResponse = strawberry.union(\n    \"DeleteResponse\",\n    (DeletedItem, OperationError),\n    description=\"Union of possible outcomes when deleting some object\",",
        "detail": "felicity.api.gql.types.generic",
        "documentation": {}
    },
    {
        "label": "OperationSuccess",
        "kind": 6,
        "importPath": "felicity.api.gql.types.generic",
        "description": "felicity.api.gql.types.generic",
        "peekOfCode": "class OperationSuccess:\n    message: str\nDeleteResponse = strawberry.union(\n    \"DeleteResponse\",\n    (DeletedItem, OperationError),\n    description=\"Union of possible outcomes when deleting some object\",\n)\nMessageResponse = strawberry.union(\n    \"MessageResponse\",\n    (MessagesType, OperationError),",
        "detail": "felicity.api.gql.types.generic",
        "documentation": {}
    },
    {
        "label": "StrawberryMapper",
        "kind": 6,
        "importPath": "felicity.api.gql.types.generic",
        "description": "felicity.api.gql.types.generic",
        "peekOfCode": "class StrawberryMapper(Generic[T]):\n    def map(self, **kwargs) -> T:\n        type_class = self.__orig_class__.__args__[0]  # noqa\n        # Get the annotations from the Strawberry type\n        attrs = type_class.__dict__.get(\"__annotations__\", {})\n        # Remove keys not in the Strawberry type from the payload\n        keys = list(kwargs.keys())\n        for key in keys:\n            if key not in attrs:\n                del kwargs[key]",
        "detail": "felicity.api.gql.types.generic",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "felicity.api.gql.types.generic",
        "description": "felicity.api.gql.types.generic",
        "peekOfCode": "T = TypeVar(\"T\")\nJSONScalar = strawberry.scalar(\n    NewType(\"JSONScalar\", Any),\n    serialize=lambda v: v,\n    parse_value=lambda v: json.loads(v),\n    description=\"json field\",\n)\nclass BytesEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, bytes):",
        "detail": "felicity.api.gql.types.generic",
        "documentation": {}
    },
    {
        "label": "JSONScalar",
        "kind": 5,
        "importPath": "felicity.api.gql.types.generic",
        "description": "felicity.api.gql.types.generic",
        "peekOfCode": "JSONScalar = strawberry.scalar(\n    NewType(\"JSONScalar\", Any),\n    serialize=lambda v: v,\n    parse_value=lambda v: json.loads(v),\n    description=\"json field\",\n)\nclass BytesEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, bytes):\n            return obj.decode(\"utf-8\")",
        "detail": "felicity.api.gql.types.generic",
        "documentation": {}
    },
    {
        "label": "BytesScalar",
        "kind": 5,
        "importPath": "felicity.api.gql.types.generic",
        "description": "felicity.api.gql.types.generic",
        "peekOfCode": "BytesScalar = strawberry.scalar(\n    NewType(\"BytesScalar\", bytes),\n    serialize=lambda v: base64.b64encode(v).decode(\"utf-8\"),\n    parse_value=lambda v: base64.b64decode(v).encode(\"utf-8\"),\n)\n@strawberry.type\nclass PageInfo:\n    has_next_page: bool\n    has_previous_page: bool\n    start_cursor: str | None",
        "detail": "felicity.api.gql.types.generic",
        "documentation": {}
    },
    {
        "label": "DeleteResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.types.generic",
        "description": "felicity.api.gql.types.generic",
        "peekOfCode": "DeleteResponse = strawberry.union(\n    \"DeleteResponse\",\n    (DeletedItem, OperationError),\n    description=\"Union of possible outcomes when deleting some object\",\n)\nMessageResponse = strawberry.union(\n    \"MessageResponse\",\n    (MessagesType, OperationError),\n    description=\"Union of possible outcomes when deleting some object\",\n)",
        "detail": "felicity.api.gql.types.generic",
        "documentation": {}
    },
    {
        "label": "MessageResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.types.generic",
        "description": "felicity.api.gql.types.generic",
        "peekOfCode": "MessageResponse = strawberry.union(\n    \"MessageResponse\",\n    (MessagesType, OperationError),\n    description=\"Union of possible outcomes when deleting some object\",\n)\nSuccessErrorResponse = strawberry.union(\n    \"SuccessErrorResponse\",\n    (OperationSuccess, OperationError),\n    description=\"Union of possible outcomes when deleting some object\",\n)",
        "detail": "felicity.api.gql.types.generic",
        "documentation": {}
    },
    {
        "label": "SuccessErrorResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.types.generic",
        "description": "felicity.api.gql.types.generic",
        "peekOfCode": "SuccessErrorResponse = strawberry.union(\n    \"SuccessErrorResponse\",\n    (OperationSuccess, OperationError),\n    description=\"Union of possible outcomes when deleting some object\",\n)\nclass StrawberryMapper(Generic[T]):\n    def map(self, **kwargs) -> T:\n        type_class = self.__orig_class__.__args__[0]  # noqa\n        # Get the annotations from the Strawberry type\n        attrs = type_class.__dict__.get(\"__annotations__\", {})",
        "detail": "felicity.api.gql.types.generic",
        "documentation": {}
    },
    {
        "label": "PasswordResetValidityType",
        "kind": 6,
        "importPath": "felicity.api.gql.user.mutations",
        "description": "felicity.api.gql.user.mutations",
        "peekOfCode": "class PasswordResetValidityType:\n    username: str\n    auth_uid: str\nPasswordResetValidityResponse = strawberry.union(\n    \"PasswordResetValidityResponse\",\n    (PasswordResetValidityType, OperationError),\n    description=\"\",  # noqa\n)\n@strawberry.input\nclass GroupInputType:",
        "detail": "felicity.api.gql.user.mutations",
        "documentation": {}
    },
    {
        "label": "GroupInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.user.mutations",
        "description": "felicity.api.gql.user.mutations",
        "peekOfCode": "class GroupInputType:\n    name: str\n    pages: str\n    active: bool = True\ndef simple_task(message: str):\n    time.sleep(4)\n    logger.info(f\"finished task: {message}\")\n    return message\n@strawberry.type\nclass UserMutations:",
        "detail": "felicity.api.gql.user.mutations",
        "documentation": {}
    },
    {
        "label": "UserMutations",
        "kind": 6,
        "importPath": "felicity.api.gql.user.mutations",
        "description": "felicity.api.gql.user.mutations",
        "peekOfCode": "class UserMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def create_user(\n        self,\n        info,\n        first_name: str,\n        last_name: str,\n        email: str,\n        group_uid: str | None = None,\n        open_reg: bool | None = False,",
        "detail": "felicity.api.gql.user.mutations",
        "documentation": {}
    },
    {
        "label": "simple_task",
        "kind": 2,
        "importPath": "felicity.api.gql.user.mutations",
        "description": "felicity.api.gql.user.mutations",
        "peekOfCode": "def simple_task(message: str):\n    time.sleep(4)\n    logger.info(f\"finished task: {message}\")\n    return message\n@strawberry.type\nclass UserMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def create_user(\n        self,\n        info,",
        "detail": "felicity.api.gql.user.mutations",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "felicity.api.gql.user.mutations",
        "description": "felicity.api.gql.user.mutations",
        "peekOfCode": "settings = get_settings()\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\nUserResponse = strawberry.union(\n    \"UserResponse\", (UserType, OperationError), description=\"\"  # noqa\n)\nUserAuthResponse = strawberry.union(\n    \"UserAuthResponse\", (UserAuthType, OperationError), description=\"\"  # noqa\n)\nAuthenticatedDataResponse = strawberry.union(",
        "detail": "felicity.api.gql.user.mutations",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.user.mutations",
        "description": "felicity.api.gql.user.mutations",
        "peekOfCode": "logger = logging.getLogger(__name__)\nUserResponse = strawberry.union(\n    \"UserResponse\", (UserType, OperationError), description=\"\"  # noqa\n)\nUserAuthResponse = strawberry.union(\n    \"UserAuthResponse\", (UserAuthType, OperationError), description=\"\"  # noqa\n)\nAuthenticatedDataResponse = strawberry.union(\n    \"AuthenticatedDataResponse\",\n    (AuthenticatedData, OperationError),  # noqa",
        "detail": "felicity.api.gql.user.mutations",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.user.mutations",
        "description": "felicity.api.gql.user.mutations",
        "peekOfCode": "UserResponse = strawberry.union(\n    \"UserResponse\", (UserType, OperationError), description=\"\"  # noqa\n)\nUserAuthResponse = strawberry.union(\n    \"UserAuthResponse\", (UserAuthType, OperationError), description=\"\"  # noqa\n)\nAuthenticatedDataResponse = strawberry.union(\n    \"AuthenticatedDataResponse\",\n    (AuthenticatedData, OperationError),  # noqa\n    description=\"\",",
        "detail": "felicity.api.gql.user.mutations",
        "documentation": {}
    },
    {
        "label": "UserAuthResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.user.mutations",
        "description": "felicity.api.gql.user.mutations",
        "peekOfCode": "UserAuthResponse = strawberry.union(\n    \"UserAuthResponse\", (UserAuthType, OperationError), description=\"\"  # noqa\n)\nAuthenticatedDataResponse = strawberry.union(\n    \"AuthenticatedDataResponse\",\n    (AuthenticatedData, OperationError),  # noqa\n    description=\"\",\n)\nUpdatedGroupPermsResponse = strawberry.union(\n    \"UpdatedGroupPermsResponse\",",
        "detail": "felicity.api.gql.user.mutations",
        "documentation": {}
    },
    {
        "label": "AuthenticatedDataResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.user.mutations",
        "description": "felicity.api.gql.user.mutations",
        "peekOfCode": "AuthenticatedDataResponse = strawberry.union(\n    \"AuthenticatedDataResponse\",\n    (AuthenticatedData, OperationError),  # noqa\n    description=\"\",\n)\nUpdatedGroupPermsResponse = strawberry.union(\n    \"UpdatedGroupPermsResponse\",\n    (UpdatedGroupPerms, OperationError),  # noqa\n    description=\"\",\n)",
        "detail": "felicity.api.gql.user.mutations",
        "documentation": {}
    },
    {
        "label": "UpdatedGroupPermsResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.user.mutations",
        "description": "felicity.api.gql.user.mutations",
        "peekOfCode": "UpdatedGroupPermsResponse = strawberry.union(\n    \"UpdatedGroupPermsResponse\",\n    (UpdatedGroupPerms, OperationError),  # noqa\n    description=\"\",\n)\nGroupResponse = strawberry.union(\n    \"GroupResponse\", (GroupType, OperationError), description=\"\"  # noqa\n)\n@strawberry.type\nclass PasswordResetValidityType:",
        "detail": "felicity.api.gql.user.mutations",
        "documentation": {}
    },
    {
        "label": "GroupResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.user.mutations",
        "description": "felicity.api.gql.user.mutations",
        "peekOfCode": "GroupResponse = strawberry.union(\n    \"GroupResponse\", (GroupType, OperationError), description=\"\"  # noqa\n)\n@strawberry.type\nclass PasswordResetValidityType:\n    username: str\n    auth_uid: str\nPasswordResetValidityResponse = strawberry.union(\n    \"PasswordResetValidityResponse\",\n    (PasswordResetValidityType, OperationError),",
        "detail": "felicity.api.gql.user.mutations",
        "documentation": {}
    },
    {
        "label": "PasswordResetValidityResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.user.mutations",
        "description": "felicity.api.gql.user.mutations",
        "peekOfCode": "PasswordResetValidityResponse = strawberry.union(\n    \"PasswordResetValidityResponse\",\n    (PasswordResetValidityType, OperationError),\n    description=\"\",  # noqa\n)\n@strawberry.input\nclass GroupInputType:\n    name: str\n    pages: str\n    active: bool = True",
        "detail": "felicity.api.gql.user.mutations",
        "documentation": {}
    },
    {
        "label": "UserQuery",
        "kind": 6,
        "importPath": "felicity.api.gql.user.query",
        "description": "felicity.api.gql.user.query",
        "peekOfCode": "class UserQuery:\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def user_all(\n        self,\n        info,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,\n        text: str | None = None,\n        sort_by: list[str] | None = None,",
        "detail": "felicity.api.gql.user.query",
        "documentation": {}
    },
    {
        "label": "UserAuthType",
        "kind": 6,
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "peekOfCode": "class UserAuthType:\n    uid: str\n    user_name: str\n    login_retry: int\n    is_blocked: bool\n    user_type: str | None\n    #\n    created_at: str | None\n    creator_name: str | None\n    creator_uid: str | None",
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "PermissionType",
        "kind": 6,
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "peekOfCode": "class PermissionType:\n    uid: str\n    action: str | None\n    target: str | None\n    active: bool | None\n@strawberry.type\nclass GroupType:\n    uid: str\n    name: str | None\n    keyword: str | None",
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "GroupType",
        "kind": 6,
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "peekOfCode": "class GroupType:\n    uid: str\n    name: str | None\n    keyword: str | None\n    members: Optional[List[\"UserType\"]]\n    permissions: Optional[List[PermissionType]]\n    active: bool | None\n    pages: str | None\n@strawberry.type\nclass UserType:",
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UserType",
        "kind": 6,
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "peekOfCode": "class UserType:\n    uid: str\n    first_name: str | None\n    last_name: str | None\n    email: str | None\n    mobile_phone: str | None\n    business_phone: str | None\n    groups: Optional[List[GroupType]]\n    preference_uid: str | None\n    preference: Optional[\"UserPreferenceType\"]",
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "AuthenticatedData",
        "kind": 6,
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "peekOfCode": "class AuthenticatedData:\n    user: UserType\n    token: str\n    refresh: str\n    token_type: str\n@strawberry.type\nclass UpdatedGroupPerms:\n    group: GroupType\n    permission: PermissionType\n# relay pagination",
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UpdatedGroupPerms",
        "kind": 6,
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "peekOfCode": "class UpdatedGroupPerms:\n    group: GroupType\n    permission: PermissionType\n# relay pagination\n@strawberry.type\nclass UserEdge:\n    cursor: str\n    node: UserType\n@strawberry.type\nclass UserCursorPage:",
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UserEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "peekOfCode": "class UserEdge:\n    cursor: str\n    node: UserType\n@strawberry.type\nclass UserCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[UserEdge]]\n    items: list[UserType] | None\n    total_count: int\n@strawberry.type",
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UserCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "peekOfCode": "class UserCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[UserEdge]]\n    items: list[UserType] | None\n    total_count: int\n@strawberry.type\nclass UserPreferenceType:\n    uid: str\n    expanded_menu: bool | None\n    departments: list[DepartmentType] | None",
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "UserPreferenceType",
        "kind": 6,
        "importPath": "felicity.api.gql.user.types",
        "description": "felicity.api.gql.user.types",
        "peekOfCode": "class UserPreferenceType:\n    uid: str\n    expanded_menu: bool | None\n    departments: list[DepartmentType] | None\n    theme: str | None",
        "detail": "felicity.api.gql.user.types",
        "documentation": {}
    },
    {
        "label": "ReservedInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.worksheet.mutations",
        "description": "felicity.api.gql.worksheet.mutations",
        "peekOfCode": "class ReservedInputType:\n    position: int\n    level_uid: str | None\n@strawberry.input\nclass WorksheetTemplateInputType:\n    name: str\n    sample_type_uid: str\n    reserved: list[ReservedInputType] | None = None\n    analysis_uid: str | None = None\n    number_of_samples: int | None = None",
        "detail": "felicity.api.gql.worksheet.mutations",
        "documentation": {}
    },
    {
        "label": "WorksheetTemplateInputType",
        "kind": 6,
        "importPath": "felicity.api.gql.worksheet.mutations",
        "description": "felicity.api.gql.worksheet.mutations",
        "peekOfCode": "class WorksheetTemplateInputType:\n    name: str\n    sample_type_uid: str\n    reserved: list[ReservedInputType] | None = None\n    analysis_uid: str | None = None\n    number_of_samples: int | None = None\n    instrument_uid: str | None = None\n    worksheet_type: str | None = None\n    rows: int | None = None\n    cols: int | None = None",
        "detail": "felicity.api.gql.worksheet.mutations",
        "documentation": {}
    },
    {
        "label": "WorksheetListingType",
        "kind": 6,
        "importPath": "felicity.api.gql.worksheet.mutations",
        "description": "felicity.api.gql.worksheet.mutations",
        "peekOfCode": "class WorksheetListingType:\n    worksheets: Optional[List[WorkSheetType]]\nWorkSheetsResponse = strawberry.union(\n    \"WorkSheetsResponse\", (WorksheetListingType, OperationError), description=\"\"  # noqa\n)\nWorkSheetResponse = strawberry.union(\n    \"WorkSheetResponse\", (WorkSheetType, OperationError), description=\"\"  # noqa\n)\n@strawberry.type\nclass WorkSheetMutations:",
        "detail": "felicity.api.gql.worksheet.mutations",
        "documentation": {}
    },
    {
        "label": "WorkSheetMutations",
        "kind": 6,
        "importPath": "felicity.api.gql.worksheet.mutations",
        "description": "felicity.api.gql.worksheet.mutations",
        "peekOfCode": "class WorkSheetMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def create_worksheet_template(\n            self, info, payload: WorksheetTemplateInputType\n    ) -> WorkSheetTemplateResponse:\n        is_authenticated, felicity_user = await auth_from_info(info)\n        verify_user_auth(\n            is_authenticated,\n            felicity_user,\n            \"Only Authenticated user can create worksheet templates\",",
        "detail": "felicity.api.gql.worksheet.mutations",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.worksheet.mutations",
        "description": "felicity.api.gql.worksheet.mutations",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@strawberry.input\nclass ReservedInputType:\n    position: int\n    level_uid: str | None\n@strawberry.input\nclass WorksheetTemplateInputType:\n    name: str\n    sample_type_uid: str\n    reserved: list[ReservedInputType] | None = None",
        "detail": "felicity.api.gql.worksheet.mutations",
        "documentation": {}
    },
    {
        "label": "WorkSheetTemplateResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.worksheet.mutations",
        "description": "felicity.api.gql.worksheet.mutations",
        "peekOfCode": "WorkSheetTemplateResponse = strawberry.union(\n    \"WorkSheetTemplateResponse\",\n    (WorkSheetTemplateType, OperationError),  # noqa\n    description=\"\",\n)\n@strawberry.type\nclass WorksheetListingType:\n    worksheets: Optional[List[WorkSheetType]]\nWorkSheetsResponse = strawberry.union(\n    \"WorkSheetsResponse\", (WorksheetListingType, OperationError), description=\"\"  # noqa",
        "detail": "felicity.api.gql.worksheet.mutations",
        "documentation": {}
    },
    {
        "label": "WorkSheetsResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.worksheet.mutations",
        "description": "felicity.api.gql.worksheet.mutations",
        "peekOfCode": "WorkSheetsResponse = strawberry.union(\n    \"WorkSheetsResponse\", (WorksheetListingType, OperationError), description=\"\"  # noqa\n)\nWorkSheetResponse = strawberry.union(\n    \"WorkSheetResponse\", (WorkSheetType, OperationError), description=\"\"  # noqa\n)\n@strawberry.type\nclass WorkSheetMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def create_worksheet_template(",
        "detail": "felicity.api.gql.worksheet.mutations",
        "documentation": {}
    },
    {
        "label": "WorkSheetResponse",
        "kind": 5,
        "importPath": "felicity.api.gql.worksheet.mutations",
        "description": "felicity.api.gql.worksheet.mutations",
        "peekOfCode": "WorkSheetResponse = strawberry.union(\n    \"WorkSheetResponse\", (WorkSheetType, OperationError), description=\"\"  # noqa\n)\n@strawberry.type\nclass WorkSheetMutations:\n    @strawberry.mutation(permission_classes=[IsAuthenticated])\n    async def create_worksheet_template(\n            self, info, payload: WorksheetTemplateInputType\n    ) -> WorkSheetTemplateResponse:\n        is_authenticated, felicity_user = await auth_from_info(info)",
        "detail": "felicity.api.gql.worksheet.mutations",
        "documentation": {}
    },
    {
        "label": "WorkSheetQuery",
        "kind": 6,
        "importPath": "felicity.api.gql.worksheet.query",
        "description": "felicity.api.gql.worksheet.query",
        "peekOfCode": "class WorkSheetQuery:\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def worksheet_all(\n        self,\n        info,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,\n        text: str | None = None,\n        status: str | None = None,",
        "detail": "felicity.api.gql.worksheet.query",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.worksheet.query",
        "description": "felicity.api.gql.worksheet.query",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@strawberry.type\nclass WorkSheetQuery:\n    @strawberry.field(permission_classes=[IsAuthenticated])\n    async def worksheet_all(\n        self,\n        info,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,",
        "detail": "felicity.api.gql.worksheet.query",
        "documentation": {}
    },
    {
        "label": "WorkSheetTemplateType",
        "kind": 6,
        "importPath": "felicity.api.gql.worksheet.types",
        "description": "felicity.api.gql.worksheet.types",
        "peekOfCode": "class WorkSheetTemplateType:\n    uid: str\n    worksheet_type: str\n    reserved: Optional[JSONScalar]\n    number_of_samples: int | None\n    rows: int | None\n    cols: int | None\n    row_wise: bool\n    state: str | None\n    name: str",
        "detail": "felicity.api.gql.worksheet.types",
        "documentation": {}
    },
    {
        "label": "WorkSheetType",
        "kind": 6,
        "importPath": "felicity.api.gql.worksheet.types",
        "description": "felicity.api.gql.worksheet.types",
        "peekOfCode": "class WorkSheetType:\n    uid: str\n    worksheet_type: str\n    reserved: Optional[JSONScalar]\n    number_of_samples: int | None\n    rows: int | None\n    cols: int | None\n    row_wise: bool\n    state: str | None\n    template_uid: str | None",
        "detail": "felicity.api.gql.worksheet.types",
        "documentation": {}
    },
    {
        "label": "WorkSheetEdge",
        "kind": 6,
        "importPath": "felicity.api.gql.worksheet.types",
        "description": "felicity.api.gql.worksheet.types",
        "peekOfCode": "class WorkSheetEdge:\n    cursor: str\n    node: WorkSheetType\n@strawberry.type\nclass WorkSheetCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[WorkSheetEdge]]\n    items: Optional[List[WorkSheetType]]\n    total_count: int",
        "detail": "felicity.api.gql.worksheet.types",
        "documentation": {}
    },
    {
        "label": "WorkSheetCursorPage",
        "kind": 6,
        "importPath": "felicity.api.gql.worksheet.types",
        "description": "felicity.api.gql.worksheet.types",
        "peekOfCode": "class WorkSheetCursorPage:\n    page_info: PageInfo\n    edges: Optional[List[WorkSheetEdge]]\n    items: Optional[List[WorkSheetType]]\n    total_count: int",
        "detail": "felicity.api.gql.worksheet.types",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "kind": 6,
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "peekOfCode": "class IsAuthenticated(BasePermission):\n    message = \"Only accessible to authenticated users\"\n    async def has_permission(self, source: typing.Any, info: Info, **kwargs):\n        user = await info.context.user()\n        return user is not None\nclass IsActiveUser(BasePermission):\n    message = \"You must be an active user\"\n    async def has_permission(self, source: typing.Any, info: Info, **kwargs):\n        user = await info.context.user()\n        if not user:",
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsActiveUser",
        "kind": 6,
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "peekOfCode": "class IsActiveUser(BasePermission):\n    message = \"You must be an active user\"\n    async def has_permission(self, source: typing.Any, info: Info, **kwargs):\n        user = await info.context.user()\n        if not user:\n            return False\n        return user.is_active\nclass IsSuperUser(BasePermission):\n    message = \"You dont have enough privileges\"\n    async def has_permission(self, source: typing.Any, info: Info, **kwargs):",
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "IsSuperUser",
        "kind": 6,
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "peekOfCode": "class IsSuperUser(BasePermission):\n    message = \"You dont have enough privileges\"\n    async def has_permission(self, source: typing.Any, info: Info, **kwargs):\n        user = await info.context.user()\n        if not user:\n            return False\n        if not user.is_active:\n            return False\n        return user.is_superuser\nclass CanVerifySample(BasePermission):",
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "CanVerifySample",
        "kind": 6,
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "peekOfCode": "class CanVerifySample(BasePermission):\n    message = \"You have no privileges to verify this sample\"\n    async def has_permission(self, source: typing.Any, info: Info, **kwargs):\n        user = await info.context.user()\n        if not user:\n            return False\n        if not user.is_active:\n            return False\n        try:\n            samples = kwargs.get(\"samples\", [])",
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "CanVerifyAnalysisResult",
        "kind": 6,
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "peekOfCode": "class CanVerifyAnalysisResult(BasePermission):\n    message = \"You have no privileges to verify these analyses\"\n    async def has_permission(self, source: typing.Any, info: Info, **kwargs):\n        user = await info.context.user()\n        if not user:\n            return False\n        if not user.is_active:\n            return False\n        try:\n            analyses = kwargs.get(\"analyses\", [])",
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.gql.permissions",
        "description": "felicity.api.gql.permissions",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass IsAuthenticated(BasePermission):\n    message = \"Only accessible to authenticated users\"\n    async def has_permission(self, source: typing.Any, info: Info, **kwargs):\n        user = await info.context.user()\n        return user is not None\nclass IsActiveUser(BasePermission):\n    message = \"You must be an active user\"\n    async def has_permission(self, source: typing.Any, info: Info, **kwargs):\n        user = await info.context.user()",
        "detail": "felicity.api.gql.permissions",
        "documentation": {}
    },
    {
        "label": "Query",
        "kind": 6,
        "importPath": "felicity.api.gql.schema",
        "description": "felicity.api.gql.schema",
        "peekOfCode": "class Query(\n    SetupQuery,\n    AuditLogQuery,\n    UserQuery,\n    ClientQuery,\n    PatientQuery,\n    AnalysisQuery,\n    WorkSheetQuery,\n    MessageQuery,\n    NoticeQuery,",
        "detail": "felicity.api.gql.schema",
        "documentation": {}
    },
    {
        "label": "Mutation",
        "kind": 6,
        "importPath": "felicity.api.gql.schema",
        "description": "felicity.api.gql.schema",
        "peekOfCode": "class Mutation(\n    UserMutations,\n    SetupMutations,\n    ClientMutations,\n    PatientMutations,\n    AnalysisMutations,\n    WorkSheetMutations,\n    MessageMutations,\n    NoticeMutations,\n    ReflexRuleMutations,",
        "detail": "felicity.api.gql.schema",
        "documentation": {}
    },
    {
        "label": "Subscription",
        "kind": 6,
        "importPath": "felicity.api.gql.schema",
        "description": "felicity.api.gql.schema",
        "peekOfCode": "class Subscription(StreamSubscription):\n    pass\nschema = strawberry.Schema(\n    query=Query, mutation=Mutation, subscription=Subscription, types=types\n)",
        "detail": "felicity.api.gql.schema",
        "documentation": {}
    },
    {
        "label": "types",
        "kind": 5,
        "importPath": "felicity.api.gql.schema",
        "description": "felicity.api.gql.schema",
        "peekOfCode": "types = (\n    generic_types\n    + analysis_types\n    + analytics_types\n    + audit_types\n    + client_types\n    + impress_types\n    + instrument_types\n    + inventory_types\n    + messaging_types",
        "detail": "felicity.api.gql.schema",
        "documentation": {}
    },
    {
        "label": "schema",
        "kind": 5,
        "importPath": "felicity.api.gql.schema",
        "description": "felicity.api.gql.schema",
        "peekOfCode": "schema = strawberry.Schema(\n    query=Query, mutation=Mutation, subscription=Subscription, types=types\n)",
        "detail": "felicity.api.gql.schema",
        "documentation": {}
    },
    {
        "label": "jobs",
        "kind": 5,
        "importPath": "felicity.api.rest.api_v1.endpoints.jobs",
        "description": "felicity.api.rest.api_v1.endpoints.jobs",
        "peekOfCode": "jobs = APIRouter(tags=[\"job\"], prefix=\"/jobs\")\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n@jobs.get(\"\", response_model=None)\nasync def all_jobs() -> Any:\n    \"\"\"\n    Retrieve all jobs\n    \"\"\"\n    return await models.Job.all_async()",
        "detail": "felicity.api.rest.api_v1.endpoints.jobs",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.rest.api_v1.endpoints.jobs",
        "description": "felicity.api.rest.api_v1.endpoints.jobs",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@jobs.get(\"\", response_model=None)\nasync def all_jobs() -> Any:\n    \"\"\"\n    Retrieve all jobs\n    \"\"\"\n    return await models.Job.all_async()",
        "detail": "felicity.api.rest.api_v1.endpoints.jobs",
        "documentation": {}
    },
    {
        "label": "reports",
        "kind": 5,
        "importPath": "felicity.api.rest.api_v1.endpoints.reports",
        "description": "felicity.api.rest.api_v1.endpoints.reports",
        "peekOfCode": "reports = APIRouter(tags=[\"reports\"], prefix=\"/reports\")\n@reports.get(\"\")\nasync def read_reports(current_user: Annotated[User, Depends(get_current_user)]):\n    \"\"\"\n    Retrieve previously generated csv reports.\n    \"\"\"\n    _r = await models.ReportMeta.all_async()\n    return list(map(lambda r: r.marshall_simple(), _r))\n@reports.post(\"\")\nasync def request_report_generation(",
        "detail": "felicity.api.rest.api_v1.endpoints.reports",
        "documentation": {}
    },
    {
        "label": "InstallResponse",
        "kind": 6,
        "importPath": "felicity.api.rest.api_v1.endpoints.setup",
        "description": "felicity.api.rest.api_v1.endpoints.setup",
        "peekOfCode": "class InstallResponse(BaseModel):\n    laboratory: Optional[schemas.Laboratory] = None\n    installed: bool\n    message: str | None = None\nclass LabNameIn(BaseModel):\n    name: str\nclass SetupResponse(BaseModel):\n    success: bool\n    message: str | None = None\n@setup.get(\"/installation\")",
        "detail": "felicity.api.rest.api_v1.endpoints.setup",
        "documentation": {}
    },
    {
        "label": "LabNameIn",
        "kind": 6,
        "importPath": "felicity.api.rest.api_v1.endpoints.setup",
        "description": "felicity.api.rest.api_v1.endpoints.setup",
        "peekOfCode": "class LabNameIn(BaseModel):\n    name: str\nclass SetupResponse(BaseModel):\n    success: bool\n    message: str | None = None\n@setup.get(\"/installation\")\nasync def laboratory_lookup() -> Any:\n    \"\"\"\n    Retrieve instance of installed laboratory\n    \"\"\"",
        "detail": "felicity.api.rest.api_v1.endpoints.setup",
        "documentation": {}
    },
    {
        "label": "SetupResponse",
        "kind": 6,
        "importPath": "felicity.api.rest.api_v1.endpoints.setup",
        "description": "felicity.api.rest.api_v1.endpoints.setup",
        "peekOfCode": "class SetupResponse(BaseModel):\n    success: bool\n    message: str | None = None\n@setup.get(\"/installation\")\nasync def laboratory_lookup() -> Any:\n    \"\"\"\n    Retrieve instance of installed laboratory\n    \"\"\"\n    laboratory = await models.Laboratory.get_by_setup_name(\"felicity\")\n    return {",
        "detail": "felicity.api.rest.api_v1.endpoints.setup",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 5,
        "importPath": "felicity.api.rest.api_v1.endpoints.setup",
        "description": "felicity.api.rest.api_v1.endpoints.setup",
        "peekOfCode": "setup = APIRouter(tags=[\"setup\"], prefix=\"/setup\")\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\nclass InstallResponse(BaseModel):\n    laboratory: Optional[schemas.Laboratory] = None\n    installed: bool\n    message: str | None = None\nclass LabNameIn(BaseModel):\n    name: str\nclass SetupResponse(BaseModel):",
        "detail": "felicity.api.rest.api_v1.endpoints.setup",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.rest.api_v1.endpoints.setup",
        "description": "felicity.api.rest.api_v1.endpoints.setup",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass InstallResponse(BaseModel):\n    laboratory: Optional[schemas.Laboratory] = None\n    installed: bool\n    message: str | None = None\nclass LabNameIn(BaseModel):\n    name: str\nclass SetupResponse(BaseModel):\n    success: bool\n    message: str | None = None",
        "detail": "felicity.api.rest.api_v1.endpoints.setup",
        "documentation": {}
    },
    {
        "label": "InstallResponse",
        "kind": 6,
        "importPath": "felicity.api.rest.api_v1.endpoints.version",
        "description": "felicity.api.rest.api_v1.endpoints.version",
        "peekOfCode": "class InstallResponse(BaseModel):\n    laboratory: Optional[schemas.Laboratory] = None\n    installed: bool\n    message: str | None = None\nclass LabNameIn(BaseModel):\n    name: str\nclass SetupResponse(BaseModel):\n    success: bool\n    message: str | None = None\n@version.get(\"/\")",
        "detail": "felicity.api.rest.api_v1.endpoints.version",
        "documentation": {}
    },
    {
        "label": "LabNameIn",
        "kind": 6,
        "importPath": "felicity.api.rest.api_v1.endpoints.version",
        "description": "felicity.api.rest.api_v1.endpoints.version",
        "peekOfCode": "class LabNameIn(BaseModel):\n    name: str\nclass SetupResponse(BaseModel):\n    success: bool\n    message: str | None = None\n@version.get(\"/\")\nasync def get_version() -> Any:\n    \"\"\"\n    Retrieve the version of Felicity LIMS\n    \"\"\"",
        "detail": "felicity.api.rest.api_v1.endpoints.version",
        "documentation": {}
    },
    {
        "label": "SetupResponse",
        "kind": 6,
        "importPath": "felicity.api.rest.api_v1.endpoints.version",
        "description": "felicity.api.rest.api_v1.endpoints.version",
        "peekOfCode": "class SetupResponse(BaseModel):\n    success: bool\n    message: str | None = None\n@version.get(\"/\")\nasync def get_version() -> Any:\n    \"\"\"\n    Retrieve the version of Felicity LIMS\n    \"\"\"\n    return {\"version\": FelicityVersion.version}\n@version.post(\"/updates\")",
        "detail": "felicity.api.rest.api_v1.endpoints.version",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "felicity.api.rest.api_v1.endpoints.version",
        "description": "felicity.api.rest.api_v1.endpoints.version",
        "peekOfCode": "version = APIRouter(tags=[\"version\"], prefix=\"/version\")\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\nclass InstallResponse(BaseModel):\n    laboratory: Optional[schemas.Laboratory] = None\n    installed: bool\n    message: str | None = None\nclass LabNameIn(BaseModel):\n    name: str\nclass SetupResponse(BaseModel):",
        "detail": "felicity.api.rest.api_v1.endpoints.version",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.rest.api_v1.endpoints.version",
        "description": "felicity.api.rest.api_v1.endpoints.version",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass InstallResponse(BaseModel):\n    laboratory: Optional[schemas.Laboratory] = None\n    installed: bool\n    message: str | None = None\nclass LabNameIn(BaseModel):\n    name: str\nclass SetupResponse(BaseModel):\n    success: bool\n    message: str | None = None",
        "detail": "felicity.api.rest.api_v1.endpoints.version",
        "documentation": {}
    },
    {
        "label": "fhir_v4",
        "kind": 5,
        "importPath": "felicity.api.rest.api_v1.fhir.r4",
        "description": "felicity.api.rest.api_v1.fhir.r4",
        "peekOfCode": "fhir_v4 = APIRouter(tags=[\"fhir-v4\"], prefix=\"/fhir\")\n@fhir_v4.post(\"/{resource_type}\")\nasync def add_resource(\n    request: Request,\n    resource_type: str,\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    \"\"\"\n    Add a fhir resource\n    Supported Resources are Bundle, ServiceRequest and Patient",
        "detail": "felicity.api.rest.api_v1.fhir.r4",
        "documentation": {}
    },
    {
        "label": "InfoContext",
        "kind": 6,
        "importPath": "felicity.api.deps",
        "description": "felicity.api.deps",
        "peekOfCode": "class InfoContext(BaseContext):\n    async def user(self) -> User | None:\n        if not self.request:\n            return None\n        authorization = self.request.headers.get(\"Authorization\", None)\n        if not authorization:\n            return None\n        token = authorization.split(\" \")[1]\n        return await _get_user(token)\nInfo = StrawberryInfo[InfoContext, RootValueType]",
        "detail": "felicity.api.deps",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.api.deps",
        "description": "felicity.api.deps",
        "peekOfCode": "logger = logging.getLogger(__name__)\nsettings = get_settings()\n# oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"felicity-gql\", scheme_name=\"JWT\")\nasync def _get_user(token: str):\n    if not token:\n        GraphQLError(\"No auth token\")\n    try:\n        payload = jwt.decode(\n            token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM]",
        "detail": "felicity.api.deps",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "felicity.api.deps",
        "description": "felicity.api.deps",
        "peekOfCode": "settings = get_settings()\n# oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"felicity-gql\", scheme_name=\"JWT\")\nasync def _get_user(token: str):\n    if not token:\n        GraphQLError(\"No auth token\")\n    try:\n        payload = jwt.decode(\n            token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM]\n        )",
        "detail": "felicity.api.deps",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "felicity.api.deps",
        "description": "felicity.api.deps",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"felicity-gql\", scheme_name=\"JWT\")\nasync def _get_user(token: str):\n    if not token:\n        GraphQLError(\"No auth token\")\n    try:\n        payload = jwt.decode(\n            token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM]\n        )\n        token_data = core_schemas.TokenPayload(**payload)\n    except (jwt.JWTError, ValidationError) as e:",
        "detail": "felicity.api.deps",
        "documentation": {}
    },
    {
        "label": "Info",
        "kind": 5,
        "importPath": "felicity.api.deps",
        "description": "felicity.api.deps",
        "peekOfCode": "Info = StrawberryInfo[InfoContext, RootValueType]\nasync def get_gql_context() -> InfoContext:\n    return InfoContext()",
        "detail": "felicity.api.deps",
        "documentation": {}
    },
    {
        "label": "TrailMixin",
        "kind": 6,
        "importPath": "felicity.apps.abstract.audit",
        "description": "felicity.apps.abstract.audit",
        "peekOfCode": "class TrailMixin(object):\n    @declared_attr\n    def created_at(self):\n        return Column(DateTime, default=datetime.utcnow)\n    @declared_attr\n    def created_by_uid(self):\n        return Column(String, ForeignKey(\"user.uid\"), nullable=True)\n    @declared_attr\n    def created_by(self):\n        return relationship(\"User\", foreign_keys=[self.created_by_uid], lazy=\"selectin\")",
        "detail": "felicity.apps.abstract.audit",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "kind": 6,
        "importPath": "felicity.apps.abstract.audit",
        "description": "felicity.apps.abstract.audit",
        "peekOfCode": "class AuditUser(BaseEntity, TrailMixin):\n    \"\"\"Track Actioners: creator and updater\"\"\"\n    __abstract__ = True\nclass AuditHistory(AuditUser, AuditHistoryMixin):\n    \"\"\"Track Model History -> Audit Log\"\"\"\n    __abstract__ = True",
        "detail": "felicity.apps.abstract.audit",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "kind": 6,
        "importPath": "felicity.apps.abstract.audit",
        "description": "felicity.apps.abstract.audit",
        "peekOfCode": "class AuditHistory(AuditUser, AuditHistoryMixin):\n    \"\"\"Track Model History -> Audit Log\"\"\"\n    __abstract__ = True",
        "detail": "felicity.apps.abstract.audit",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "kind": 6,
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "peekOfCode": "class BaseService(Generic[E, C, U]):\n    def __init__(self, repository: BaseRepository) -> None:\n        self.repository = repository\n    async def paging_filter(\n        self,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,\n        text: str | None = None,\n        sort_by: list[str] | None = None,",
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 5,
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "peekOfCode": "E = TypeVar(\"E\", bound=DeclarativeBase)\nC = TypeVar(\"C\", bound=BaseModel)\nU = TypeVar(\"U\", bound=BaseModel)\nclass BaseService(Generic[E, C, U]):\n    def __init__(self, repository: BaseRepository) -> None:\n        self.repository = repository\n    async def paging_filter(\n        self,\n        page_size: int | None = None,\n        after_cursor: str | None = None,",
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 5,
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "peekOfCode": "C = TypeVar(\"C\", bound=BaseModel)\nU = TypeVar(\"U\", bound=BaseModel)\nclass BaseService(Generic[E, C, U]):\n    def __init__(self, repository: BaseRepository) -> None:\n        self.repository = repository\n    async def paging_filter(\n        self,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,",
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "U",
        "kind": 5,
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "peekOfCode": "U = TypeVar(\"U\", bound=BaseModel)\nclass BaseService(Generic[E, C, U]):\n    def __init__(self, repository: BaseRepository) -> None:\n        self.repository = repository\n    async def paging_filter(\n        self,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,\n        text: str | None = None,",
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "CodingStandard",
        "kind": 6,
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "peekOfCode": "class CodingStandard(AuditUser):\n    \"\"\"conding standars e.g LOINC\"\"\"\n    __tablename__ = \"coding_standard\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\nclass SampleType(AuditUser):\n    \"\"\"SampleType\"\"\"\n    __tablename__ = \"sample_type\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)",
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "SampleType",
        "kind": 6,
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "peekOfCode": "class SampleType(AuditUser):\n    \"\"\"SampleType\"\"\"\n    __tablename__ = \"sample_type\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    active = Column(Boolean(), default=False)\n    internal_use = Column(Boolean(), default=False)  # e.g QC Sample\n    abbr = Column(String, nullable=False)\nclass SampleTypeCoding(AuditUser):\n    \"\"\"SampleTypeCoding\"\"\"",
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "SampleTypeCoding",
        "kind": 6,
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "peekOfCode": "class SampleTypeCoding(AuditUser):\n    \"\"\"SampleTypeCoding\"\"\"\n    __tablename__ = \"sample_type_coding\"\n    sample_type_uid = Column(String, ForeignKey(\"sample_type.uid\"), nullable=False)\n    sample_type = relationship(\"SampleType\", lazy=\"selectin\")\n    coding_standard_uid = Column(\n        String, ForeignKey(\"coding_standard.uid\"), nullable=True\n    )\n    coding_standard = relationship(\"CodingStandard\", lazy=\"selectin\")\n    name = Column(String, nullable=True)",
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCategory",
        "kind": 6,
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "peekOfCode": "class AnalysisCategory(AuditUser):\n    \"\"\"Categorise Analysis\"\"\"\n    __tablename__ = \"analysis_category\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    department_uid = Column(String, ForeignKey(\"department.uid\"), nullable=True)\n    department = relationship(\"Department\", lazy=\"selectin\")\n    active = Column(Boolean(), default=False)\nclass Profile(AuditUser):\n    \"\"\"Grouped Analysis e.g FBC, U&E's, MCS ...\"\"\"",
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Profile",
        "kind": 6,
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "peekOfCode": "class Profile(AuditUser):\n    \"\"\"Grouped Analysis e.g FBC, U&E's, MCS ...\"\"\"\n    __tablename__ = \"profile\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    keyword = Column(String, nullable=True, unique=True)\n    tat_length_minutes = Column(Integer, nullable=True)\n    active = Column(Boolean(), default=False)\n    analyses = relationship(\n        \"Analysis\",",
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "ProfileCoding",
        "kind": 6,
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "peekOfCode": "class ProfileCoding(AuditUser):\n    \"\"\"ProfileCoding\"\"\"\n    __tablename__ = \"profile_coding\"\n    profile_uid = Column(String, ForeignKey(\"profile.uid\"), nullable=True)\n    profile = relationship(\"Profile\", lazy=\"selectin\")\n    coding_standard_uid = Column(\n        String, ForeignKey(\"coding_standard.uid\"), nullable=True\n    )\n    coding_standard = relationship(\"CodingStandard\", lazy=\"selectin\")\n    name = Column(String, nullable=True)",
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Analysis",
        "kind": 6,
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "peekOfCode": "class Analysis(AuditUser):\n    \"\"\"Analysis Test/Service\"\"\"\n    __tablename__ = \"analysis\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    keyword = Column(String, nullable=False, unique=True)\n    # default unit: can be overridden by specification unit\n    unit_uid = Column(String, ForeignKey(\"unit.uid\"), nullable=True)\n    unit = relationship(\"Unit\", lazy=\"selectin\")\n    profiles = relationship(",
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCoding",
        "kind": 6,
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "peekOfCode": "class AnalysisCoding(AuditUser):\n    \"\"\"AnalysisCoding\"\"\"\n    __tablename__ = \"analysis_coding\"\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    analysis = relationship(\"Analysis\", lazy=\"selectin\")\n    coding_standard_uid = Column(\n        String, ForeignKey(\"coding_standard.uid\"), nullable=True\n    )\n    coding_standard = relationship(\"CodingStandard\", lazy=\"selectin\")\n    name = Column(String, nullable=True)",
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisInterim",
        "kind": 6,
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "peekOfCode": "class AnalysisInterim(AuditUser):\n    \"\"\"Analysis Interim Result Field\"\"\"\n    __tablename__ = \"analysis_interim\"\n    key = Column(Integer, nullable=False)\n    value = Column(String, nullable=False)\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    instrument_uid = Column(String, ForeignKey(\"instrument.uid\"), nullable=True)\n    instrument = relationship(\"Instrument\")\nclass AnalysisCorrectionFactor(AuditUser):\n    \"\"\"Analysis Correction Factor\"\"\"",
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactor",
        "kind": 6,
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "peekOfCode": "class AnalysisCorrectionFactor(AuditUser):\n    \"\"\"Analysis Correction Factor\"\"\"\n    __tablename__ = \"analysis_correction_factor\"\n    factor = Column(Float, nullable=False)\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    instrument_uid = Column(String, ForeignKey(\"instrument.uid\"), nullable=True)\n    method_uid = Column(String, ForeignKey(\"method.uid\"), nullable=True)\nclass AnalysisDetectionLimit(AuditUser):\n    \"\"\"Analysis Detection Limit\"\"\"\n    __tablename__ = \"analysis_detection_limit\"",
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimit",
        "kind": 6,
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "peekOfCode": "class AnalysisDetectionLimit(AuditUser):\n    \"\"\"Analysis Detection Limit\"\"\"\n    __tablename__ = \"analysis_detection_limit\"\n    lower_limit = Column(Float, nullable=False)\n    upper_limit = Column(Float, nullable=False)\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    instrument_uid = Column(String, ForeignKey(\"instrument.uid\"), nullable=True)\n    method_uid = Column(String, ForeignKey(\"method.uid\"), nullable=True)\nclass AnalysisUncertainty(AuditUser):\n    \"\"\"Analysis Measurment Uncertainty",
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertainty",
        "kind": 6,
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "peekOfCode": "class AnalysisUncertainty(AuditUser):\n    \"\"\"Analysis Measurment Uncertainty\n    If value is within the the range min.max then result becomes a range (result +/- value)\n    \"\"\"\n    __tablename__ = \"analysis_uncertainty\"\n    min = Column(Float, nullable=False)\n    max = Column(Float, nullable=False)\n    value = Column(Float, nullable=False)\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    instrument_uid = Column(String, ForeignKey(\"instrument.uid\"), nullable=True)",
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecification",
        "kind": 6,
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "peekOfCode": "class AnalysisSpecification(AuditUser):\n    \"\"\"Analysis Specification Ranges\"\"\"\n    __tablename__ = \"analysis_specification\"\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    unit_uid = Column(String, ForeignKey(\"unit.uid\"), nullable=True)\n    unit = relationship(\"Unit\", lazy=\"selectin\")\n    # Normal Range\n    min = Column(Float, nullable=True)\n    max = Column(Float, nullable=True)\n    # Below Normal Range: Raise Alarm",
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "ResultOption",
        "kind": 6,
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "peekOfCode": "class ResultOption(AuditUser):\n    \"\"\"Result Choices\"\"\"\n    __tablename__ = \"result_option\"\n    option_key = Column(Integer, nullable=False)\n    value = Column(String, nullable=False)\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"))\nclass AnalysisRequest(AuditUser):\n    \"\"\"AnalysisRequest a.k.a Laboratory Request\"\"\"\n    __tablename__ = \"analysis_request\"\n    patient_uid = Column(String, ForeignKey(\"patient.uid\"))",
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRequest",
        "kind": 6,
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "peekOfCode": "class AnalysisRequest(AuditUser):\n    \"\"\"AnalysisRequest a.k.a Laboratory Request\"\"\"\n    __tablename__ = \"analysis_request\"\n    patient_uid = Column(String, ForeignKey(\"patient.uid\"))\n    patient = relationship(\n        pt_entities.Patient, backref=\"analysis_requests\", lazy=\"selectin\"\n    )\n    client_uid = Column(String, ForeignKey(\"client.uid\"))\n    client = relationship(\n        ct_entities.Client, backref=\"analysis_requests\", lazy=\"selectin\"",
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "RejectionReason",
        "kind": 6,
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "peekOfCode": "class RejectionReason(AuditUser):\n    \"\"\"Rejection Reason\"\"\"\n    __tablename__ = \"rejection_reason\"\n    reason = Column(String, nullable=False)\nclass Sample(AuditHistory, BaseMPTT):\n    \"\"\"Sample\"\"\"\n    __tablename__ = \"sample\"\n    analysis_request_uid = Column(\n        String, ForeignKey(\"analysis_request.uid\"), nullable=True\n    )",
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "kind": 6,
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "peekOfCode": "class Sample(AuditHistory, BaseMPTT):\n    \"\"\"Sample\"\"\"\n    __tablename__ = \"sample\"\n    analysis_request_uid = Column(\n        String, ForeignKey(\"analysis_request.uid\"), nullable=True\n    )\n    analysis_request = relationship(\n        \"AnalysisRequest\", back_populates=\"samples\", lazy=\"selectin\"\n    )\n    sample_type_uid = Column(String, ForeignKey(\"sample_type.uid\"), nullable=False)",
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "profile_sample_type",
        "kind": 5,
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "peekOfCode": "profile_sample_type = Table(\n    \"profile_sample_type\",\n    BaseEntity.metadata,\n    Column(\"sample_type_uid\", ForeignKey(\"sample_type.uid\"), primary_key=True),\n    Column(\"profile_uid\", ForeignKey(\"profile.uid\"), primary_key=True),\n)\n\"\"\"\nMany to Many Link between Analysis and SampleType\n\"\"\"\nanalysis_sample_type = Table(",
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "analysis_sample_type",
        "kind": 5,
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "peekOfCode": "analysis_sample_type = Table(\n    \"analysis_sample_type\",\n    BaseEntity.metadata,\n    Column(\"sample_type_uid\", ForeignKey(\"sample_type.uid\"), primary_key=True),\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n)\n\"\"\"\n Many to Many Link between Analysis and Profile\n    Offers multi-profiles flexibility per analysis\n    A rare scenario worth supporting :)",
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "analysis_profile",
        "kind": 5,
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "peekOfCode": "analysis_profile = Table(\n    \"analysis_profile\",\n    BaseEntity.metadata,\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n    Column(\"profile_uid\", ForeignKey(\"profile.uid\"), primary_key=True),\n)\nclass AnalysisCategory(AuditUser):\n    \"\"\"Categorise Analysis\"\"\"\n    __tablename__ = \"analysis_category\"\n    name = Column(String, nullable=False)",
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "analysis_method",
        "kind": 5,
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "peekOfCode": "analysis_method = Table(\n    \"analysis_method\",\n    BaseEntity.metadata,\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n    Column(\"method_uid\", ForeignKey(\"method.uid\"), primary_key=True),\n)\n\"\"\"\n Many to Many Link between Analyses and Intruments\n\"\"\"\nanalysis_instrument = Table(",
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "analysis_instrument",
        "kind": 5,
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "peekOfCode": "analysis_instrument = Table(\n    \"analysis_instrument\",\n    BaseEntity.metadata,\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n    Column(\"instrument_uid\", ForeignKey(\"instrument.uid\"), primary_key=True),\n)\nclass Analysis(AuditUser):\n    \"\"\"Analysis Test/Service\"\"\"\n    __tablename__ = \"analysis\"\n    name = Column(String, nullable=False)",
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "sample_profile",
        "kind": 5,
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "peekOfCode": "sample_profile = Table(\n    \"sample_profile\",\n    BaseEntity.metadata,\n    Column(\"sample_uid\", ForeignKey(\"sample.uid\"), primary_key=True),\n    Column(\"profile_uid\", ForeignKey(\"profile.uid\"), primary_key=True),\n)\n\"\"\"\nMany to Many Link between Sample and Analysis\n\"\"\"\nsample_analysis = Table(",
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "sample_analysis",
        "kind": 5,
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "peekOfCode": "sample_analysis = Table(\n    \"sample_analysis\",\n    BaseEntity.metadata,\n    Column(\"sample_uid\", ForeignKey(\"sample.uid\"), primary_key=True),\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n)\n\"\"\"\nMany to Many Link between Sample and Rejection Reason\n\"\"\"\nsample_rejection_reason = Table(",
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "sample_rejection_reason",
        "kind": 5,
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "peekOfCode": "sample_rejection_reason = Table(\n    \"sample_rejection_reason\",\n    BaseEntity.metadata,\n    Column(\"sample_uid\", ForeignKey(\"sample.uid\"), primary_key=True),\n    Column(\n        \"rejection_reason_uid\", ForeignKey(\"rejection_reason.uid\"), primary_key=True\n    ),\n)\nclass RejectionReason(AuditUser):\n    \"\"\"Rejection Reason\"\"\"",
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "QCSet",
        "kind": 6,
        "importPath": "felicity.apps.analysis.entities.quality_control",
        "description": "felicity.apps.analysis.entities.quality_control",
        "peekOfCode": "class QCSet(AuditUser):\n    \"\"\"A Set/Group of QC Samples that are run together.\n    - e.g a Viral Load Rack the QCLevels are a set i.e Negative Control, Low Pos Control, High Pos Control\n    \"\"\"\n    __tablename__ = \"qc_set\"\n    name = Column(String, nullable=False)\n    note = Column(String, nullable=True)\n    samples = relationship(\"Sample\", back_populates=\"qc_set\", lazy=\"selectin\")\n\"\"\"\nMany to Many Link between QCReference and  Analysis",
        "detail": "felicity.apps.analysis.entities.quality_control",
        "documentation": {}
    },
    {
        "label": "QCReference",
        "kind": 6,
        "importPath": "felicity.apps.analysis.entities.quality_control",
        "description": "felicity.apps.analysis.entities.quality_control",
        "peekOfCode": "class QCReference(AuditUser):\n    \"\"\"QC Sample Reference Material    :: Not Implemented Yet\n    - can have multi analytes/Profile\n    - states: Active (in-use - there must be only 1 active per analysis)\n              InActive awaiting activation\n              Depleted\n    \"\"\"\n    __tablename__ = \"qc_reference\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)",
        "detail": "felicity.apps.analysis.entities.quality_control",
        "documentation": {}
    },
    {
        "label": "QCLevel",
        "kind": 6,
        "importPath": "felicity.apps.analysis.entities.quality_control",
        "description": "felicity.apps.analysis.entities.quality_control",
        "peekOfCode": "class QCLevel(AuditUser):\n    \"\"\"Sample Level /category\n    - None - normal sample\n    - Negative Control\n    - EID PositiveControl\n    - HIV Low Positive Control\n    - HIV High Positive Control\n    \"\"\"\n    __tablename__ = \"qc_level\"\n    level = Column(String, nullable=False)",
        "detail": "felicity.apps.analysis.entities.quality_control",
        "documentation": {}
    },
    {
        "label": "QCTemplate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.entities.quality_control",
        "description": "felicity.apps.analysis.entities.quality_control",
        "peekOfCode": "class QCTemplate(AuditUser):\n    \"\"\"QC Level Grouping e.g:\n    Roche Viral Load CQ:\n        - Neg Control\n        - Low Pos Control\n        - High Pos Control\n    Malaria Slide QC:\n        - Negative Control\n        - Positive COntrol\n    \"\"\"",
        "detail": "felicity.apps.analysis.entities.quality_control",
        "documentation": {}
    },
    {
        "label": "qc_reference_analysis",
        "kind": 5,
        "importPath": "felicity.apps.analysis.entities.quality_control",
        "description": "felicity.apps.analysis.entities.quality_control",
        "peekOfCode": "qc_reference_analysis = Table(\n    \"qc_reference_analysis\",\n    BaseEntity.metadata,\n    Column(\"qc_reference_uid\", ForeignKey(\"qc_reference.uid\"), primary_key=True),\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n)\nclass QCReference(AuditUser):\n    \"\"\"QC Sample Reference Material    :: Not Implemented Yet\n    - can have multi analytes/Profile\n    - states: Active (in-use - there must be only 1 active per analysis)",
        "detail": "felicity.apps.analysis.entities.quality_control",
        "documentation": {}
    },
    {
        "label": "qc_template_department",
        "kind": 5,
        "importPath": "felicity.apps.analysis.entities.quality_control",
        "description": "felicity.apps.analysis.entities.quality_control",
        "peekOfCode": "qc_template_department = Table(\n    \"qc_template_department\",\n    BaseEntity.metadata,\n    Column(\"department_uid\", ForeignKey(\"department.uid\"), primary_key=True),\n    Column(\"qc_template_uid\", ForeignKey(\"qc_template.uid\"), primary_key=True),\n)\n\"\"\"\nMany to Many Link between QCTemplate and  QCLevel\n\"\"\"\nqc_template_qc_level = Table(",
        "detail": "felicity.apps.analysis.entities.quality_control",
        "documentation": {}
    },
    {
        "label": "qc_template_qc_level",
        "kind": 5,
        "importPath": "felicity.apps.analysis.entities.quality_control",
        "description": "felicity.apps.analysis.entities.quality_control",
        "peekOfCode": "qc_template_qc_level = Table(\n    \"qc_template_qc_level\",\n    BaseEntity.metadata,\n    Column(\"qc_level_uid\", ForeignKey(\"qc_level.uid\"), primary_key=True),\n    Column(\"qc_template_uid\", ForeignKey(\"qc_template.uid\"), primary_key=True),\n)\nclass QCTemplate(AuditUser):\n    \"\"\"QC Level Grouping e.g:\n    Roche Viral Load CQ:\n        - Neg Control",
        "detail": "felicity.apps.analysis.entities.quality_control",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "kind": 6,
        "importPath": "felicity.apps.analysis.entities.results",
        "description": "felicity.apps.analysis.entities.results",
        "peekOfCode": "class AnalysisResult(AuditHistory, BaseMPTT):\n    \"\"\"Test/Analysis Result\n    Number of analysis results per sample will be directly proportional to\n    the number of linked sample_analyses at minimum :)\n    \"\"\"\n    __tablename__ = \"analysis_result\"\n    sample_uid = Column(String, ForeignKey(\"sample.uid\"), nullable=False)\n    sample = relationship(\"Sample\", back_populates=\"analysis_results\", lazy=\"selectin\")\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=False)\n    analysis = relationship(\"Analysis\", backref=\"analysis_results\", lazy=\"selectin\")",
        "detail": "felicity.apps.analysis.entities.results",
        "documentation": {}
    },
    {
        "label": "ResultMutation",
        "kind": 6,
        "importPath": "felicity.apps.analysis.entities.results",
        "description": "felicity.apps.analysis.entities.results",
        "peekOfCode": "class ResultMutation(AuditUser):\n    \"\"\"Result Mutations tracker\"\"\"\n    __tablename__ = \"result_mutation\"\n    result_uid = Column(String, ForeignKey(\"analysis_result.uid\"), nullable=False)\n    before = Column(String, nullable=False)\n    after = Column(String, nullable=False)\n    mutation = Column(String, nullable=False)\n    date = Column(DateTime, nullable=True)",
        "detail": "felicity.apps.analysis.entities.results",
        "documentation": {}
    },
    {
        "label": "result_verification",
        "kind": 5,
        "importPath": "felicity.apps.analysis.entities.results",
        "description": "felicity.apps.analysis.entities.results",
        "peekOfCode": "result_verification = Table(\n    \"result_verification\",\n    BaseEntity.metadata,\n    Column(\"result_uid\", ForeignKey(\"analysis_result.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\nclass AnalysisResult(AuditHistory, BaseMPTT):\n    \"\"\"Test/Analysis Result\n    Number of analysis results per sample will be directly proportional to\n    the number of linked sample_analyses at minimum :)",
        "detail": "felicity.apps.analysis.entities.results",
        "documentation": {}
    },
    {
        "label": "CodingStandard",
        "kind": 6,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "class CodingStandard(AuditUser):\n    \"\"\"conding standars e.g LOINC\"\"\"\n    __tablename__ = \"coding_standard\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    @classmethod\n    async def create(cls, obj_in: dict | schemas.CodingStandardCreate) -> Self:\n        data = cls._import(obj_in)\n        return await super().create(**data)\n    async def update(self, obj_in: dict | schemas.CodingStandardUpdate) -> Self:",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "SampleType",
        "kind": 6,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "class SampleType(AuditUser):\n    \"\"\"SampleType\"\"\"\n    __tablename__ = \"sample_type\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    active = Column(Boolean(), default=False)\n    internal_use = Column(Boolean(), default=False)  # e.g QC Sample\n    abbr = Column(String, nullable=False)\n    @classmethod\n    async def create(cls, obj_in: dict | schemas.SampleTypeCreate) -> Self:",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "SampleTypeCoding",
        "kind": 6,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "class SampleTypeCoding(AuditUser):\n    \"\"\"SampleTypeCoding\"\"\"\n    __tablename__ = \"sampe_type_coding\"\n    sample_type_uid = Column(String, ForeignKey(\"sample_type.uid\"), nullable=False)\n    sample_type = relationship(\"SampleType\", lazy=\"selectin\")\n    coding_standard_uid = Column(\n        String, ForeignKey(\"coding_standard.uid\"), nullable=True\n    )\n    coding_standard = relationship(\"CodingStandard\", lazy=\"selectin\")\n    name = Column(String, nullable=True)",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCategory",
        "kind": 6,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "class AnalysisCategory(AuditUser):\n    \"\"\"Categorise Analysis\"\"\"\n    __tablename__ = \"analysis_category\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    department_uid = Column(String, ForeignKey(\"department.uid\"), nullable=True)\n    department = relationship(\"Department\", lazy=\"selectin\")\n    active = Column(Boolean(), default=False)\n    @classmethod\n    async def create(cls, obj_in: dict | schemas.AnalysisCategoryCreate) -> Self:",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "Profile",
        "kind": 6,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "class Profile(AuditUser):\n    \"\"\"Grouped Analysis e.g FBC, U&E's, MCS ...\"\"\"\n    __tablename__ = \"profile\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    keyword = Column(String, nullable=True, unique=True)\n    tat_length_minutes = Column(Integer, nullable=True)\n    active = Column(Boolean(), default=False)\n    analyses = relationship(\n        \"Analysis\",",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "ProfileCoding",
        "kind": 6,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "class ProfileCoding(AuditUser):\n    \"\"\"ProfileCoding\"\"\"\n    __tablename__ = \"profile_coding\"\n    profile_uid = Column(String, ForeignKey(\"profile.uid\"), nullable=True)\n    profile = relationship(\"Profile\", lazy=\"selectin\")\n    coding_standard_uid = Column(\n        String, ForeignKey(\"coding_standard.uid\"), nullable=True\n    )\n    coding_standard = relationship(\"CodingStandard\", lazy=\"selectin\")\n    name = Column(String, nullable=True)",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisTemplate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "class AnalysisTemplate(AuditUser):\n    \"\"\"Template for adding Analysis extras\"\"\"\n    __tablename__ = \"analysis_template\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    analyses = relationship(\n        \"Analysis\",\n        secondary=analysis_analysis_template,\n        lazy=\"selectin\",\n    )",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "Analysis",
        "kind": 6,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "class Analysis(AuditUser):\n    \"\"\"Analysis Test/Service\"\"\"\n    __tablename__ = \"analysis\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    keyword = Column(String, nullable=False, unique=True)\n    # default unit: can be overridden by specification unit\n    unit_uid = Column(String, ForeignKey(\"unit.uid\"), nullable=True)\n    unit = relationship(\"Unit\", lazy=\"selectin\")\n    profiles = relationship(",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCoding",
        "kind": 6,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "class AnalysisCoding(AuditUser):\n    \"\"\"AnalysisCoding\"\"\"\n    __tablename__ = \"analysis_coding\"\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    analysis = relationship(\"Analysis\", lazy=\"selectin\")\n    coding_standard_uid = Column(\n        String, ForeignKey(\"coding_standard.uid\"), nullable=True\n    )\n    coding_standard = relationship(\"CodingStandard\", lazy=\"selectin\")\n    name = Column(String, nullable=True)",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisInterim",
        "kind": 6,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "class AnalysisInterim(AuditUser):\n    \"\"\"Analysis Interim Result Field\"\"\"\n    __tablename__ = \"analysis_interim\"\n    key = Column(Integer, nullable=False)\n    value = Column(String, nullable=False)\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    instrument_uid = Column(String, ForeignKey(\"instrument.uid\"), nullable=True)\n    instrument = relationship(\"Instrument\")\n    @classmethod\n    async def create(cls, obj_in: dict | schemas.AnalysisInterimCreate) -> Self:",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactor",
        "kind": 6,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "class AnalysisCorrectionFactor(AuditUser):\n    \"\"\"Analysis Correction Factor\"\"\"\n    __tablename__ = \"analysis_correction_factor\"\n    factor = Column(Float, nullable=False)\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    instrument_uid = Column(String, ForeignKey(\"instrument.uid\"), nullable=True)\n    method_uid = Column(String, ForeignKey(\"method.uid\"), nullable=True)\n    @classmethod\n    async def create(cls, obj_in: dict | schemas.AnalysisCorrectionFactorCreate) -> Self:\n        data = cls._import(obj_in)",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimit",
        "kind": 6,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "class AnalysisDetectionLimit(AuditUser):\n    \"\"\"Analysis Detection Limit\"\"\"\n    __tablename__ = \"analysis_detection_limit\"\n    lower_limit = Column(Float, nullable=False)\n    upper_limit = Column(Float, nullable=False)\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    instrument_uid = Column(String, ForeignKey(\"instrument.uid\"), nullable=True)\n    method_uid = Column(String, ForeignKey(\"method.uid\"), nullable=True)\n    @classmethod\n    async def create(cls, obj_in: dict | schemas.AnalysisDetectionLimitCreate) -> Self:",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertainty",
        "kind": 6,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "class AnalysisUncertainty(AuditUser):\n    \"\"\"Analysis Measurement Uncertainty\n    If value is within the range min.max then result becomes a range (result +/- value)\n    \"\"\"\n    __tablename__ = \"analysis_uncertainty\"\n    min = Column(Float, nullable=False)\n    max = Column(Float, nullable=False)\n    value = Column(Float, nullable=False)\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    instrument_uid = Column(String, ForeignKey(\"instrument.uid\"), nullable=True)",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecification",
        "kind": 6,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "class AnalysisSpecification(AuditUser):\n    \"\"\"Analysis Specification Ranges\"\"\"\n    __tablename__ = \"analysis_specification\"\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    unit_uid = Column(String, ForeignKey(\"unit.uid\"), nullable=True)\n    unit = relationship(\"Unit\", lazy=\"selectin\")\n    # Normal Range\n    min = Column(Float, nullable=True)\n    max = Column(Float, nullable=True)\n    # Below Normal Range: Raise Alarm",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "ResultOption",
        "kind": 6,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "class ResultOption(AuditUser):\n    \"\"\"Result Choices\"\"\"\n    __tablename__ = \"result_options\"\n    option_key = Column(Integer, nullable=False)\n    value = Column(String, nullable=False)\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"))\n    sample_types = relationship(\n        SampleType, secondary=result_option_sample_type, lazy=\"selectin\"\n    )\n    @classmethod",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRequest",
        "kind": 6,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "class AnalysisRequest(AuditUser):\n    \"\"\"AnalysisRequest a.k.a Laboratory Request\"\"\"\n    __tablename__ = \"analysis_request\"\n    patient_uid = Column(String, ForeignKey(\"patient.uid\"))\n    patient = relationship(\n        pt_models.Patient, backref=\"analysis_requests\", lazy=\"selectin\"\n    )\n    client_uid = Column(String, ForeignKey(\"client.uid\"))\n    client = relationship(\n        ct_models.Client, backref=\"analysis_requests\", lazy=\"selectin\"",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "RejectionReason",
        "kind": 6,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "class RejectionReason(AuditUser):\n    \"\"\"Rejection Reason\"\"\"\n    __tablename__ = \"rejection_reason\"\n    reason = Column(String, nullable=False)\n    @classmethod\n    async def create(\n            cls, obj_in: dict | schemas.RejectionReasonCreate\n    ) -> Self:\n        data = cls._import(obj_in)\n        return await super().create(**data)",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "kind": 6,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "class Sample(AuditHistory, BaseMPTT):\n    \"\"\"Sample\"\"\"\n    __tablename__ = \"sample\"\n    analysis_request_uid = Column(\n        String, ForeignKey(\"analysis_request.uid\"), nullable=True\n    )\n    analysis_request = relationship(\n        \"AnalysisRequest\", back_populates=\"samples\", lazy=\"selectin\"\n    )\n    sample_type_uid = Column(String, ForeignKey(\"sample_type.uid\"), nullable=False)",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "logger = logging.getLogger(__name__)\nstreamer = FelicityStreamer()\nclass CodingStandard(AuditUser):\n    \"\"\"conding standars e.g LOINC\"\"\"\n    __tablename__ = \"coding_standard\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    @classmethod\n    async def create(cls, obj_in: dict | schemas.CodingStandardCreate) -> Self:\n        data = cls._import(obj_in)",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "streamer",
        "kind": 5,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "streamer = FelicityStreamer()\nclass CodingStandard(AuditUser):\n    \"\"\"conding standars e.g LOINC\"\"\"\n    __tablename__ = \"coding_standard\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    @classmethod\n    async def create(cls, obj_in: dict | schemas.CodingStandardCreate) -> Self:\n        data = cls._import(obj_in)\n        return await super().create(**data)",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "profile_sample_type",
        "kind": 5,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "profile_sample_type = Table(\n    \"profile_sample_type\",\n    BaseEntity.metadata,\n    Column(\"sample_type_uid\", ForeignKey(\"sample_type.uid\"), primary_key=True),\n    Column(\"profile_uid\", ForeignKey(\"profile.uid\"), primary_key=True),\n)\n\"\"\"\nMany to Many Link between Analysis and SampleType\n\"\"\"\nanalysis_sample_type = Table(",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "analysis_sample_type",
        "kind": 5,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "analysis_sample_type = Table(\n    \"analysis_sample_type\",\n    BaseEntity.metadata,\n    Column(\"sample_type_uid\", ForeignKey(\"sample_type.uid\"), primary_key=True),\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n)\n\"\"\"\n Many to Many Link between Analysis and Profile\n    Offers multi-profiles flexibility per analysis\n    A rare scenario worth supporting :)",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "analysis_profile",
        "kind": 5,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "analysis_profile = Table(\n    \"analysis_profile\",\n    BaseEntity.metadata,\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n    Column(\"profile_uid\", ForeignKey(\"profile.uid\"), primary_key=True),\n)\nclass AnalysisCategory(AuditUser):\n    \"\"\"Categorise Analysis\"\"\"\n    __tablename__ = \"analysis_category\"\n    name = Column(String, nullable=False)",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "analysis_analysis_template",
        "kind": 5,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "analysis_analysis_template = Table(\n    \"analysis_analysis_template\",\n    BaseEntity.metadata,\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n    Column(\"analysis_template_uid\", ForeignKey(\"analysis_template.uid\"), primary_key=True),\n)\nclass AnalysisTemplate(AuditUser):\n    \"\"\"Template for adding Analysis extras\"\"\"\n    __tablename__ = \"analysis_template\"\n    name = Column(String, nullable=False)",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "analysis_method",
        "kind": 5,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "analysis_method = Table(\n    \"analysis_method\",\n    BaseEntity.metadata,\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n    Column(\"method_uid\", ForeignKey(\"method.uid\"), primary_key=True),\n)\n\"\"\"\n Many to Many Link between Analyses and Intruments\n\"\"\"\nanalysis_instrument = Table(",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "analysis_instrument",
        "kind": 5,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "analysis_instrument = Table(\n    \"analysis_instrument\",\n    BaseEntity.metadata,\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n    Column(\"instrument_uid\", ForeignKey(\"instrument.uid\"), primary_key=True),\n)\nclass Analysis(AuditUser):\n    \"\"\"Analysis Test/Service\"\"\"\n    __tablename__ = \"analysis\"\n    name = Column(String, nullable=False)",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "result_option_sample_type",
        "kind": 5,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "result_option_sample_type = Table(\n    \"result_option_sample_type\",\n    BaseEntity.metadata,\n    Column(\"result_option_uid\", ForeignKey(\"result_options.uid\"), primary_key=True),\n    Column(\"sample_type_uid\", ForeignKey(\"sample_type.uid\"), primary_key=True),\n)\nclass ResultOption(AuditUser):\n    \"\"\"Result Choices\"\"\"\n    __tablename__ = \"result_options\"\n    option_key = Column(Integer, nullable=False)",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "sample_profile",
        "kind": 5,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "sample_profile = Table(\n    \"sample_profile\",\n    BaseEntity.metadata,\n    Column(\"sample_uid\", ForeignKey(\"sample.uid\"), primary_key=True),\n    Column(\"profile_uid\", ForeignKey(\"profile.uid\"), primary_key=True),\n)\n\"\"\"\nMany to Many Link between Sample and Analysis\n\"\"\"\nsample_analysis = Table(",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "sample_analysis",
        "kind": 5,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "sample_analysis = Table(\n    \"sample_analysis\",\n    BaseEntity.metadata,\n    Column(\"sample_uid\", ForeignKey(\"sample.uid\"), primary_key=True),\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n)\n\"\"\"\nMany to Many Link between Sample and Rejection Reason\n\"\"\"\nsample_rejection_reason = Table(",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "sample_rejection_reason",
        "kind": 5,
        "importPath": "felicity.apps.analysis.models.analysis",
        "description": "felicity.apps.analysis.models.analysis",
        "peekOfCode": "sample_rejection_reason = Table(\n    \"sample_rejection_reason\",\n    BaseEntity.metadata,\n    Column(\"sample_uid\", ForeignKey(\"sample.uid\"), primary_key=True),\n    Column(\n        \"rejection_reason_uid\", ForeignKey(\"rejection_reason.uid\"), primary_key=True\n    ),\n)\nclass RejectionReason(AuditUser):\n    \"\"\"Rejection Reason\"\"\"",
        "detail": "felicity.apps.analysis.models.analysis",
        "documentation": {}
    },
    {
        "label": "QCSet",
        "kind": 6,
        "importPath": "felicity.apps.analysis.models.qc",
        "description": "felicity.apps.analysis.models.qc",
        "peekOfCode": "class QCSet(AuditUser):\n    \"\"\"A Set/Group of QC Samples that are run together.\n    - e.g a Viral Load Rack the QCLevels are a set i.e Negative Control, Low Pos Control, High Pos Control\n    \"\"\"\n    __tablename__ = \"qc_set\"\n    name = Column(String, nullable=False)\n    note = Column(String, nullable=True)\n    status = Column(String, nullable=False, default=states.sample.RECEIVED)\n    samples = relationship(\"Sample\", back_populates=\"qc_set\", lazy=\"selectin\")\n    @classmethod",
        "detail": "felicity.apps.analysis.models.qc",
        "documentation": {}
    },
    {
        "label": "QCReference",
        "kind": 6,
        "importPath": "felicity.apps.analysis.models.qc",
        "description": "felicity.apps.analysis.models.qc",
        "peekOfCode": "class QCReference(AuditUser):\n    \"\"\"QC Sample Reference Material    :: Not Implemented Yet\n    - can have multi analytes/Profile\n    - states: Active (in-use - there must be only 1 active per analysis)\n              InActive awaiting activation\n              Depleted\n    \"\"\"\n    __tablename__ = \"qc_reference\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)",
        "detail": "felicity.apps.analysis.models.qc",
        "documentation": {}
    },
    {
        "label": "QCLevel",
        "kind": 6,
        "importPath": "felicity.apps.analysis.models.qc",
        "description": "felicity.apps.analysis.models.qc",
        "peekOfCode": "class QCLevel(AuditUser):\n    \"\"\"Sample Level /category\n    - None - normal sample\n    - Negative Control\n    - EID PositiveControl\n    - HIV Low Positive Control\n    - HIV High Positive Control\n    \"\"\"\n    __tablename__ = \"qc_level\"\n    level = Column(String, nullable=False)",
        "detail": "felicity.apps.analysis.models.qc",
        "documentation": {}
    },
    {
        "label": "QCTemplate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.models.qc",
        "description": "felicity.apps.analysis.models.qc",
        "peekOfCode": "class QCTemplate(AuditUser):\n    \"\"\"QC Level Grouping e.g:\n    Roche Viral Load CQ:\n        - Neg Control\n        - Low Pos Control\n        - High Pos Control\n    Malaria Slide QC:\n        - Negative Control\n        - Positive COntrol\n    \"\"\"",
        "detail": "felicity.apps.analysis.models.qc",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.analysis.models.qc",
        "description": "felicity.apps.analysis.models.qc",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass QCSet(AuditUser):\n    \"\"\"A Set/Group of QC Samples that are run together.\n    - e.g a Viral Load Rack the QCLevels are a set i.e Negative Control, Low Pos Control, High Pos Control\n    \"\"\"\n    __tablename__ = \"qc_set\"\n    name = Column(String, nullable=False)\n    note = Column(String, nullable=True)\n    status = Column(String, nullable=False, default=states.sample.RECEIVED)\n    samples = relationship(\"Sample\", back_populates=\"qc_set\", lazy=\"selectin\")",
        "detail": "felicity.apps.analysis.models.qc",
        "documentation": {}
    },
    {
        "label": "qc_reference_analysis",
        "kind": 5,
        "importPath": "felicity.apps.analysis.models.qc",
        "description": "felicity.apps.analysis.models.qc",
        "peekOfCode": "qc_reference_analysis = Table(\n    \"qc_reference_analysis\",\n    BaseEntity.metadata,\n    Column(\"qc_reference_uid\", ForeignKey(\"qc_reference.uid\"), primary_key=True),\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n)\nclass QCReference(AuditUser):\n    \"\"\"QC Sample Reference Material    :: Not Implemented Yet\n    - can have multi analytes/Profile\n    - states: Active (in-use - there must be only 1 active per analysis)",
        "detail": "felicity.apps.analysis.models.qc",
        "documentation": {}
    },
    {
        "label": "qc_template_department",
        "kind": 5,
        "importPath": "felicity.apps.analysis.models.qc",
        "description": "felicity.apps.analysis.models.qc",
        "peekOfCode": "qc_template_department = Table(\n    \"qc_template_department\",\n    BaseEntity.metadata,\n    Column(\"department_uid\", ForeignKey(\"department.uid\"), primary_key=True),\n    Column(\"qc_template_uid\", ForeignKey(\"qc_template.uid\"), primary_key=True),\n)\n\"\"\"\nMany to Many Link between QCTemplate and  QCLevel\n\"\"\"\nqc_template_qc_level = Table(",
        "detail": "felicity.apps.analysis.models.qc",
        "documentation": {}
    },
    {
        "label": "qc_template_qc_level",
        "kind": 5,
        "importPath": "felicity.apps.analysis.models.qc",
        "description": "felicity.apps.analysis.models.qc",
        "peekOfCode": "qc_template_qc_level = Table(\n    \"qc_template_qc_level\",\n    BaseEntity.metadata,\n    Column(\"qc_level_uid\", ForeignKey(\"qc_level.uid\"), primary_key=True),\n    Column(\"qc_template_uid\", ForeignKey(\"qc_template.uid\"), primary_key=True),\n)\nclass QCTemplate(AuditUser):\n    \"\"\"QC Level Grouping e.g:\n    Roche Viral Load CQ:\n        - Neg Control",
        "detail": "felicity.apps.analysis.models.qc",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "kind": 6,
        "importPath": "felicity.apps.analysis.models.results",
        "description": "felicity.apps.analysis.models.results",
        "peekOfCode": "class AnalysisResult(AuditHistory, BaseMPTT):\n    \"\"\"Test/Analysis Result\n    Number of analysis results per sample will be directly proportional to\n    the number of linked sample_analyses at minimum :)\n    \"\"\"\n    __tablename__ = \"analysis_result\"\n    sample_uid = Column(String, ForeignKey(\"sample.uid\"), nullable=False)\n    sample = relationship(\"Sample\", back_populates=\"analysis_results\", lazy=\"selectin\")\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=False)\n    analysis = relationship(\"Analysis\", backref=\"analysis_results\", lazy=\"selectin\")",
        "detail": "felicity.apps.analysis.models.results",
        "documentation": {}
    },
    {
        "label": "ResultMutation",
        "kind": 6,
        "importPath": "felicity.apps.analysis.models.results",
        "description": "felicity.apps.analysis.models.results",
        "peekOfCode": "class ResultMutation(AuditUser):\n    \"\"\"Result Mutations tracker\"\"\"\n    __tablename__ = \"result_mutation\"\n    result_uid = Column(String, ForeignKey(\"analysis_result.uid\"), nullable=False)\n    before = Column(String, nullable=False)\n    after = Column(String, nullable=False)\n    mutation = Column(String, nullable=False)\n    date = Column(DateTime, nullable=True)\n    @classmethod\n    async def create(cls, obj_in: dict | dict) -> Self:",
        "detail": "felicity.apps.analysis.models.results",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.analysis.models.results",
        "description": "felicity.apps.analysis.models.results",
        "peekOfCode": "logger = logging.getLogger(__name__)\nstreamer = FelicityStreamer()\n\"\"\"\n Many to Many Link between AnalysisResult and User\n\"\"\"\nresult_verification = Table(\n    \"result_verification\",\n    BaseEntity.metadata,\n    Column(\"result_uid\", ForeignKey(\"analysis_result.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),",
        "detail": "felicity.apps.analysis.models.results",
        "documentation": {}
    },
    {
        "label": "streamer",
        "kind": 5,
        "importPath": "felicity.apps.analysis.models.results",
        "description": "felicity.apps.analysis.models.results",
        "peekOfCode": "streamer = FelicityStreamer()\n\"\"\"\n Many to Many Link between AnalysisResult and User\n\"\"\"\nresult_verification = Table(\n    \"result_verification\",\n    BaseEntity.metadata,\n    Column(\"result_uid\", ForeignKey(\"analysis_result.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)",
        "detail": "felicity.apps.analysis.models.results",
        "documentation": {}
    },
    {
        "label": "result_verification",
        "kind": 5,
        "importPath": "felicity.apps.analysis.models.results",
        "description": "felicity.apps.analysis.models.results",
        "peekOfCode": "result_verification = Table(\n    \"result_verification\",\n    BaseEntity.metadata,\n    Column(\"result_uid\", ForeignKey(\"analysis_result.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\nclass AnalysisResult(AuditHistory, BaseMPTT):\n    \"\"\"Test/Analysis Result\n    Number of analysis results per sample will be directly proportional to\n    the number of linked sample_analyses at minimum :)",
        "detail": "felicity.apps.analysis.models.results",
        "documentation": {}
    },
    {
        "label": "CodingStandardRepository",
        "kind": 6,
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "peekOfCode": "class CodingStandardRepository(\n    BaseRepository[CodingStandard], ICodingStandardRepository\n):\n    def __init__(self) -> None:\n        self.model = CodingStandard\n        super().__init__()\nclass SampleTypeRepository(BaseRepository[SampleType], ISampleTypeRepository):\n    def __init__(self) -> None:\n        self.model = SampleType\n        super().__init__()",
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "SampleTypeRepository",
        "kind": 6,
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "peekOfCode": "class SampleTypeRepository(BaseRepository[SampleType], ISampleTypeRepository):\n    def __init__(self) -> None:\n        self.model = SampleType\n        super().__init__()\nclass SampleTypeCodingRepository(\n    BaseRepository[SampleTypeCoding], ISampleTypeCodingRepository\n):\n    def __init__(self) -> None:\n        self.model = SampleTypeCoding\n        super().__init__()",
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "SampleTypeCodingRepository",
        "kind": 6,
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "peekOfCode": "class SampleTypeCodingRepository(\n    BaseRepository[SampleTypeCoding], ISampleTypeCodingRepository\n):\n    def __init__(self) -> None:\n        self.model = SampleTypeCoding\n        super().__init__()\nclass ProfileRepository(BaseRepository[Profile], IProfileRepository):\n    def __init__(self) -> None:\n        self.model = Profile\n        super().__init__()",
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "ProfileRepository",
        "kind": 6,
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "peekOfCode": "class ProfileRepository(BaseRepository[Profile], IProfileRepository):\n    def __init__(self) -> None:\n        self.model = Profile\n        super().__init__()\nclass AnalysisCategoryRepository(\n    BaseRepository[AnalysisCategory], IAnalysisCategoryRepository\n):\n    def __init__(self) -> None:\n        self.model = AnalysisCategory\n        super().__init__()",
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryRepository",
        "kind": 6,
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "peekOfCode": "class AnalysisCategoryRepository(\n    BaseRepository[AnalysisCategory], IAnalysisCategoryRepository\n):\n    def __init__(self) -> None:\n        self.model = AnalysisCategory\n        super().__init__()\nclass ProfileCodingRepository(BaseRepository[ProfileCoding], IProfileCodingRepository):\n    def __init__(self) -> None:\n        self.model = ProfileCoding\n        super().__init__()",
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "ProfileCodingRepository",
        "kind": 6,
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "peekOfCode": "class ProfileCodingRepository(BaseRepository[ProfileCoding], IProfileCodingRepository):\n    def __init__(self) -> None:\n        self.model = ProfileCoding\n        super().__init__()\nclass AnalysisRepository(BaseRepository[Analysis], IAnalysisRepository):\n    def __init__(self) -> None:\n        self.model = Analysis\n        super().__init__()\nclass AnalysisCodingRepository(\n    BaseRepository[AnalysisCoding], IAnalysisCodingRepository",
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRepository",
        "kind": 6,
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "peekOfCode": "class AnalysisRepository(BaseRepository[Analysis], IAnalysisRepository):\n    def __init__(self) -> None:\n        self.model = Analysis\n        super().__init__()\nclass AnalysisCodingRepository(\n    BaseRepository[AnalysisCoding], IAnalysisCodingRepository\n):\n    def __init__(self) -> None:\n        self.model = AnalysisCoding\n        super().__init__()",
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCodingRepository",
        "kind": 6,
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "peekOfCode": "class AnalysisCodingRepository(\n    BaseRepository[AnalysisCoding], IAnalysisCodingRepository\n):\n    def __init__(self) -> None:\n        self.model = AnalysisCoding\n        super().__init__()\nclass AnalysisInterimRepository(\n    BaseRepository[AnalysisInterim], IAnalysisInterimRepository\n):\n    def __init__(self) -> None:",
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisInterimRepository",
        "kind": 6,
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "peekOfCode": "class AnalysisInterimRepository(\n    BaseRepository[AnalysisInterim], IAnalysisInterimRepository\n):\n    def __init__(self) -> None:\n        self.model = AnalysisInterim\n        super().__init__()\nclass AnalysisCorrectionFactorRepository(\n    BaseRepository[AnalysisCorrectionFactor], IAnalysisCorrectionFactorRepository\n):\n    def __init__(self) -> None:",
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactorRepository",
        "kind": 6,
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "peekOfCode": "class AnalysisCorrectionFactorRepository(\n    BaseRepository[AnalysisCorrectionFactor], IAnalysisCorrectionFactorRepository\n):\n    def __init__(self) -> None:\n        self.model = AnalysisCorrectionFactor\n        super().__init__()\nclass AnalysisDetectionLimitRepository(\n    BaseRepository[AnalysisDetectionLimit], IAnalysisDetectionLimitRepository\n):\n    def __init__(self) -> None:",
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimitRepository",
        "kind": 6,
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "peekOfCode": "class AnalysisDetectionLimitRepository(\n    BaseRepository[AnalysisDetectionLimit], IAnalysisDetectionLimitRepository\n):\n    def __init__(self) -> None:\n        self.model = AnalysisDetectionLimit\n        super().__init__()\nclass AnalysisUncertaintyRepository(\n    BaseRepository[AnalysisUncertainty], IAnalysisUncertaintyRepository\n):\n    def __init__(self) -> None:",
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertaintyRepository",
        "kind": 6,
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "peekOfCode": "class AnalysisUncertaintyRepository(\n    BaseRepository[AnalysisUncertainty], IAnalysisUncertaintyRepository\n):\n    def __init__(self) -> None:\n        self.model = AnalysisUncertainty\n        super().__init__()\nclass AnalysisSpecificationRepository(\n    BaseRepository[AnalysisSpecification], IAnalysisSpecificationRepository\n):\n    def __init__(self) -> None:",
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecificationRepository",
        "kind": 6,
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "peekOfCode": "class AnalysisSpecificationRepository(\n    BaseRepository[AnalysisSpecification], IAnalysisSpecificationRepository\n):\n    def __init__(self) -> None:\n        self.model = AnalysisSpecification\n        super().__init__()\nclass ResultOptionRepository(BaseRepository[ResultOption], IResultOptionRepository):\n    def __init__(self) -> None:\n        self.model = ResultOption\n        super().__init__()",
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "ResultOptionRepository",
        "kind": 6,
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "peekOfCode": "class ResultOptionRepository(BaseRepository[ResultOption], IResultOptionRepository):\n    def __init__(self) -> None:\n        self.model = ResultOption\n        super().__init__()\nclass AnalysisRequestRepository(\n    BaseRepository[AnalysisRequest], IAnalysisRequestRepository\n):\n    def __init__(self) -> None:\n        self.model = AnalysisRequest\n        super().__init__()",
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestRepository",
        "kind": 6,
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "peekOfCode": "class AnalysisRequestRepository(\n    BaseRepository[AnalysisRequest], IAnalysisRequestRepository\n):\n    def __init__(self) -> None:\n        self.model = AnalysisRequest\n        super().__init__()\nclass RejectionReasonRepository(\n    BaseRepository[RejectionReason], IRejectionReasonRepository\n):\n    def __init__(self) -> None:",
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "RejectionReasonRepository",
        "kind": 6,
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "peekOfCode": "class RejectionReasonRepository(\n    BaseRepository[RejectionReason], IRejectionReasonRepository\n):\n    def __init__(self) -> None:\n        self.model = RejectionReason\n        super().__init__()\nclass SampleRepository(BaseRepository[Sample], ISampleRepository):\n    def __init__(self) -> None:\n        self.model = Sample\n        super().__init__()",
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "SampleRepository",
        "kind": 6,
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "peekOfCode": "class SampleRepository(BaseRepository[Sample], ISampleRepository):\n    def __init__(self) -> None:\n        self.model = Sample\n        super().__init__()\n    async def search(self, status: str, text: str, client_uid: str) -> list[Sample]:\n        \"\"\"No pagination\"\"\"\n        filters = []\n        _or_text_ = {}\n        if text:\n            arg_list = [",
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "QCSetRepository",
        "kind": 6,
        "importPath": "felicity.apps.analysis.repository.quality_control",
        "description": "felicity.apps.analysis.repository.quality_control",
        "peekOfCode": "class QCSetRepository(BaseRepository[QCSet], IQCSetRepository):\n    def __init__(self) -> None:\n        self.model = QCSet\n        super().__init__()\nclass QCReferenceRepository(BaseRepository[QCReference], IQCReferenceRepository):\n    def __init__(self) -> None:\n        self.model = QCReference\n        super().__init__()\nclass QCLevelRepository(BaseRepository[QCLevel], IQCLevelRepository):\n    def __init__(self) -> None:",
        "detail": "felicity.apps.analysis.repository.quality_control",
        "documentation": {}
    },
    {
        "label": "QCReferenceRepository",
        "kind": 6,
        "importPath": "felicity.apps.analysis.repository.quality_control",
        "description": "felicity.apps.analysis.repository.quality_control",
        "peekOfCode": "class QCReferenceRepository(BaseRepository[QCReference], IQCReferenceRepository):\n    def __init__(self) -> None:\n        self.model = QCReference\n        super().__init__()\nclass QCLevelRepository(BaseRepository[QCLevel], IQCLevelRepository):\n    def __init__(self) -> None:\n        self.model = QCLevel\n        super().__init__()\nclass QCTemplateRepository(BaseRepository[QCTemplate], IQCTemplateRepository):\n    def __init__(self) -> None:",
        "detail": "felicity.apps.analysis.repository.quality_control",
        "documentation": {}
    },
    {
        "label": "QCLevelRepository",
        "kind": 6,
        "importPath": "felicity.apps.analysis.repository.quality_control",
        "description": "felicity.apps.analysis.repository.quality_control",
        "peekOfCode": "class QCLevelRepository(BaseRepository[QCLevel], IQCLevelRepository):\n    def __init__(self) -> None:\n        self.model = QCLevel\n        super().__init__()\nclass QCTemplateRepository(BaseRepository[QCTemplate], IQCTemplateRepository):\n    def __init__(self) -> None:\n        self.model = QCTemplate\n        super().__init__()",
        "detail": "felicity.apps.analysis.repository.quality_control",
        "documentation": {}
    },
    {
        "label": "QCTemplateRepository",
        "kind": 6,
        "importPath": "felicity.apps.analysis.repository.quality_control",
        "description": "felicity.apps.analysis.repository.quality_control",
        "peekOfCode": "class QCTemplateRepository(BaseRepository[QCTemplate], IQCTemplateRepository):\n    def __init__(self) -> None:\n        self.model = QCTemplate\n        super().__init__()",
        "detail": "felicity.apps.analysis.repository.quality_control",
        "documentation": {}
    },
    {
        "label": "QCSetRepository",
        "kind": 6,
        "importPath": "felicity.apps.analysis.repository.results",
        "description": "felicity.apps.analysis.repository.results",
        "peekOfCode": "class QCSetRepository(BaseRepository[QCSet], IQCSetRepository):\n    def __init__(self) -> None:\n        self.model = QCSet\n        super().__init__()\nclass ResultMutationRepository(\n    BaseRepository[ResultMutation], IResultMutationRepository\n):\n    def __init__(self) -> None:\n        self.model = ResultMutation\n        super().__init__()",
        "detail": "felicity.apps.analysis.repository.results",
        "documentation": {}
    },
    {
        "label": "ResultMutationRepository",
        "kind": 6,
        "importPath": "felicity.apps.analysis.repository.results",
        "description": "felicity.apps.analysis.repository.results",
        "peekOfCode": "class ResultMutationRepository(\n    BaseRepository[ResultMutation], IResultMutationRepository\n):\n    def __init__(self) -> None:\n        self.model = ResultMutation\n        super().__init__()\nclass AnalysisResultRepository(BaseRepository[AnalysisResult], IAnalysisResultRepository):\n    def __init__(self) -> None:\n        self.model = AnalysisResult\n        super().__init__()",
        "detail": "felicity.apps.analysis.repository.results",
        "documentation": {}
    },
    {
        "label": "AnalysisResultRepository",
        "kind": 6,
        "importPath": "felicity.apps.analysis.repository.results",
        "description": "felicity.apps.analysis.repository.results",
        "peekOfCode": "class AnalysisResultRepository(BaseRepository[AnalysisResult], IAnalysisResultRepository):\n    def __init__(self) -> None:\n        self.model = AnalysisResult\n        super().__init__()",
        "detail": "felicity.apps.analysis.repository.results",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryInputType",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.ref.analysis_category",
        "description": "felicity.apps.analysis.services.ref.analysis_category",
        "peekOfCode": "class AnalysisCategoryInputType:\n    name: str\n    department_uid: str | None = None\n    description: str | None = None\n    active: bool | None = True\nasync def create_analysis_category(\n    info, payload: AnalysisCategoryInputType\n) -> AnalysisCategoryResponse:\n    is_authenticated, user = await auth_from_info(info)\n    verify_user_auth(",
        "detail": "felicity.apps.analysis.services.ref.analysis_category",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.analysis_category",
        "description": "felicity.apps.analysis.services.ref.analysis_category",
        "peekOfCode": "logger = logging.getLogger(__name__)\nAnalysisCategoryResponse = strawberry.union(\n    \"AnalysisCategoryResponse\",\n    (a_types.AnalysisCategoryType, OperationError),  # noqa\n    description=\"Union of possible outcomes when adding a new notice\",\n)\n@strawberry.input\nclass AnalysisCategoryInputType:\n    name: str\n    department_uid: str | None = None",
        "detail": "felicity.apps.analysis.services.ref.analysis_category",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryResponse",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.analysis_category",
        "description": "felicity.apps.analysis.services.ref.analysis_category",
        "peekOfCode": "AnalysisCategoryResponse = strawberry.union(\n    \"AnalysisCategoryResponse\",\n    (a_types.AnalysisCategoryType, OperationError),  # noqa\n    description=\"Union of possible outcomes when adding a new notice\",\n)\n@strawberry.input\nclass AnalysisCategoryInputType:\n    name: str\n    department_uid: str | None = None\n    description: str | None = None",
        "detail": "felicity.apps.analysis.services.ref.analysis_category",
        "documentation": {}
    },
    {
        "label": "AnalysisInterimInput",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.ref.analysis_other",
        "description": "felicity.apps.analysis.services.ref.analysis_other",
        "peekOfCode": "class AnalysisInterimInput:\n    key: int\n    value: str\n    analysis_uid: str\n    instrument_uid: str\n@strawberry.input\nclass AnalysisCorrectionFactorInput:\n    factor: float\n    analysis_uid: str\n    instrument_uid: str",
        "detail": "felicity.apps.analysis.services.ref.analysis_other",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactorInput",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.ref.analysis_other",
        "description": "felicity.apps.analysis.services.ref.analysis_other",
        "peekOfCode": "class AnalysisCorrectionFactorInput:\n    factor: float\n    analysis_uid: str\n    instrument_uid: str\n    method_uid: str\n@strawberry.input\nclass AnalysisDetectionLimitInput:\n    lower_limit: float\n    upper_limit: float\n    analysis_uid: str",
        "detail": "felicity.apps.analysis.services.ref.analysis_other",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimitInput",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.ref.analysis_other",
        "description": "felicity.apps.analysis.services.ref.analysis_other",
        "peekOfCode": "class AnalysisDetectionLimitInput:\n    lower_limit: float\n    upper_limit: float\n    analysis_uid: str\n    instrument_uid: str\n    method_uid: str\n@strawberry.input\nclass AnalysisUncertaintyInput:\n    min: float\n    max: float",
        "detail": "felicity.apps.analysis.services.ref.analysis_other",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertaintyInput",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.ref.analysis_other",
        "description": "felicity.apps.analysis.services.ref.analysis_other",
        "peekOfCode": "class AnalysisUncertaintyInput:\n    min: float\n    max: float\n    value: float\n    analysis_uid: str\n    instrument_uid: str\n    method_uid: str\n@strawberry.input\nclass AnalysisSpecificationInput:\n    analysis_uid: str",
        "detail": "felicity.apps.analysis.services.ref.analysis_other",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecificationInput",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.ref.analysis_other",
        "description": "felicity.apps.analysis.services.ref.analysis_other",
        "peekOfCode": "class AnalysisSpecificationInput:\n    analysis_uid: str\n    min: float | None = None\n    max: float | None = None\n    min_warn: float | None = None\n    max_warn: float | None = None\n    min_report: str | None = None\n    max_report: str | None = None\n    warn_values: str | None = None\n    warn_report: str | None = None",
        "detail": "felicity.apps.analysis.services.ref.analysis_other",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.analysis_other",
        "description": "felicity.apps.analysis.services.ref.analysis_other",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@strawberry.input\nclass AnalysisInterimInput:\n    key: int\n    value: str\n    analysis_uid: str\n    instrument_uid: str\n@strawberry.input\nclass AnalysisCorrectionFactorInput:\n    factor: float",
        "detail": "felicity.apps.analysis.services.ref.analysis_other",
        "documentation": {}
    },
    {
        "label": "AnalysisInterimResponse",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.analysis_other",
        "description": "felicity.apps.analysis.services.ref.analysis_other",
        "peekOfCode": "AnalysisInterimResponse = strawberry.union(\n    \"AnalysisInterimResponse\",\n    (a_types.AnalysisInterimType, OperationError),  # noqa\n    description=\"\",\n)\nAnalysisCorrectionFactorResponse = strawberry.union(\n    \"AnalysisCorrectionFactorResponse\",\n    (a_types.AnalysisCorrectionFactorType, OperationError),  # noqa\n    description=\"\",\n)",
        "detail": "felicity.apps.analysis.services.ref.analysis_other",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactorResponse",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.analysis_other",
        "description": "felicity.apps.analysis.services.ref.analysis_other",
        "peekOfCode": "AnalysisCorrectionFactorResponse = strawberry.union(\n    \"AnalysisCorrectionFactorResponse\",\n    (a_types.AnalysisCorrectionFactorType, OperationError),  # noqa\n    description=\"\",\n)\nAnalysisDetectionLimitResponse = strawberry.union(\n    \"AnalysisDetectionLimitResponse\",\n    (a_types.AnalysisDetectionLimitType, OperationError),  # noqa\n    description=\"\",\n)",
        "detail": "felicity.apps.analysis.services.ref.analysis_other",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimitResponse",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.analysis_other",
        "description": "felicity.apps.analysis.services.ref.analysis_other",
        "peekOfCode": "AnalysisDetectionLimitResponse = strawberry.union(\n    \"AnalysisDetectionLimitResponse\",\n    (a_types.AnalysisDetectionLimitType, OperationError),  # noqa\n    description=\"\",\n)\nAnalysisUncertaintyResponse = strawberry.union(\n    \"AnalysisUncertaintyResponse\",\n    (a_types.AnalysisUncertaintyType, OperationError),  # noqa\n    description=\"\",\n)",
        "detail": "felicity.apps.analysis.services.ref.analysis_other",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertaintyResponse",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.analysis_other",
        "description": "felicity.apps.analysis.services.ref.analysis_other",
        "peekOfCode": "AnalysisUncertaintyResponse = strawberry.union(\n    \"AnalysisUncertaintyResponse\",\n    (a_types.AnalysisUncertaintyType, OperationError),  # noqa\n    description=\"\",\n)\nAnalysisSpecificationResponse = strawberry.union(\n    \"AnalysisSpecificationResponse\",\n    (a_types.AnalysisSpecificationType, OperationError),  # noqa\n    description=\"\",\n)",
        "detail": "felicity.apps.analysis.services.ref.analysis_other",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecificationResponse",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.analysis_other",
        "description": "felicity.apps.analysis.services.ref.analysis_other",
        "peekOfCode": "AnalysisSpecificationResponse = strawberry.union(\n    \"AnalysisSpecificationResponse\",\n    (a_types.AnalysisSpecificationType, OperationError),  # noqa\n    description=\"\",\n)\nasync def create_analysis_interim(\n    info, payload: AnalysisInterimInput\n) -> AnalysisInterimResponse:\n    is_authenticated, user = await auth_from_info(info)\n    verify_user_auth(",
        "detail": "felicity.apps.analysis.services.ref.analysis_other",
        "documentation": {}
    },
    {
        "label": "ProfileInputType",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.ref.analysis_profile",
        "description": "felicity.apps.analysis.services.ref.analysis_profile",
        "peekOfCode": "class ProfileInputType:\n    name: str\n    description: str = \"\"\n    department_uid: str | None = None\n    sample_types: Optional[List[str]] = field(default_factory=list)\n    services: Optional[List[str]] = field(default_factory=list)\n    keyword: str | None = None\n    active: bool | None = True\nProfileMappingResponse = strawberry.union(\n    \"ProfileMappingResponse\",",
        "detail": "felicity.apps.analysis.services.ref.analysis_profile",
        "documentation": {}
    },
    {
        "label": "ProfileMappingInputType",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.ref.analysis_profile",
        "description": "felicity.apps.analysis.services.ref.analysis_profile",
        "peekOfCode": "class ProfileMappingInputType:\n    profile_uid: str\n    coding_standard_uid: str\n    name: str\n    code: str\n    description: str | None = None\nasync def create_profile(info, payload: ProfileInputType) -> AnalysisProfileResponse:\n    is_authenticated, user = await auth_from_info(info)\n    verify_user_auth(\n        is_authenticated,",
        "detail": "felicity.apps.analysis.services.ref.analysis_profile",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.analysis_profile",
        "description": "felicity.apps.analysis.services.ref.analysis_profile",
        "peekOfCode": "logger = logging.getLogger(__name__)\nAnalysisProfileResponse = strawberry.union(\n    \"AnalysisProfileResponse\",\n    (a_types.ProfileType, OperationError),  # noqa\n    description=\"Union of possible outcomes when adding a new notice\",\n)\n@strawberry.input\nclass ProfileInputType:\n    name: str\n    description: str = \"\"",
        "detail": "felicity.apps.analysis.services.ref.analysis_profile",
        "documentation": {}
    },
    {
        "label": "AnalysisProfileResponse",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.analysis_profile",
        "description": "felicity.apps.analysis.services.ref.analysis_profile",
        "peekOfCode": "AnalysisProfileResponse = strawberry.union(\n    \"AnalysisProfileResponse\",\n    (a_types.ProfileType, OperationError),  # noqa\n    description=\"Union of possible outcomes when adding a new notice\",\n)\n@strawberry.input\nclass ProfileInputType:\n    name: str\n    description: str = \"\"\n    department_uid: str | None = None",
        "detail": "felicity.apps.analysis.services.ref.analysis_profile",
        "documentation": {}
    },
    {
        "label": "ProfileMappingResponse",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.analysis_profile",
        "description": "felicity.apps.analysis.services.ref.analysis_profile",
        "peekOfCode": "ProfileMappingResponse = strawberry.union(\n    \"ProfileMappingResponse\",\n    (a_types.ProfileMappingType, OperationError),  # noqa\n    description=\"Union of possible outcomes when adding a new notice\",\n)\n@strawberry.input\nclass ProfileMappingInputType:\n    profile_uid: str\n    coding_standard_uid: str\n    name: str",
        "detail": "felicity.apps.analysis.services.ref.analysis_profile",
        "documentation": {}
    },
    {
        "label": "ARSampleInputType",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.ref.analysis_request",
        "description": "felicity.apps.analysis.services.ref.analysis_request",
        "peekOfCode": "class ARSampleInputType:\n    sample_type: str\n    profiles: List[str]\n    analyses: List[str]\n@strawberry.input\nclass SampleRejectInputType:\n    uid: str\n    reasons: List[str]\n    other: str | None = \"\"\n@strawberry.input",
        "detail": "felicity.apps.analysis.services.ref.analysis_request",
        "documentation": {}
    },
    {
        "label": "SampleRejectInputType",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.ref.analysis_request",
        "description": "felicity.apps.analysis.services.ref.analysis_request",
        "peekOfCode": "class SampleRejectInputType:\n    uid: str\n    reasons: List[str]\n    other: str | None = \"\"\n@strawberry.input\nclass SamplePublishInputType:\n    uid: str\n    action: str = \"\"\nAnalysisRequestResponse = strawberry.union(\n    \"AnalysisRequestResponse\",",
        "detail": "felicity.apps.analysis.services.ref.analysis_request",
        "documentation": {}
    },
    {
        "label": "SamplePublishInputType",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.ref.analysis_request",
        "description": "felicity.apps.analysis.services.ref.analysis_request",
        "peekOfCode": "class SamplePublishInputType:\n    uid: str\n    action: str = \"\"\nAnalysisRequestResponse = strawberry.union(\n    \"AnalysisRequestResponse\",\n    (a_types.AnalysisRequestWithSamples, OperationError),  # noqa\n    description=\"Union of possible outcomes when adding/editing analysis \" \"requests \",\n)\n@strawberry.type\nclass ResultedSampleListingType:",
        "detail": "felicity.apps.analysis.services.ref.analysis_request",
        "documentation": {}
    },
    {
        "label": "ResultedSampleListingType",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.ref.analysis_request",
        "description": "felicity.apps.analysis.services.ref.analysis_request",
        "peekOfCode": "class ResultedSampleListingType:\n    samples: List[r_types.SamplesWithResults]\nResultedSampleActionResponse = strawberry.union(\n    \"ResultedSampleActionResponse\",\n    (ResultedSampleListingType, OperationError),  # noqa\n    description=\"Union of possible outcomes when actioning samples\",\n)\n@strawberry.type\nclass SampleListingType:\n    samples: List[r_types.SampleType]",
        "detail": "felicity.apps.analysis.services.ref.analysis_request",
        "documentation": {}
    },
    {
        "label": "SampleListingType",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.ref.analysis_request",
        "description": "felicity.apps.analysis.services.ref.analysis_request",
        "peekOfCode": "class SampleListingType:\n    samples: List[r_types.SampleType]\nSampleActionResponse = strawberry.union(\n    \"SampleActionResponse\",\n    (SampleListingType, OperationError),  # noqa\n    description=\"Union of possible outcomes when actioning samples\",\n)\n@strawberry.input\nclass AnalysisRequestInputType:\n    patient_uid: str",
        "detail": "felicity.apps.analysis.services.ref.analysis_request",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestInputType",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.ref.analysis_request",
        "description": "felicity.apps.analysis.services.ref.analysis_request",
        "peekOfCode": "class AnalysisRequestInputType:\n    patient_uid: str\n    client_uid: str\n    client_contact_uid: str\n    clinicalData: str | None = \"\"\n    samples: List[ARSampleInputType] = None\n    client_request_id: str | None = None\n    internal_use: bool | None = False\n    priority: int = priorities.NORMAL\nasync def create_analysis_request(",
        "detail": "felicity.apps.analysis.services.ref.analysis_request",
        "documentation": {}
    },
    {
        "label": "streamer",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.analysis_request",
        "description": "felicity.apps.analysis.services.ref.analysis_request",
        "peekOfCode": "streamer = FelicityStreamer()\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n@strawberry.input\nclass ARSampleInputType:\n    sample_type: str\n    profiles: List[str]\n    analyses: List[str]\n@strawberry.input\nclass SampleRejectInputType:",
        "detail": "felicity.apps.analysis.services.ref.analysis_request",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.analysis_request",
        "description": "felicity.apps.analysis.services.ref.analysis_request",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@strawberry.input\nclass ARSampleInputType:\n    sample_type: str\n    profiles: List[str]\n    analyses: List[str]\n@strawberry.input\nclass SampleRejectInputType:\n    uid: str\n    reasons: List[str]",
        "detail": "felicity.apps.analysis.services.ref.analysis_request",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestResponse",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.analysis_request",
        "description": "felicity.apps.analysis.services.ref.analysis_request",
        "peekOfCode": "AnalysisRequestResponse = strawberry.union(\n    \"AnalysisRequestResponse\",\n    (a_types.AnalysisRequestWithSamples, OperationError),  # noqa\n    description=\"Union of possible outcomes when adding/editing analysis \" \"requests \",\n)\n@strawberry.type\nclass ResultedSampleListingType:\n    samples: List[r_types.SamplesWithResults]\nResultedSampleActionResponse = strawberry.union(\n    \"ResultedSampleActionResponse\",",
        "detail": "felicity.apps.analysis.services.ref.analysis_request",
        "documentation": {}
    },
    {
        "label": "ResultedSampleActionResponse",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.analysis_request",
        "description": "felicity.apps.analysis.services.ref.analysis_request",
        "peekOfCode": "ResultedSampleActionResponse = strawberry.union(\n    \"ResultedSampleActionResponse\",\n    (ResultedSampleListingType, OperationError),  # noqa\n    description=\"Union of possible outcomes when actioning samples\",\n)\n@strawberry.type\nclass SampleListingType:\n    samples: List[r_types.SampleType]\nSampleActionResponse = strawberry.union(\n    \"SampleActionResponse\",",
        "detail": "felicity.apps.analysis.services.ref.analysis_request",
        "documentation": {}
    },
    {
        "label": "SampleActionResponse",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.analysis_request",
        "description": "felicity.apps.analysis.services.ref.analysis_request",
        "peekOfCode": "SampleActionResponse = strawberry.union(\n    \"SampleActionResponse\",\n    (SampleListingType, OperationError),  # noqa\n    description=\"Union of possible outcomes when actioning samples\",\n)\n@strawberry.input\nclass AnalysisRequestInputType:\n    patient_uid: str\n    client_uid: str\n    client_contact_uid: str",
        "detail": "felicity.apps.analysis.services.ref.analysis_request",
        "documentation": {}
    },
    {
        "label": "ARResultInputType",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.ref.analysis_result",
        "description": "felicity.apps.analysis.services.ref.analysis_result",
        "peekOfCode": "class ARResultInputType:\n    uid: str\n    result: str\n    reportable: bool | None = True\n@strawberry.type\nclass ResultListingType:\n    results: List[r_types.AnalysisResultType]\nAnalysisResultResponse = strawberry.union(\n    \"AnalysisResultResponse\",\n    (ResultListingType, OperationError),  # noqa",
        "detail": "felicity.apps.analysis.services.ref.analysis_result",
        "documentation": {}
    },
    {
        "label": "ResultListingType",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.ref.analysis_result",
        "description": "felicity.apps.analysis.services.ref.analysis_result",
        "peekOfCode": "class ResultListingType:\n    results: List[r_types.AnalysisResultType]\nAnalysisResultResponse = strawberry.union(\n    \"AnalysisResultResponse\",\n    (ResultListingType, OperationError),  # noqa\n    description=\"Union of possible outcomes when actioning samples\",\n)\nAnalysisResultOperationResponse = strawberry.union(\n    \"AnalysisResultSubmitResponse\",\n    (OperationSuccess, OperationError),  # noqa",
        "detail": "felicity.apps.analysis.services.ref.analysis_result",
        "documentation": {}
    },
    {
        "label": "streamer",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.analysis_result",
        "description": "felicity.apps.analysis.services.ref.analysis_result",
        "peekOfCode": "streamer = FelicityStreamer()\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n@strawberry.input\nclass ARResultInputType:\n    uid: str\n    result: str\n    reportable: bool | None = True\n@strawberry.type\nclass ResultListingType:",
        "detail": "felicity.apps.analysis.services.ref.analysis_result",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.analysis_result",
        "description": "felicity.apps.analysis.services.ref.analysis_result",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@strawberry.input\nclass ARResultInputType:\n    uid: str\n    result: str\n    reportable: bool | None = True\n@strawberry.type\nclass ResultListingType:\n    results: List[r_types.AnalysisResultType]\nAnalysisResultResponse = strawberry.union(",
        "detail": "felicity.apps.analysis.services.ref.analysis_result",
        "documentation": {}
    },
    {
        "label": "AnalysisResultResponse",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.analysis_result",
        "description": "felicity.apps.analysis.services.ref.analysis_result",
        "peekOfCode": "AnalysisResultResponse = strawberry.union(\n    \"AnalysisResultResponse\",\n    (ResultListingType, OperationError),  # noqa\n    description=\"Union of possible outcomes when actioning samples\",\n)\nAnalysisResultOperationResponse = strawberry.union(\n    \"AnalysisResultSubmitResponse\",\n    (OperationSuccess, OperationError),  # noqa\n    description=\"Union of possible outcomes when submitting/verifying results\",\n)",
        "detail": "felicity.apps.analysis.services.ref.analysis_result",
        "documentation": {}
    },
    {
        "label": "AnalysisResultOperationResponse",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.analysis_result",
        "description": "felicity.apps.analysis.services.ref.analysis_result",
        "peekOfCode": "AnalysisResultOperationResponse = strawberry.union(\n    \"AnalysisResultSubmitResponse\",\n    (OperationSuccess, OperationError),  # noqa\n    description=\"Union of possible outcomes when submitting/verifying results\",\n)\nasync def submit_analysis_results(\n    info,\n    analysis_results: List[ARResultInputType],\n    source_object: str,\n    source_object_uid: str,",
        "detail": "felicity.apps.analysis.services.ref.analysis_result",
        "documentation": {}
    },
    {
        "label": "AnalysisInputType",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.ref.analysis_service",
        "description": "felicity.apps.analysis.services.ref.analysis_service",
        "peekOfCode": "class AnalysisInputType:\n    name: str\n    keyword: str\n    sort_key: int\n    description: str = \"\"\n    department_uid: str | None = None\n    sample_types: Optional[List[str]] = field(default_factory=list)\n    methods: Optional[List[str]] = field(default_factory=list)\n    category_uid: str | None = None\n    unit_uid: str | None = None",
        "detail": "felicity.apps.analysis.services.ref.analysis_service",
        "documentation": {}
    },
    {
        "label": "AnalysisMappingInputType",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.ref.analysis_service",
        "description": "felicity.apps.analysis.services.ref.analysis_service",
        "peekOfCode": "class AnalysisMappingInputType:\n    analysis_uid: str\n    coding_standard_uid: str\n    name: str\n    code: str\n    description: str | None = None\nasync def create_analysis(info, payload: AnalysisInputType) -> ProfilesServiceResponse:\n    is_authenticated, user = await auth_from_info(info)\n    verify_user_auth(\n        is_authenticated, user, \"Only Authenticated user can create analysis\"",
        "detail": "felicity.apps.analysis.services.ref.analysis_service",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.analysis_service",
        "description": "felicity.apps.analysis.services.ref.analysis_service",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@strawberry.input\nclass AnalysisInputType:\n    name: str\n    keyword: str\n    sort_key: int\n    description: str = \"\"\n    department_uid: str | None = None\n    sample_types: Optional[List[str]] = field(default_factory=list)\n    methods: Optional[List[str]] = field(default_factory=list)",
        "detail": "felicity.apps.analysis.services.ref.analysis_service",
        "documentation": {}
    },
    {
        "label": "ProfilesServiceResponse",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.analysis_service",
        "description": "felicity.apps.analysis.services.ref.analysis_service",
        "peekOfCode": "ProfilesServiceResponse = strawberry.union(\n    \"ProfilesServiceResponse\",\n    (a_types.AnalysisWithProfiles, OperationError),  # noqa\n    description=\"\",\n)\nAnalysisMappingResponse = strawberry.union(\n    \"AnalysisMappingResponse\",\n    (a_types.AnalysisMappingType, OperationError),  # noqa\n    description=\"Union of possible outcomes when adding a new notice\",\n)",
        "detail": "felicity.apps.analysis.services.ref.analysis_service",
        "documentation": {}
    },
    {
        "label": "AnalysisMappingResponse",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.analysis_service",
        "description": "felicity.apps.analysis.services.ref.analysis_service",
        "peekOfCode": "AnalysisMappingResponse = strawberry.union(\n    \"AnalysisMappingResponse\",\n    (a_types.AnalysisMappingType, OperationError),  # noqa\n    description=\"Union of possible outcomes when adding a new notice\",\n)\n@strawberry.input\nclass AnalysisMappingInputType:\n    analysis_uid: str\n    coding_standard_uid: str\n    name: str",
        "detail": "felicity.apps.analysis.services.ref.analysis_service",
        "documentation": {}
    },
    {
        "label": "CodingStandardInputType",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.ref.coding_standard",
        "description": "felicity.apps.analysis.services.ref.coding_standard",
        "peekOfCode": "class CodingStandardInputType:\n    name: str\n    description: str | None = \"\"\nCodingStandardResponse = strawberry.union(\n    \"CodingStandardResponse\",\n    (a_types.CodingStandardType, OperationError),  # noqa\n    description=\"\",\n)\nasync def create_coding_standard(\n    info, payload: CodingStandardInputType",
        "detail": "felicity.apps.analysis.services.ref.coding_standard",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.coding_standard",
        "description": "felicity.apps.analysis.services.ref.coding_standard",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@strawberry.input\nclass CodingStandardInputType:\n    name: str\n    description: str | None = \"\"\nCodingStandardResponse = strawberry.union(\n    \"CodingStandardResponse\",\n    (a_types.CodingStandardType, OperationError),  # noqa\n    description=\"\",\n)",
        "detail": "felicity.apps.analysis.services.ref.coding_standard",
        "documentation": {}
    },
    {
        "label": "CodingStandardResponse",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.coding_standard",
        "description": "felicity.apps.analysis.services.ref.coding_standard",
        "peekOfCode": "CodingStandardResponse = strawberry.union(\n    \"CodingStandardResponse\",\n    (a_types.CodingStandardType, OperationError),  # noqa\n    description=\"\",\n)\nasync def create_coding_standard(\n    info, payload: CodingStandardInputType\n) -> CodingStandardResponse:\n    is_authenticated, user = await auth_from_info(info)\n    verify_user_auth(",
        "detail": "felicity.apps.analysis.services.ref.coding_standard",
        "documentation": {}
    },
    {
        "label": "QCSetInputType",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.ref.quality_control",
        "description": "felicity.apps.analysis.services.ref.quality_control",
        "peekOfCode": "class QCSetInputType:\n    qcTemplateUid: str | None\n    qcLevels: List[str]\n    analysisProfiles: List[str]\n    analysisServices: List[str]\n@strawberry.type\nclass CreateQCSetData:\n    samples: List[a_types.SampleType]\n    qc_sets: List[a_types.QCSetType]\n@strawberry.input",
        "detail": "felicity.apps.analysis.services.ref.quality_control",
        "documentation": {}
    },
    {
        "label": "CreateQCSetData",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.ref.quality_control",
        "description": "felicity.apps.analysis.services.ref.quality_control",
        "peekOfCode": "class CreateQCSetData:\n    samples: List[a_types.SampleType]\n    qc_sets: List[a_types.QCSetType]\n@strawberry.input\nclass QCTemplateInputType:\n    name: str\n    description: str = \"\"\n    departments: Optional[List[str]] = None\n    levels: List[str] = None\nQCSetResponse = strawberry.union(",
        "detail": "felicity.apps.analysis.services.ref.quality_control",
        "documentation": {}
    },
    {
        "label": "QCTemplateInputType",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.ref.quality_control",
        "description": "felicity.apps.analysis.services.ref.quality_control",
        "peekOfCode": "class QCTemplateInputType:\n    name: str\n    description: str = \"\"\n    departments: Optional[List[str]] = None\n    levels: List[str] = None\nQCSetResponse = strawberry.union(\n    \"QCSetResponse\", (CreateQCSetData, OperationError), description=\"\"  # noqa\n)\nQCLevelResponse = strawberry.union(\n    \"QCLevelResponse\", (a_types.QCLevelType, OperationError), description=\"\"  # noqa",
        "detail": "felicity.apps.analysis.services.ref.quality_control",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.quality_control",
        "description": "felicity.apps.analysis.services.ref.quality_control",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@strawberry.input\nclass QCSetInputType:\n    qcTemplateUid: str | None\n    qcLevels: List[str]\n    analysisProfiles: List[str]\n    analysisServices: List[str]\n@strawberry.type\nclass CreateQCSetData:\n    samples: List[a_types.SampleType]",
        "detail": "felicity.apps.analysis.services.ref.quality_control",
        "documentation": {}
    },
    {
        "label": "QCSetResponse",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.quality_control",
        "description": "felicity.apps.analysis.services.ref.quality_control",
        "peekOfCode": "QCSetResponse = strawberry.union(\n    \"QCSetResponse\", (CreateQCSetData, OperationError), description=\"\"  # noqa\n)\nQCLevelResponse = strawberry.union(\n    \"QCLevelResponse\", (a_types.QCLevelType, OperationError), description=\"\"  # noqa\n)\nQCTemplateResponse = strawberry.union(\n    \"QCTemplateResponse\",\n    (a_types.QCTemplateType, OperationError),  # noqa\n    description=\"\",",
        "detail": "felicity.apps.analysis.services.ref.quality_control",
        "documentation": {}
    },
    {
        "label": "QCLevelResponse",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.quality_control",
        "description": "felicity.apps.analysis.services.ref.quality_control",
        "peekOfCode": "QCLevelResponse = strawberry.union(\n    \"QCLevelResponse\", (a_types.QCLevelType, OperationError), description=\"\"  # noqa\n)\nQCTemplateResponse = strawberry.union(\n    \"QCTemplateResponse\",\n    (a_types.QCTemplateType, OperationError),  # noqa\n    description=\"\",\n)\nasync def create_QC_set(info, samples: List[QCSetInputType]) -> QCSetResponse:\n    is_authenticated, user = await auth_from_info(info)",
        "detail": "felicity.apps.analysis.services.ref.quality_control",
        "documentation": {}
    },
    {
        "label": "QCTemplateResponse",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.quality_control",
        "description": "felicity.apps.analysis.services.ref.quality_control",
        "peekOfCode": "QCTemplateResponse = strawberry.union(\n    \"QCTemplateResponse\",\n    (a_types.QCTemplateType, OperationError),  # noqa\n    description=\"\",\n)\nasync def create_QC_set(info, samples: List[QCSetInputType]) -> QCSetResponse:\n    is_authenticated, user = await auth_from_info(info)\n    verify_user_auth(\n        is_authenticated, user, \"Only Authenticated user can create qc-sets\"\n    )",
        "detail": "felicity.apps.analysis.services.ref.quality_control",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.rejection_reason",
        "description": "felicity.apps.analysis.services.ref.rejection_reason",
        "peekOfCode": "logger = logging.getLogger(__name__)\nRejectionReasonResponse = strawberry.union(\n    \"RejectionReasonResponse\",\n    (a_types.RejectionReasonType, OperationError),  # noqa\n    description=\"\",\n)\nasync def create_rejection_reason(info, reason: str) -> RejectionReasonResponse:\n    is_authenticated, user = await auth_from_info(info)\n    verify_user_auth(\n        is_authenticated,",
        "detail": "felicity.apps.analysis.services.ref.rejection_reason",
        "documentation": {}
    },
    {
        "label": "RejectionReasonResponse",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.rejection_reason",
        "description": "felicity.apps.analysis.services.ref.rejection_reason",
        "peekOfCode": "RejectionReasonResponse = strawberry.union(\n    \"RejectionReasonResponse\",\n    (a_types.RejectionReasonType, OperationError),  # noqa\n    description=\"\",\n)\nasync def create_rejection_reason(info, reason: str) -> RejectionReasonResponse:\n    is_authenticated, user = await auth_from_info(info)\n    verify_user_auth(\n        is_authenticated,\n        user,",
        "detail": "felicity.apps.analysis.services.ref.rejection_reason",
        "documentation": {}
    },
    {
        "label": "ResultOptionInputType",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.ref.result_option",
        "description": "felicity.apps.analysis.services.ref.result_option",
        "peekOfCode": "class ResultOptionInputType:\n    analysis_uid: str\n    option_key: int\n    value: str\nResultOptionResponse = strawberry.union(\n    \"ResultOptionResponse\",\n    (a_types.ResultOptionType, OperationError),  # noqa\n    description=\"\",\n)\nasync def create_result_option(",
        "detail": "felicity.apps.analysis.services.ref.result_option",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.result_option",
        "description": "felicity.apps.analysis.services.ref.result_option",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@strawberry.input\nclass ResultOptionInputType:\n    analysis_uid: str\n    option_key: int\n    value: str\nResultOptionResponse = strawberry.union(\n    \"ResultOptionResponse\",\n    (a_types.ResultOptionType, OperationError),  # noqa\n    description=\"\",",
        "detail": "felicity.apps.analysis.services.ref.result_option",
        "documentation": {}
    },
    {
        "label": "ResultOptionResponse",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.result_option",
        "description": "felicity.apps.analysis.services.ref.result_option",
        "peekOfCode": "ResultOptionResponse = strawberry.union(\n    \"ResultOptionResponse\",\n    (a_types.ResultOptionType, OperationError),  # noqa\n    description=\"\",\n)\nasync def create_result_option(\n    info, payload: ResultOptionInputType\n) -> ResultOptionResponse:\n    is_authenticated, user = await auth_from_info(info)\n    verify_user_auth(",
        "detail": "felicity.apps.analysis.services.ref.result_option",
        "documentation": {}
    },
    {
        "label": "SampleTypeInputType",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.ref.sample_type",
        "description": "felicity.apps.analysis.services.ref.sample_type",
        "peekOfCode": "class SampleTypeInputType:\n    name: str\n    abbr: str\n    description: str | None = \"\"\n    internal_use: bool | None = False\n    active: bool | None = True\nSampleTypeResponse = strawberry.union(\n    \"SampleTypeResponse\",\n    (a_types.SampleTypeTyp, OperationError),  # noqa\n    description=\"\",",
        "detail": "felicity.apps.analysis.services.ref.sample_type",
        "documentation": {}
    },
    {
        "label": "SampleTypeMappingInputType",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.ref.sample_type",
        "description": "felicity.apps.analysis.services.ref.sample_type",
        "peekOfCode": "class SampleTypeMappingInputType:\n    sample_type_uid: str\n    coding_standard_uid: str\n    name: str\n    code: str\n    description: str | None = None\nasync def create_sample_type(info, payload: SampleTypeInputType) -> SampleTypeResponse:\n    is_authenticated, user = await auth_from_info(info)\n    verify_user_auth(\n        is_authenticated,",
        "detail": "felicity.apps.analysis.services.ref.sample_type",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.sample_type",
        "description": "felicity.apps.analysis.services.ref.sample_type",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@strawberry.input\nclass SampleTypeInputType:\n    name: str\n    abbr: str\n    description: str | None = \"\"\n    internal_use: bool | None = False\n    active: bool | None = True\nSampleTypeResponse = strawberry.union(\n    \"SampleTypeResponse\",",
        "detail": "felicity.apps.analysis.services.ref.sample_type",
        "documentation": {}
    },
    {
        "label": "SampleTypeResponse",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.sample_type",
        "description": "felicity.apps.analysis.services.ref.sample_type",
        "peekOfCode": "SampleTypeResponse = strawberry.union(\n    \"SampleTypeResponse\",\n    (a_types.SampleTypeTyp, OperationError),  # noqa\n    description=\"\",\n)\nSampleTypeMappingResponse = strawberry.union(\n    \"SampleTypeMappingResponse\",\n    (a_types.SampleTypeMappingType, OperationError),  # noqa\n    description=\"Union of possible outcomes when adding a new notice\",\n)",
        "detail": "felicity.apps.analysis.services.ref.sample_type",
        "documentation": {}
    },
    {
        "label": "SampleTypeMappingResponse",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.ref.sample_type",
        "description": "felicity.apps.analysis.services.ref.sample_type",
        "peekOfCode": "SampleTypeMappingResponse = strawberry.union(\n    \"SampleTypeMappingResponse\",\n    (a_types.SampleTypeMappingType, OperationError),  # noqa\n    description=\"Union of possible outcomes when adding a new notice\",\n)\n@strawberry.input\nclass SampleTypeMappingInputType:\n    sample_type_uid: str\n    coding_standard_uid: str\n    name: str",
        "detail": "felicity.apps.analysis.services.ref.sample_type",
        "documentation": {}
    },
    {
        "label": "CodingStandardService",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "peekOfCode": "class CodingStandardService(BaseService[CodingStandard], ICodingStandardService):\n    def __init__(self, repository: ICodingStandardRepository):\n        self.repository = repository\n    async def create(\n        self, name: str, description: str | None, user: User\n    ) -> CodingStandard:\n        payload = locals()\n        exists = await self.get(name=name)\n        if exists:\n            raise AlreadyExistsError(f\"Coding Standard: {name} already exists\")",
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "SampleTypeService",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "peekOfCode": "class SampleTypeService(BaseService[SampleType], ISampleTypeService):\n    def __init__(self, repository: ISampleTypeRepository):\n        self.repository = repository\n    async def create(\n        self,\n        name: str,\n        abbr: str,\n        description: str | None,\n        internal_use: bool | None,\n        active: bool | None,",
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "SampleTypeCodingService",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "peekOfCode": "class SampleTypeCodingService(BaseService[SampleTypeCoding], ISampleTypeCodingService):\n    def __init__(self, repository: ISampleTypeCodingRepository):\n        self.repository = repository\n    async def create(\n        self,\n        sample_type_uid: str,\n        coding_standard_uid: str,\n        name: str,\n        code: str,\n        description: str | None,",
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryService",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "peekOfCode": "class AnalysisCategoryService(BaseService[AnalysisCategory], IAnalysisCategoryService):\n    async def create(\n        self,\n        name: str,\n        department_uid: str | None,\n        description: str | None,\n        active: bool | None,\n        user: User,\n    ) -> AnalysisCategory:\n        payload = locals()",
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "ProfileService",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "peekOfCode": "class ProfileService(BaseService[Profile], IProfileService):\n    def __init__(\n        self,\n        repository: IProfileRepository,\n        analysis_service: IAnalysisService,\n        sample_type_service: ISampleTypeService,\n    ):\n        self.repository = repository\n        self.analysis_service = analysis_service\n        self.sample_type_service = sample_type_service",
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "ProfileCodingService",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "peekOfCode": "class ProfileCodingService(BaseService[ProfileCoding], IProfileCodingService):\n    def __int__(self, repository: IProfileCodingRepository):\n        self.repository = repository\n    async def create(\n        self,\n        profile_uid: str,\n        coding_standard_uid: str,\n        name: str,\n        code: str,\n        description: str | None,",
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisService",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "peekOfCode": "class AnalysisService(BaseService[Analysis], IAnalysisService):\n    def __init__(\n        self,\n        repository: IAnalysisRepository,\n        sample_type_service: ISampleTypeService,\n        method_service: IMethodService,\n    ):\n        self.repository = repository\n        self.sample_type_service = sample_type_service\n        self.method_service = method_service",
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCodingService",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "peekOfCode": "class AnalysisCodingService(BaseService[AnalysisCoding], IAnalysisCodingService):\n    async def create(\n        self,\n        analysis_uid: str,\n        coding_standard_uid: str,\n        name: str,\n        code: str,\n        description: str | None,\n        user: User,\n    ) -> AnalysisCoding:",
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisInterimService",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "peekOfCode": "class AnalysisInterimService(BaseService[AnalysisInterim], IAnalysisInterimService):\n    def __init__(self, repository: IAnalysisInterimRepository):\n        self.repository = repository\n    async def create(\n        self, key: int, value: str, analysis_uid: str, instrument_uid: str, user: User\n    ) -> AnalysisInterim:\n        payload = locals()\n        incoming = {\n            \"created_by_uid\": user.uid,\n            \"updated_by_uid\": user.uid,",
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactorService",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "peekOfCode": "class AnalysisCorrectionFactorService(\n    BaseService[AnalysisCorrectionFactor], IAnalysisCorrectionFactorService\n):\n    def __init__(self, repository: IAnalysisCorrectionFactorRepository):\n        self.repository = repository\n    async def create(\n        self,\n        factor: float,\n        analysis_uid: str,\n        instrument_uid: str,",
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimitService",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "peekOfCode": "class AnalysisDetectionLimitService(\n    BaseService[AnalysisDetectionLimit], IAnalysisDetectionLimitService\n):\n    def __init__(self, repository: IAnalysisDetectionLimitRepository):\n        self.repository = repository\n    async def create(\n        self,\n        lower_limit: float,\n        upper_limit: float,\n        analysis_uid: str,",
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertaintyService",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "peekOfCode": "class AnalysisUncertaintyService(\n    BaseService[AnalysisUncertainty], IAnalysisUncertaintyService\n):\n    def __init__(self, repository: IAnalysisUncertaintyRepository):\n        self.repository = repository\n    async def create(\n        self,\n        min: float,\n        max: float,\n        value: float,",
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecificationService",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "peekOfCode": "class AnalysisSpecificationService(\n    BaseService[AnalysisSpecification], IAnalysisSpecificationService\n):\n    def __init__(self, repository: IAnalysisSpecificationRepository):\n        self.repository = repository\n    async def create(\n        self,\n        analysis_uid: str,\n        min: float | None,\n        max: float | None,",
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "ResultOptionService",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "peekOfCode": "class ResultOptionService(BaseService[ResultOption], IResultOptionService):\n    def __init__(self, repository: IResultOptionRepository):\n        self.repository = repository\n    async def create(\n        self, analysis_uid: str, option_key: int, value: str, user: User\n    ) -> ResultOption:\n        payload = locals()\n        incoming = {\n            \"created_by_uid\": user.uid,\n            \"updated_by_uid\": user.uid,",
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestService",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "peekOfCode": "class AnalysisRequestService(BaseService[AnalysisRequest], IAnalysisRequestService):\n    def __init__(\n        self,\n        repository: IAnalysisRequestRepository,\n        patient_service: IPatientService,\n        profile_service: IProfileService,\n        analysis_service: IAnalysisService,\n        client_service: IClientService,\n        sample_type_service: ISampleTypeService,\n        sample_service: ISampleService,",
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "RejectionReasonService",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "peekOfCode": "class RejectionReasonService(BaseService[RejectionReason], IRejectionReasonService):\n    def __init__(self, repository: IResultOptionRepository):\n        self.repository = repository\n    async def create(self, reason: str, user: User) -> RejectionReason:\n        exists = await self.get(reason=reason)\n        if exists:\n            raise AlreadyExistsError(\n                f\"The Rejection reason -> {reason} <- already exists\"\n            )\n        incoming = {",
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "SampleService",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "peekOfCode": "class SampleService(BaseService[Sample], ISampleService):\n    def __init__(\n        self,\n        repository: IResultOptionRepository,\n        analysis_result_service: IAnalysisResultService,\n        activity_stream_service: IActivityStreamService,\n        id_sequence_service: IIdSequenceService,\n        reflex_engine_service: IReflexEngineService,\n        rejection_reason_service: IRejectionReasonService,\n        job_service: IJobService,",
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "QCSetService",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.quality_control",
        "description": "felicity.apps.analysis.services.quality_control",
        "peekOfCode": "class QCSetService(BaseService[QCSet], IQCSetService):\n    def __init__(\n            self,\n            repository: IQCSetRepository,\n            qc_template_service: IQCTemplateService,\n            qc_level_service: IQCLevelService,\n            profile_service: IProfileService,\n            analysis_service: IAnalysisService,\n            analysis_result_service: IAnalysisResultService,\n            sample_service: ISampleService,",
        "detail": "felicity.apps.analysis.services.quality_control",
        "documentation": {}
    },
    {
        "label": "QCLevelService",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.quality_control",
        "description": "felicity.apps.analysis.services.quality_control",
        "peekOfCode": "class QCLevelService(BaseService[QCLevel], IQCLevelService):\n    def __init__(self, repository: IQCLevelRepository):\n        self.repository = repository\n    async def create(self, level: str) -> QCLevel:\n        exists = await self.get(level=level)\n        if exists:\n            raise AlreadyExistsError(f\"A QCLevel named {level} already exists\")\n        obj_in = QCLevelCreate(level=level)\n        return await super().create(**marshal(obj_in))\n    async def update(self, uid: str, level: str) -> QCLevel:",
        "detail": "felicity.apps.analysis.services.quality_control",
        "documentation": {}
    },
    {
        "label": "QCTemplateService",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.quality_control",
        "description": "felicity.apps.analysis.services.quality_control",
        "peekOfCode": "class QCTemplateService(BaseService[QCTemplate], IQCTemplateService):\n    def __init__(\n            self,\n            repository: IQCTemplateRepository,\n            qc_level_service: IQCLevelService,\n            department_service: IDepartmentService,\n    ):\n        self.repository = repository\n        self.qc_level_service = qc_level_service\n        self.department_service = department_service",
        "detail": "felicity.apps.analysis.services.quality_control",
        "documentation": {}
    },
    {
        "label": "AnalysisResultService",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.result",
        "description": "felicity.apps.analysis.services.result",
        "peekOfCode": "class AnalysisResultService(BaseService[AnalysisResult], IAnalysisResultService):\n    def __int__(\n        self,\n        repository: IAnalysisResultRepository,\n        job_service: IJobService,\n        worksheet_service: IWorkSheetService,\n        activity_stream_service: IActivityStreamService,\n        result_mutation_service: IResultMutationService,\n        reflex_engine_service: IReflexEngineService,\n        laboratory_service: ILaboratoryService,",
        "detail": "felicity.apps.analysis.services.result",
        "documentation": {}
    },
    {
        "label": "ResultMutationService",
        "kind": 6,
        "importPath": "felicity.apps.analysis.services.result",
        "description": "felicity.apps.analysis.services.result",
        "peekOfCode": "class ResultMutationService(BaseService[T], IResultMutationService):\n    def __init__(\n        self,\n        repository: IResultMutationRepository,\n        analysis_result_service: IAnalysisResultService,\n    ):\n        self.repository = repository\n        self.analysis_result_service = analysis_result_service\n    async def mutate(self, result: AnalysisResult):\n        result_in = result.result",
        "detail": "felicity.apps.analysis.services.result",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "felicity.apps.analysis.services.result",
        "description": "felicity.apps.analysis.services.result",
        "peekOfCode": "T = TypeVar(\"T\")\nclass AnalysisResultService(BaseService[AnalysisResult], IAnalysisResultService):\n    def __int__(\n        self,\n        repository: IAnalysisResultRepository,\n        job_service: IJobService,\n        worksheet_service: IWorkSheetService,\n        activity_stream_service: IActivityStreamService,\n        result_mutation_service: IResultMutationService,\n        reflex_engine_service: IReflexEngineService,",
        "detail": "felicity.apps.analysis.services.result",
        "documentation": {}
    },
    {
        "label": "AnalysisResultWorkFlowException",
        "kind": 6,
        "importPath": "felicity.apps.analysis.workflow.analysis_result",
        "description": "felicity.apps.analysis.workflow.analysis_result",
        "peekOfCode": "class AnalysisResultWorkFlowException(Exception):\n    ...\nclass AnalysisResultWorkFlow:\n    \"\"\"AnalysisResultWorkFlow\n    Defines a set of guards that allow or prevent actions taken on AnalysisResult\n    \"\"\"\n    def __init__(self):\n        ...\n    @classmethod\n    async def retest(cls, uid, retested_by, action=\"verify\"):",
        "detail": "felicity.apps.analysis.workflow.analysis_result",
        "documentation": {}
    },
    {
        "label": "AnalysisResultWorkFlow",
        "kind": 6,
        "importPath": "felicity.apps.analysis.workflow.analysis_result",
        "description": "felicity.apps.analysis.workflow.analysis_result",
        "peekOfCode": "class AnalysisResultWorkFlow:\n    \"\"\"AnalysisResultWorkFlow\n    Defines a set of guards that allow or prevent actions taken on AnalysisResult\n    \"\"\"\n    def __init__(self):\n        ...\n    @classmethod\n    async def retest(cls, uid, retested_by, action=\"verify\"):\n        analysis_result = await AnalysisResult.get(uid=uid)\n        await cls._guard_retest(analysis_result)",
        "detail": "felicity.apps.analysis.workflow.analysis_result",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.analysis.workflow.analysis_result",
        "description": "felicity.apps.analysis.workflow.analysis_result",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass AnalysisResultWorkFlowException(Exception):\n    ...\nclass AnalysisResultWorkFlow:\n    \"\"\"AnalysisResultWorkFlow\n    Defines a set of guards that allow or prevent actions taken on AnalysisResult\n    \"\"\"\n    def __init__(self):\n        ...\n    @classmethod",
        "detail": "felicity.apps.analysis.workflow.analysis_result",
        "documentation": {}
    },
    {
        "label": "CQSetWorkFlowException",
        "kind": 6,
        "importPath": "felicity.apps.analysis.workflow.qcset",
        "description": "felicity.apps.analysis.workflow.qcset",
        "peekOfCode": "class CQSetWorkFlowException(Exception):\n    ...\nclass CQSetWorkFlow:\n    \"\"\"CQSetWorkFlow\n    Defines a set of guards that allow or prevent actions taken on Quality Control Sets\n        methods:\n            cancel: cancels a quality control set iff all quality control samples are cancelled\n                params:\n                    uid: quality control set uid\n            submit: submits a quality control set iff all quality control samples are submits",
        "detail": "felicity.apps.analysis.workflow.qcset",
        "documentation": {}
    },
    {
        "label": "CQSetWorkFlow",
        "kind": 6,
        "importPath": "felicity.apps.analysis.workflow.qcset",
        "description": "felicity.apps.analysis.workflow.qcset",
        "peekOfCode": "class CQSetWorkFlow:\n    \"\"\"CQSetWorkFlow\n    Defines a set of guards that allow or prevent actions taken on Quality Control Sets\n        methods:\n            cancel: cancels a quality control set iff all quality control samples are cancelled\n                params:\n                    uid: quality control set uid\n            submit: submits a quality control set iff all quality control samples are submits\n                params:\n                    uid: quality control set uid",
        "detail": "felicity.apps.analysis.workflow.qcset",
        "documentation": {}
    },
    {
        "label": "SampleWorkFlowException",
        "kind": 6,
        "importPath": "felicity.apps.analysis.workflow.sample",
        "description": "felicity.apps.analysis.workflow.sample",
        "peekOfCode": "class SampleWorkFlowException(Exception):\n    ...\nclass SampleWorkFlow:\n    \"\"\"SampleWorkFlow\n    Defines a set of guards that allow or prevent actions taken on Samples\n    \"\"\"\n    def __init__(self):\n        ...\n    @classmethod\n    async def receive(cls, uid):",
        "detail": "felicity.apps.analysis.workflow.sample",
        "documentation": {}
    },
    {
        "label": "SampleWorkFlow",
        "kind": 6,
        "importPath": "felicity.apps.analysis.workflow.sample",
        "description": "felicity.apps.analysis.workflow.sample",
        "peekOfCode": "class SampleWorkFlow:\n    \"\"\"SampleWorkFlow\n    Defines a set of guards that allow or prevent actions taken on Samples\n    \"\"\"\n    def __init__(self):\n        ...\n    @classmethod\n    async def receive(cls, uid):\n        sample = await Sample.get(uid=uid)\n        await cls._guard_receive(sample)",
        "detail": "felicity.apps.analysis.workflow.sample",
        "documentation": {}
    },
    {
        "label": "States",
        "kind": 6,
        "importPath": "felicity.apps.analysis.conf",
        "description": "felicity.apps.analysis.conf",
        "peekOfCode": "class States:\n    class Sample:\n        SCHEDULED = \"scheduled\"  # scheduled for collection\n        EXPECTED = \"expected\"  # not yet received in the laboratory\n        RECEIVED = \"received\"  # received in the laboratory and ready for processing\n        AWAITING = \"awaiting\"  # pending approval\n        APPROVED = \"approved\"  # authorised for release\n        PUBLISHING = \"publishing\"  # printed samples, ready for dispatch\n        PUBLISHED = \"published\"  # printed samples, ready for dispatch\n        INVALIDATED = \"invalidated\"  # approval condemnation",
        "detail": "felicity.apps.analysis.conf",
        "documentation": {}
    },
    {
        "label": "Priorities",
        "kind": 6,
        "importPath": "felicity.apps.analysis.conf",
        "description": "felicity.apps.analysis.conf",
        "peekOfCode": "class Priorities(object):\n    class Sample:\n        NORMAL = 0\n        MEDIUM = 1\n        HIGH = 2\n    def __init__(self):\n        self.sample = self.Sample()\npriorities = Priorities()\nclass ResultType:\n    NUMERIC = \"numeric\"  # strict numeric",
        "detail": "felicity.apps.analysis.conf",
        "documentation": {}
    },
    {
        "label": "ResultType",
        "kind": 6,
        "importPath": "felicity.apps.analysis.conf",
        "description": "felicity.apps.analysis.conf",
        "peekOfCode": "class ResultType:\n    NUMERIC = \"numeric\"  # strict numeric\n    SHORT_TEXT = \"short-text\"  # short text and numeric\n    LONG_TEXT = \"long-text\"  # strictly long text\nresult_types = ResultType()",
        "detail": "felicity.apps.analysis.conf",
        "documentation": {}
    },
    {
        "label": "QC_SAMPLE",
        "kind": 5,
        "importPath": "felicity.apps.analysis.conf",
        "description": "felicity.apps.analysis.conf",
        "peekOfCode": "QC_SAMPLE = {\"name\": \"QC Sample\", \"description\": \"QC Sample\", \"abbr\": \"QCS\"}\nclass States:\n    class Sample:\n        SCHEDULED = \"scheduled\"  # scheduled for collection\n        EXPECTED = \"expected\"  # not yet received in the laboratory\n        RECEIVED = \"received\"  # received in the laboratory and ready for processing\n        AWAITING = \"awaiting\"  # pending approval\n        APPROVED = \"approved\"  # authorised for release\n        PUBLISHING = \"publishing\"  # printed samples, ready for dispatch\n        PUBLISHED = \"published\"  # printed samples, ready for dispatch",
        "detail": "felicity.apps.analysis.conf",
        "documentation": {}
    },
    {
        "label": "states",
        "kind": 5,
        "importPath": "felicity.apps.analysis.conf",
        "description": "felicity.apps.analysis.conf",
        "peekOfCode": "states = States()\nclass Priorities(object):\n    class Sample:\n        NORMAL = 0\n        MEDIUM = 1\n        HIGH = 2\n    def __init__(self):\n        self.sample = self.Sample()\npriorities = Priorities()\nclass ResultType:",
        "detail": "felicity.apps.analysis.conf",
        "documentation": {}
    },
    {
        "label": "priorities",
        "kind": 5,
        "importPath": "felicity.apps.analysis.conf",
        "description": "felicity.apps.analysis.conf",
        "peekOfCode": "priorities = Priorities()\nclass ResultType:\n    NUMERIC = \"numeric\"  # strict numeric\n    SHORT_TEXT = \"short-text\"  # short text and numeric\n    LONG_TEXT = \"long-text\"  # strictly long text\nresult_types = ResultType()",
        "detail": "felicity.apps.analysis.conf",
        "documentation": {}
    },
    {
        "label": "result_types",
        "kind": 5,
        "importPath": "felicity.apps.analysis.conf",
        "description": "felicity.apps.analysis.conf",
        "peekOfCode": "result_types = ResultType()",
        "detail": "felicity.apps.analysis.conf",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.analysis.permissions",
        "description": "felicity.apps.analysis.permissions",
        "peekOfCode": "logger = logging.getLogger(__name__)\nif TYPE_CHECKING:\n    from ..user.models import User\nasync def check_sample_verification(\n        samples: List[Union[str, Sample]], verifier: \"User\"\n) -> tuple[list[Sample] | None, list[Sample] | None, str, str]:\n    \"\"\"\n    splits samples into allowed and restricted samples.\n    allowed samples are those that the user is allowed to verify.\n    if restricted samples are found, the user will be provided with extra messages and suggestions",
        "detail": "felicity.apps.analysis.permissions",
        "documentation": {}
    },
    {
        "label": "CodingStandardBase",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class CodingStandardBase(BaseAuditModel):\n    name: str | None\n    description: str | None\nclass CodingStandardBaseInDB(CodingStandardBase):\n    uid: str | None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass CodingStandardCreate(CodingStandardBase):\n    pass\n# Properties to receive via API on update",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "CodingStandardBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class CodingStandardBaseInDB(CodingStandardBase):\n    uid: str | None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass CodingStandardCreate(CodingStandardBase):\n    pass\n# Properties to receive via API on update\nclass CodingStandardUpdate(CodingStandardBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "CodingStandardCreate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class CodingStandardCreate(CodingStandardBase):\n    pass\n# Properties to receive via API on update\nclass CodingStandardUpdate(CodingStandardBase):\n    pass\n# Properties to return via API\nclass CodingStandard(CodingStandardBaseInDB):\n    pass\n# Properties stored in DB\nclass CodingStandardInDB(CodingStandardBaseInDB):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "CodingStandardUpdate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class CodingStandardUpdate(CodingStandardBase):\n    pass\n# Properties to return via API\nclass CodingStandard(CodingStandardBaseInDB):\n    pass\n# Properties stored in DB\nclass CodingStandardInDB(CodingStandardBaseInDB):\n    pass\n#\n# SampleType Schemas",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "CodingStandard",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class CodingStandard(CodingStandardBaseInDB):\n    pass\n# Properties stored in DB\nclass CodingStandardInDB(CodingStandardBaseInDB):\n    pass\n#\n# SampleType Schemas\n#\n# Shared properties\nclass SampleTypeBase(BaseAuditModel):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "CodingStandardInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class CodingStandardInDB(CodingStandardBaseInDB):\n    pass\n#\n# SampleType Schemas\n#\n# Shared properties\nclass SampleTypeBase(BaseAuditModel):\n    name: str | None = None\n    description: str | None = None\n    abbr: str | None = None",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeBase",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class SampleTypeBase(BaseAuditModel):\n    name: str | None = None\n    description: str | None = None\n    abbr: str | None = None\n    internal_use: bool | None = False\n    active: bool | None = True\nclass SampleTypeBaseInDB(SampleTypeBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class SampleTypeBaseInDB(SampleTypeBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass SampleTypeCreate(SampleTypeBase):\n    pass\n# Properties to receive via API on update\nclass SampleTypeUpdate(SampleTypeBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeCreate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class SampleTypeCreate(SampleTypeBase):\n    pass\n# Properties to receive via API on update\nclass SampleTypeUpdate(SampleTypeBase):\n    pass\n# Properties to return via API\nclass SampleType(SampleTypeBaseInDB):\n    pass\n# Properties stored in DB\nclass SampleTypeInDB(SampleTypeBaseInDB):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeUpdate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class SampleTypeUpdate(SampleTypeBase):\n    pass\n# Properties to return via API\nclass SampleType(SampleTypeBaseInDB):\n    pass\n# Properties stored in DB\nclass SampleTypeInDB(SampleTypeBaseInDB):\n    pass\n#\n# SampleTypeCoding Schemas",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleType",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class SampleType(SampleTypeBaseInDB):\n    pass\n# Properties stored in DB\nclass SampleTypeInDB(SampleTypeBaseInDB):\n    pass\n#\n# SampleTypeCoding Schemas\n#\nclass SampleTypeCodingBase(BaseAuditModel):\n    sample_type_uid: str | None",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class SampleTypeInDB(SampleTypeBaseInDB):\n    pass\n#\n# SampleTypeCoding Schemas\n#\nclass SampleTypeCodingBase(BaseAuditModel):\n    sample_type_uid: str | None\n    sample_type: SampleType | None\n    coding_standard_uid: str\n    coding_standard: CodingStandard | None",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeCodingBase",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class SampleTypeCodingBase(BaseAuditModel):\n    sample_type_uid: str | None\n    sample_type: SampleType | None\n    coding_standard_uid: str\n    coding_standard: CodingStandard | None\n    code: str | None\n    name: str | None\n    description: str | None\nclass SampleTypeCodingBaseInDB(SampleTypeCodingBase):\n    uid: str | None",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeCodingBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class SampleTypeCodingBaseInDB(SampleTypeCodingBase):\n    uid: str | None\nmodel_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass SampleTypeCodingCreate(SampleTypeCodingBase):\n    pass\n# Properties to receive via API on update\nclass SampleTypeCodingUpdate(SampleTypeCodingBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeCodingCreate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class SampleTypeCodingCreate(SampleTypeCodingBase):\n    pass\n# Properties to receive via API on update\nclass SampleTypeCodingUpdate(SampleTypeCodingBase):\n    pass\n# Properties to return via API\nclass SampleTypeCoding(SampleTypeCodingBaseInDB):\n    pass\n# Properties stored in DB\nclass SampleTypeCodingInDB(SampleTypeCodingBaseInDB):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeCodingUpdate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class SampleTypeCodingUpdate(SampleTypeCodingBase):\n    pass\n# Properties to return via API\nclass SampleTypeCoding(SampleTypeCodingBaseInDB):\n    pass\n# Properties stored in DB\nclass SampleTypeCodingInDB(SampleTypeCodingBaseInDB):\n    pass\n#\n# Profile Schemas",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeCoding",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class SampleTypeCoding(SampleTypeCodingBaseInDB):\n    pass\n# Properties stored in DB\nclass SampleTypeCodingInDB(SampleTypeCodingBaseInDB):\n    pass\n#\n# Profile Schemas\n#\n# Shared properties\nclass ProfileBase(BaseAuditModel):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeCodingInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class SampleTypeCodingInDB(SampleTypeCodingBaseInDB):\n    pass\n#\n# Profile Schemas\n#\n# Shared properties\nclass ProfileBase(BaseAuditModel):\n    name: str | None\n    analyses: list[\"Analysis\"] | None = None\n    sample_types: list[SampleType] | None = None",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileBase",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class ProfileBase(BaseAuditModel):\n    name: str | None\n    analyses: list[\"Analysis\"] | None = None\n    sample_types: list[SampleType] | None = None\n    description: str | None = None\n    department_uid: str | None = None\n    keyword: str | None = None\n    tat_length_minutes: int | None = None\n    active: bool | None = True\nclass ProfileBaseInDB(ProfileBase):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class ProfileBaseInDB(ProfileBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ProfileCreate(ProfileBase):\n    pass\n# Properties to receive via API on update\nclass ProfileUpdate(ProfileBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileCreate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class ProfileCreate(ProfileBase):\n    pass\n# Properties to receive via API on update\nclass ProfileUpdate(ProfileBase):\n    pass\n# Properties to return via API\nclass Profile(ProfileBaseInDB):\n    pass\n# Properties stored in DB\nclass ProfileInDB(ProfileBaseInDB):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileUpdate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class ProfileUpdate(ProfileBase):\n    pass\n# Properties to return via API\nclass Profile(ProfileBaseInDB):\n    pass\n# Properties stored in DB\nclass ProfileInDB(ProfileBaseInDB):\n    pass\n#\n# AnalysisTemplate Schemas",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "Profile",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class Profile(ProfileBaseInDB):\n    pass\n# Properties stored in DB\nclass ProfileInDB(ProfileBaseInDB):\n    pass\n#\n# AnalysisTemplate Schemas\n#\n# Shared properties\nclass AnalysisTemplateBase(BaseAuditModel):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class ProfileInDB(ProfileBaseInDB):\n    pass\n#\n# AnalysisTemplate Schemas\n#\n# Shared properties\nclass AnalysisTemplateBase(BaseAuditModel):\n    name: str | None\n    analyses: list[\"Analysis\"] | None = None\n    description: str | None = None",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisTemplateBase",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisTemplateBase(BaseAuditModel):\n    name: str | None\n    analyses: list[\"Analysis\"] | None = None\n    description: str | None = None\n    department_uid: str | None = None\nclass AnalysisTemplateBaseInDB(AnalysisTemplateBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisTemplateCreate(AnalysisTemplateBase):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisTemplateBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisTemplateBaseInDB(AnalysisTemplateBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisTemplateCreate(AnalysisTemplateBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisTemplateUpdate(AnalysisTemplateBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisTemplateCreate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisTemplateCreate(AnalysisTemplateBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisTemplateUpdate(AnalysisTemplateBase):\n    pass\n# Properties to return via API\nclass AnalysisTemplate(AnalysisTemplateBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisTemplateInDB(AnalysisTemplateBaseInDB):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisTemplateUpdate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisTemplateUpdate(AnalysisTemplateBase):\n    pass\n# Properties to return via API\nclass AnalysisTemplate(AnalysisTemplateBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisTemplateInDB(AnalysisTemplateBaseInDB):\n    pass\n#\n# ProfileCoding Schemas",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisTemplate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisTemplate(AnalysisTemplateBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisTemplateInDB(AnalysisTemplateBaseInDB):\n    pass\n#\n# ProfileCoding Schemas\n#\nclass ProfileCodingBase(BaseAuditModel):\n    \"\"\"SampleTypeMapping\"\"\"",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisTemplateInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisTemplateInDB(AnalysisTemplateBaseInDB):\n    pass\n#\n# ProfileCoding Schemas\n#\nclass ProfileCodingBase(BaseAuditModel):\n    \"\"\"SampleTypeMapping\"\"\"\n    profile_uid: str | None\n    profile: Profile | None = None\n    coding_standard_uid: str | None = None",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileCodingBase",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class ProfileCodingBase(BaseAuditModel):\n    \"\"\"SampleTypeMapping\"\"\"\n    profile_uid: str | None\n    profile: Profile | None = None\n    coding_standard_uid: str | None = None\n    coding_standard: CodingStandard | None = None\n    code: str | None\n    name: str | None\n    description: str | None\nclass ProfileCodingBaseInDB(ProfileCodingBase):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileCodingBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class ProfileCodingBaseInDB(ProfileCodingBase):\n    uid: str | None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ProfileCodingCreate(ProfileCodingBase):\n    profile_uid: str\n    coding_standard_uid: str\n# Properties to receive via API on update\nclass ProfileCodingUpdate(ProfileCodingBase):\n    pass",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileCodingCreate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class ProfileCodingCreate(ProfileCodingBase):\n    profile_uid: str\n    coding_standard_uid: str\n# Properties to receive via API on update\nclass ProfileCodingUpdate(ProfileCodingBase):\n    pass\n# Properties to return via API\nclass ProfileCoding(ProfileCodingBaseInDB):\n    pass\n# Properties stored in DB",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileCodingUpdate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class ProfileCodingUpdate(ProfileCodingBase):\n    pass\n# Properties to return via API\nclass ProfileCoding(ProfileCodingBaseInDB):\n    pass\n# Properties stored in DB\nclass ProfileCodingInDB(ProfileCodingBaseInDB):\n    pass\n# AnalysisCategory Schemas\n#",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileCoding",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class ProfileCoding(ProfileCodingBaseInDB):\n    pass\n# Properties stored in DB\nclass ProfileCodingInDB(ProfileCodingBaseInDB):\n    pass\n# AnalysisCategory Schemas\n#\n# Shared properties\nclass AnalysisCategoryBase(BaseAuditModel):\n    name: str | None = None",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileCodingInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class ProfileCodingInDB(ProfileCodingBaseInDB):\n    pass\n# AnalysisCategory Schemas\n#\n# Shared properties\nclass AnalysisCategoryBase(BaseAuditModel):\n    name: str | None = None\n    description: str | None = None\n    department_uid: str | None = None\n    active: bool | None = True",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryBase",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisCategoryBase(BaseAuditModel):\n    name: str | None = None\n    description: str | None = None\n    department_uid: str | None = None\n    active: bool | None = True\nclass AnalysisCategoryBaseInDB(AnalysisCategoryBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisCategoryCreate(AnalysisCategoryBase):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisCategoryBaseInDB(AnalysisCategoryBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisCategoryCreate(AnalysisCategoryBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisCategoryUpdate(AnalysisCategoryBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryCreate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisCategoryCreate(AnalysisCategoryBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisCategoryUpdate(AnalysisCategoryBase):\n    pass\n# Properties to return via API\nclass AnalysisCategory(AnalysisCategoryBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisCategoryInDB(AnalysisCategoryBaseInDB):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryUpdate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisCategoryUpdate(AnalysisCategoryBase):\n    pass\n# Properties to return via API\nclass AnalysisCategory(AnalysisCategoryBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisCategoryInDB(AnalysisCategoryBaseInDB):\n    pass\n#\n# Analysis Schemas",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCategory",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisCategory(AnalysisCategoryBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisCategoryInDB(AnalysisCategoryBaseInDB):\n    pass\n#\n# Analysis Schemas\n#\nclass AnalysisBasicBase(BaseModel):\n    name: str | None = None",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisCategoryInDB(AnalysisCategoryBaseInDB):\n    pass\n#\n# Analysis Schemas\n#\nclass AnalysisBasicBase(BaseModel):\n    name: str | None = None\n    keyword: str | None = None\n# Shared properties\nclass AnalysisBase(BaseAuditModel):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisBasicBase",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisBasicBase(BaseModel):\n    name: str | None = None\n    keyword: str | None = None\n# Shared properties\nclass AnalysisBase(BaseAuditModel):\n    name: str | None = None\n    description: str | None = None\n    keyword: str | None = None\n    profiles: list[Profile] | None = None\n    sample_types: list[SampleType] | None = None",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisBase",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisBase(BaseAuditModel):\n    name: str | None = None\n    description: str | None = None\n    keyword: str | None = None\n    profiles: list[Profile] | None = None\n    sample_types: list[SampleType] | None = None\n    tat_length_minutes: int | None = None\n    unit_uid: str | None = None\n    category_uid: str | None = None\n    sort_key: int | None = 0",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisBasic",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisBasic(AnalysisBasicBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass AnalysisBaseInDB(AnalysisBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisCreate(AnalysisBase):\n    pass\n# Properties to receive via API on update",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisBaseInDB(AnalysisBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisCreate(AnalysisBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisUpdate(AnalysisBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCreate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisCreate(AnalysisBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisUpdate(AnalysisBase):\n    pass\n# Properties to return via API\nclass Analysis(AnalysisBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisInDB(AnalysisBaseInDB):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisUpdate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisUpdate(AnalysisBase):\n    pass\n# Properties to return via API\nclass Analysis(AnalysisBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisInDB(AnalysisBaseInDB):\n    pass\nclass AnalysisCodingBase(BaseAuditModel):\n    \"\"\"SampleTypeMapping\"\"\"",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "Analysis",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class Analysis(AnalysisBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisInDB(AnalysisBaseInDB):\n    pass\nclass AnalysisCodingBase(BaseAuditModel):\n    \"\"\"SampleTypeMapping\"\"\"\n    analysis_uid: str | None = None\n    analysis: Analysis | None = None\n    coding_standard_uid: str | None = None",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisInDB(AnalysisBaseInDB):\n    pass\nclass AnalysisCodingBase(BaseAuditModel):\n    \"\"\"SampleTypeMapping\"\"\"\n    analysis_uid: str | None = None\n    analysis: Analysis | None = None\n    coding_standard_uid: str | None = None\n    coding_standard: CodingStandard | None = None\n    code: str | None\n    name: str | None",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCodingBase",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisCodingBase(BaseAuditModel):\n    \"\"\"SampleTypeMapping\"\"\"\n    analysis_uid: str | None = None\n    analysis: Analysis | None = None\n    coding_standard_uid: str | None = None\n    coding_standard: CodingStandard | None = None\n    code: str | None\n    name: str | None\n    description: str | None\nclass AnalysisCodingBaseInDB(AnalysisCodingBase):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCodingBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisCodingBaseInDB(AnalysisCodingBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisCodingCreate(AnalysisCodingBase):\n    analysis_uid: str\n    coding_standard_uid: str\n# Properties to receive via API on update\nclass AnalysisCodingUpdate(AnalysisCodingBase):\n    pass",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCodingCreate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisCodingCreate(AnalysisCodingBase):\n    analysis_uid: str\n    coding_standard_uid: str\n# Properties to receive via API on update\nclass AnalysisCodingUpdate(AnalysisCodingBase):\n    pass\n# Properties to return via API\nclass AnalysisCoding(AnalysisCodingBaseInDB):\n    pass\n# Properties stored in DB",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCodingUpdate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisCodingUpdate(AnalysisCodingBase):\n    pass\n# Properties to return via API\nclass AnalysisCoding(AnalysisCodingBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisCodingInDB(AnalysisCodingBaseInDB):\n    pass\n#\n# AnalysisInterim Schemas",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCoding",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisCoding(AnalysisCodingBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisCodingInDB(AnalysisCodingBaseInDB):\n    pass\n#\n# AnalysisInterim Schemas\n#\n# Shared properties\nclass AnalysisInterimBase(BaseAuditModel):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCodingInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisCodingInDB(AnalysisCodingBaseInDB):\n    pass\n#\n# AnalysisInterim Schemas\n#\n# Shared properties\nclass AnalysisInterimBase(BaseAuditModel):\n    key: int\n    value: str\n    analysis_uid: str",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisInterimBase",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisInterimBase(BaseAuditModel):\n    key: int\n    value: str\n    analysis_uid: str\n    instrument_uid: str\nclass AnalysisInterimInDB(AnalysisInterimBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisInterimCreate(AnalysisInterimBase):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisInterimInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisInterimInDB(AnalysisInterimBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisInterimCreate(AnalysisInterimBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisInterimUpdate(AnalysisInterimBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisInterimCreate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisInterimCreate(AnalysisInterimBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisInterimUpdate(AnalysisInterimBase):\n    pass\n# Properties to return via API\nclass AnalysisInterim(AnalysisInterimInDB):\n    pass\n# Properties stored in DB\nclass AnalysisInterimInDB(AnalysisInterimInDB):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisInterimUpdate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisInterimUpdate(AnalysisInterimBase):\n    pass\n# Properties to return via API\nclass AnalysisInterim(AnalysisInterimInDB):\n    pass\n# Properties stored in DB\nclass AnalysisInterimInDB(AnalysisInterimInDB):\n    pass\n#\n# AnalysisCorrectionFactor Schemas",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisInterim",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisInterim(AnalysisInterimInDB):\n    pass\n# Properties stored in DB\nclass AnalysisInterimInDB(AnalysisInterimInDB):\n    pass\n#\n# AnalysisCorrectionFactor Schemas\n#\n# Shared properties\nclass AnalysisCorrectionFactorBase(BaseAuditModel):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisInterimInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisInterimInDB(AnalysisInterimInDB):\n    pass\n#\n# AnalysisCorrectionFactor Schemas\n#\n# Shared properties\nclass AnalysisCorrectionFactorBase(BaseAuditModel):\n    factor: float\n    analysis_uid: str\n    instrument_uid: str",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactorBase",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisCorrectionFactorBase(BaseAuditModel):\n    factor: float\n    analysis_uid: str\n    instrument_uid: str\n    method_uid: str\nclass AnalysisCorrectionFactorBaseInDB(AnalysisCorrectionFactorBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisCorrectionFactorCreate(AnalysisCorrectionFactorBase):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactorBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisCorrectionFactorBaseInDB(AnalysisCorrectionFactorBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisCorrectionFactorCreate(AnalysisCorrectionFactorBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisCorrectionFactorUpdate(AnalysisCorrectionFactorBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactorCreate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisCorrectionFactorCreate(AnalysisCorrectionFactorBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisCorrectionFactorUpdate(AnalysisCorrectionFactorBase):\n    pass\n# Properties to return via API\nclass AnalysisCorrectionFactor(AnalysisCorrectionFactorBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisCorrectionFactorInDB(AnalysisCorrectionFactorBaseInDB):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactorUpdate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisCorrectionFactorUpdate(AnalysisCorrectionFactorBase):\n    pass\n# Properties to return via API\nclass AnalysisCorrectionFactor(AnalysisCorrectionFactorBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisCorrectionFactorInDB(AnalysisCorrectionFactorBaseInDB):\n    pass\n#\n# AnalysisDetectionLimit Schemas",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactor",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisCorrectionFactor(AnalysisCorrectionFactorBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisCorrectionFactorInDB(AnalysisCorrectionFactorBaseInDB):\n    pass\n#\n# AnalysisDetectionLimit Schemas\n#\n# Shared properties\nclass AnalysisDetectionLimitBase(BaseAuditModel):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactorInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisCorrectionFactorInDB(AnalysisCorrectionFactorBaseInDB):\n    pass\n#\n# AnalysisDetectionLimit Schemas\n#\n# Shared properties\nclass AnalysisDetectionLimitBase(BaseAuditModel):\n    lower_limit: int\n    upper_limit: int\n    analysis_uid: str",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimitBase",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisDetectionLimitBase(BaseAuditModel):\n    lower_limit: int\n    upper_limit: int\n    analysis_uid: str\n    instrument_uid: str\n    method_uid: str\nclass AnalysisDetectionLimitBaseInDB(AnalysisDetectionLimitBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimitBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisDetectionLimitBaseInDB(AnalysisDetectionLimitBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisDetectionLimitCreate(AnalysisDetectionLimitBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisDetectionLimitUpdate(AnalysisDetectionLimitBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimitCreate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisDetectionLimitCreate(AnalysisDetectionLimitBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisDetectionLimitUpdate(AnalysisDetectionLimitBase):\n    pass\n# Properties to return via API\nclass AnalysisDetectionLimit(AnalysisDetectionLimitBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisDetectionLimitInDB(AnalysisDetectionLimitBaseInDB):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimitUpdate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisDetectionLimitUpdate(AnalysisDetectionLimitBase):\n    pass\n# Properties to return via API\nclass AnalysisDetectionLimit(AnalysisDetectionLimitBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisDetectionLimitInDB(AnalysisDetectionLimitBaseInDB):\n    pass\n#\n# AnalysisUncertainty Schemas",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimit",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisDetectionLimit(AnalysisDetectionLimitBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisDetectionLimitInDB(AnalysisDetectionLimitBaseInDB):\n    pass\n#\n# AnalysisUncertainty Schemas\n#\n# Shared properties\nclass AnalysisUncertaintyBase(BaseAuditModel):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimitInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisDetectionLimitInDB(AnalysisDetectionLimitBaseInDB):\n    pass\n#\n# AnalysisUncertainty Schemas\n#\n# Shared properties\nclass AnalysisUncertaintyBase(BaseAuditModel):\n    min: float\n    max: float\n    value: float",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertaintyBase",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisUncertaintyBase(BaseAuditModel):\n    min: float\n    max: float\n    value: float\n    analysis_uid: str\n    instrument_uid: str\n    method_uid: str\nclass AnalysisUncertaintyBaseInDB(AnalysisUncertaintyBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertaintyBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisUncertaintyBaseInDB(AnalysisUncertaintyBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisUncertaintyCreate(AnalysisUncertaintyBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisUncertaintyUpdate(AnalysisUncertaintyBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertaintyCreate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisUncertaintyCreate(AnalysisUncertaintyBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisUncertaintyUpdate(AnalysisUncertaintyBase):\n    pass\n# Properties to return via API\nclass AnalysisUncertainty(AnalysisUncertaintyBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisUncertaintyInDB(AnalysisUncertaintyBaseInDB):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertaintyUpdate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisUncertaintyUpdate(AnalysisUncertaintyBase):\n    pass\n# Properties to return via API\nclass AnalysisUncertainty(AnalysisUncertaintyBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisUncertaintyInDB(AnalysisUncertaintyBaseInDB):\n    pass\n#\n# AnalysisSpecification Schemas",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertainty",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisUncertainty(AnalysisUncertaintyBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisUncertaintyInDB(AnalysisUncertaintyBaseInDB):\n    pass\n#\n# AnalysisSpecification Schemas\n#\n# Shared properties\nclass AnalysisSpecificationBase(BaseAuditModel):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertaintyInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisUncertaintyInDB(AnalysisUncertaintyBaseInDB):\n    pass\n#\n# AnalysisSpecification Schemas\n#\n# Shared properties\nclass AnalysisSpecificationBase(BaseAuditModel):\n    analysis_uid: str\n    min: float | None = None\n    max: float | None = None",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecificationBase",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisSpecificationBase(BaseAuditModel):\n    analysis_uid: str\n    min: float | None = None\n    max: float | None = None\n    min_warn: float | None = None\n    max_warn: float | None = None\n    min_report: str | None = None\n    max_report: str | None = None\n    warn_values: str | None = None\n    warn_report: str | None = None",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecificationBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisSpecificationBaseInDB(AnalysisSpecificationBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisSpecificationCreate(AnalysisSpecificationBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisSpecificationUpdate(AnalysisSpecificationBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecificationCreate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisSpecificationCreate(AnalysisSpecificationBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisSpecificationUpdate(AnalysisSpecificationBase):\n    pass\n# Properties to return via API\nclass AnalysisSpecification(AnalysisSpecificationBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisSpecificationInDB(AnalysisSpecificationBaseInDB):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecificationUpdate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisSpecificationUpdate(AnalysisSpecificationBase):\n    pass\n# Properties to return via API\nclass AnalysisSpecification(AnalysisSpecificationBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisSpecificationInDB(AnalysisSpecificationBaseInDB):\n    pass\n#\n# Result Option Schemas",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecification",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisSpecification(AnalysisSpecificationBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisSpecificationInDB(AnalysisSpecificationBaseInDB):\n    pass\n#\n# Result Option Schemas\n#\n# Shared properties\nclass ResultOptionBase(BaseAuditModel):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecificationInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisSpecificationInDB(AnalysisSpecificationBaseInDB):\n    pass\n#\n# Result Option Schemas\n#\n# Shared properties\nclass ResultOptionBase(BaseAuditModel):\n    option_key: int | None = None\n    value: str | None = None\n    analysis_uid: str | None = None",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ResultOptionBase",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class ResultOptionBase(BaseAuditModel):\n    option_key: int | None = None\n    value: str | None = None\n    analysis_uid: str | None = None\nclass ResultOptionBaseInDB(ResultOptionBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ResultOptionCreate(ResultOptionBase):\n    pass",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ResultOptionBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class ResultOptionBaseInDB(ResultOptionBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ResultOptionCreate(ResultOptionBase):\n    pass\n# Properties to receive via API on update\nclass ResultOptionUpdate(ResultOptionBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ResultOptionCreate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class ResultOptionCreate(ResultOptionBase):\n    pass\n# Properties to receive via API on update\nclass ResultOptionUpdate(ResultOptionBase):\n    pass\n# Properties to return via API\nclass ResultOption(ResultOptionBaseInDB):\n    pass\n# Properties stored in DB\nclass ResultOptionInDB(ResultOptionBaseInDB):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ResultOptionUpdate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class ResultOptionUpdate(ResultOptionBase):\n    pass\n# Properties to return via API\nclass ResultOption(ResultOptionBaseInDB):\n    pass\n# Properties stored in DB\nclass ResultOptionInDB(ResultOptionBaseInDB):\n    pass\n#\n# AnalysisRequest Schemas",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ResultOption",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class ResultOption(ResultOptionBaseInDB):\n    pass\n# Properties stored in DB\nclass ResultOptionInDB(ResultOptionBaseInDB):\n    pass\n#\n# AnalysisRequest Schemas\n#\n# Shared properties\nclass AnalysisRequestBase(BaseAuditModel):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ResultOptionInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class ResultOptionInDB(ResultOptionBaseInDB):\n    pass\n#\n# AnalysisRequest Schemas\n#\n# Shared properties\nclass AnalysisRequestBase(BaseAuditModel):\n    patient_uid: str | None = None\n    client_uid: str | None = None\n    request_id: str | None = None",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestBase",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisRequestBase(BaseAuditModel):\n    patient_uid: str | None = None\n    client_uid: str | None = None\n    request_id: str | None = None\n    client_request_id: str | None = None\n    internal_use: bool | None = False\nclass AnalysisRequestBaseInDB(AnalysisRequestBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisRequestBaseInDB(AnalysisRequestBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisRequestCreate(AnalysisRequestBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisRequestUpdate(AnalysisRequestBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestCreate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisRequestCreate(AnalysisRequestBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisRequestUpdate(AnalysisRequestBase):\n    pass\n# Properties to return via API\nclass AnalysisRequest(AnalysisRequestBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisRequestInDB(AnalysisRequestBaseInDB):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestUpdate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisRequestUpdate(AnalysisRequestBase):\n    pass\n# Properties to return via API\nclass AnalysisRequest(AnalysisRequestBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisRequestInDB(AnalysisRequestBaseInDB):\n    pass\n#\n# Sample Schemas",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisRequest",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisRequest(AnalysisRequestBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisRequestInDB(AnalysisRequestBaseInDB):\n    pass\n#\n# Sample Schemas\n#\n# Shared properties\nclass SampleBase(BaseAuditModel):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisRequestInDB(AnalysisRequestBaseInDB):\n    pass\n#\n# Sample Schemas\n#\n# Shared properties\nclass SampleBase(BaseAuditModel):\n    analysis_request_uid: str | None = None\n    sample_type_uid: str | None = None\n    profiles: Optional[List[Profile]] = []",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleBase",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class SampleBase(BaseAuditModel):\n    analysis_request_uid: str | None = None\n    sample_type_uid: str | None = None\n    profiles: Optional[List[Profile]] = []\n    analyses: Optional[List[Analysis]] = []\n    sample_id: str | None = None\n    priority: int | None = 0\n    invalidated_by_uid: str | None = None\n    date_invalidated: datetime | None = None\n    internal_use: bool | None = False",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class SampleBaseInDB(SampleBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass SampleCreate(SampleBase):\n    pass\n# Properties to receive via API on update\nclass SampleUpdate(SampleBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleCreate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class SampleCreate(SampleBase):\n    pass\n# Properties to receive via API on update\nclass SampleUpdate(SampleBase):\n    pass\n# Properties to return via API\nclass Sample(SampleBaseInDB):\n    pass\n# Properties stored in DB\nclass SampleInDB(SampleBaseInDB):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleUpdate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class SampleUpdate(SampleBase):\n    pass\n# Properties to return via API\nclass Sample(SampleBaseInDB):\n    pass\n# Properties stored in DB\nclass SampleInDB(SampleBaseInDB):\n    pass\n#\n# Rejection Reason Schemas",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "Sample",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class Sample(SampleBaseInDB):\n    pass\n# Properties stored in DB\nclass SampleInDB(SampleBaseInDB):\n    pass\n#\n# Rejection Reason Schemas\n#\n# Shared properties\nclass RejectionReasonBase(BaseAuditModel):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class SampleInDB(SampleBaseInDB):\n    pass\n#\n# Rejection Reason Schemas\n#\n# Shared properties\nclass RejectionReasonBase(BaseAuditModel):\n    reason: str | None = None\nclass RejectionReasonBaseInDB(RejectionReasonBase):\n    uid: str | None = None",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "RejectionReasonBase",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class RejectionReasonBase(BaseAuditModel):\n    reason: str | None = None\nclass RejectionReasonBaseInDB(RejectionReasonBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass RejectionReasonCreate(RejectionReasonBase):\n    pass\n# Properties to receive via API on update\nclass RejectionReasonUpdate(RejectionReasonBase):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "RejectionReasonBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class RejectionReasonBaseInDB(RejectionReasonBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass RejectionReasonCreate(RejectionReasonBase):\n    pass\n# Properties to receive via API on update\nclass RejectionReasonUpdate(RejectionReasonBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "RejectionReasonCreate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class RejectionReasonCreate(RejectionReasonBase):\n    pass\n# Properties to receive via API on update\nclass RejectionReasonUpdate(RejectionReasonBase):\n    pass\n# Properties to return via API\nclass RejectionReason(RejectionReasonBaseInDB):\n    pass\n# Properties stored in DB\nclass RejectionReasonInDB(RejectionReasonBaseInDB):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "RejectionReasonUpdate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class RejectionReasonUpdate(RejectionReasonBase):\n    pass\n# Properties to return via API\nclass RejectionReason(RejectionReasonBaseInDB):\n    pass\n# Properties stored in DB\nclass RejectionReasonInDB(RejectionReasonBaseInDB):\n    pass\n#\n# AnalysisResultBase Schemas",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "RejectionReason",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class RejectionReason(RejectionReasonBaseInDB):\n    pass\n# Properties stored in DB\nclass RejectionReasonInDB(RejectionReasonBaseInDB):\n    pass\n#\n# AnalysisResultBase Schemas\n#\n# Shared properties\nclass AnalysisResultBase(BaseAuditModel):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "RejectionReasonInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class RejectionReasonInDB(RejectionReasonBaseInDB):\n    pass\n#\n# AnalysisResultBase Schemas\n#\n# Shared properties\nclass AnalysisResultBase(BaseAuditModel):\n    analysis_uid: str | None = None\n    parent_id: str | None = None\n    sample_uid: str | None = None",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultBase",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisResultBase(BaseAuditModel):\n    analysis_uid: str | None = None\n    parent_id: str | None = None\n    sample_uid: str | None = None\n    instrument_uid: str | None = None\n    method_uid: str | None = None\n    result: str | None = None\n    analyst_uid: str | None = None\n    submitted_by_uid: str | None = None\n    date_submitted: datetime | None = None",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisResultBaseInDB(AnalysisResultBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisResultCreate(AnalysisResultBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisResultUpdate(AnalysisResultBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultCreate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisResultCreate(AnalysisResultBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisResultUpdate(AnalysisResultBase):\n    pass\n# Properties to return via API\nclass AnalysisResult(AnalysisResultBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisResultInDB(AnalysisResultBaseInDB):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultUpdate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisResultUpdate(AnalysisResultBase):\n    pass\n# Properties to return via API\nclass AnalysisResult(AnalysisResultBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisResultInDB(AnalysisResultBaseInDB):\n    pass\n#\n# QCSet Schemas",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisResult(AnalysisResultBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisResultInDB(AnalysisResultBaseInDB):\n    pass\n#\n# QCSet Schemas\n#\n# Shared properties\nclass QCSetBase(BaseAuditModel):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class AnalysisResultInDB(AnalysisResultBaseInDB):\n    pass\n#\n# QCSet Schemas\n#\n# Shared properties\nclass QCSetBase(BaseAuditModel):\n    name: str | None = None\n    note: str | None = None\nclass QCSetBaseInDB(QCSetBase):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCSetBase",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class QCSetBase(BaseAuditModel):\n    name: str | None = None\n    note: str | None = None\nclass QCSetBaseInDB(QCSetBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass QCSetCreate(QCSetBase):\n    pass\n# Properties to receive via API on update",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCSetBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class QCSetBaseInDB(QCSetBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass QCSetCreate(QCSetBase):\n    pass\n# Properties to receive via API on update\nclass QCSetUpdate(QCSetBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCSetCreate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class QCSetCreate(QCSetBase):\n    pass\n# Properties to receive via API on update\nclass QCSetUpdate(QCSetBase):\n    pass\n# Properties to return via API\nclass QCSet(QCSetBaseInDB):\n    pass\n# Properties stored in DB\nclass QCSetInDB(QCSetBaseInDB):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCSetUpdate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class QCSetUpdate(QCSetBase):\n    pass\n# Properties to return via API\nclass QCSet(QCSetBaseInDB):\n    pass\n# Properties stored in DB\nclass QCSetInDB(QCSetBaseInDB):\n    pass\n#\n# QCLevel Schemas",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCSet",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class QCSet(QCSetBaseInDB):\n    pass\n# Properties stored in DB\nclass QCSetInDB(QCSetBaseInDB):\n    pass\n#\n# QCLevel Schemas\n#\n# Shared properties\nclass QCLevelBase(BaseAuditModel):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCSetInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class QCSetInDB(QCSetBaseInDB):\n    pass\n#\n# QCLevel Schemas\n#\n# Shared properties\nclass QCLevelBase(BaseAuditModel):\n    level: str | None = None\nclass QCLevelBaseInDB(QCLevelBase):\n    uid: str | None = None",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCLevelBase",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class QCLevelBase(BaseAuditModel):\n    level: str | None = None\nclass QCLevelBaseInDB(QCLevelBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass QCLevelCreate(QCLevelBase):\n    pass\n# Properties to receive via API on update\nclass QCLevelUpdate(QCLevelBase):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCLevelBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class QCLevelBaseInDB(QCLevelBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass QCLevelCreate(QCLevelBase):\n    pass\n# Properties to receive via API on update\nclass QCLevelUpdate(QCLevelBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCLevelCreate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class QCLevelCreate(QCLevelBase):\n    pass\n# Properties to receive via API on update\nclass QCLevelUpdate(QCLevelBase):\n    pass\n# Properties to return via API\nclass QCLevel(QCLevelBaseInDB):\n    pass\n# Properties stored in DB\nclass QCLevelInDB(QCLevelBaseInDB):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCLevelUpdate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class QCLevelUpdate(QCLevelBase):\n    pass\n# Properties to return via API\nclass QCLevel(QCLevelBaseInDB):\n    pass\n# Properties stored in DB\nclass QCLevelInDB(QCLevelBaseInDB):\n    pass\n#\n# QCTemplate Schemas",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCLevel",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class QCLevel(QCLevelBaseInDB):\n    pass\n# Properties stored in DB\nclass QCLevelInDB(QCLevelBaseInDB):\n    pass\n#\n# QCTemplate Schemas\n#\n# Shared properties\nclass QCTemplateBase(BaseAuditModel):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCLevelInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class QCLevelInDB(QCLevelBaseInDB):\n    pass\n#\n# QCTemplate Schemas\n#\n# Shared properties\nclass QCTemplateBase(BaseAuditModel):\n    name: str | None = None\n    description: str | None = None\n    departments: Optional[List[Department]] = []",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCTemplateBase",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class QCTemplateBase(BaseAuditModel):\n    name: str | None = None\n    description: str | None = None\n    departments: Optional[List[Department]] = []\n    qc_levels: Optional[List[QCLevel]] = []\nclass QCTemplateBaseInDB(QCTemplateBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass QCTemplateCreate(QCTemplateBase):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCTemplateBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class QCTemplateBaseInDB(QCTemplateBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass QCTemplateCreate(QCTemplateBase):\n    pass\n# Properties to receive via API on update\nclass QCTemplateUpdate(QCTemplateBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCTemplateCreate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class QCTemplateCreate(QCTemplateBase):\n    pass\n# Properties to receive via API on update\nclass QCTemplateUpdate(QCTemplateBase):\n    pass\n# Properties to return via API\nclass QCTemplate(QCTemplateBaseInDB):\n    pass\n# Properties stored in DB\nclass QCTemplateInDB(QCTemplateBaseInDB):",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCTemplateUpdate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class QCTemplateUpdate(QCTemplateBase):\n    pass\n# Properties to return via API\nclass QCTemplate(QCTemplateBaseInDB):\n    pass\n# Properties stored in DB\nclass QCTemplateInDB(QCTemplateBaseInDB):\n    pass",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCTemplate",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class QCTemplate(QCTemplateBaseInDB):\n    pass\n# Properties stored in DB\nclass QCTemplateInDB(QCTemplateBaseInDB):\n    pass",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCTemplateInDB",
        "kind": 6,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "class QCTemplateInDB(QCTemplateBaseInDB):\n    pass",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "model_config",
        "kind": 5,
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "peekOfCode": "model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass SampleTypeCodingCreate(SampleTypeCodingBase):\n    pass\n# Properties to receive via API on update\nclass SampleTypeCodingUpdate(SampleTypeCodingBase):\n    pass\n# Properties to return via API\nclass SampleTypeCoding(SampleTypeCodingBaseInDB):\n    pass",
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "report_notifier",
        "kind": 5,
        "importPath": "felicity.apps.analysis.tasks",
        "description": "felicity.apps.analysis.tasks",
        "peekOfCode": "report_notifier = ReportNotifier()\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\nasync def submit_results(job_uid: str) -> NoReturn:\n    logger.info(f\"starting job result submit {job_uid} ....\")\n    job = await job_models.Job.get(uid=job_uid)\n    if not job:\n        return\n    if not job.status == job_states.PENDING:\n        return",
        "detail": "felicity.apps.analysis.tasks",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.analysis.tasks",
        "description": "felicity.apps.analysis.tasks",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def submit_results(job_uid: str) -> NoReturn:\n    logger.info(f\"starting job result submit {job_uid} ....\")\n    job = await job_models.Job.get(uid=job_uid)\n    if not job:\n        return\n    if not job.status == job_states.PENDING:\n        return\n    await job.change_status(new_status=job_states.RUNNING)\n    user = await user_models.User.get(uid=job.creator_uid)",
        "detail": "felicity.apps.analysis.tasks",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.analysis.utils",
        "description": "felicity.apps.analysis.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\nstreamer = FelicityStreamer()\nasync def get_qc_sample_type() -> SampleType:\n    st = await SampleType.get(name=QC_SAMPLE.get(\"name\"))\n    if not st:\n        st_in = schemas.SampleTypeCreate(**QC_SAMPLE)\n        st = await SampleType.create(st_in)\n    return st\nasync def get_last_verificator(result_uid: str) -> User | None:\n    data = await AnalysisResult.query_table(",
        "detail": "felicity.apps.analysis.utils",
        "documentation": {}
    },
    {
        "label": "streamer",
        "kind": 5,
        "importPath": "felicity.apps.analysis.utils",
        "description": "felicity.apps.analysis.utils",
        "peekOfCode": "streamer = FelicityStreamer()\nasync def get_qc_sample_type() -> SampleType:\n    st = await SampleType.get(name=QC_SAMPLE.get(\"name\"))\n    if not st:\n        st_in = schemas.SampleTypeCreate(**QC_SAMPLE)\n        st = await SampleType.create(st_in)\n    return st\nasync def get_last_verificator(result_uid: str) -> User | None:\n    data = await AnalysisResult.query_table(\n        table=result_verification, result_uid=result_uid",
        "detail": "felicity.apps.analysis.utils",
        "documentation": {}
    },
    {
        "label": "SampleAnalyticsInit",
        "kind": 6,
        "importPath": "felicity.apps.analytics.sources.sample",
        "description": "felicity.apps.analytics.sources.sample",
        "peekOfCode": "class SampleAnalyticsInit(Generic[ModelType]):\n    def __init__(self, model: Type[ModelType]):\n        self.model = model\n        self.table = model.__tablename__\n        self.alias = model.__tablename__ + \"_tbl\"\n    async def get_line_listing(\n            self,\n            period_start: str,\n            period_end: str,\n            sample_states: list[str],",
        "detail": "felicity.apps.analytics.sources.sample",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.analytics.sources.sample",
        "description": "felicity.apps.analytics.sources.sample",
        "peekOfCode": "logger = logging.getLogger(__name__)\nModelType = TypeVar(\"ModelType\", bound=BaseEntity)\nclass SampleAnalyticsInit(Generic[ModelType]):\n    def __init__(self, model: Type[ModelType]):\n        self.model = model\n        self.table = model.__tablename__\n        self.alias = model.__tablename__ + \"_tbl\"\n    async def get_line_listing(\n            self,\n            period_start: str,",
        "detail": "felicity.apps.analytics.sources.sample",
        "documentation": {}
    },
    {
        "label": "ModelType",
        "kind": 5,
        "importPath": "felicity.apps.analytics.sources.sample",
        "description": "felicity.apps.analytics.sources.sample",
        "peekOfCode": "ModelType = TypeVar(\"ModelType\", bound=BaseEntity)\nclass SampleAnalyticsInit(Generic[ModelType]):\n    def __init__(self, model: Type[ModelType]):\n        self.model = model\n        self.table = model.__tablename__\n        self.alias = model.__tablename__ + \"_tbl\"\n    async def get_line_listing(\n            self,\n            period_start: str,\n            period_end: str,",
        "detail": "felicity.apps.analytics.sources.sample",
        "documentation": {}
    },
    {
        "label": "Types",
        "kind": 6,
        "importPath": "felicity.apps.analytics.conf",
        "description": "felicity.apps.analytics.conf",
        "peekOfCode": "class Types:\n    LINE_LISTING = \"LINE_LISTING\"\nclass States:\n    PENDING = \"PENDING\"\n    FAILED = \"FAILED\"\n    READY = \"READY\"\nreport_types = Types()\nreport_states = States()",
        "detail": "felicity.apps.analytics.conf",
        "documentation": {}
    },
    {
        "label": "States",
        "kind": 6,
        "importPath": "felicity.apps.analytics.conf",
        "description": "felicity.apps.analytics.conf",
        "peekOfCode": "class States:\n    PENDING = \"PENDING\"\n    FAILED = \"FAILED\"\n    READY = \"READY\"\nreport_types = Types()\nreport_states = States()",
        "detail": "felicity.apps.analytics.conf",
        "documentation": {}
    },
    {
        "label": "report_types",
        "kind": 5,
        "importPath": "felicity.apps.analytics.conf",
        "description": "felicity.apps.analytics.conf",
        "peekOfCode": "report_types = Types()\nreport_states = States()",
        "detail": "felicity.apps.analytics.conf",
        "documentation": {}
    },
    {
        "label": "report_states",
        "kind": 5,
        "importPath": "felicity.apps.analytics.conf",
        "description": "felicity.apps.analytics.conf",
        "peekOfCode": "report_states = States()",
        "detail": "felicity.apps.analytics.conf",
        "documentation": {}
    },
    {
        "label": "ReportMeta",
        "kind": 6,
        "importPath": "felicity.apps.analytics.entities",
        "description": "felicity.apps.analytics.entities",
        "peekOfCode": "class ReportMeta(AuditUser):\n    \"\"\"Generated Reports Metadata\"\"\"\n    __tablename__ = \"report_meta\"\n    report_type = Column(String)\n    analyses = relationship(\"Analysis\", secondary=analysis_reports, lazy=\"selectin\")\n    period_start = Column(DateTime)\n    period_end = Column(DateTime)\n    date_column = Column(String)\n    location = Column(String, nullable=True)\n    temp = Column(String, nullable=True)",
        "detail": "felicity.apps.analytics.entities",
        "documentation": {}
    },
    {
        "label": "analysis_reports",
        "kind": 5,
        "importPath": "felicity.apps.analytics.entities",
        "description": "felicity.apps.analytics.entities",
        "peekOfCode": "analysis_reports = Table(\n    \"analysis_reports\",\n    AuditUser.metadata,\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n    Column(\"report_uid\", ForeignKey(\"report_meta.uid\"), primary_key=True),\n)\nclass ReportMeta(AuditUser):\n    \"\"\"Generated Reports Metadata\"\"\"\n    __tablename__ = \"report_meta\"\n    report_type = Column(String)",
        "detail": "felicity.apps.analytics.entities",
        "documentation": {}
    },
    {
        "label": "ReportMeta",
        "kind": 6,
        "importPath": "felicity.apps.analytics.models",
        "description": "felicity.apps.analytics.models",
        "peekOfCode": "class ReportMeta(AuditUser):\n    \"\"\"Generated Reports Metadata\"\"\"\n    __tablename__ = \"report_meta\"\n    report_type = Column(String)\n    analyses = relationship(\"Analysis\", secondary=analysis_reports, lazy=\"selectin\")\n    period_start = Column(DateTime)\n    period_end = Column(DateTime)\n    date_column = Column(String)\n    location = Column(String, nullable=True)\n    temp = Column(String, nullable=True)",
        "detail": "felicity.apps.analytics.models",
        "documentation": {}
    },
    {
        "label": "analysis_reports",
        "kind": 5,
        "importPath": "felicity.apps.analytics.models",
        "description": "felicity.apps.analytics.models",
        "peekOfCode": "analysis_reports = Table(\n    \"analysis_reports\",\n    AuditUser.metadata,\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n    Column(\"report_uid\", ForeignKey(\"report_meta.uid\"), primary_key=True),\n)\nclass ReportMeta(AuditUser):\n    \"\"\"Generated Reports Metadata\"\"\"\n    __tablename__ = \"report_meta\"\n    report_type = Column(String)",
        "detail": "felicity.apps.analytics.models",
        "documentation": {}
    },
    {
        "label": "ReportMetaRepository",
        "kind": 6,
        "importPath": "felicity.apps.analytics.repository",
        "description": "felicity.apps.analytics.repository",
        "peekOfCode": "class ReportMetaRepository(BaseRepository[ReportMeta], IReportMetaRepository):\n    def __init__(self) -> None:\n        self.model = ReportMeta\n        super().__init__()\nclass SampleAnalyticsRepository(BaseRepository[Sample], ISampleAnalyticsRepository):\n    def __init__(self):\n        self.model = Sample\n        self.table = Sample.__tablename__\n        self.alias = Sample.__tablename__ + \"_tbl\"\n    async def get_line_listing(",
        "detail": "felicity.apps.analytics.repository",
        "documentation": {}
    },
    {
        "label": "SampleAnalyticsRepository",
        "kind": 6,
        "importPath": "felicity.apps.analytics.repository",
        "description": "felicity.apps.analytics.repository",
        "peekOfCode": "class SampleAnalyticsRepository(BaseRepository[Sample], ISampleAnalyticsRepository):\n    def __init__(self):\n        self.model = Sample\n        self.table = Sample.__tablename__\n        self.alias = Sample.__tablename__ + \"_tbl\"\n    async def get_line_listing(\n        self,\n        period_start: str,\n        period_end: str,\n        sample_states: list[str],",
        "detail": "felicity.apps.analytics.repository",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.analytics.repository",
        "description": "felicity.apps.analytics.repository",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ReportMetaRepository(BaseRepository[ReportMeta], IReportMetaRepository):\n    def __init__(self) -> None:\n        self.model = ReportMeta\n        super().__init__()\nclass SampleAnalyticsRepository(BaseRepository[Sample], ISampleAnalyticsRepository):\n    def __init__(self):\n        self.model = Sample\n        self.table = Sample.__tablename__\n        self.alias = Sample.__tablename__ + \"_tbl\"",
        "detail": "felicity.apps.analytics.repository",
        "documentation": {}
    },
    {
        "label": "ReportMetaBase",
        "kind": 6,
        "importPath": "felicity.apps.analytics.schemas",
        "description": "felicity.apps.analytics.schemas",
        "peekOfCode": "class ReportMetaBase(BaseModel):\n    period_start: datetime\n    period_end: datetime\n    date_column: str\n    sample_states: str | None = None\n    report_type: str = conf.report_types.LINE_LISTING\n    status: str | None = conf.report_states.PENDING\n    analyses: list[AnalysisBasic] | None = None\n    created_at: datetime | None = None\n    created_by_uid: str | None = None",
        "detail": "felicity.apps.analytics.schemas",
        "documentation": {}
    },
    {
        "label": "ReportMeta",
        "kind": 6,
        "importPath": "felicity.apps.analytics.schemas",
        "description": "felicity.apps.analytics.schemas",
        "peekOfCode": "class ReportMeta(ReportMetaBase):\n    uid: str | None = None\n    location: str | None = None\nmodel_config = ConfigDict(from_attributes=True)\nclass ReportMetaCreate(ReportMetaBase):\n    temp: str\n    created_by_uid: str\n    updated_by_uid: str\nclass ReportMetaUpdate(ReportMetaBase):\n    pass",
        "detail": "felicity.apps.analytics.schemas",
        "documentation": {}
    },
    {
        "label": "ReportMetaCreate",
        "kind": 6,
        "importPath": "felicity.apps.analytics.schemas",
        "description": "felicity.apps.analytics.schemas",
        "peekOfCode": "class ReportMetaCreate(ReportMetaBase):\n    temp: str\n    created_by_uid: str\n    updated_by_uid: str\nclass ReportMetaUpdate(ReportMetaBase):\n    pass\nclass ReportMetaDeleted(BaseModel):\n    uid: str\n    message: str\nclass ReportRequest(BaseModel):",
        "detail": "felicity.apps.analytics.schemas",
        "documentation": {}
    },
    {
        "label": "ReportMetaUpdate",
        "kind": 6,
        "importPath": "felicity.apps.analytics.schemas",
        "description": "felicity.apps.analytics.schemas",
        "peekOfCode": "class ReportMetaUpdate(ReportMetaBase):\n    pass\nclass ReportMetaDeleted(BaseModel):\n    uid: str\n    message: str\nclass ReportRequest(BaseModel):\n    report_type: str\n    analyses_uids: list[str]\n    sample_states: list[str]\n    date_column: str",
        "detail": "felicity.apps.analytics.schemas",
        "documentation": {}
    },
    {
        "label": "ReportMetaDeleted",
        "kind": 6,
        "importPath": "felicity.apps.analytics.schemas",
        "description": "felicity.apps.analytics.schemas",
        "peekOfCode": "class ReportMetaDeleted(BaseModel):\n    uid: str\n    message: str\nclass ReportRequest(BaseModel):\n    report_type: str\n    analyses_uids: list[str]\n    sample_states: list[str]\n    date_column: str\n    period_start: datetime\n    period_end: datetime",
        "detail": "felicity.apps.analytics.schemas",
        "documentation": {}
    },
    {
        "label": "ReportRequest",
        "kind": 6,
        "importPath": "felicity.apps.analytics.schemas",
        "description": "felicity.apps.analytics.schemas",
        "peekOfCode": "class ReportRequest(BaseModel):\n    report_type: str\n    analyses_uids: list[str]\n    sample_states: list[str]\n    date_column: str\n    period_start: datetime\n    period_end: datetime",
        "detail": "felicity.apps.analytics.schemas",
        "documentation": {}
    },
    {
        "label": "model_config",
        "kind": 5,
        "importPath": "felicity.apps.analytics.schemas",
        "description": "felicity.apps.analytics.schemas",
        "peekOfCode": "model_config = ConfigDict(from_attributes=True)\nclass ReportMetaCreate(ReportMetaBase):\n    temp: str\n    created_by_uid: str\n    updated_by_uid: str\nclass ReportMetaUpdate(ReportMetaBase):\n    pass\nclass ReportMetaDeleted(BaseModel):\n    uid: str\n    message: str",
        "detail": "felicity.apps.analytics.schemas",
        "documentation": {}
    },
    {
        "label": "ReportMetaService",
        "kind": 6,
        "importPath": "felicity.apps.analytics.services",
        "description": "felicity.apps.analytics.services",
        "peekOfCode": "class ReportMetaService(BaseService[ReportMeta], IReportMetaService):\n    def __init__(\n        self,\n        repository: IReportMetaRepository,\n        sample_analytics_repository: ISampleAnalyticsRepository,\n        job_service: IJobService,\n        stream_service: IActivityStreamService,\n        notification_service: INotificationService,\n    ):\n        self.repository = repository",
        "detail": "felicity.apps.analytics.services",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.analytics.tasks",
        "description": "felicity.apps.analytics.tasks",
        "peekOfCode": "logger = logging.getLogger(__name__)\nreport_notifier = ReportNotifier()\nstreamer = FelicityStreamer()\nasync def generate_report(job_uid: str) -> bool:\n    job: job_models.Job = await job_models.Job.get(uid=job_uid)\n    report: models.ReportMeta = await models.ReportMeta.get(uid=job.job_id)\n    if report.status != conf.report_states.PENDING:\n        await job.change_status(new_status=job_conf.states.FAILED)\n        await report_notifier.notify(\n            f\"Failed to generate {report.report_type} report\", report.created_by",
        "detail": "felicity.apps.analytics.tasks",
        "documentation": {}
    },
    {
        "label": "report_notifier",
        "kind": 5,
        "importPath": "felicity.apps.analytics.tasks",
        "description": "felicity.apps.analytics.tasks",
        "peekOfCode": "report_notifier = ReportNotifier()\nstreamer = FelicityStreamer()\nasync def generate_report(job_uid: str) -> bool:\n    job: job_models.Job = await job_models.Job.get(uid=job_uid)\n    report: models.ReportMeta = await models.ReportMeta.get(uid=job.job_id)\n    if report.status != conf.report_states.PENDING:\n        await job.change_status(new_status=job_conf.states.FAILED)\n        await report_notifier.notify(\n            f\"Failed to generate {report.report_type} report\", report.created_by\n        )",
        "detail": "felicity.apps.analytics.tasks",
        "documentation": {}
    },
    {
        "label": "streamer",
        "kind": 5,
        "importPath": "felicity.apps.analytics.tasks",
        "description": "felicity.apps.analytics.tasks",
        "peekOfCode": "streamer = FelicityStreamer()\nasync def generate_report(job_uid: str) -> bool:\n    job: job_models.Job = await job_models.Job.get(uid=job_uid)\n    report: models.ReportMeta = await models.ReportMeta.get(uid=job.job_id)\n    if report.status != conf.report_states.PENDING:\n        await job.change_status(new_status=job_conf.states.FAILED)\n        await report_notifier.notify(\n            f\"Failed to generate {report.report_type} report\", report.created_by\n        )\n        return False",
        "detail": "felicity.apps.analytics.tasks",
        "documentation": {}
    },
    {
        "label": "AuditLog",
        "kind": 6,
        "importPath": "felicity.apps.auditlog.entities",
        "description": "felicity.apps.auditlog.entities",
        "peekOfCode": "class AuditLog(BaseEntity):\n    \"\"\"Model an audit log of user actions\"\"\"\n    __tablename__ = \"audit_log\"\n    user_id = Column(String, doc=\"The ID of the user who made the change\")\n    target_type = Column(\n        String(100), nullable=False, doc=\"The table name of the altered object\"\n    )\n    target_id = Column(String, doc=\"The ID of the altered object\")\n    action = Column(Integer, doc=\"Create (1), update (2), or delete (3)\")\n    state_before = Column(",
        "detail": "felicity.apps.auditlog.entities",
        "documentation": {}
    },
    {
        "label": "AuditHistoryMixin",
        "kind": 6,
        "importPath": "felicity.apps.auditlog.mixin",
        "description": "felicity.apps.auditlog.mixin",
        "peekOfCode": "class AuditHistoryMixin:\n    \"\"\"Allow a model to be automatically audited\"\"\"\n    @staticmethod\n    def create_audit(connection, object_type, object_id, action, **kwargs):\n        audit = AuditLog(\n            object_type,\n            object_id,\n            action,\n            kwargs.get(\"state_before\"),\n            kwargs.get(\"state_after\"),",
        "detail": "felicity.apps.auditlog.mixin",
        "documentation": {}
    },
    {
        "label": "custom_serial",
        "kind": 2,
        "importPath": "felicity.apps.auditlog.mixin",
        "description": "felicity.apps.auditlog.mixin",
        "peekOfCode": "def custom_serial(o):\n    if isinstance(o, (datetime.date, datetime.datetime)):\n        return o.isoformat()\n    raise TypeError(\"Type %s not serializable\" % type(o))\nclass AuditHistoryMixin:\n    \"\"\"Allow a model to be automatically audited\"\"\"\n    @staticmethod\n    def create_audit(connection, object_type, object_id, action, **kwargs):\n        audit = AuditLog(\n            object_type,",
        "detail": "felicity.apps.auditlog.mixin",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.auditlog.mixin",
        "description": "felicity.apps.auditlog.mixin",
        "peekOfCode": "logger = logging.getLogger(__name__)\nACTION_CREATE = 1\nACTION_UPDATE = 2\nACTION_DELETE = 3\n# Only audit the events in this list\nPLEASE_AUDIT = [ACTION_UPDATE]\ndef custom_serial(o):\n    if isinstance(o, (datetime.date, datetime.datetime)):\n        return o.isoformat()\n    raise TypeError(\"Type %s not serializable\" % type(o))",
        "detail": "felicity.apps.auditlog.mixin",
        "documentation": {}
    },
    {
        "label": "ACTION_CREATE",
        "kind": 5,
        "importPath": "felicity.apps.auditlog.mixin",
        "description": "felicity.apps.auditlog.mixin",
        "peekOfCode": "ACTION_CREATE = 1\nACTION_UPDATE = 2\nACTION_DELETE = 3\n# Only audit the events in this list\nPLEASE_AUDIT = [ACTION_UPDATE]\ndef custom_serial(o):\n    if isinstance(o, (datetime.date, datetime.datetime)):\n        return o.isoformat()\n    raise TypeError(\"Type %s not serializable\" % type(o))\nclass AuditHistoryMixin:",
        "detail": "felicity.apps.auditlog.mixin",
        "documentation": {}
    },
    {
        "label": "ACTION_UPDATE",
        "kind": 5,
        "importPath": "felicity.apps.auditlog.mixin",
        "description": "felicity.apps.auditlog.mixin",
        "peekOfCode": "ACTION_UPDATE = 2\nACTION_DELETE = 3\n# Only audit the events in this list\nPLEASE_AUDIT = [ACTION_UPDATE]\ndef custom_serial(o):\n    if isinstance(o, (datetime.date, datetime.datetime)):\n        return o.isoformat()\n    raise TypeError(\"Type %s not serializable\" % type(o))\nclass AuditHistoryMixin:\n    \"\"\"Allow a model to be automatically audited\"\"\"",
        "detail": "felicity.apps.auditlog.mixin",
        "documentation": {}
    },
    {
        "label": "ACTION_DELETE",
        "kind": 5,
        "importPath": "felicity.apps.auditlog.mixin",
        "description": "felicity.apps.auditlog.mixin",
        "peekOfCode": "ACTION_DELETE = 3\n# Only audit the events in this list\nPLEASE_AUDIT = [ACTION_UPDATE]\ndef custom_serial(o):\n    if isinstance(o, (datetime.date, datetime.datetime)):\n        return o.isoformat()\n    raise TypeError(\"Type %s not serializable\" % type(o))\nclass AuditHistoryMixin:\n    \"\"\"Allow a model to be automatically audited\"\"\"\n    @staticmethod",
        "detail": "felicity.apps.auditlog.mixin",
        "documentation": {}
    },
    {
        "label": "PLEASE_AUDIT",
        "kind": 5,
        "importPath": "felicity.apps.auditlog.mixin",
        "description": "felicity.apps.auditlog.mixin",
        "peekOfCode": "PLEASE_AUDIT = [ACTION_UPDATE]\ndef custom_serial(o):\n    if isinstance(o, (datetime.date, datetime.datetime)):\n        return o.isoformat()\n    raise TypeError(\"Type %s not serializable\" % type(o))\nclass AuditHistoryMixin:\n    \"\"\"Allow a model to be automatically audited\"\"\"\n    @staticmethod\n    def create_audit(connection, object_type, object_id, action, **kwargs):\n        audit = AuditLog(",
        "detail": "felicity.apps.auditlog.mixin",
        "documentation": {}
    },
    {
        "label": "AuditLogRepository",
        "kind": 6,
        "importPath": "felicity.apps.auditlog.repositories",
        "description": "felicity.apps.auditlog.repositories",
        "peekOfCode": "class AuditLogRepository(BaseRepository[AuditLog]):\n    def __init__(self) -> None:\n        super().__init__(AuditLog)",
        "detail": "felicity.apps.auditlog.repositories",
        "documentation": {}
    },
    {
        "label": "AuditLogService",
        "kind": 6,
        "importPath": "felicity.apps.auditlog.services",
        "description": "felicity.apps.auditlog.services",
        "peekOfCode": "class AuditLogService(BaseService[AuditLog]):\n    def __init__(self) -> None:\n        super().__init__(AuditLogRepository)",
        "detail": "felicity.apps.auditlog.services",
        "documentation": {}
    },
    {
        "label": "DiscountType",
        "kind": 6,
        "importPath": "felicity.apps.billing.config",
        "description": "felicity.apps.billing.config",
        "peekOfCode": "class DiscountType:\n    SALE = \"sale\"\n    VOUCHER = \"voucher\"\nclass DiscountValueType:\n    PERCENTATE = \"percentage\"\n    AMOUNT = \"amount\"\nclass TransactionKind:\n    CASH = \"cash\"\n    MEDICAL_AID = \"medical-aid\"\n    E_PAYMENT = \"e-payment\"",
        "detail": "felicity.apps.billing.config",
        "documentation": {}
    },
    {
        "label": "DiscountValueType",
        "kind": 6,
        "importPath": "felicity.apps.billing.config",
        "description": "felicity.apps.billing.config",
        "peekOfCode": "class DiscountValueType:\n    PERCENTATE = \"percentage\"\n    AMOUNT = \"amount\"\nclass TransactionKind:\n    CASH = \"cash\"\n    MEDICAL_AID = \"medical-aid\"\n    E_PAYMENT = \"e-payment\"\n    AUTO_DISCOUNT = \"auto-discount\"",
        "detail": "felicity.apps.billing.config",
        "documentation": {}
    },
    {
        "label": "TransactionKind",
        "kind": 6,
        "importPath": "felicity.apps.billing.config",
        "description": "felicity.apps.billing.config",
        "peekOfCode": "class TransactionKind:\n    CASH = \"cash\"\n    MEDICAL_AID = \"medical-aid\"\n    E_PAYMENT = \"e-payment\"\n    AUTO_DISCOUNT = \"auto-discount\"",
        "detail": "felicity.apps.billing.config",
        "documentation": {}
    },
    {
        "label": "AnalysisPrice",
        "kind": 6,
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "peekOfCode": "class AnalysisPrice(AuditHistory):\n    __tablename__ = \"analysis_price\"\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    analysis = relationship(\"Analysis\", lazy=\"selectin\")\n    is_active = Column(Boolean, nullable=False)\n    amount = Column(Float, nullable=False)\nclass ProfilePrice(AuditHistory):\n    __tablename__ = \"profile_price\"\n    profile_uid = Column(String, ForeignKey(\"profile.uid\"), nullable=True)\n    profile = relationship(\"Profile\", lazy=\"selectin\")",
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "ProfilePrice",
        "kind": 6,
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "peekOfCode": "class ProfilePrice(AuditHistory):\n    __tablename__ = \"profile_price\"\n    profile_uid = Column(String, ForeignKey(\"profile.uid\"), nullable=True)\n    profile = relationship(\"Profile\", lazy=\"selectin\")\n    is_active = Column(Boolean, nullable=False)\n    amount = Column(Float, nullable=False)\nclass AnalysisDiscount(AuditHistory):\n    __tablename__ = \"analysis_discount\"\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=False)\n    analysis = relationship(\"Analysis\", lazy=\"selectin\")",
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscount",
        "kind": 6,
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "peekOfCode": "class AnalysisDiscount(AuditHistory):\n    __tablename__ = \"analysis_discount\"\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=False)\n    analysis = relationship(\"Analysis\", lazy=\"selectin\")\n    name = Column(String, nullable=False)\n    discount_type = Column(String, nullable=False, default=DiscountType.VOUCHER)\n    value_type = Column(String, nullable=False, default=DiscountValueType.PERCENTATE)\n    start_date = Column(DateTime, nullable=False, default=datetime.now())\n    end_date = Column(DateTime, nullable=False, default=datetime.now())\n    voucher_uid = Column(String, ForeignKey(\"voucher.uid\"), nullable=True)",
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "ProfileDiscount",
        "kind": 6,
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "peekOfCode": "class ProfileDiscount(AuditHistory):\n    __tablename__ = \"profile_discount\"\n    profile_uid = Column(String, ForeignKey(\"profile.uid\"), nullable=False)\n    profile = relationship(\"Profile\", lazy=\"selectin\")\n    name = Column(String, nullable=False)\n    discount_type = Column(String, nullable=False, default=DiscountType.VOUCHER)\n    value_type = Column(String, nullable=False, default=DiscountValueType.PERCENTATE)\n    start_date = Column(DateTime, nullable=False, default=datetime.now())\n    end_date = Column(DateTime, nullable=False, default=datetime.now())\n    voucher_uid = Column(String, ForeignKey(\"voucher.uid\"), nullable=True)",
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "Voucher",
        "kind": 6,
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "peekOfCode": "class Voucher(AuditHistory):\n    __tablename__ = \"voucher\"\n    name = Column(String, nullable=False, unique=True)\n    # The number of times a voucher can be used.\n    usage_limit = Column(Integer, nullable=False, default=0)\n    # Used count of the voucher.\n    used = Column(Integer, nullable=False, default=0)\n    start_date = Column(DateTime, nullable=False)\n    end_date = Column(DateTime, nullable=False)\n    # Determine if the voucher usage should be limited to one use per customer.",
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "VoucherCode",
        "kind": 6,
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "peekOfCode": "class VoucherCode(AuditHistory):\n    __tablename__ = \"voucher_code\"\n    code = Column(String(20), nullable=False, unique=True)\n    voucher_uid = Column(String, ForeignKey(\"voucher.uid\"), nullable=False)\n    voucher = relationship(\"Voucher\", lazy=\"selectin\")\n    # The number of times a voucher code can be used.\n    usage_limit = Column(Integer, nullable=False, default=0)\n    # Usage count of the voucher code.\n    used = Column(Integer, nullable=False, default=0)\n    is_active = Column(Boolean, nullable=False)",
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "VoucherCustomer",
        "kind": 6,
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "peekOfCode": "class VoucherCustomer(AuditHistory):\n    __tablename__ = \"voucher_customer\"\n    patient_uid = Column(String, ForeignKey(\"patient.uid\"), nullable=False)\n    patient = relationship(\"Patient\", lazy=\"selectin\")\n    voucher_code_uid = Column(String, ForeignKey(\"voucher_code.uid\"), nullable=False)\n    voucher_code = relationship(\"VoucherCode\", lazy=\"selectin\")\n\"\"\"\n Many to Many Link between TestBill and AnalysisRequest\n\"\"\"\ntest_bill_item = Table(",
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBill",
        "kind": 6,
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "peekOfCode": "class TestBill(AuditHistory):\n    __tablename__ = \"test_bill\"\n    bill_id = Column(String, nullable=False)\n    patient_uid = Column(String, ForeignKey(\"patient.uid\"), nullable=True)\n    patient = relationship(\"Patient\", lazy=\"selectin\")\n    client_uid = Column(String, ForeignKey(\"client.uid\"), nullable=True)\n    client = relationship(\"Client\", lazy=\"selectin\")\n    is_active = Column(Boolean, nullable=False)\n    to_confirm = Column(Boolean, nullable=False)\n    partial = Column(Boolean, nullable=False)",
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBillTransaction",
        "kind": 6,
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "peekOfCode": "class TestBillTransaction(AuditHistory):\n    __tablename__ = \"test_bill_transaction\"\n    test_bill_uid = Column(String, ForeignKey(\"test_bill.uid\"), nullable=True)\n    test_bill = relationship(\"TestBill\", lazy=\"selectin\")\n    kind = Column(String, nullable=False, default=TransactionKind.CASH)\n    amount = Column(Float, nullable=False, default=0.0)\n    notes = Column(String, nullable=True)\n    is_success = Column(Boolean, nullable=False, default=False)\n    processed = Column(Boolean, nullable=False, default=False)\n    message = Column(String, nullable=True)",
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBillInvoice",
        "kind": 6,
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "peekOfCode": "class TestBillInvoice(AuditHistory):\n    __tablename__ = \"test_bill_invoice\"\n    test_bill_uid = Column(String, ForeignKey(\"test_bill.uid\"), nullable=True)\n    test_bill = relationship(\"TestBill\", lazy=\"selectin\")\n    json_content: dict = Column(JSONB, nullable=True)\n    pdf_content = Column(LargeBinary, nullable=True)",
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "test_bill_item",
        "kind": 5,
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "peekOfCode": "test_bill_item = Table(\n    \"test_bill_item\",\n    BaseEntity.metadata,\n    Column(\"test_bill_uid\", ForeignKey(\"test_bill.uid\"), primary_key=True),\n    Column(\n        \"analysis_request_uid\", ForeignKey(\"analysis_request.uid\"), primary_key=True\n    ),\n)\nclass TestBill(AuditHistory):\n    __tablename__ = \"test_bill\"",
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "InvalidVoucherCodeException",
        "kind": 6,
        "importPath": "felicity.apps.billing.exceptions",
        "description": "felicity.apps.billing.exceptions",
        "peekOfCode": "class InvalidVoucherCodeException(Exception):\n    def __init__(self, message=\"Invalid Voucher Code\"):\n        self.message = message\n        super().__init__(self.message)\nclass CustomerAlreadyUsedVoucherException(Exception):\n    def __init__(self, message=\"Customer already used voucher\"):\n        self.message = message\n        super().__init__(self.message)\nclass InactiveTestBillException(Exception):\n    def __init__(self, message=\"Inactive TestBill\"):",
        "detail": "felicity.apps.billing.exceptions",
        "documentation": {}
    },
    {
        "label": "CustomerAlreadyUsedVoucherException",
        "kind": 6,
        "importPath": "felicity.apps.billing.exceptions",
        "description": "felicity.apps.billing.exceptions",
        "peekOfCode": "class CustomerAlreadyUsedVoucherException(Exception):\n    def __init__(self, message=\"Customer already used voucher\"):\n        self.message = message\n        super().__init__(self.message)\nclass InactiveTestBillException(Exception):\n    def __init__(self, message=\"Inactive TestBill\"):\n        self.message = message\n        super().__init__(self.message)\nclass InactiveVoucherCodeException(Exception):\n    def __init__(self, message=\"Inactive Voucher Code\"):",
        "detail": "felicity.apps.billing.exceptions",
        "documentation": {}
    },
    {
        "label": "InactiveTestBillException",
        "kind": 6,
        "importPath": "felicity.apps.billing.exceptions",
        "description": "felicity.apps.billing.exceptions",
        "peekOfCode": "class InactiveTestBillException(Exception):\n    def __init__(self, message=\"Inactive TestBill\"):\n        self.message = message\n        super().__init__(self.message)\nclass InactiveVoucherCodeException(Exception):\n    def __init__(self, message=\"Inactive Voucher Code\"):\n        self.message = message\n        super().__init__(self.message)\nclass VoucherCodeLimitExceededException(Exception):\n    def __init__(self, message=\"Voucher Code Limit exceeded\"):",
        "detail": "felicity.apps.billing.exceptions",
        "documentation": {}
    },
    {
        "label": "InactiveVoucherCodeException",
        "kind": 6,
        "importPath": "felicity.apps.billing.exceptions",
        "description": "felicity.apps.billing.exceptions",
        "peekOfCode": "class InactiveVoucherCodeException(Exception):\n    def __init__(self, message=\"Inactive Voucher Code\"):\n        self.message = message\n        super().__init__(self.message)\nclass VoucherCodeLimitExceededException(Exception):\n    def __init__(self, message=\"Voucher Code Limit exceeded\"):\n        self.message = message\n        super().__init__(self.message)\nclass VoucherLimitExceededException(Exception):\n    def __init__(self, message=\"Voucher Limit exceeded\"):",
        "detail": "felicity.apps.billing.exceptions",
        "documentation": {}
    },
    {
        "label": "VoucherCodeLimitExceededException",
        "kind": 6,
        "importPath": "felicity.apps.billing.exceptions",
        "description": "felicity.apps.billing.exceptions",
        "peekOfCode": "class VoucherCodeLimitExceededException(Exception):\n    def __init__(self, message=\"Voucher Code Limit exceeded\"):\n        self.message = message\n        super().__init__(self.message)\nclass VoucherLimitExceededException(Exception):\n    def __init__(self, message=\"Voucher Limit exceeded\"):\n        self.message = message\n        super().__init__(self.message)",
        "detail": "felicity.apps.billing.exceptions",
        "documentation": {}
    },
    {
        "label": "VoucherLimitExceededException",
        "kind": 6,
        "importPath": "felicity.apps.billing.exceptions",
        "description": "felicity.apps.billing.exceptions",
        "peekOfCode": "class VoucherLimitExceededException(Exception):\n    def __init__(self, message=\"Voucher Limit exceeded\"):\n        self.message = message\n        super().__init__(self.message)",
        "detail": "felicity.apps.billing.exceptions",
        "documentation": {}
    },
    {
        "label": "AnalysisPriceRepository",
        "kind": 6,
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "peekOfCode": "class AnalysisPriceRepository(BaseRepository[AnalysisPrice]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisPrice)\nclass ProfilePriceRepository(BaseRepository[ProfilePrice]):\n    def __init__(self) -> None:\n        super().__init__(ProfilePrice)\nclass AnalysisDiscountRepository(BaseRepository[AnalysisDiscount]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisDiscount)\nclass ProfileDiscountRepository(BaseRepository[ProfileDiscount]):",
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "ProfilePriceRepository",
        "kind": 6,
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "peekOfCode": "class ProfilePriceRepository(BaseRepository[ProfilePrice]):\n    def __init__(self) -> None:\n        super().__init__(ProfilePrice)\nclass AnalysisDiscountRepository(BaseRepository[AnalysisDiscount]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisDiscount)\nclass ProfileDiscountRepository(BaseRepository[ProfileDiscount]):\n    def __init__(self) -> None:\n        super().__init__(ProfileDiscount)\nclass VoucherRepository(BaseRepository[Voucher]):",
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscountRepository",
        "kind": 6,
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "peekOfCode": "class AnalysisDiscountRepository(BaseRepository[AnalysisDiscount]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisDiscount)\nclass ProfileDiscountRepository(BaseRepository[ProfileDiscount]):\n    def __init__(self) -> None:\n        super().__init__(ProfileDiscount)\nclass VoucherRepository(BaseRepository[Voucher]):\n    def __init__(self) -> None:\n        super().__init__(Voucher)\nclass VoucherCodeRepository(BaseRepository[VoucherCode]):",
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "ProfileDiscountRepository",
        "kind": 6,
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "peekOfCode": "class ProfileDiscountRepository(BaseRepository[ProfileDiscount]):\n    def __init__(self) -> None:\n        super().__init__(ProfileDiscount)\nclass VoucherRepository(BaseRepository[Voucher]):\n    def __init__(self) -> None:\n        super().__init__(Voucher)\nclass VoucherCodeRepository(BaseRepository[VoucherCode]):\n    def __init__(self) -> None:\n        super().__init__(VoucherCode)\nclass VoucherCustomerRepository(BaseRepository[VoucherCustomer]):",
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "VoucherRepository",
        "kind": 6,
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "peekOfCode": "class VoucherRepository(BaseRepository[Voucher]):\n    def __init__(self) -> None:\n        super().__init__(Voucher)\nclass VoucherCodeRepository(BaseRepository[VoucherCode]):\n    def __init__(self) -> None:\n        super().__init__(VoucherCode)\nclass VoucherCustomerRepository(BaseRepository[VoucherCustomer]):\n    def __init__(self) -> None:\n        super().__init__(VoucherCustomer)\nclass TestBillRepository(BaseRepository[TestBill]):",
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "VoucherCodeRepository",
        "kind": 6,
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "peekOfCode": "class VoucherCodeRepository(BaseRepository[VoucherCode]):\n    def __init__(self) -> None:\n        super().__init__(VoucherCode)\nclass VoucherCustomerRepository(BaseRepository[VoucherCustomer]):\n    def __init__(self) -> None:\n        super().__init__(VoucherCustomer)\nclass TestBillRepository(BaseRepository[TestBill]):\n    def __init__(self) -> None:\n        super().__init__(TestBill)\nclass TestBillTransactionRepository(BaseRepository[TestBillTransaction]):",
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "VoucherCustomerRepository",
        "kind": 6,
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "peekOfCode": "class VoucherCustomerRepository(BaseRepository[VoucherCustomer]):\n    def __init__(self) -> None:\n        super().__init__(VoucherCustomer)\nclass TestBillRepository(BaseRepository[TestBill]):\n    def __init__(self) -> None:\n        super().__init__(TestBill)\nclass TestBillTransactionRepository(BaseRepository[TestBillTransaction]):\n    def __init__(self) -> None:\n        super().__init__(TestBillTransaction)\nclass TestBillInvoiceRepository(BaseRepository[TestBillInvoice]):",
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "TestBillRepository",
        "kind": 6,
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "peekOfCode": "class TestBillRepository(BaseRepository[TestBill]):\n    def __init__(self) -> None:\n        super().__init__(TestBill)\nclass TestBillTransactionRepository(BaseRepository[TestBillTransaction]):\n    def __init__(self) -> None:\n        super().__init__(TestBillTransaction)\nclass TestBillInvoiceRepository(BaseRepository[TestBillInvoice]):\n    def __init__(self) -> None:\n        super().__init__(TestBillInvoice)",
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "TestBillTransactionRepository",
        "kind": 6,
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "peekOfCode": "class TestBillTransactionRepository(BaseRepository[TestBillTransaction]):\n    def __init__(self) -> None:\n        super().__init__(TestBillTransaction)\nclass TestBillInvoiceRepository(BaseRepository[TestBillInvoice]):\n    def __init__(self) -> None:\n        super().__init__(TestBillInvoice)",
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "TestBillInvoiceRepository",
        "kind": 6,
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "peekOfCode": "class TestBillInvoiceRepository(BaseRepository[TestBillInvoice]):\n    def __init__(self) -> None:\n        super().__init__(TestBillInvoice)",
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "AnalysisPriceBase",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class AnalysisPriceBase(BaseModel):\n    is_active: bool\n    amount: float\n    analysis_uid: str | None = None\nclass AnalysisPriceBaseInDB(AnalysisPriceBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisPriceCreate(AnalysisPriceBase):\n    pass",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisPriceBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class AnalysisPriceBaseInDB(AnalysisPriceBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisPriceCreate(AnalysisPriceBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisPriceUpdate(AnalysisPriceBase):\n    pass\nclass ProfilePriceBase(BaseModel):",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisPriceCreate",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class AnalysisPriceCreate(AnalysisPriceBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisPriceUpdate(AnalysisPriceBase):\n    pass\nclass ProfilePriceBase(BaseModel):\n    is_active: bool\n    amount: float\n    profile_uid: str | None = None\nclass ProfilePriceBaseInDB(ProfilePriceBase):",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisPriceUpdate",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class AnalysisPriceUpdate(AnalysisPriceBase):\n    pass\nclass ProfilePriceBase(BaseModel):\n    is_active: bool\n    amount: float\n    profile_uid: str | None = None\nclass ProfilePriceBaseInDB(ProfilePriceBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "ProfilePriceBase",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class ProfilePriceBase(BaseModel):\n    is_active: bool\n    amount: float\n    profile_uid: str | None = None\nclass ProfilePriceBaseInDB(ProfilePriceBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ProfilePriceCreate(ProfilePriceBase):\n    pass",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "ProfilePriceBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class ProfilePriceBaseInDB(ProfilePriceBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ProfilePriceCreate(ProfilePriceBase):\n    pass\n# Properties to receive via API on update\nclass ProfilePriceUpdate(ProfilePriceBase):\n    pass\nclass AnalysisDiscountBase(BaseModel):",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "ProfilePriceCreate",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class ProfilePriceCreate(ProfilePriceBase):\n    pass\n# Properties to receive via API on update\nclass ProfilePriceUpdate(ProfilePriceBase):\n    pass\nclass AnalysisDiscountBase(BaseModel):\n    analysis_uid: str\n    name: str\n    discount_type: str\n    value_type: str",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "ProfilePriceUpdate",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class ProfilePriceUpdate(ProfilePriceBase):\n    pass\nclass AnalysisDiscountBase(BaseModel):\n    analysis_uid: str\n    name: str\n    discount_type: str\n    value_type: str\n    start_date: datetime = datetime.now()\n    end_date: datetime = datetime.now()\n    voucher_uid: str | None = None",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscountBase",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class AnalysisDiscountBase(BaseModel):\n    analysis_uid: str\n    name: str\n    discount_type: str\n    value_type: str\n    start_date: datetime = datetime.now()\n    end_date: datetime = datetime.now()\n    voucher_uid: str | None = None\n    value_percent: float | None = None\n    value_amount: float | None = None",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscountBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class AnalysisDiscountBaseInDB(AnalysisDiscountBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisDiscountCreate(AnalysisDiscountBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisDiscountUpdate(AnalysisDiscountBase):\n    analysis_uid: str | None = None\n    name: str | None = None",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscountCreate",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class AnalysisDiscountCreate(AnalysisDiscountBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisDiscountUpdate(AnalysisDiscountBase):\n    analysis_uid: str | None = None\n    name: str | None = None\nclass ProfileDiscountBase(BaseModel):\n    profile_uid: str\n    name: str\n    discount_type: str | None = None",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscountUpdate",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class AnalysisDiscountUpdate(AnalysisDiscountBase):\n    analysis_uid: str | None = None\n    name: str | None = None\nclass ProfileDiscountBase(BaseModel):\n    profile_uid: str\n    name: str\n    discount_type: str | None = None\n    value_type: str | None = None\n    start_date: datetime = datetime.now()\n    end_date: datetime = datetime.now()",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileDiscountBase",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class ProfileDiscountBase(BaseModel):\n    profile_uid: str\n    name: str\n    discount_type: str | None = None\n    value_type: str | None = None\n    start_date: datetime = datetime.now()\n    end_date: datetime = datetime.now()\n    voucher_uid: str | None = None\n    value_percent: float | None = None\n    value_amount: float | None = None",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileDiscountBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class ProfileDiscountBaseInDB(ProfileDiscountBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ProfileDiscountCreate(ProfileDiscountBase):\n    pass\n# Properties to receive via API on update\nclass ProfileDiscountUpdate(ProfileDiscountBase):\n    profile_uid: str | None = None\n    name: str | None = None",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileDiscountCreate",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class ProfileDiscountCreate(ProfileDiscountBase):\n    pass\n# Properties to receive via API on update\nclass ProfileDiscountUpdate(ProfileDiscountBase):\n    profile_uid: str | None = None\n    name: str | None = None\nclass VoucherBase(BaseModel):\n    name: str\n    usage_limit: int\n    used: int | None = None",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileDiscountUpdate",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class ProfileDiscountUpdate(ProfileDiscountBase):\n    profile_uid: str | None = None\n    name: str | None = None\nclass VoucherBase(BaseModel):\n    name: str\n    usage_limit: int\n    used: int | None = None\n    start_date: datetime\n    end_date: datetime\n    once_per_customer: bool",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherBase",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class VoucherBase(BaseModel):\n    name: str\n    usage_limit: int\n    used: int | None = None\n    start_date: datetime\n    end_date: datetime\n    once_per_customer: bool\n    once_per_order: bool\nclass VoucherBaseInDB(VoucherBase):\n    uid: str | None = None",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class VoucherBaseInDB(VoucherBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass VoucherCreate(VoucherBase):\n    pass\n# Properties to receive via API on update\nclass VoucherUpdate(VoucherBase):\n    pass\nclass VoucherCodeBase(BaseModel):",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherCreate",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class VoucherCreate(VoucherBase):\n    pass\n# Properties to receive via API on update\nclass VoucherUpdate(VoucherBase):\n    pass\nclass VoucherCodeBase(BaseModel):\n    code: str\n    voucher_uid: str\n    usage_limit: int\n    used: int | None = None",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherUpdate",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class VoucherUpdate(VoucherBase):\n    pass\nclass VoucherCodeBase(BaseModel):\n    code: str\n    voucher_uid: str\n    usage_limit: int\n    used: int | None = None\n    is_active: bool\nclass VoucherCodeBaseInDB(VoucherCodeBase):\n    uid: str | None = None",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherCodeBase",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class VoucherCodeBase(BaseModel):\n    code: str\n    voucher_uid: str\n    usage_limit: int\n    used: int | None = None\n    is_active: bool\nclass VoucherCodeBaseInDB(VoucherCodeBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherCodeBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class VoucherCodeBaseInDB(VoucherCodeBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass VoucherCodeCreate(VoucherCodeBase):\n    pass\n# Properties to receive via API on update\nclass VoucherCodeUpdate(VoucherCodeBase):\n    pass\nclass VoucherCustomerBase(BaseModel):",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherCodeCreate",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class VoucherCodeCreate(VoucherCodeBase):\n    pass\n# Properties to receive via API on update\nclass VoucherCodeUpdate(VoucherCodeBase):\n    pass\nclass VoucherCustomerBase(BaseModel):\n    patient_uid: str\n    voucher_code_uid: str\nclass VoucherCustomerBaseInDB(VoucherCustomerBase):\n    uid: str | None = None",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherCodeUpdate",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class VoucherCodeUpdate(VoucherCodeBase):\n    pass\nclass VoucherCustomerBase(BaseModel):\n    patient_uid: str\n    voucher_code_uid: str\nclass VoucherCustomerBaseInDB(VoucherCustomerBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass VoucherCustomerCreate(VoucherCustomerBase):",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherCustomerBase",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class VoucherCustomerBase(BaseModel):\n    patient_uid: str\n    voucher_code_uid: str\nclass VoucherCustomerBaseInDB(VoucherCustomerBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass VoucherCustomerCreate(VoucherCustomerBase):\n    pass\n# Properties to receive via API on update",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherCustomerBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class VoucherCustomerBaseInDB(VoucherCustomerBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass VoucherCustomerCreate(VoucherCustomerBase):\n    pass\n# Properties to receive via API on update\nclass VoucherCustomerUpdate(VoucherCustomerBase):\n    pass\nclass TestBillBase(BaseModel):",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherCustomerCreate",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class VoucherCustomerCreate(VoucherCustomerBase):\n    pass\n# Properties to receive via API on update\nclass VoucherCustomerUpdate(VoucherCustomerBase):\n    pass\nclass TestBillBase(BaseModel):\n    bill_id: str | None = None\n    patient_uid: str\n    client_uid: str\n    is_active: bool",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherCustomerUpdate",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class VoucherCustomerUpdate(VoucherCustomerBase):\n    pass\nclass TestBillBase(BaseModel):\n    bill_id: str | None = None\n    patient_uid: str\n    client_uid: str\n    is_active: bool\n    to_confirm: bool\n    partial: bool = False\n    total_charged: float",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillBase",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class TestBillBase(BaseModel):\n    bill_id: str | None = None\n    patient_uid: str\n    client_uid: str\n    is_active: bool\n    to_confirm: bool\n    partial: bool = False\n    total_charged: float\n    total_paid: float = 0.0\n    json_content: Optional[dict] = {}",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class TestBillBaseInDB(TestBillBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass TestBillCreate(TestBillBase):\n    pass\n# Properties to receive via API on update\nclass TestBillUpdate(TestBillBase):\n    patient_uid: str | None = None\n    client_uid: str | None = None",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillCreate",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class TestBillCreate(TestBillBase):\n    pass\n# Properties to receive via API on update\nclass TestBillUpdate(TestBillBase):\n    patient_uid: str | None = None\n    client_uid: str | None = None\n    total_charged: float | None = None\n    is_active: bool | None = None\n    to_confirm: bool | None = None\nclass TestBillTransactionBase(BaseModel):",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillUpdate",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class TestBillUpdate(TestBillBase):\n    patient_uid: str | None = None\n    client_uid: str | None = None\n    total_charged: float | None = None\n    is_active: bool | None = None\n    to_confirm: bool | None = None\nclass TestBillTransactionBase(BaseModel):\n    test_bill_uid: str\n    kind: str\n    amount: float",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillTransactionBase",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class TestBillTransactionBase(BaseModel):\n    test_bill_uid: str\n    kind: str\n    amount: float\n    is_success: bool = False\n    action_required: bool = False\n    processed: bool = False\n    notes: str\n    message: str | None = \"\"\n    action_message: str | None = \"\"",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillTransactionBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class TestBillTransactionBaseInDB(TestBillTransactionBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass TestBillTransactionCreate(TestBillTransactionBase):\n    pass\n# Properties to receive via API on update\nclass TestBillTransactionUpdate(TestBillTransactionBase):\n    test_bill_uid: str | None = None\n    kind: str | None = None",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillTransactionCreate",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class TestBillTransactionCreate(TestBillTransactionBase):\n    pass\n# Properties to receive via API on update\nclass TestBillTransactionUpdate(TestBillTransactionBase):\n    test_bill_uid: str | None = None\n    kind: str | None = None\n    amount: float | None = None\n    notes: str | None = None\nclass TestBillInvoiceBase(BaseModel):\n    test_bill_uid: str",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillTransactionUpdate",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class TestBillTransactionUpdate(TestBillTransactionBase):\n    test_bill_uid: str | None = None\n    kind: str | None = None\n    amount: float | None = None\n    notes: str | None = None\nclass TestBillInvoiceBase(BaseModel):\n    test_bill_uid: str\n    json_content: Optional[dict] = {}\n    pdf_content: Optional[bytes] = None\nclass TestBillInvoiceBaseInDB(TestBillInvoiceBase):",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillInvoiceBase",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class TestBillInvoiceBase(BaseModel):\n    test_bill_uid: str\n    json_content: Optional[dict] = {}\n    pdf_content: Optional[bytes] = None\nclass TestBillInvoiceBaseInDB(TestBillInvoiceBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass TestBillInvoiceCreate(TestBillInvoiceBase):\n    pass",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillInvoiceBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class TestBillInvoiceBaseInDB(TestBillInvoiceBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass TestBillInvoiceCreate(TestBillInvoiceBase):\n    pass\n# Properties to receive via API on update\nclass TestBillInvoiceUpdate(TestBillInvoiceBase):\n    pass",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillInvoiceCreate",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class TestBillInvoiceCreate(TestBillInvoiceBase):\n    pass\n# Properties to receive via API on update\nclass TestBillInvoiceUpdate(TestBillInvoiceBase):\n    pass",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillInvoiceUpdate",
        "kind": 6,
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "peekOfCode": "class TestBillInvoiceUpdate(TestBillInvoiceBase):\n    pass",
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisPriceService",
        "kind": 6,
        "importPath": "felicity.apps.billing.services",
        "description": "felicity.apps.billing.services",
        "peekOfCode": "class AnalysisPriceService(BaseService[AnalysisPrice]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisPriceRepository)\nAnalysisPriceService().create()\nclass ProfilePriceService(BaseService[ProfilePrice]):\n    def __init__(self) -> None:\n        super().__init__(ProfilePriceRepository)\nclass AnalysisDiscountService(BaseService[AnalysisDiscount]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisDiscountRepository)",
        "detail": "felicity.apps.billing.services",
        "documentation": {}
    },
    {
        "label": "ProfilePriceService",
        "kind": 6,
        "importPath": "felicity.apps.billing.services",
        "description": "felicity.apps.billing.services",
        "peekOfCode": "class ProfilePriceService(BaseService[ProfilePrice]):\n    def __init__(self) -> None:\n        super().__init__(ProfilePriceRepository)\nclass AnalysisDiscountService(BaseService[AnalysisDiscount]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisDiscountRepository)\nclass ProfileDiscountService(BaseService[ProfileDiscount]):\n    def __init__(self) -> None:\n        super().__init__(ProfileDiscountRepository)\nclass VoucherService(BaseService[Voucher]):",
        "detail": "felicity.apps.billing.services",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscountService",
        "kind": 6,
        "importPath": "felicity.apps.billing.services",
        "description": "felicity.apps.billing.services",
        "peekOfCode": "class AnalysisDiscountService(BaseService[AnalysisDiscount]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisDiscountRepository)\nclass ProfileDiscountService(BaseService[ProfileDiscount]):\n    def __init__(self) -> None:\n        super().__init__(ProfileDiscountRepository)\nclass VoucherService(BaseService[Voucher]):\n    def __init__(self) -> None:\n        super().__init__(VoucherRepository)\nclass VoucherCodeService(BaseService[VoucherCode]):",
        "detail": "felicity.apps.billing.services",
        "documentation": {}
    },
    {
        "label": "ProfileDiscountService",
        "kind": 6,
        "importPath": "felicity.apps.billing.services",
        "description": "felicity.apps.billing.services",
        "peekOfCode": "class ProfileDiscountService(BaseService[ProfileDiscount]):\n    def __init__(self) -> None:\n        super().__init__(ProfileDiscountRepository)\nclass VoucherService(BaseService[Voucher]):\n    def __init__(self) -> None:\n        super().__init__(VoucherRepository)\nclass VoucherCodeService(BaseService[VoucherCode]):\n    def __init__(self) -> None:\n        super().__init__(VoucherCodeRepository)\nclass VoucherCustomerService(BaseService[VoucherCustomer]):",
        "detail": "felicity.apps.billing.services",
        "documentation": {}
    },
    {
        "label": "VoucherService",
        "kind": 6,
        "importPath": "felicity.apps.billing.services",
        "description": "felicity.apps.billing.services",
        "peekOfCode": "class VoucherService(BaseService[Voucher]):\n    def __init__(self) -> None:\n        super().__init__(VoucherRepository)\nclass VoucherCodeService(BaseService[VoucherCode]):\n    def __init__(self) -> None:\n        super().__init__(VoucherCodeRepository)\nclass VoucherCustomerService(BaseService[VoucherCustomer]):\n    def __init__(self) -> None:\n        super().__init__(VoucherCustomerRepository)\nclass TestBillService(BaseService[TestBill, TestBillCreate, TestBillUpdate]):",
        "detail": "felicity.apps.billing.services",
        "documentation": {}
    },
    {
        "label": "VoucherCodeService",
        "kind": 6,
        "importPath": "felicity.apps.billing.services",
        "description": "felicity.apps.billing.services",
        "peekOfCode": "class VoucherCodeService(BaseService[VoucherCode]):\n    def __init__(self) -> None:\n        super().__init__(VoucherCodeRepository)\nclass VoucherCustomerService(BaseService[VoucherCustomer]):\n    def __init__(self) -> None:\n        super().__init__(VoucherCustomerRepository)\nclass TestBillService(BaseService[TestBill, TestBillCreate, TestBillUpdate]):\n    id_sequence_servce = IdSequenceService()\n    def __init__(self) -> None:\n        super().__init__(TestBillRepository)",
        "detail": "felicity.apps.billing.services",
        "documentation": {}
    },
    {
        "label": "VoucherCustomerService",
        "kind": 6,
        "importPath": "felicity.apps.billing.services",
        "description": "felicity.apps.billing.services",
        "peekOfCode": "class VoucherCustomerService(BaseService[VoucherCustomer]):\n    def __init__(self) -> None:\n        super().__init__(VoucherCustomerRepository)\nclass TestBillService(BaseService[TestBill, TestBillCreate, TestBillUpdate]):\n    id_sequence_servce = IdSequenceService()\n    def __init__(self) -> None:\n        super().__init__(TestBillRepository)\n    @classmethod\n    async def create(cls, obj_in: dict | TestBillCreate) -> \"TestBill\":\n        data = cls._import(obj_in)",
        "detail": "felicity.apps.billing.services",
        "documentation": {}
    },
    {
        "label": "TestBillService",
        "kind": 6,
        "importPath": "felicity.apps.billing.services",
        "description": "felicity.apps.billing.services",
        "peekOfCode": "class TestBillService(BaseService[TestBill, TestBillCreate, TestBillUpdate]):\n    id_sequence_servce = IdSequenceService()\n    def __init__(self) -> None:\n        super().__init__(TestBillRepository)\n    @classmethod\n    async def create(cls, obj_in: dict | TestBillCreate) -> \"TestBill\":\n        data = cls._import(obj_in)\n        data[\"bill_id\"] = (await cls.id_sequence_servce.get_next_number(prefix=\"X\", generic=True))[1]\n        return await super().create(**data)\nclass TestBillTransactionService(BaseService[TestBillTransaction]):",
        "detail": "felicity.apps.billing.services",
        "documentation": {}
    },
    {
        "label": "TestBillTransactionService",
        "kind": 6,
        "importPath": "felicity.apps.billing.services",
        "description": "felicity.apps.billing.services",
        "peekOfCode": "class TestBillTransactionService(BaseService[TestBillTransaction]):\n    def __init__(self) -> None:\n        super().__init__(TestBillTransactionRepository)\nclass TestBillInvoiceService(BaseService[TestBillInvoice]):\n    def __init__(self) -> None:\n        super().__init__(TestBillInvoiceRepository)",
        "detail": "felicity.apps.billing.services",
        "documentation": {}
    },
    {
        "label": "TestBillInvoiceService",
        "kind": 6,
        "importPath": "felicity.apps.billing.services",
        "description": "felicity.apps.billing.services",
        "peekOfCode": "class TestBillInvoiceService(BaseService[TestBillInvoice]):\n    def __init__(self) -> None:\n        super().__init__(TestBillInvoiceRepository)",
        "detail": "felicity.apps.billing.services",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.billing.utils",
        "description": "felicity.apps.billing.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def bill_order(analysis_request: a_models.AnalysisRequest, auto_bill=False):\n    laboratory = await Laboratory.get_by_setup_name(\"felicity\")\n    lab_settings = await LaboratorySetting.get(laboratory_uid=laboratory.uid)\n    if not lab_settings.allow_billing:\n        logger.info(\"Billing is not allowed\")\n        return\n    # auto_billing ?? or user initiated\n    if auto_bill and not lab_settings.allow_auto_billing:\n        logger.info(\"Auto billing is not allowed\")",
        "detail": "felicity.apps.billing.utils",
        "documentation": {}
    },
    {
        "label": "Client",
        "kind": 6,
        "importPath": "felicity.apps.client.entities",
        "description": "felicity.apps.client.entities",
        "peekOfCode": "class Client(AuditHistory):\n    \"\"\"Client/Facility\"\"\"\n    __tablename__ = \"client\"\n    name = Column(String, nullable=False)\n    code = Column(String, index=True, unique=True, nullable=False)\n    district_uid = Column(String, ForeignKey(\"district.uid\"), nullable=True)\n    district = relationship(District, backref=\"clients\", lazy=\"selectin\")\n    province_uid = Column(String, ForeignKey(\"province.uid\"), nullable=True)\n    province = relationship(Province, backref=\"clients\", lazy=\"selectin\")\n    email = Column(String, nullable=True)",
        "detail": "felicity.apps.client.entities",
        "documentation": {}
    },
    {
        "label": "ClientContact",
        "kind": 6,
        "importPath": "felicity.apps.client.entities",
        "description": "felicity.apps.client.entities",
        "peekOfCode": "class ClientContact(AbstractBaseUser):\n    __tablename__ = \"client_contact\"\n    email = Column(String, unique=False, index=True, nullable=True)\n    email_cc = Column(String, nullable=True)\n    consent_sms = Column(Boolean(), default=False)\n    client_uid = Column(String, ForeignKey(\"client.uid\"), nullable=False)\n    client = relationship(\n        Client,\n        backref=backref(\n            \"contacts\",",
        "detail": "felicity.apps.client.entities",
        "documentation": {}
    },
    {
        "label": "ClientRepository",
        "kind": 6,
        "importPath": "felicity.apps.client.repositories",
        "description": "felicity.apps.client.repositories",
        "peekOfCode": "class ClientRepository(BaseRepository[Client]):\n    def __init__(self) -> None:\n        super().__init__(Client)\n    async def paginate_with_cursors(\n        self,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,\n        text: str | None = None,\n        sort_by: list[str] | None = None,",
        "detail": "felicity.apps.client.repositories",
        "documentation": {}
    },
    {
        "label": "ClientContactRepository",
        "kind": 6,
        "importPath": "felicity.apps.client.repositories",
        "description": "felicity.apps.client.repositories",
        "peekOfCode": "class ClientContactRepository(BaseRepository[ClientContact]):\n    def __init__(self) -> None:\n        super().__init__(ClientContact)",
        "detail": "felicity.apps.client.repositories",
        "documentation": {}
    },
    {
        "label": "ClientBase",
        "kind": 6,
        "importPath": "felicity.apps.client.schemas",
        "description": "felicity.apps.client.schemas",
        "peekOfCode": "class ClientBase(BaseModel):\n    name: str | None = None\n    code: str | None = None\n    district_uid: str | None = None\n    email: str | None = None\n    email_cc: str | None = None\n    consent_email: bool | None = None\n    phone_mobile: str | None = None\n    phone_business: str | None = None\n    consent_sms: bool | None = None",
        "detail": "felicity.apps.client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.client.schemas",
        "description": "felicity.apps.client.schemas",
        "peekOfCode": "class ClientBaseInDB(ClientBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ClientCreate(ClientBase):\n    district_uid: str | None = None\n# Properties to receive via API on update\nclass ClientUpdate(ClientBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientCreate",
        "kind": 6,
        "importPath": "felicity.apps.client.schemas",
        "description": "felicity.apps.client.schemas",
        "peekOfCode": "class ClientCreate(ClientBase):\n    district_uid: str | None = None\n# Properties to receive via API on update\nclass ClientUpdate(ClientBase):\n    pass\n# Properties to return via API\nclass Client(ClientBaseInDB):\n    pass\n# Properties stored in DB\nclass ClientInDB(ClientBaseInDB):",
        "detail": "felicity.apps.client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientUpdate",
        "kind": 6,
        "importPath": "felicity.apps.client.schemas",
        "description": "felicity.apps.client.schemas",
        "peekOfCode": "class ClientUpdate(ClientBase):\n    pass\n# Properties to return via API\nclass Client(ClientBaseInDB):\n    pass\n# Properties stored in DB\nclass ClientInDB(ClientBaseInDB):\n    pass\n#\n# Client Contact Schemas",
        "detail": "felicity.apps.client.schemas",
        "documentation": {}
    },
    {
        "label": "Client",
        "kind": 6,
        "importPath": "felicity.apps.client.schemas",
        "description": "felicity.apps.client.schemas",
        "peekOfCode": "class Client(ClientBaseInDB):\n    pass\n# Properties stored in DB\nclass ClientInDB(ClientBaseInDB):\n    pass\n#\n# Client Contact Schemas\n#\n# Shared properties\nclass ClientContactBase(BaseModel):",
        "detail": "felicity.apps.client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientInDB",
        "kind": 6,
        "importPath": "felicity.apps.client.schemas",
        "description": "felicity.apps.client.schemas",
        "peekOfCode": "class ClientInDB(ClientBaseInDB):\n    pass\n#\n# Client Contact Schemas\n#\n# Shared properties\nclass ClientContactBase(BaseModel):\n    client_uid: str | None = None\n    first_name: str | None = None\n    last_name: str | None = None",
        "detail": "felicity.apps.client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientContactBase",
        "kind": 6,
        "importPath": "felicity.apps.client.schemas",
        "description": "felicity.apps.client.schemas",
        "peekOfCode": "class ClientContactBase(BaseModel):\n    client_uid: str | None = None\n    first_name: str | None = None\n    last_name: str | None = None\n    email: str | None = None\n    email_cc: str | None = None\n    mobile_phone: str | None = None\n    consent_sms: bool | None = False\n    business_phone: str | None = None\n    is_active: bool | None = True",
        "detail": "felicity.apps.client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientContactBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.client.schemas",
        "description": "felicity.apps.client.schemas",
        "peekOfCode": "class ClientContactBaseInDB(ClientContactBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ClientContactCreate(ClientContactBase):\n    client_uid: str\n# Properties to receive via API on update\nclass ClientContactUpdate(ClientContactBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientContactCreate",
        "kind": 6,
        "importPath": "felicity.apps.client.schemas",
        "description": "felicity.apps.client.schemas",
        "peekOfCode": "class ClientContactCreate(ClientContactBase):\n    client_uid: str\n# Properties to receive via API on update\nclass ClientContactUpdate(ClientContactBase):\n    pass\n# Properties to return via API\nclass ClientContact(ClientContactBaseInDB):\n    pass\n# Properties stored in DB\nclass ClientContactInDB(ClientContactBaseInDB):",
        "detail": "felicity.apps.client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientContactUpdate",
        "kind": 6,
        "importPath": "felicity.apps.client.schemas",
        "description": "felicity.apps.client.schemas",
        "peekOfCode": "class ClientContactUpdate(ClientContactBase):\n    pass\n# Properties to return via API\nclass ClientContact(ClientContactBaseInDB):\n    pass\n# Properties stored in DB\nclass ClientContactInDB(ClientContactBaseInDB):\n    pass",
        "detail": "felicity.apps.client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientContact",
        "kind": 6,
        "importPath": "felicity.apps.client.schemas",
        "description": "felicity.apps.client.schemas",
        "peekOfCode": "class ClientContact(ClientContactBaseInDB):\n    pass\n# Properties stored in DB\nclass ClientContactInDB(ClientContactBaseInDB):\n    pass",
        "detail": "felicity.apps.client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientContactInDB",
        "kind": 6,
        "importPath": "felicity.apps.client.schemas",
        "description": "felicity.apps.client.schemas",
        "peekOfCode": "class ClientContactInDB(ClientContactBaseInDB):\n    pass",
        "detail": "felicity.apps.client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientService",
        "kind": 6,
        "importPath": "felicity.apps.client.services",
        "description": "felicity.apps.client.services",
        "peekOfCode": "class ClientService(BaseService[Client, ClientCreate, ClientUpdate]):\n    def __init__(self):\n        super().__init__(ClientRepository)\n    async def search(self, query: str) -> list[Client]:\n        return await super().search(name=query, code=query)\nclass ClientContactService(BaseService[ClientContact, ClientContactCreate, ClientContactUpdate]):\n    def __init__(self):\n        super().__init__(ClientContactRepository)",
        "detail": "felicity.apps.client.services",
        "documentation": {}
    },
    {
        "label": "ClientContactService",
        "kind": 6,
        "importPath": "felicity.apps.client.services",
        "description": "felicity.apps.client.services",
        "peekOfCode": "class ClientContactService(BaseService[ClientContact, ClientContactCreate, ClientContactUpdate]):\n    def __init__(self):\n        super().__init__(ClientContactRepository)",
        "detail": "felicity.apps.client.services",
        "documentation": {}
    },
    {
        "label": "AuditHook",
        "kind": 6,
        "importPath": "felicity.apps.common.hooks.audit",
        "description": "felicity.apps.common.hooks.audit",
        "peekOfCode": "class AuditHook:\n    \"\"\"Allow a model to be automatically audited\"\"\"\n    @staticmethod\n    def create_audit(connection, object_type, object_id, action, **kwargs):\n        audit = AuditLog(\n            object_type,\n            object_id,\n            action,\n            kwargs.get(\"state_before\"),\n            kwargs.get(\"state_after\"),",
        "detail": "felicity.apps.common.hooks.audit",
        "documentation": {}
    },
    {
        "label": "custom_serial",
        "kind": 2,
        "importPath": "felicity.apps.common.hooks.audit",
        "description": "felicity.apps.common.hooks.audit",
        "peekOfCode": "def custom_serial(o):\n    if isinstance(o, (datetime.date, datetime.datetime)):\n        return o.isoformat()\n    raise TypeError(\"Type %s not serializable\" % type(o))\nclass AuditHook:\n    \"\"\"Allow a model to be automatically audited\"\"\"\n    @staticmethod\n    def create_audit(connection, object_type, object_id, action, **kwargs):\n        audit = AuditLog(\n            object_type,",
        "detail": "felicity.apps.common.hooks.audit",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.common.hooks.audit",
        "description": "felicity.apps.common.hooks.audit",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef custom_serial(o):\n    if isinstance(o, (datetime.date, datetime.datetime)):\n        return o.isoformat()\n    raise TypeError(\"Type %s not serializable\" % type(o))\nclass AuditHook:\n    \"\"\"Allow a model to be automatically audited\"\"\"\n    @staticmethod\n    def create_audit(connection, object_type, object_id, action, **kwargs):\n        audit = AuditLog(",
        "detail": "felicity.apps.common.hooks.audit",
        "documentation": {}
    },
    {
        "label": "Hook",
        "kind": 6,
        "importPath": "felicity.apps.common.hooks.conf",
        "description": "felicity.apps.common.hooks.conf",
        "peekOfCode": "class Hook(object):\n    class Event:\n        CREATE = 1\n        UPDATE = 2\n        DELETE = 3\n    def __init__(self):\n        self.events = self.Event()\n        self.PLEASE_AUDIT = [self.Event.UPDATE]\nhooks = Hook()",
        "detail": "felicity.apps.common.hooks.conf",
        "documentation": {}
    },
    {
        "label": "hooks",
        "kind": 5,
        "importPath": "felicity.apps.common.hooks.conf",
        "description": "felicity.apps.common.hooks.conf",
        "peekOfCode": "hooks = Hook()",
        "detail": "felicity.apps.common.hooks.conf",
        "documentation": {}
    },
    {
        "label": "BaseAuditModel",
        "kind": 6,
        "importPath": "felicity.apps.common.schemas.audit",
        "description": "felicity.apps.common.schemas.audit",
        "peekOfCode": "class BaseAuditModel(BaseModel):\n    created_at: datetime | None = None\n    created_by_uid: str | None = None\n    updated_at: datetime | None = None\n    updated_by_uid: str | None = None",
        "detail": "felicity.apps.common.schemas.audit",
        "documentation": {}
    },
    {
        "label": "Msg",
        "kind": 6,
        "importPath": "felicity.apps.common.schemas.msg",
        "description": "felicity.apps.common.schemas.msg",
        "peekOfCode": "class Msg(BaseModel):\n    msg: str",
        "detail": "felicity.apps.common.schemas.msg",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "felicity.apps.common.schemas.token",
        "description": "felicity.apps.common.schemas.token",
        "peekOfCode": "class Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenPayload(BaseModel):\n    sub: str | None = None",
        "detail": "felicity.apps.common.schemas.token",
        "documentation": {}
    },
    {
        "label": "TokenPayload",
        "kind": 6,
        "importPath": "felicity.apps.common.schemas.token",
        "description": "felicity.apps.common.schemas.token",
        "peekOfCode": "class TokenPayload(BaseModel):\n    sub: str | None = None",
        "detail": "felicity.apps.common.schemas.token",
        "documentation": {}
    },
    {
        "label": "_WeakdictBasedSet",
        "kind": 6,
        "importPath": "felicity.apps.common.sqlalchemy_mptt.events",
        "description": "felicity.apps.common.sqlalchemy_mptt.events",
        "peekOfCode": "class _WeakdictBasedSet(weakref.WeakKeyDictionary, object):\n    \"\"\"\n    In absence of a default weakset implementation, provide our own dict\n    based solution.\n    \"\"\"\n    def add(self, obj):\n        self[obj] = None\n    def discard(self, obj):\n        super(_WeakdictBasedSet, self).pop(obj, None)\n    def pop(self):",
        "detail": "felicity.apps.common.sqlalchemy_mptt.events",
        "documentation": {}
    },
    {
        "label": "_WeakDefaultDict",
        "kind": 6,
        "importPath": "felicity.apps.common.sqlalchemy_mptt.events",
        "description": "felicity.apps.common.sqlalchemy_mptt.events",
        "peekOfCode": "class _WeakDefaultDict(weakref.WeakKeyDictionary, object):\n    def __getitem__(self, key):\n        try:\n            return super(_WeakDefaultDict, self).__getitem__(key)\n        except KeyError:\n            self[key] = value = _WeakdictBasedSet()\n            return value\nclass TreesManager(object):\n    \"\"\"\n    Manages events dispatching for all subclasses of a given class.",
        "detail": "felicity.apps.common.sqlalchemy_mptt.events",
        "documentation": {}
    },
    {
        "label": "TreesManager",
        "kind": 6,
        "importPath": "felicity.apps.common.sqlalchemy_mptt.events",
        "description": "felicity.apps.common.sqlalchemy_mptt.events",
        "peekOfCode": "class TreesManager(object):\n    \"\"\"\n    Manages events dispatching for all subclasses of a given class.\n    \"\"\"\n    def __init__(self, base_class):\n        self.base_class = base_class\n        self.classes = set()\n        self.instances = _WeakDefaultDict()\n    def register_events(self, remove=False):\n        for e, h in (",
        "detail": "felicity.apps.common.sqlalchemy_mptt.events",
        "documentation": {}
    },
    {
        "label": "mptt_before_insert",
        "kind": 2,
        "importPath": "felicity.apps.common.sqlalchemy_mptt.events",
        "description": "felicity.apps.common.sqlalchemy_mptt.events",
        "peekOfCode": "def mptt_before_insert(mapper, connection, instance):\n    \"\"\"Based on example\n    https://bitbucket.org/zzzeek/sqlalchemy/src/73095b353124/examples/nested_sets/nested_sets.py?at=master\n    \"\"\"\n    table = _get_tree_table(mapper)\n    db_pk = instance.get_pk_column()\n    table_pk = getattr(table.c, db_pk.name)\n    if instance.parent_id is None:\n        instance.left = 1\n        instance.right = 2",
        "detail": "felicity.apps.common.sqlalchemy_mptt.events",
        "documentation": {}
    },
    {
        "label": "mptt_before_delete",
        "kind": 2,
        "importPath": "felicity.apps.common.sqlalchemy_mptt.events",
        "description": "felicity.apps.common.sqlalchemy_mptt.events",
        "peekOfCode": "def mptt_before_delete(mapper, connection, instance, delete=True):\n    table = _get_tree_table(mapper)\n    tree_id = instance.tree_id\n    pk = getattr(instance, instance.get_pk_name())\n    db_pk = instance.get_pk_column()\n    table_pk = getattr(table.c, db_pk.name)\n    lft, rgt = connection.execute(\n        select(table.c.lft, table.c.rgt).where(table_pk == pk)\n    ).fetchone()\n    delta = rgt - lft + 1",
        "detail": "felicity.apps.common.sqlalchemy_mptt.events",
        "documentation": {}
    },
    {
        "label": "mptt_before_update",
        "kind": 2,
        "importPath": "felicity.apps.common.sqlalchemy_mptt.events",
        "description": "felicity.apps.common.sqlalchemy_mptt.events",
        "peekOfCode": "def mptt_before_update(mapper, connection, instance):\n    \"\"\"Based on this example:\n    http://stackoverflow.com/questions/889527/move-node-in-nested-set\n    \"\"\"\n    node_id = getattr(instance, instance.get_pk_name())\n    table = _get_tree_table(mapper)\n    db_pk = instance.get_pk_column()\n    default_level = instance.get_default_level()\n    table_pk = getattr(table.c, db_pk.name)\n    mptt_move_inside = None",
        "detail": "felicity.apps.common.sqlalchemy_mptt.events",
        "documentation": {}
    },
    {
        "label": "BaseNestedSets",
        "kind": 6,
        "importPath": "felicity.apps.common.sqlalchemy_mptt.mixins",
        "description": "felicity.apps.common.sqlalchemy_mptt.mixins",
        "peekOfCode": "class BaseNestedSets(object):\n    \"\"\"Base mixin for MPTT model.\n    Example:\n    .. code::\n        from sqlalchemy import Boolean, Column, create_engine, Integer\n        from sqlalchemy.ext.declarative import declarative_base\n        from sqlalchemy.orm import sessionmaker\n        from sqlalchemy_mptt.mixins import BaseNestedSets\n        Base = declarative_base()\n        class Tree(Base, BaseNestedSets):",
        "detail": "felicity.apps.common.sqlalchemy_mptt.mixins",
        "documentation": {}
    },
    {
        "label": "marshaller",
        "kind": 2,
        "importPath": "felicity.apps.common.utils.serializer",
        "description": "felicity.apps.common.utils.serializer",
        "peekOfCode": "def marshaller(obj, path=None, memoize=None, exclude: list[str] = None, depth=2) -> dict | str:\n    \"\"\"Notes:\n    1. We use memoization To prevent marshalling the same object again hence speed things up\n    2. We use path tracking To stop marshalling when a path starts to repeat itself or meets a certain path restriction\n    \"\"\"\n    if memoize is None:\n        memoize = {}\n    if path is None:\n        path = []\n    if exclude is None:",
        "detail": "felicity.apps.common.utils.serializer",
        "documentation": {}
    },
    {
        "label": "BroadcastEvent",
        "kind": 6,
        "importPath": "felicity.apps.common.channel",
        "description": "felicity.apps.common.channel",
        "peekOfCode": "class BroadcastEvent:\n    channel: str\n    message: Any\n@dataclass\nclass Subscriber:\n    queue: \"Queue[BroadcastEvent]\" = field(default_factory=Queue)\n    async def __aiter__(self) -> AsyncIterator[BroadcastEvent]:\n        while True:\n            item = await self.get()\n            yield item",
        "detail": "felicity.apps.common.channel",
        "documentation": {}
    },
    {
        "label": "Subscriber",
        "kind": 6,
        "importPath": "felicity.apps.common.channel",
        "description": "felicity.apps.common.channel",
        "peekOfCode": "class Subscriber:\n    queue: \"Queue[BroadcastEvent]\" = field(default_factory=Queue)\n    async def __aiter__(self) -> AsyncIterator[BroadcastEvent]:\n        while True:\n            item = await self.get()\n            yield item\n    async def get(self) -> BroadcastEvent:\n        item = await self.queue.get()\n        return item\n@dataclass",
        "detail": "felicity.apps.common.channel",
        "documentation": {}
    },
    {
        "label": "Broadcast",
        "kind": 6,
        "importPath": "felicity.apps.common.channel",
        "description": "felicity.apps.common.channel",
        "peekOfCode": "class Broadcast:\n    subscribers: dict[str, Set[Queue]] = field(default_factory=dict)\n    published: Queue = Queue()\n    @asynccontextmanager\n    async def subscribe(self, channel: str) -> AsyncIterator[Subscriber]:\n        subscriber = Subscriber()\n        subscribers_set = self.subscribers.get(channel, set())\n        subscribers_set.add(subscriber.queue)\n        self.subscribers[channel] = subscribers_set\n        try:",
        "detail": "felicity.apps.common.channel",
        "documentation": {}
    },
    {
        "label": "broadcast",
        "kind": 5,
        "importPath": "felicity.apps.common.channel",
        "description": "felicity.apps.common.channel",
        "peekOfCode": "broadcast = Broadcast()",
        "detail": "felicity.apps.common.channel",
        "documentation": {}
    },
    {
        "label": "ErrorLog",
        "kind": 6,
        "importPath": "felicity.apps.errlog.entities",
        "description": "felicity.apps.errlog.entities",
        "peekOfCode": "class ErrorLog(AuditUser):\n    __tablename__ = \"error_log\"\n    content = Column(JSONB)",
        "detail": "felicity.apps.errlog.entities",
        "documentation": {}
    },
    {
        "label": "ErrorLogRepository",
        "kind": 6,
        "importPath": "felicity.apps.errlog.repositories",
        "description": "felicity.apps.errlog.repositories",
        "peekOfCode": "class ErrorLogRepository(BaseRepository[ErrorLog]):\n    def __init__(self) -> None:\n        super().__init__(ErrorLog)",
        "detail": "felicity.apps.errlog.repositories",
        "documentation": {}
    },
    {
        "label": "ErrorLogBase",
        "kind": 6,
        "importPath": "felicity.apps.errlog.schemas",
        "description": "felicity.apps.errlog.schemas",
        "peekOfCode": "class ErrorLogBase(BaseModel):\n    content: Optional[Any] = None\nclass ErrorLog(ErrorLogBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass ErrorLogCreate(ErrorLogBase):\n    pass\nclass ErrorLogUpdate(ErrorLogBase):\n    pass",
        "detail": "felicity.apps.errlog.schemas",
        "documentation": {}
    },
    {
        "label": "ErrorLog",
        "kind": 6,
        "importPath": "felicity.apps.errlog.schemas",
        "description": "felicity.apps.errlog.schemas",
        "peekOfCode": "class ErrorLog(ErrorLogBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass ErrorLogCreate(ErrorLogBase):\n    pass\nclass ErrorLogUpdate(ErrorLogBase):\n    pass",
        "detail": "felicity.apps.errlog.schemas",
        "documentation": {}
    },
    {
        "label": "ErrorLogCreate",
        "kind": 6,
        "importPath": "felicity.apps.errlog.schemas",
        "description": "felicity.apps.errlog.schemas",
        "peekOfCode": "class ErrorLogCreate(ErrorLogBase):\n    pass\nclass ErrorLogUpdate(ErrorLogBase):\n    pass",
        "detail": "felicity.apps.errlog.schemas",
        "documentation": {}
    },
    {
        "label": "ErrorLogUpdate",
        "kind": 6,
        "importPath": "felicity.apps.errlog.schemas",
        "description": "felicity.apps.errlog.schemas",
        "peekOfCode": "class ErrorLogUpdate(ErrorLogBase):\n    pass",
        "detail": "felicity.apps.errlog.schemas",
        "documentation": {}
    },
    {
        "label": "ErrorLogService",
        "kind": 6,
        "importPath": "felicity.apps.errlog.services",
        "description": "felicity.apps.errlog.services",
        "peekOfCode": "class ErrorLogService(BaseService[ErrorLog, ErrorLogCreate, ErrorLogUpdate]):\n    def __int__(self):\n        super().__init__(ErrorLogRepository)",
        "detail": "felicity.apps.errlog.services",
        "documentation": {}
    },
    {
        "label": "Role",
        "kind": 6,
        "importPath": "felicity.apps.guards.config",
        "description": "felicity.apps.guards.config",
        "peekOfCode": "class Role(StrEnum):\n    ADMINISTRATOR: auto()\n    LAB_MANAGER = \"LAB_MANAGER\"\n    SCIENTIST = \"SCIENTIST\"\n    TECHNOLOGIST = \"TECHNOLOGIST\"\n    LAB_HAND = \"LABORATORY HAND\"\n    GUEST = \"GUEST\"\n    STORES = \"STORES\"\n    ACCOUNTING = \"ACCOUNTING\"\nclass Resource(StrEnum):",
        "detail": "felicity.apps.guards.config",
        "documentation": {}
    },
    {
        "label": "Resource",
        "kind": 6,
        "importPath": "felicity.apps.guards.config",
        "description": "felicity.apps.guards.config",
        "peekOfCode": "class Resource(StrEnum):\n    ANALYTICS = \"ANALYTICS\"\n    CLIENT = \"CLIENT\"\n    PATIENT = \"PATIENT\"\n    SAMPLE = \"SAMPLE\"\n    RESULT = \"RESULT\"\n    WORKSHEET = \"WORKSHEET\"\n    PRODUCT = \"PRODUCT\"\n    SHIPMENT = \"SHIPMENT\"\n    STORAGE = \"STORAGE\"",
        "detail": "felicity.apps.guards.config",
        "documentation": {}
    },
    {
        "label": "Access",
        "kind": 6,
        "importPath": "felicity.apps.guards.config",
        "description": "felicity.apps.guards.config",
        "peekOfCode": "class Access(StrEnum):\n    CREATE = \"CREATE\"\n    READ = \"READ\"\n    UPDATE = \"UPDATE\"\n    DELETE = \"DELETE\"\n    SUBMIT = \"SUBMIT\"\n    VERIFY = \"VERIFY\"\n    CANCEL = \"CANCEL\"\n    INVALIDATE = \"INVALIDATE\"\n    REJECT = \"REJECT\"",
        "detail": "felicity.apps.guards.config",
        "documentation": {}
    },
    {
        "label": "IdSequence",
        "kind": 6,
        "importPath": "felicity.apps.idsequencer.entities",
        "description": "felicity.apps.idsequencer.entities",
        "peekOfCode": "class IdSequence(BaseEntity):\n    __tablename__ = \"id_sequence\"\n    prefix = Column(String, nullable=False, unique=True)\n    number = Column(Integer, nullable=False)\n    updated = Column(DateTime, default=datetime.now, onupdate=datetime.now)",
        "detail": "felicity.apps.idsequencer.entities",
        "documentation": {}
    },
    {
        "label": "SequenceGenerateError",
        "kind": 6,
        "importPath": "felicity.apps.idsequencer.exception",
        "description": "felicity.apps.idsequencer.exception",
        "peekOfCode": "class SequenceGenerateError(Exception):\n    ...\nclass IncompleDataError(Exception):\n    ...",
        "detail": "felicity.apps.idsequencer.exception",
        "documentation": {}
    },
    {
        "label": "IncompleDataError",
        "kind": 6,
        "importPath": "felicity.apps.idsequencer.exception",
        "description": "felicity.apps.idsequencer.exception",
        "peekOfCode": "class IncompleDataError(Exception):\n    ...",
        "detail": "felicity.apps.idsequencer.exception",
        "documentation": {}
    },
    {
        "label": "IdSequenceRepository",
        "kind": 6,
        "importPath": "felicity.apps.idsequencer.repository",
        "description": "felicity.apps.idsequencer.repository",
        "peekOfCode": "class IdSequenceRepository(BaseRepository[IdSequence]):\n    def __init__(self) -> None:\n        self.model = IdSequence\n        super().__init__()\n    async def next_number(self, prefix: str) -> int:\n        insert_stmt = (\n            insert(self.model)\n            .values(prefix=prefix, number=1)\n            .on_conflict_do_update(\n                index_elements=[\"prefix\"],",
        "detail": "felicity.apps.idsequencer.repository",
        "documentation": {}
    },
    {
        "label": "SEQUENCE_BEGIN",
        "kind": 5,
        "importPath": "felicity.apps.idsequencer.repository",
        "description": "felicity.apps.idsequencer.repository",
        "peekOfCode": "SEQUENCE_BEGIN = 5\nSEQUENCE_CUTOFF = 10\nclass IdSequenceRepository(BaseRepository[IdSequence]):\n    def __init__(self) -> None:\n        self.model = IdSequence\n        super().__init__()\n    async def next_number(self, prefix: str) -> int:\n        insert_stmt = (\n            insert(self.model)\n            .values(prefix=prefix, number=1)",
        "detail": "felicity.apps.idsequencer.repository",
        "documentation": {}
    },
    {
        "label": "SEQUENCE_CUTOFF",
        "kind": 5,
        "importPath": "felicity.apps.idsequencer.repository",
        "description": "felicity.apps.idsequencer.repository",
        "peekOfCode": "SEQUENCE_CUTOFF = 10\nclass IdSequenceRepository(BaseRepository[IdSequence]):\n    def __init__(self) -> None:\n        self.model = IdSequence\n        super().__init__()\n    async def next_number(self, prefix: str) -> int:\n        insert_stmt = (\n            insert(self.model)\n            .values(prefix=prefix, number=1)\n            .on_conflict_do_update(",
        "detail": "felicity.apps.idsequencer.repository",
        "documentation": {}
    },
    {
        "label": "IdSequenceService",
        "kind": 6,
        "importPath": "felicity.apps.idsequencer.service",
        "description": "felicity.apps.idsequencer.service",
        "peekOfCode": "class IdSequenceService(BaseService[IdSequence]):\n    def __init__(self, repository: IdSequenceRepository) -> None:\n        self.repository = repository\n        super().__init__(repository)\n    async def get_next_number(\n        self, prefix: str = None, generic=False\n    ) -> tuple[int, str]:\n        if not prefix:\n            raise IncompleDataError(\"A prefix is required\")\n        prefix_year = str(datetime.now().year)[2:]",
        "detail": "felicity.apps.idsequencer.service",
        "documentation": {}
    },
    {
        "label": "IdSequence",
        "kind": 5,
        "importPath": "felicity.apps.idsequencer.service",
        "description": "felicity.apps.idsequencer.service",
        "peekOfCode": "IdSequence = TypeVar(\"IdSequence\")\nSEQUENCE_BEGIN = 5\nSEQUENCE_CUTOFF = 10\nclass IdSequenceService(BaseService[IdSequence]):\n    def __init__(self, repository: IdSequenceRepository) -> None:\n        self.repository = repository\n        super().__init__(repository)\n    async def get_next_number(\n        self, prefix: str = None, generic=False\n    ) -> tuple[int, str]:",
        "detail": "felicity.apps.idsequencer.service",
        "documentation": {}
    },
    {
        "label": "SEQUENCE_BEGIN",
        "kind": 5,
        "importPath": "felicity.apps.idsequencer.service",
        "description": "felicity.apps.idsequencer.service",
        "peekOfCode": "SEQUENCE_BEGIN = 5\nSEQUENCE_CUTOFF = 10\nclass IdSequenceService(BaseService[IdSequence]):\n    def __init__(self, repository: IdSequenceRepository) -> None:\n        self.repository = repository\n        super().__init__(repository)\n    async def get_next_number(\n        self, prefix: str = None, generic=False\n    ) -> tuple[int, str]:\n        if not prefix:",
        "detail": "felicity.apps.idsequencer.service",
        "documentation": {}
    },
    {
        "label": "SEQUENCE_CUTOFF",
        "kind": 5,
        "importPath": "felicity.apps.idsequencer.service",
        "description": "felicity.apps.idsequencer.service",
        "peekOfCode": "SEQUENCE_CUTOFF = 10\nclass IdSequenceService(BaseService[IdSequence]):\n    def __init__(self, repository: IdSequenceRepository) -> None:\n        self.repository = repository\n        super().__init__(repository)\n    async def get_next_number(\n        self, prefix: str = None, generic=False\n    ) -> tuple[int, str]:\n        if not prefix:\n            raise IncompleDataError(\"A prefix is required\")",
        "detail": "felicity.apps.idsequencer.service",
        "documentation": {}
    },
    {
        "label": "sequencer",
        "kind": 2,
        "importPath": "felicity.apps.idsequencer.utils",
        "description": "felicity.apps.idsequencer.utils",
        "peekOfCode": "def sequencer(value, count):\n    \"\"\"Generates a sequence with a specifies set count length\"\"\"\n    return f\"{'0' * (count - len(str(value)))}{value}\"\ndef sequence_alpha(value: str):\n    alphabet = list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    alphas = list(value)\n    total = len(value)\n    index = total - 1\n    while index > -1:\n        alpha = alphas[index]",
        "detail": "felicity.apps.idsequencer.utils",
        "documentation": {}
    },
    {
        "label": "sequence_alpha",
        "kind": 2,
        "importPath": "felicity.apps.idsequencer.utils",
        "description": "felicity.apps.idsequencer.utils",
        "peekOfCode": "def sequence_alpha(value: str):\n    alphabet = list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    alphas = list(value)\n    total = len(value)\n    index = total - 1\n    while index > -1:\n        alpha = alphas[index]\n        if not alpha is alphabet[-1]:\n            alphas[index] = alphabet[alphabet.index(alpha) + 1]\n            reset = index + 1",
        "detail": "felicity.apps.idsequencer.utils",
        "documentation": {}
    },
    {
        "label": "FelicityBarCoder",
        "kind": 6,
        "importPath": "felicity.apps.impress.barcode.engine",
        "description": "felicity.apps.impress.barcode.engine",
        "peekOfCode": "class FelicityBarCoder:\n    def __init__(\n            self, page_width=40.0, page_height=30.0, barcode_width=30, barcode_height=7.5\n    ):\n        assert page_width > barcode_width and page_height > barcode_height\n        self.pdf = FPDF(unit=\"mm\", format=(page_width, page_height))\n        self.pdf.set_auto_page_break(auto=False, margin=0.0)\n        self.margin_left = (self.pdf.w - barcode_width) / 2\n        self.margin_top = 3\n        self.txt_left = self.margin_left  # + 0.5",
        "detail": "felicity.apps.impress.barcode.engine",
        "documentation": {}
    },
    {
        "label": "Barcode.default_writer_options['write_text']",
        "kind": 5,
        "importPath": "felicity.apps.impress.barcode.engine",
        "description": "felicity.apps.impress.barcode.engine",
        "peekOfCode": "Barcode.default_writer_options['write_text'] = False\nImageWriter.human = \" \"\nclass FelicityBarCoder:\n    def __init__(\n            self, page_width=40.0, page_height=30.0, barcode_width=30, barcode_height=7.5\n    ):\n        assert page_width > barcode_width and page_height > barcode_height\n        self.pdf = FPDF(unit=\"mm\", format=(page_width, page_height))\n        self.pdf.set_auto_page_break(auto=False, margin=0.0)\n        self.margin_left = (self.pdf.w - barcode_width) / 2",
        "detail": "felicity.apps.impress.barcode.engine",
        "documentation": {}
    },
    {
        "label": "ImageWriter.human",
        "kind": 5,
        "importPath": "felicity.apps.impress.barcode.engine",
        "description": "felicity.apps.impress.barcode.engine",
        "peekOfCode": "ImageWriter.human = \" \"\nclass FelicityBarCoder:\n    def __init__(\n            self, page_width=40.0, page_height=30.0, barcode_width=30, barcode_height=7.5\n    ):\n        assert page_width > barcode_width and page_height > barcode_height\n        self.pdf = FPDF(unit=\"mm\", format=(page_width, page_height))\n        self.pdf.set_auto_page_break(auto=False, margin=0.0)\n        self.margin_left = (self.pdf.w - barcode_width) / 2\n        self.margin_top = 3",
        "detail": "felicity.apps.impress.barcode.engine",
        "documentation": {}
    },
    {
        "label": "BarCodeMeta",
        "kind": 6,
        "importPath": "felicity.apps.impress.barcode.schema",
        "description": "felicity.apps.impress.barcode.schema",
        "peekOfCode": "class BarCodeMeta(BaseModel):\n    label: str\n    value: str\nclass BarCode(BaseModel):\n    barcode: str\n    metadata: list[BarCodeMeta]",
        "detail": "felicity.apps.impress.barcode.schema",
        "documentation": {}
    },
    {
        "label": "BarCode",
        "kind": 6,
        "importPath": "felicity.apps.impress.barcode.schema",
        "description": "felicity.apps.impress.barcode.schema",
        "peekOfCode": "class BarCode(BaseModel):\n    barcode: str\n    metadata: list[BarCodeMeta]",
        "detail": "felicity.apps.impress.barcode.schema",
        "documentation": {}
    },
    {
        "label": "PDF",
        "kind": 6,
        "importPath": "felicity.apps.impress.invoicing.engine",
        "description": "felicity.apps.impress.invoicing.engine",
        "peekOfCode": "class PDF(FPDF):\n    def footer(self):\n        # Position cursor at 1.5 cm from bottom:\n        self.set_y(-15)\n        # Setting font: helvetica italic 8\n        self.set_font(\"helvetica\", \"I\", 8)\n        # Printing page number:\n        self.cell(0, 10, f\"Page {self.page_no()}/{{nb}}\", align=\"C\")\nclass FelicityInvoice:\n    def __init__(self):",
        "detail": "felicity.apps.impress.invoicing.engine",
        "documentation": {}
    },
    {
        "label": "FelicityInvoice",
        "kind": 6,
        "importPath": "felicity.apps.impress.invoicing.engine",
        "description": "felicity.apps.impress.invoicing.engine",
        "peekOfCode": "class FelicityInvoice:\n    def __init__(self):\n        self.logo_path = settings.BASE_DIR + \"/assets/logo.png\"\n        self.pdf = PDF(orientation=\"P\", unit=\"mm\", format=\"A4\")\n        self.pdf.set_font(\"helvetica\", \"\", 13.0)\n        self.pdf.set_page_background((255, 255, 255))\n        self.pdf_w = 210\n        self.pdf_h = 297\n        self.margin_top = 20\n        self.margin_left = 10",
        "detail": "felicity.apps.impress.invoicing.engine",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "felicity.apps.impress.invoicing.engine",
        "description": "felicity.apps.impress.invoicing.engine",
        "peekOfCode": "settings = get_settings()\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\nclass PDF(FPDF):\n    def footer(self):\n        # Position cursor at 1.5 cm from bottom:\n        self.set_y(-15)\n        # Setting font: helvetica italic 8\n        self.set_font(\"helvetica\", \"I\", 8)\n        # Printing page number:",
        "detail": "felicity.apps.impress.invoicing.engine",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.impress.invoicing.engine",
        "description": "felicity.apps.impress.invoicing.engine",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass PDF(FPDF):\n    def footer(self):\n        # Position cursor at 1.5 cm from bottom:\n        self.set_y(-15)\n        # Setting font: helvetica italic 8\n        self.set_font(\"helvetica\", \"I\", 8)\n        # Printing page number:\n        self.cell(0, 10, f\"Page {self.page_no()}/{{nb}}\", align=\"C\")\nclass FelicityInvoice:",
        "detail": "felicity.apps.impress.invoicing.engine",
        "documentation": {}
    },
    {
        "label": "PDF",
        "kind": 6,
        "importPath": "felicity.apps.impress.sample.engine",
        "description": "felicity.apps.impress.sample.engine",
        "peekOfCode": "class PDF(FPDF):\n    def footer(self):\n        # Position cursor at 1.5 cm from bottom:\n        self.set_y(-15)\n        # Setting font: helvetica italic 8\n        self.set_font(\"helvetica\", \"I\", 8)\n        # Printing page number:\n        self.cell(0, 10, f\"Page {self.page_no()}/{{nb}}\", align=\"C\")\nclass FelicityImpress:\n    def __init__(self):",
        "detail": "felicity.apps.impress.sample.engine",
        "documentation": {}
    },
    {
        "label": "FelicityImpress",
        "kind": 6,
        "importPath": "felicity.apps.impress.sample.engine",
        "description": "felicity.apps.impress.sample.engine",
        "peekOfCode": "class FelicityImpress:\n    def __init__(self):\n        self.logo_path = settings.BASE_DIR + \"/assets/logo.png\"\n        self.pdf = PDF(orientation=\"P\", unit=\"mm\", format=\"A4\")\n        self.pdf.set_font(\"Helvetica\")\n        self.pdf.set_page_background((255, 255, 255))\n        self.pdf_w = 210\n        self.pdf_h = 297\n        self.margin_top = 20\n        self.margin_left = 20",
        "detail": "felicity.apps.impress.sample.engine",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "felicity.apps.impress.sample.engine",
        "description": "felicity.apps.impress.sample.engine",
        "peekOfCode": "settings = get_settings()\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\nclass PDF(FPDF):\n    def footer(self):\n        # Position cursor at 1.5 cm from bottom:\n        self.set_y(-15)\n        # Setting font: helvetica italic 8\n        self.set_font(\"helvetica\", \"I\", 8)\n        # Printing page number:",
        "detail": "felicity.apps.impress.sample.engine",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.impress.sample.engine",
        "description": "felicity.apps.impress.sample.engine",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass PDF(FPDF):\n    def footer(self):\n        # Position cursor at 1.5 cm from bottom:\n        self.set_y(-15)\n        # Setting font: helvetica italic 8\n        self.set_font(\"helvetica\", \"I\", 8)\n        # Printing page number:\n        self.cell(0, 10, f\"Page {self.page_no()}/{{nb}}\", align=\"C\")\nclass FelicityImpress:",
        "detail": "felicity.apps.impress.sample.engine",
        "documentation": {}
    },
    {
        "label": "ReportImpress",
        "kind": 6,
        "importPath": "felicity.apps.impress.sample.models",
        "description": "felicity.apps.impress.sample.models",
        "peekOfCode": "class ReportImpress(AuditHistory):\n    __tablename__ = \"report_impress\"\n    state = Column(String)  # preliminary, final, invalidated\n    sample_uid = Column(String, ForeignKey(\"sample.uid\"), nullable=False)\n    sample = relationship(Sample, foreign_keys=[sample_uid], lazy=\"selectin\")\n    json_content: dict = Column(JSONB, nullable=True)\n    pdf_content = Column(LargeBinary, nullable=True)\n    email_required = Column(Boolean(), default=False)\n    email_sent = Column(Boolean(), default=False)\n    sms_required = Column(Boolean(), default=False)",
        "detail": "felicity.apps.impress.sample.models",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.impress.sample.models",
        "description": "felicity.apps.impress.sample.models",
        "peekOfCode": "logger = logging.getLogger(__name__)\nstreamer = FelicityStreamer()\nclass ReportImpress(AuditHistory):\n    __tablename__ = \"report_impress\"\n    state = Column(String)  # preliminary, final, invalidated\n    sample_uid = Column(String, ForeignKey(\"sample.uid\"), nullable=False)\n    sample = relationship(Sample, foreign_keys=[sample_uid], lazy=\"selectin\")\n    json_content: dict = Column(JSONB, nullable=True)\n    pdf_content = Column(LargeBinary, nullable=True)\n    email_required = Column(Boolean(), default=False)",
        "detail": "felicity.apps.impress.sample.models",
        "documentation": {}
    },
    {
        "label": "streamer",
        "kind": 5,
        "importPath": "felicity.apps.impress.sample.models",
        "description": "felicity.apps.impress.sample.models",
        "peekOfCode": "streamer = FelicityStreamer()\nclass ReportImpress(AuditHistory):\n    __tablename__ = \"report_impress\"\n    state = Column(String)  # preliminary, final, invalidated\n    sample_uid = Column(String, ForeignKey(\"sample.uid\"), nullable=False)\n    sample = relationship(Sample, foreign_keys=[sample_uid], lazy=\"selectin\")\n    json_content: dict = Column(JSONB, nullable=True)\n    pdf_content = Column(LargeBinary, nullable=True)\n    email_required = Column(Boolean(), default=False)\n    email_sent = Column(Boolean(), default=False)",
        "detail": "felicity.apps.impress.sample.models",
        "documentation": {}
    },
    {
        "label": "ReportImpressBase",
        "kind": 6,
        "importPath": "felicity.apps.impress.sample.schemas",
        "description": "felicity.apps.impress.sample.schemas",
        "peekOfCode": "class ReportImpressBase(BaseModel):\n    state: str | None = None\n    sample_uid: str | None = None\n    sample: Optional[SampleInDB] = None\n    json_content: Optional[dict] = {}\n    pdf_content: Optional[bytes] = None\n    email_required: bool | None = False\n    email_sent: bool | None = False\n    sms_required: bool | None = False\n    sms_sent: bool | None = False",
        "detail": "felicity.apps.impress.sample.schemas",
        "documentation": {}
    },
    {
        "label": "ReportImpressBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.impress.sample.schemas",
        "description": "felicity.apps.impress.sample.schemas",
        "peekOfCode": "class ReportImpressBaseInDB(ReportImpressBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReportImpressCreate(ReportImpressBase):\n    pass\n# Properties to receive via API on update\nclass ReportImpressUpdate(ReportImpressBase):\n    pass",
        "detail": "felicity.apps.impress.sample.schemas",
        "documentation": {}
    },
    {
        "label": "ReportImpressCreate",
        "kind": 6,
        "importPath": "felicity.apps.impress.sample.schemas",
        "description": "felicity.apps.impress.sample.schemas",
        "peekOfCode": "class ReportImpressCreate(ReportImpressBase):\n    pass\n# Properties to receive via API on update\nclass ReportImpressUpdate(ReportImpressBase):\n    pass",
        "detail": "felicity.apps.impress.sample.schemas",
        "documentation": {}
    },
    {
        "label": "ReportImpressUpdate",
        "kind": 6,
        "importPath": "felicity.apps.impress.sample.schemas",
        "description": "felicity.apps.impress.sample.schemas",
        "peekOfCode": "class ReportImpressUpdate(ReportImpressBase):\n    pass",
        "detail": "felicity.apps.impress.sample.schemas",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "felicity.apps.impress.sample.tasks",
        "description": "felicity.apps.impress.sample.tasks",
        "peekOfCode": "settings = get_settings()\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\nreport_notifier = ReportNotifier()\nasync def impress_results(job_uid: str):\n    logger.info(f\"starting impress job {job_uid} ....\")\n    job = await job_models.Job.get(uid=job_uid)\n    if not job:\n        return\n    if job.status != job_states.PENDING:",
        "detail": "felicity.apps.impress.sample.tasks",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.impress.sample.tasks",
        "description": "felicity.apps.impress.sample.tasks",
        "peekOfCode": "logger = logging.getLogger(__name__)\nreport_notifier = ReportNotifier()\nasync def impress_results(job_uid: str):\n    logger.info(f\"starting impress job {job_uid} ....\")\n    job = await job_models.Job.get(uid=job_uid)\n    if not job:\n        return\n    if job.status != job_states.PENDING:\n        return\n    await job.change_status(new_status=job_states.RUNNING)",
        "detail": "felicity.apps.impress.sample.tasks",
        "documentation": {}
    },
    {
        "label": "report_notifier",
        "kind": 5,
        "importPath": "felicity.apps.impress.sample.tasks",
        "description": "felicity.apps.impress.sample.tasks",
        "peekOfCode": "report_notifier = ReportNotifier()\nasync def impress_results(job_uid: str):\n    logger.info(f\"starting impress job {job_uid} ....\")\n    job = await job_models.Job.get(uid=job_uid)\n    if not job:\n        return\n    if job.status != job_states.PENDING:\n        return\n    await job.change_status(new_status=job_states.RUNNING)\n    user = await user_models.User.get(uid=job.creator_uid)",
        "detail": "felicity.apps.impress.sample.tasks",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.impress.sample.utils",
        "description": "felicity.apps.impress.sample.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\nstreamer = FelicityStreamer()\nexclude = [\n    \"auth\",\n    \"preference\",\n    \"groups\",\n    \"right\",\n    \"left\",\n    \"level\",\n    \"tree_id\",",
        "detail": "felicity.apps.impress.sample.utils",
        "documentation": {}
    },
    {
        "label": "streamer",
        "kind": 5,
        "importPath": "felicity.apps.impress.sample.utils",
        "description": "felicity.apps.impress.sample.utils",
        "peekOfCode": "streamer = FelicityStreamer()\nexclude = [\n    \"auth\",\n    \"preference\",\n    \"groups\",\n    \"right\",\n    \"left\",\n    \"level\",\n    \"tree_id\",\n    \"parent_id\",",
        "detail": "felicity.apps.impress.sample.utils",
        "documentation": {}
    },
    {
        "label": "exclude",
        "kind": 5,
        "importPath": "felicity.apps.impress.sample.utils",
        "description": "felicity.apps.impress.sample.utils",
        "peekOfCode": "exclude = [\n    \"auth\",\n    \"preference\",\n    \"groups\",\n    \"right\",\n    \"left\",\n    \"level\",\n    \"tree_id\",\n    \"parent_id\",\n    \"parent\",",
        "detail": "felicity.apps.impress.sample.utils",
        "documentation": {}
    },
    {
        "label": "PDF",
        "kind": 6,
        "importPath": "felicity.apps.impress.shipment.engine",
        "description": "felicity.apps.impress.shipment.engine",
        "peekOfCode": "class PDF(FPDF):\n    def header(self):\n        # Rendering logo:\n        # self.image(\"../docs/fpdf2-logo.png\", 10, 8, 33)\n        # Setting font: helvetica bold 15\n        self.set_font(\"helvetica\", \"B\", 15)\n        # Moving cursor to the right:\n        self.cell(1)\n        # Printing title:\n        self.cell(60, 10, \"Felicity Shipment Mannifest\", border=1, align=\"C\")",
        "detail": "felicity.apps.impress.shipment.engine",
        "documentation": {}
    },
    {
        "label": "ManifetReport",
        "kind": 6,
        "importPath": "felicity.apps.impress.shipment.engine",
        "description": "felicity.apps.impress.shipment.engine",
        "peekOfCode": "class ManifetReport:\n    def __init__(self):\n        self.pdf = PDF(orientation=\"P\", unit=\"mm\", format=\"A4\")\n        self.pdf.set_font(\"Helvetica\")\n        self.pdf.set_page_background((255, 255, 255))\n        self.pdf_w = 210\n        self.pdf_h = 297\n        self.margin_top = 20\n        self.margin_left = 10\n        self.y_diff = 5  # space between rows",
        "detail": "felicity.apps.impress.shipment.engine",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.impress.shipment.engine",
        "description": "felicity.apps.impress.shipment.engine",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass PDF(FPDF):\n    def header(self):\n        # Rendering logo:\n        # self.image(\"../docs/fpdf2-logo.png\", 10, 8, 33)\n        # Setting font: helvetica bold 15\n        self.set_font(\"helvetica\", \"B\", 15)\n        # Moving cursor to the right:\n        self.cell(1)\n        # Printing title:",
        "detail": "felicity.apps.impress.shipment.engine",
        "documentation": {}
    },
    {
        "label": "ReportImpress",
        "kind": 6,
        "importPath": "felicity.apps.impress.entities",
        "description": "felicity.apps.impress.entities",
        "peekOfCode": "class ReportImpress(AuditHistory):\n    __tablename__ = \"report_impress\"\n    state = Column(String)  # preliminary, final, invalidated\n    sample_uid = Column(String, ForeignKey(\"sample.uid\"), nullable=False)\n    sample = relationship(Sample, foreign_keys=[sample_uid], lazy=\"selectin\")\n    json_content: dict = Column(JSONB, nullable=True)\n    pdf_content = Column(LargeBinary, nullable=True)\n    email_required = Column(Boolean(), default=False)\n    email_sent = Column(Boolean(), default=False)\n    sms_required = Column(Boolean(), default=False)",
        "detail": "felicity.apps.impress.entities",
        "documentation": {}
    },
    {
        "label": "ReportImpressRepository",
        "kind": 6,
        "importPath": "felicity.apps.impress.repository",
        "description": "felicity.apps.impress.repository",
        "peekOfCode": "class ReportImpressRepository(BaseRepository[ReportImpress]):\n    def __init__(self) -> None:\n        super().__init__(ReportImpress)",
        "detail": "felicity.apps.impress.repository",
        "documentation": {}
    },
    {
        "label": "ReportImpressService",
        "kind": 6,
        "importPath": "felicity.apps.impress.services",
        "description": "felicity.apps.impress.services",
        "peekOfCode": "class ReportImpressService(BaseService[ReportImpress, ReportImpressCreate, ReportImpressUpdate]):\n    def __init__(self):\n        self.sample_service = SampleService()\n        self.activity_stream_service = ActivityStreamService()\n        self.job_service = JobService()\n        self.user_service = UserService()\n        self.notification_service = NotificationService()\n        super().__init__(ReportImpressRepository)\n    async def impress_reports_download(self, uids: list[str]) -> bytes | None:\n        \"\"\"Fetch Latest report given sample id\"\"\"",
        "detail": "felicity.apps.impress.services",
        "documentation": {}
    },
    {
        "label": "Method",
        "kind": 6,
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "peekOfCode": "class Method(AuditUser):\n    \"\"\"Method\n    analytical method\n    \"\"\"\n    __tablename__ = \"method\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)\n    keyword = Column(String, nullable=True)\n    instruments = relationship(\n        \"Instrument\",",
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "InstrumentType",
        "kind": 6,
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "peekOfCode": "class InstrumentType(AuditUser):\n    \"\"\"Instrument Type\"\"\"\n    __tablename__ = \"instrument_type\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\nclass Instrument(AuditUser):\n    \"\"\"Instrument/Analyser\"\"\"\n    __tablename__ = \"instrument\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)",
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "Instrument",
        "kind": 6,
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "peekOfCode": "class Instrument(AuditUser):\n    \"\"\"Instrument/Analyser\"\"\"\n    __tablename__ = \"instrument\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)\n    keyword = Column(String, nullable=True)\n    instrument_type_uid = Column(\n        String, ForeignKey(\"instrument_type.uid\"), nullable=True\n    )\n    instrument_type = relationship(\"InstrumentType\", lazy=\"selectin\")",
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrument",
        "kind": 6,
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "peekOfCode": "class LaboratoryInstrument(AuditUser):\n    \"\"\"Laboratory Instrument\"\"\"\n    __tablename__ = \"laboratory_instrument\"\n    instrument_uid = Column(String, ForeignKey(\"instrument.uid\"), nullable=False)\n    instrument = relationship(\"Instrument\", lazy=\"selectin\")\n    lab_name = Column(String, nullable=False)\n    serial_number = Column(String, nullable=False)\n    date_commissioned = Column(DateTime, nullable=True)\n    date_decommissioned = Column(DateTime, nullable=True)\nclass InstrumentCalibration(AuditUser):",
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibration",
        "kind": 6,
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "peekOfCode": "class InstrumentCalibration(AuditUser):\n    \"\"\"Laboratory Instrument Calibration Task\n    -   ensures the measurement accuracy of an instrument meets a known standard\n    -   Is it still accurate?\n    \"\"\"\n    __tablename__ = \"instrument_calibration\"\n    laboratory_instrument_uid = Column(\n        String, ForeignKey(\"laboratory_instrument.uid\"), nullable=False\n    )\n    laboratory_instrument = relationship(\"LaboratoryInstrument\", lazy=\"selectin\")",
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificate",
        "kind": 6,
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "peekOfCode": "class CalibrationCertificate(AuditUser):\n    \"\"\"Instrument Calibration Certificate\"\"\"\n    __tablename__ = \"calibration_certificate\"\n    laboratory_instrument_uid = Column(\n        String, ForeignKey(\"laboratory_instrument.uid\"), nullable=False\n    )\n    laboratory_instrument = relationship(\"LaboratoryInstrument\", lazy=\"selectin\")\n    certificate_code = Column(String, index=True, unique=True, nullable=False)\n    certificate = Column(LargeBinary, nullable=True)\n    internal = Column(Boolean(), nullable=False)",
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetence",
        "kind": 6,
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "peekOfCode": "class InstrumentCompetence(AuditUser):\n    __tablename__ = \"instrument_competence\"\n    instrument_uid = Column(String, ForeignKey(\"instrument.uid\"), nullable=False)\n    instrument = relationship(\"Instrument\", lazy=\"selectin\")\n    description = Column(String, default=\"competent\", nullable=True)\n    user_uid = Column(String, ForeignKey(\"user.uid\"), nullable=False)\n    user = relationship(\n        User, foreign_keys=[user_uid], backref=\"user_uid\", lazy=\"selectin\"\n    )\n    issue_date = Column(DateTime, nullable=False)",
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "method_instrument",
        "kind": 5,
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "peekOfCode": "method_instrument = Table(\n    \"method_instrument\",\n    BaseEntity.metadata,\n    Column(\"method_uid\", ForeignKey(\"method.uid\"), primary_key=True),\n    Column(\"instrument_uid\", ForeignKey(\"instrument.uid\"), primary_key=True),\n)\nclass Method(AuditUser):\n    \"\"\"Method\n    analytical method\n    \"\"\"",
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "MethodRepository",
        "kind": 6,
        "importPath": "felicity.apps.instrument.repository",
        "description": "felicity.apps.instrument.repository",
        "peekOfCode": "class MethodRepository(BaseRepository[Method]):\n    def __init__(self) -> None:\n        super().__init__(Method)\n    async def paginate_with_cursors(\n            self,\n            page_size: int | None = None,\n            after_cursor: str | None = None,\n            before_cursor: str | None = None,\n            text: str | None = None,\n            sort_by: list[str] | None = None,",
        "detail": "felicity.apps.instrument.repository",
        "documentation": {}
    },
    {
        "label": "InstrumentRepository",
        "kind": 6,
        "importPath": "felicity.apps.instrument.repository",
        "description": "felicity.apps.instrument.repository",
        "peekOfCode": "class InstrumentRepository(BaseRepository[Instrument]):\n    def __init__(self) -> None:\n        super().__init__(Instrument)\n    async def paginate_with_cursors(\n            self,\n            page_size: int | None = None,\n            after_cursor: str | None = None,\n            before_cursor: str | None = None,\n            text: str | None = None,\n            sort_by: list[str] | None = None,",
        "detail": "felicity.apps.instrument.repository",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentRepository",
        "kind": 6,
        "importPath": "felicity.apps.instrument.repository",
        "description": "felicity.apps.instrument.repository",
        "peekOfCode": "class LaboratoryInstrumentRepository(\n    BaseRepository[LaboratoryInstrument],\n):\n    def __init__(self,):\n        super().__init__(LaboratoryInstrument)\nclass InstrumentTypeRepository(\n    BaseRepository[InstrumentType]\n):\n    def __init__(self) -> None:\n        super().__init__(InstrumentType)",
        "detail": "felicity.apps.instrument.repository",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeRepository",
        "kind": 6,
        "importPath": "felicity.apps.instrument.repository",
        "description": "felicity.apps.instrument.repository",
        "peekOfCode": "class InstrumentTypeRepository(\n    BaseRepository[InstrumentType]\n):\n    def __init__(self) -> None:\n        super().__init__(InstrumentType)\n    async def paginate_with_cursors(\n            self,\n            page_size: int | None = None,\n            after_cursor: str | None = None,\n            before_cursor: str | None = None,",
        "detail": "felicity.apps.instrument.repository",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibrationRepository",
        "kind": 6,
        "importPath": "felicity.apps.instrument.repository",
        "description": "felicity.apps.instrument.repository",
        "peekOfCode": "class InstrumentCalibrationRepository(\n    BaseRepository[InstrumentCalibration]\n):\n    def __init__(self) -> None:\n        super().__init__(InstrumentCalibration)\nclass CalibrationCertificateRepository(\n    BaseRepository[CalibrationCertificate]\n):\n    def __init__(self) -> None:\n        super().__init__(CalibrationCertificate)",
        "detail": "felicity.apps.instrument.repository",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificateRepository",
        "kind": 6,
        "importPath": "felicity.apps.instrument.repository",
        "description": "felicity.apps.instrument.repository",
        "peekOfCode": "class CalibrationCertificateRepository(\n    BaseRepository[CalibrationCertificate]\n):\n    def __init__(self) -> None:\n        super().__init__(CalibrationCertificate)\nclass InstrumentCompetenceRepository(\n    BaseRepository[InstrumentCompetence],\n):\n    def __init__(self,):\n        super().__init__(InstrumentCompetence)",
        "detail": "felicity.apps.instrument.repository",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetenceRepository",
        "kind": 6,
        "importPath": "felicity.apps.instrument.repository",
        "description": "felicity.apps.instrument.repository",
        "peekOfCode": "class InstrumentCompetenceRepository(\n    BaseRepository[InstrumentCompetence],\n):\n    def __init__(self,):\n        super().__init__(InstrumentCompetence)",
        "detail": "felicity.apps.instrument.repository",
        "documentation": {}
    },
    {
        "label": "SEQUENCE_BEGIN",
        "kind": 5,
        "importPath": "felicity.apps.instrument.repository",
        "description": "felicity.apps.instrument.repository",
        "peekOfCode": "SEQUENCE_BEGIN = 5\nSEQUENCE_CUTOFF = 10\nclass MethodRepository(BaseRepository[Method]):\n    def __init__(self) -> None:\n        super().__init__(Method)\n    async def paginate_with_cursors(\n            self,\n            page_size: int | None = None,\n            after_cursor: str | None = None,\n            before_cursor: str | None = None,",
        "detail": "felicity.apps.instrument.repository",
        "documentation": {}
    },
    {
        "label": "SEQUENCE_CUTOFF",
        "kind": 5,
        "importPath": "felicity.apps.instrument.repository",
        "description": "felicity.apps.instrument.repository",
        "peekOfCode": "SEQUENCE_CUTOFF = 10\nclass MethodRepository(BaseRepository[Method]):\n    def __init__(self) -> None:\n        super().__init__(Method)\n    async def paginate_with_cursors(\n            self,\n            page_size: int | None = None,\n            after_cursor: str | None = None,\n            before_cursor: str | None = None,\n            text: str | None = None,",
        "detail": "felicity.apps.instrument.repository",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeBase",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class InstrumentTypeBase(BaseAuditModel):\n    name: str | None = None\n    description: str | None = None\n    active: bool | None = True\nclass InstrumentTypeBaseInDB(InstrumentTypeBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass InstrumentTypeCreate(InstrumentTypeBase):\n    pass",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class InstrumentTypeBaseInDB(InstrumentTypeBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass InstrumentTypeCreate(InstrumentTypeBase):\n    pass\n# Properties to receive via API on update\nclass InstrumentTypeUpdate(InstrumentTypeBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeCreate",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class InstrumentTypeCreate(InstrumentTypeBase):\n    pass\n# Properties to receive via API on update\nclass InstrumentTypeUpdate(InstrumentTypeBase):\n    pass\n# Properties to return via API\nclass InstrumentType(InstrumentTypeBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisCategoryInDB(InstrumentTypeBaseInDB):",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeUpdate",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class InstrumentTypeUpdate(InstrumentTypeBase):\n    pass\n# Properties to return via API\nclass InstrumentType(InstrumentTypeBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisCategoryInDB(InstrumentTypeBaseInDB):\n    pass\n#\n#  Instrument",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentType",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class InstrumentType(InstrumentTypeBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisCategoryInDB(InstrumentTypeBaseInDB):\n    pass\n#\n#  Instrument\n#\n# Shared properties\nclass InstrumentBase(BaseModel):",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryInDB",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class AnalysisCategoryInDB(InstrumentTypeBaseInDB):\n    pass\n#\n#  Instrument\n#\n# Shared properties\nclass InstrumentBase(BaseModel):\n    name: str\n    description: str | None = None\n    keyword: str | None = None",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentBase",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class InstrumentBase(BaseModel):\n    name: str\n    description: str | None = None\n    keyword: str | None = None\n    instrument_type_uid: str | None = None\n    instrument_type: InstrumentType | None = None\n    manufacturer_uid: str | None = None\n    manufacturer: ManufacturerInDB | None = None\n    supplier_uid: str | None = None\n    supplier: SupplierInDB | None = None",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCreate",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class InstrumentCreate(InstrumentBase):\n    supplier_uid: str | None = None\n    keyword: str | None = None\n    instrument_type_uid: str | None = None\n    manufacturer_uid: str | None = None\n# Properties to receive via API on update\nclass InstrumentUpdate(InstrumentBase):\n    supplier_uid: str | None = None\nclass InstrumentInDBBase(InstrumentBase):\n    uid: str",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentUpdate",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class InstrumentUpdate(InstrumentBase):\n    supplier_uid: str | None = None\nclass InstrumentInDBBase(InstrumentBase):\n    uid: str\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Instrument(InstrumentInDBBase):\n    pass\n# Additional properties stored in DB\nclass InstrumentInDB(InstrumentInDBBase):",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentInDBBase",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class InstrumentInDBBase(InstrumentBase):\n    uid: str\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Instrument(InstrumentInDBBase):\n    pass\n# Additional properties stored in DB\nclass InstrumentInDB(InstrumentInDBBase):\n    pass\n#",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "Instrument",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class Instrument(InstrumentInDBBase):\n    pass\n# Additional properties stored in DB\nclass InstrumentInDB(InstrumentInDBBase):\n    pass\n#\n# Laboratory Instrument\n#\n# Shared properties\nclass LaboratoryInstrumentBase(BaseModel):",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentInDB",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class InstrumentInDB(InstrumentInDBBase):\n    pass\n#\n# Laboratory Instrument\n#\n# Shared properties\nclass LaboratoryInstrumentBase(BaseModel):\n    instrument_uid: str | None = None\n    instrument: Instrument | None = None\n    lab_name: str | None = None",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentBase",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class LaboratoryInstrumentBase(BaseModel):\n    instrument_uid: str | None = None\n    instrument: Instrument | None = None\n    lab_name: str | None = None\n    serial_number: str | None = None\n    date_commissioned: datetime | None = None\n    date_decommissioned: datetime | None = None\n# Properties to receive via API on creation\nclass LaboratoryInstrumentCreate(LaboratoryInstrumentBase):\n    instrument_uid: str",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentCreate",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class LaboratoryInstrumentCreate(LaboratoryInstrumentBase):\n    instrument_uid: str\n# Properties to receive via API on update\nclass LaboratoryInstrumentUpdate(LaboratoryInstrumentBase):\n    pass\nclass LaboratoryInstrumentInDBBase(LaboratoryInstrumentBase):\n    uid: str\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass LaboratoryInstrument(LaboratoryInstrumentInDBBase):",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentUpdate",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class LaboratoryInstrumentUpdate(LaboratoryInstrumentBase):\n    pass\nclass LaboratoryInstrumentInDBBase(LaboratoryInstrumentBase):\n    uid: str\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass LaboratoryInstrument(LaboratoryInstrumentInDBBase):\n    pass\n# Additional properties stored in DB\nclass LaboratoryInstrumentInDB(LaboratoryInstrumentInDBBase):",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentInDBBase",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class LaboratoryInstrumentInDBBase(LaboratoryInstrumentBase):\n    uid: str\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass LaboratoryInstrument(LaboratoryInstrumentInDBBase):\n    pass\n# Additional properties stored in DB\nclass LaboratoryInstrumentInDB(LaboratoryInstrumentInDBBase):\n    pass\n#",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrument",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class LaboratoryInstrument(LaboratoryInstrumentInDBBase):\n    pass\n# Additional properties stored in DB\nclass LaboratoryInstrumentInDB(LaboratoryInstrumentInDBBase):\n    pass\n#\n#  InstrumentCalibration\n#\n# Shared properties\nclass InstrumentCalibrationBase(BaseModel):",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentInDB",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class LaboratoryInstrumentInDB(LaboratoryInstrumentInDBBase):\n    pass\n#\n#  InstrumentCalibration\n#\n# Shared properties\nclass InstrumentCalibrationBase(BaseModel):\n    laboratory_instrument_uid: str\n    laboratory_instrument: Optional[LaboratoryInstrument] = None\n    calibration_id: str",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibrationBase",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class InstrumentCalibrationBase(BaseModel):\n    laboratory_instrument_uid: str\n    laboratory_instrument: Optional[LaboratoryInstrument] = None\n    calibration_id: str\n    date_reported: datetime\n    report_id: str\n    performed_by: str\n    start_date: datetime\n    end_date: datetime\n    notes_before: str",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibrationCreate",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class InstrumentCalibrationCreate(InstrumentCalibrationBase):\n    pass\n# Properties to receive via API on update\nclass InstrumentCalibrationUpdate(InstrumentCalibrationBase):\n    pass\nclass InstrumentCalibrationInDBBase(InstrumentCalibrationBase):\n    uid: str = None\nmodel_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass InstrumentCalibration(InstrumentCalibrationInDBBase):",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibrationUpdate",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class InstrumentCalibrationUpdate(InstrumentCalibrationBase):\n    pass\nclass InstrumentCalibrationInDBBase(InstrumentCalibrationBase):\n    uid: str = None\nmodel_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass InstrumentCalibration(InstrumentCalibrationInDBBase):\n    pass\n# Additional properties stored in DB\nclass InstrumentCalibrationInDB(InstrumentCalibrationInDBBase):",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibrationInDBBase",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class InstrumentCalibrationInDBBase(InstrumentCalibrationBase):\n    uid: str = None\nmodel_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass InstrumentCalibration(InstrumentCalibrationInDBBase):\n    pass\n# Additional properties stored in DB\nclass InstrumentCalibrationInDB(InstrumentCalibrationInDBBase):\n    pass\n#",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibration",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class InstrumentCalibration(InstrumentCalibrationInDBBase):\n    pass\n# Additional properties stored in DB\nclass InstrumentCalibrationInDB(InstrumentCalibrationInDBBase):\n    pass\n#\n#  CalibrationCertificate\n#\n# Shared properties\nclass CalibrationCertificateBase(BaseModel):",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibrationInDB",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class InstrumentCalibrationInDB(InstrumentCalibrationInDBBase):\n    pass\n#\n#  CalibrationCertificate\n#\n# Shared properties\nclass CalibrationCertificateBase(BaseModel):\n    laboratory_instrument_uid: str\n    laboratory_instrument: Optional[LaboratoryInstrument] = None\n    certificate_code: str",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificateBase",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class CalibrationCertificateBase(BaseModel):\n    laboratory_instrument_uid: str\n    laboratory_instrument: Optional[LaboratoryInstrument] = None\n    certificate_code: str\n    internal: bool = True\n    issuer: str\n    date_issued: datetime\n    valid_from_date: datetime\n    valid_to_date: datetime\n    performed_by: str",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificateCreate",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class CalibrationCertificateCreate(CalibrationCertificateBase):\n    pass\n# Properties to receive via API on update\nclass CalibrationCertificateUpdate(CalibrationCertificateBase):\n    pass\nclass CalibrationCertificateInDBBase(CalibrationCertificateBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass CalibrationCertificate(CalibrationCertificateInDBBase):",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificateUpdate",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class CalibrationCertificateUpdate(CalibrationCertificateBase):\n    pass\nclass CalibrationCertificateInDBBase(CalibrationCertificateBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass CalibrationCertificate(CalibrationCertificateInDBBase):\n    pass\n# Additional properties stored in DB\nclass CalibrationCertificateInDB(CalibrationCertificateInDBBase):",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificateInDBBase",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class CalibrationCertificateInDBBase(CalibrationCertificateBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass CalibrationCertificate(CalibrationCertificateInDBBase):\n    pass\n# Additional properties stored in DB\nclass CalibrationCertificateInDB(CalibrationCertificateInDBBase):\n    pass\n#",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificate",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class CalibrationCertificate(CalibrationCertificateInDBBase):\n    pass\n# Additional properties stored in DB\nclass CalibrationCertificateInDB(CalibrationCertificateInDBBase):\n    pass\n#\n#  InstrumentCompetence\n#\n# Shared properties\nclass InstrumentCompetenceBase(BaseModel):",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificateInDB",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class CalibrationCertificateInDB(CalibrationCertificateInDBBase):\n    pass\n#\n#  InstrumentCompetence\n#\n# Shared properties\nclass InstrumentCompetenceBase(BaseModel):\n    instrument_uid: str\n    instrument: Optional[Instrument] = None\n    description: str",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetenceBase",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class InstrumentCompetenceBase(BaseModel):\n    instrument_uid: str\n    instrument: Optional[Instrument] = None\n    description: str\n    user_uid: str\n    issue_date: datetime\n    expiry_date: datetime\n    internal: bool\n    competence: str\n# Properties to receive via API on creation",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetenceCreate",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class InstrumentCompetenceCreate(InstrumentCompetenceBase):\n    pass\n# Properties to receive via API on update\nclass InstrumentCompetenceUpdate(InstrumentCompetenceBase):\n    pass\nclass InstrumentCompetenceInDBBase(InstrumentCompetenceBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass InstrumentCompetence(InstrumentCompetenceInDBBase):",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetenceUpdate",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class InstrumentCompetenceUpdate(InstrumentCompetenceBase):\n    pass\nclass InstrumentCompetenceInDBBase(InstrumentCompetenceBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass InstrumentCompetence(InstrumentCompetenceInDBBase):\n    pass\n# Additional properties stored in DB\nclass InstrumentCompetenceInDB(InstrumentCompetenceInDBBase):",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetenceInDBBase",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class InstrumentCompetenceInDBBase(InstrumentCompetenceBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass InstrumentCompetence(InstrumentCompetenceInDBBase):\n    pass\n# Additional properties stored in DB\nclass InstrumentCompetenceInDB(InstrumentCompetenceInDBBase):\n    pass\n#",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetence",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class InstrumentCompetence(InstrumentCompetenceInDBBase):\n    pass\n# Additional properties stored in DB\nclass InstrumentCompetenceInDB(InstrumentCompetenceInDBBase):\n    pass\n#\n#  Method\n#\n# Shared properties\nclass MethodBase(BaseModel):",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetenceInDB",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class InstrumentCompetenceInDB(InstrumentCompetenceInDBBase):\n    pass\n#\n#  Method\n#\n# Shared properties\nclass MethodBase(BaseModel):\n    name: str = None\n    description: str = None\n    keyword: str = None",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "MethodBase",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class MethodBase(BaseModel):\n    name: str = None\n    description: str = None\n    keyword: str = None\n    instruments: Optional[List[Instrument]] = []\n# Properties to receive via API on creation\nclass MethodCreate(MethodBase):\n    pass\n# Properties to receive via API on update\nclass MethodUpdate(MethodBase):",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "MethodCreate",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class MethodCreate(MethodBase):\n    pass\n# Properties to receive via API on update\nclass MethodUpdate(MethodBase):\n    pass\nclass MethodInDBBase(MethodBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Method(MethodInDBBase):",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "MethodUpdate",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class MethodUpdate(MethodBase):\n    pass\nclass MethodInDBBase(MethodBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Method(MethodInDBBase):\n    pass\n# Additional properties stored in DB\nclass MethodInDB(MethodInDBBase):",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "MethodInDBBase",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class MethodInDBBase(MethodBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Method(MethodInDBBase):\n    pass\n# Additional properties stored in DB\nclass MethodInDB(MethodInDBBase):\n    pass",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "Method",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class Method(MethodInDBBase):\n    pass\n# Additional properties stored in DB\nclass MethodInDB(MethodInDBBase):\n    pass",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "MethodInDB",
        "kind": 6,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "class MethodInDB(MethodInDBBase):\n    pass",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "model_config",
        "kind": 5,
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "peekOfCode": "model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass InstrumentCalibration(InstrumentCalibrationInDBBase):\n    pass\n# Additional properties stored in DB\nclass InstrumentCalibrationInDB(InstrumentCalibrationInDBBase):\n    pass\n#\n#  CalibrationCertificate\n#",
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "MethodService",
        "kind": 6,
        "importPath": "felicity.apps.instrument.services",
        "description": "felicity.apps.instrument.services",
        "peekOfCode": "class MethodService(\n    BaseService[Method, MethodCreate, MethodUpdate],\n):\n    def __init__(self,):\n        super().__init__(MethodRepository)\nclass InstrumentTypeService(\n    BaseService[InstrumentType, InstrumentTypeCreate, InstrumentTypeUpdate],\n):\n    def __init__(self,):\n        super().__init__(InstrumentTypeRepository)",
        "detail": "felicity.apps.instrument.services",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeService",
        "kind": 6,
        "importPath": "felicity.apps.instrument.services",
        "description": "felicity.apps.instrument.services",
        "peekOfCode": "class InstrumentTypeService(\n    BaseService[InstrumentType, InstrumentTypeCreate, InstrumentTypeUpdate],\n):\n    def __init__(self,):\n        super().__init__(InstrumentTypeRepository)\nclass InstrumentService(\n    BaseService[Instrument, InstrumentCreate, InstrumentUpdate],\n):\n    def __init__(self,):\n        super().__init__(InstrumentRepository)",
        "detail": "felicity.apps.instrument.services",
        "documentation": {}
    },
    {
        "label": "InstrumentService",
        "kind": 6,
        "importPath": "felicity.apps.instrument.services",
        "description": "felicity.apps.instrument.services",
        "peekOfCode": "class InstrumentService(\n    BaseService[Instrument, InstrumentCreate, InstrumentUpdate],\n):\n    def __init__(self,):\n        super().__init__(InstrumentRepository)\nclass LaboratoryInstrumentService(\n    BaseService[LaboratoryInstrument, LaboratoryInstrumentCreate, LaboratoryInstrumentUpdate],\n):\n    def __init__(self,):\n        super().__init__(LaboratoryInstrumentRepository)",
        "detail": "felicity.apps.instrument.services",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentService",
        "kind": 6,
        "importPath": "felicity.apps.instrument.services",
        "description": "felicity.apps.instrument.services",
        "peekOfCode": "class LaboratoryInstrumentService(\n    BaseService[LaboratoryInstrument, LaboratoryInstrumentCreate, LaboratoryInstrumentUpdate],\n):\n    def __init__(self,):\n        super().__init__(LaboratoryInstrumentRepository)\nclass InstrumentCalibrationService(\n    BaseService[InstrumentCalibration, InstrumentCalibrationCreate, InstrumentCalibrationUpdate],\n):\n    id_service = IdSequenceService()\n    def __init__(self,):",
        "detail": "felicity.apps.instrument.services",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibrationService",
        "kind": 6,
        "importPath": "felicity.apps.instrument.services",
        "description": "felicity.apps.instrument.services",
        "peekOfCode": "class InstrumentCalibrationService(\n    BaseService[InstrumentCalibration, InstrumentCalibrationCreate, InstrumentCalibrationUpdate],\n):\n    id_service = IdSequenceService()\n    def __init__(self,):\n        super().__init__(InstrumentCalibrationRepository)\n    @classmethod\n    async def create(\n        cls, obj_in: dict | InstrumentCalibrationCreate\n    ) -> InstrumentCalibration:",
        "detail": "felicity.apps.instrument.services",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificateService",
        "kind": 6,
        "importPath": "felicity.apps.instrument.services",
        "description": "felicity.apps.instrument.services",
        "peekOfCode": "class CalibrationCertificateService(\n    BaseService[CalibrationCertificate, CalibrationCertificateCreate, CalibrationCertificateUpdate],\n):\n    def __init__(self,):\n        super().__init__(CalibrationCertificateRepository)\nclass InstrumentCompetenceService(\n    BaseService[InstrumentCompetence, InstrumentCompetenceCreate, InstrumentCompetenceUpdate],\n):\n    def __init__(self,):\n        super().__init__(InstrumentCompetenceRepository)",
        "detail": "felicity.apps.instrument.services",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetenceService",
        "kind": 6,
        "importPath": "felicity.apps.instrument.services",
        "description": "felicity.apps.instrument.services",
        "peekOfCode": "class InstrumentCompetenceService(\n    BaseService[InstrumentCompetence, InstrumentCompetenceCreate, InstrumentCompetenceUpdate],\n):\n    def __init__(self,):\n        super().__init__(InstrumentCompetenceRepository)",
        "detail": "felicity.apps.instrument.services",
        "documentation": {}
    },
    {
        "label": "Adjust",
        "kind": 6,
        "importPath": "felicity.apps.inventory.conf",
        "description": "felicity.apps.inventory.conf",
        "peekOfCode": "class Adjust:\n    #  Adding\n    PURCHASE = \"purchase\"\n    PUSHED = \"pushed\"\n    TRANSFER_IN = \"transfer_in\"\n    # subtracting\n    ISSUE = \"issue\"\n    TRANSFER_OUT = \"transfer_out\"\n    DAMAGED = \"damaged\"\n    EXPIRED = \"expired\"",
        "detail": "felicity.apps.inventory.conf",
        "documentation": {}
    },
    {
        "label": "OrderStates",
        "kind": 6,
        "importPath": "felicity.apps.inventory.conf",
        "description": "felicity.apps.inventory.conf",
        "peekOfCode": "class OrderStates:\n    PREPARATION = \"preparation\"\n    SUBMITTED = \"submitted\"  # for approval\n    PENDING = \"pending\"  # approved and pending issue\n    PROCESSED = \"processed\"  # issued\n    DECLINED = \"declined\"\norder_states = OrderStates()",
        "detail": "felicity.apps.inventory.conf",
        "documentation": {}
    },
    {
        "label": "adjust",
        "kind": 5,
        "importPath": "felicity.apps.inventory.conf",
        "description": "felicity.apps.inventory.conf",
        "peekOfCode": "adjust = Adjust()\nclass OrderStates:\n    PREPARATION = \"preparation\"\n    SUBMITTED = \"submitted\"  # for approval\n    PENDING = \"pending\"  # approved and pending issue\n    PROCESSED = \"processed\"  # issued\n    DECLINED = \"declined\"\norder_states = OrderStates()",
        "detail": "felicity.apps.inventory.conf",
        "documentation": {}
    },
    {
        "label": "order_states",
        "kind": 5,
        "importPath": "felicity.apps.inventory.conf",
        "description": "felicity.apps.inventory.conf",
        "peekOfCode": "order_states = OrderStates()",
        "detail": "felicity.apps.inventory.conf",
        "documentation": {}
    },
    {
        "label": "StockItem",
        "kind": 6,
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "peekOfCode": "class StockItem(AuditUser):\n    \"\"\"StockItem Standardization\"\"\"\n    __tablename__ = \"stock_item\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    category_uid = Column(String, ForeignKey(\"stock_category.uid\"), nullable=True)\n    category = relationship(\"StockCategory\", lazy=\"selectin\")\n    hazard_uid = Column(String, ForeignKey(\"hazard.uid\"), nullable=True)\n    hazard = relationship(\"Hazard\", lazy=\"selectin\")\n    minimum_level = Column(Integer, nullable=True)",
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockItemVariant",
        "kind": 6,
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "peekOfCode": "class StockItemVariant(AuditUser):\n    \"\"\"StockItem Variant as the StockProduct\"\"\"\n    __tablename__ = \"stock_item_variant\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    stock_item_uid = Column(String, ForeignKey(\"stock_item.uid\"), nullable=True)\n    stock_item = relationship(\"StockItem\", lazy=\"selectin\")\n    minimum_level = Column(Integer, nullable=True)\n    maximum_level = Column(Integer, nullable=True)\nclass StockCategory(AuditUser):",
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockCategory",
        "kind": 6,
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "peekOfCode": "class StockCategory(AuditUser):\n    \"\"\"StockCategory\n    Consumable, Reagents, Durables\n    \"\"\"\n    __tablename__ = \"stock_category\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\nclass Hazard(AuditUser):\n    \"\"\"Hazard\"\"\"\n    __tablename__ = \"hazard\"",
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "Hazard",
        "kind": 6,
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "peekOfCode": "class Hazard(AuditUser):\n    \"\"\"Hazard\"\"\"\n    __tablename__ = \"hazard\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\nclass StockUnit(AuditUser):\n    __tablename__ = \"stock_unit\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)\n    synonyms = Column(String, nullable=True)",
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockUnit",
        "kind": 6,
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "peekOfCode": "class StockUnit(AuditUser):\n    __tablename__ = \"stock_unit\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)\n    synonyms = Column(String, nullable=True)\nclass StockLot(AuditUser):\n    __tablename__ = \"stock_lot\"\n    product_uid = Column(String, ForeignKey(\"stock_item_variant.uid\"), nullable=True)\n    product = relationship(\"StockItemVariant\", lazy=\"selectin\")\n    lot_number = Column(String, nullable=False)",
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockLot",
        "kind": 6,
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "peekOfCode": "class StockLot(AuditUser):\n    __tablename__ = \"stock_lot\"\n    product_uid = Column(String, ForeignKey(\"stock_item_variant.uid\"), nullable=True)\n    product = relationship(\"StockItemVariant\", lazy=\"selectin\")\n    lot_number = Column(String, nullable=False)\n    expiry_date = Column(DateTime, nullable=False)\n    remarks = Column(String, nullable=True)\nclass StockProductInventory(AuditUser):\n    __tablename__ = \"stock_product_inventory\"\n    product_uid = Column(String, ForeignKey(\"stock_item_variant.uid\"), nullable=True)",
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockProductInventory",
        "kind": 6,
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "peekOfCode": "class StockProductInventory(AuditUser):\n    __tablename__ = \"stock_product_inventory\"\n    product_uid = Column(String, ForeignKey(\"stock_item_variant.uid\"), nullable=True)\n    product = relationship(\"StockItemVariant\", lazy=\"selectin\")\n    stock_lot_uid = Column(String, ForeignKey(\"stock_lot.uid\"), nullable=True)\n    stock_lot = relationship(\"StockLot\", lazy=\"selectin\")\n    quantity = Column(Integer, nullable=False)\n    remarks = Column(String, nullable=True)\nclass StockOrder(AuditUser):\n    __tablename__ = \"stock_order\"",
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockOrder",
        "kind": 6,
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "peekOfCode": "class StockOrder(AuditUser):\n    __tablename__ = \"stock_order\"\n    order_by_uid = Column(String, ForeignKey(\"user.uid\"), nullable=True)\n    order_by = relationship(\"User\", foreign_keys=[order_by_uid], lazy=\"selectin\")\n    department_uid = Column(String, ForeignKey(\"department.uid\"), nullable=True)\n    department = relationship(\"Department\", lazy=\"selectin\")\n    status = Column(String, nullable=False)\n    order_number = Column(String, nullable=False)\n    remarks = Column(String, nullable=True)\n    fulfilled_by_uid = Column(String, ForeignKey(\"user.uid\"), nullable=True)",
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockOrderProduct",
        "kind": 6,
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "peekOfCode": "class StockOrderProduct(AuditUser):\n    __tablename__ = \"stock_order_product\"\n    product_uid = Column(String, ForeignKey(\"stock_item_variant.uid\"), nullable=True)\n    product = relationship(\"StockItemVariant\", lazy=\"selectin\")\n    stock_lot_uid = Column(String, ForeignKey(\"stock_lot.uid\"), nullable=True)\n    stock_lot = relationship(\"StockLot\", lazy=\"selectin\")\n    order_uid = Column(String, ForeignKey(\"stock_order.uid\"), nullable=True)\n    order = relationship(\"StockOrder\", lazy=\"selectin\")\n    quantity = Column(Integer, nullable=False)\n    remarks = Column(String, nullable=True)",
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockReceipt",
        "kind": 6,
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "peekOfCode": "class StockReceipt(AuditUser):\n    __tablename__ = \"stock_receipt\"\n    product_uid = Column(String, ForeignKey(\"stock_item_variant.uid\"), nullable=False)\n    product = relationship(\"StockItemVariant\", lazy=\"selectin\")\n    stock_lot_uid = Column(String, ForeignKey(\"stock_lot.uid\"), nullable=True)\n    stock_lot = relationship(\"StockLot\", lazy=\"selectin\")\n    unit_price = Column(Float, nullable=True)\n    total_price = Column(Float, nullable=True)\n    supplier_uid = Column(String, ForeignKey(\"supplier.uid\"), nullable=True)\n    supplier = relationship(\"Supplier\", lazy=\"selectin\")",
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockAdjustment",
        "kind": 6,
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "peekOfCode": "class StockAdjustment(AuditUser):\n    __tablename__ = \"stock_adjustment\"\n    product_uid = Column(String, ForeignKey(\"stock_item_variant.uid\"), nullable=True)\n    product = relationship(\"StockItemVariant\", lazy=\"selectin\")\n    stock_lot_uid = Column(String, ForeignKey(\"stock_lot.uid\"), nullable=True)\n    stock_lot = relationship(\"StockLot\", lazy=\"selectin\")\n    adjustment_type = Column(String, nullable=False)\n    adjust = Column(Integer, nullable=False)\n    adjustment_date = Column(DateTime, nullable=False)\n    remarks = Column(String, nullable=False)",
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockItemRepository",
        "kind": 6,
        "importPath": "felicity.apps.inventory.repository",
        "description": "felicity.apps.inventory.repository",
        "peekOfCode": "class StockItemRepository(BaseRepository[StockItem]):\n    def __init__(self) -> None:\n        super().__init__(StockItem)\n    async def paginate_with_cursors(\n        self,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,\n        text: str | None = None,\n        sort_by: list[str] | None = None,",
        "detail": "felicity.apps.inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockCategoryRepository",
        "kind": 6,
        "importPath": "felicity.apps.inventory.repository",
        "description": "felicity.apps.inventory.repository",
        "peekOfCode": "class StockCategoryRepository(BaseRepository[StockCategory]):\n    def __init__(self) -> None:\n        super().__init__(StockCategory)\nclass HazardRepository(BaseRepository[Hazard]):\n    def __init__(self) -> None:\n        super().__init__(Hazard)\nclass StockUnitRepository(BaseRepository[StockUnit]):\n    def __init__(self) -> None:\n        super().__init__(StockUnit)\nclass StockOrderRepository(BaseRepository[StockOrder]):",
        "detail": "felicity.apps.inventory.repository",
        "documentation": {}
    },
    {
        "label": "HazardRepository",
        "kind": 6,
        "importPath": "felicity.apps.inventory.repository",
        "description": "felicity.apps.inventory.repository",
        "peekOfCode": "class HazardRepository(BaseRepository[Hazard]):\n    def __init__(self) -> None:\n        super().__init__(Hazard)\nclass StockUnitRepository(BaseRepository[StockUnit]):\n    def __init__(self) -> None:\n        super().__init__(StockUnit)\nclass StockOrderRepository(BaseRepository[StockOrder]):\n    def __init__(self) -> None:\n        super().__init__(StockOrder)\n    async def paginate_with_cursors(",
        "detail": "felicity.apps.inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockUnitRepository",
        "kind": 6,
        "importPath": "felicity.apps.inventory.repository",
        "description": "felicity.apps.inventory.repository",
        "peekOfCode": "class StockUnitRepository(BaseRepository[StockUnit]):\n    def __init__(self) -> None:\n        super().__init__(StockUnit)\nclass StockOrderRepository(BaseRepository[StockOrder]):\n    def __init__(self) -> None:\n        super().__init__(StockOrder)\n    async def paginate_with_cursors(\n        self,\n        page_size: int | None = None,\n        after_cursor: str | None = None,",
        "detail": "felicity.apps.inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockOrderRepository",
        "kind": 6,
        "importPath": "felicity.apps.inventory.repository",
        "description": "felicity.apps.inventory.repository",
        "peekOfCode": "class StockOrderRepository(BaseRepository[StockOrder]):\n    def __init__(self) -> None:\n        super().__init__(StockOrder)\n    async def paginate_with_cursors(\n        self,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,\n        text: str | None = None,\n        status: None = None,",
        "detail": "felicity.apps.inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockOrderProductRepository",
        "kind": 6,
        "importPath": "felicity.apps.inventory.repository",
        "description": "felicity.apps.inventory.repository",
        "peekOfCode": "class StockOrderProductRepository(\n    BaseRepository[StockOrderProduct]\n):\n    def __init__(self) -> None:\n        super().__init__(StockOrderProduct)\nclass StockAdjustmentRepository(\n    BaseRepository[StockAdjustment]\n):\n    def __init__(self) -> None:\n        super().__init__(StockAdjustment)",
        "detail": "felicity.apps.inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockAdjustmentRepository",
        "kind": 6,
        "importPath": "felicity.apps.inventory.repository",
        "description": "felicity.apps.inventory.repository",
        "peekOfCode": "class StockAdjustmentRepository(\n    BaseRepository[StockAdjustment]\n):\n    def __init__(self) -> None:\n        super().__init__(StockAdjustment)\n    async def paginate_with_cursors(\n        self,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,",
        "detail": "felicity.apps.inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockItemBase",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockItemBase(BaseAuditModel):\n    \"\"\"StockItem Standardization\"\"\"\n    name: str | None = None\n    description: str | None = None\n    department_uid: str | None = None\n    department: Optional[Department] = None\n    category_uid: str | None = None\n    hazard_uid: str | None = None\n    minimum_level: int | None = None\n    maximum_level: int | None = None",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockItem",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockItem(StockItemBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockItemCreate(StockItemBase):\n    pass\nclass StockItemUpdate(StockItemBase):\n    pass\n#\n# StockItemVariant Schemas\n#",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockItemCreate",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockItemCreate(StockItemBase):\n    pass\nclass StockItemUpdate(StockItemBase):\n    pass\n#\n# StockItemVariant Schemas\n#\nclass StockItemVariantBase(BaseAuditModel):\n    \"\"\"StockItemVariant Standardization\"\"\"\n    name: str | None = None",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockItemUpdate",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockItemUpdate(StockItemBase):\n    pass\n#\n# StockItemVariant Schemas\n#\nclass StockItemVariantBase(BaseAuditModel):\n    \"\"\"StockItemVariant Standardization\"\"\"\n    name: str | None = None\n    description: str | None = None\n    stock_item_uid: str | None = None",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockItemVariantBase",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockItemVariantBase(BaseAuditModel):\n    \"\"\"StockItemVariant Standardization\"\"\"\n    name: str | None = None\n    description: str | None = None\n    stock_item_uid: str | None = None\n    stock_item: Optional[StockItem] = None\n    minimum_level: int | None = None\n    maximum_level: int | None = None\nclass StockItemVariant(StockItemVariantBase):\n    uid: str | None = None",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockItemVariant",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockItemVariant(StockItemVariantBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockItemVariantCreate(StockItemVariantBase):\n    pass\nclass StockItemVariantUpdate(StockItemVariantBase):\n    pass\n#\n# StockCategory Schemas\n#",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockItemVariantCreate",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockItemVariantCreate(StockItemVariantBase):\n    pass\nclass StockItemVariantUpdate(StockItemVariantBase):\n    pass\n#\n# StockCategory Schemas\n#\nclass StockCategoryBase(BaseAuditModel):\n    \"\"\"StockCategory\n    Consumable, Reagents, Durables",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockItemVariantUpdate",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockItemVariantUpdate(StockItemVariantBase):\n    pass\n#\n# StockCategory Schemas\n#\nclass StockCategoryBase(BaseAuditModel):\n    \"\"\"StockCategory\n    Consumable, Reagents, Durables\n    \"\"\"\n    name: str | None = None",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockCategoryBase",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockCategoryBase(BaseAuditModel):\n    \"\"\"StockCategory\n    Consumable, Reagents, Durables\n    \"\"\"\n    name: str | None = None\n    description: str | None = None\nclass StockCategory(StockCategoryBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockCategoryCreate(StockCategoryBase):",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockCategory",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockCategory(StockCategoryBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockCategoryCreate(StockCategoryBase):\n    pass\nclass StockCategoryUpdate(StockCategoryBase):\n    pass\n#\n# Hazard Schemas\n#",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockCategoryCreate",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockCategoryCreate(StockCategoryBase):\n    pass\nclass StockCategoryUpdate(StockCategoryBase):\n    pass\n#\n# Hazard Schemas\n#\nclass HazardBase(BaseAuditModel):\n    \"\"\"Hazard\"\"\"\n    name: str | None = None",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockCategoryUpdate",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockCategoryUpdate(StockCategoryBase):\n    pass\n#\n# Hazard Schemas\n#\nclass HazardBase(BaseAuditModel):\n    \"\"\"Hazard\"\"\"\n    name: str | None = None\n    description: str | None = None\nclass Hazard(HazardBase):",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "HazardBase",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class HazardBase(BaseAuditModel):\n    \"\"\"Hazard\"\"\"\n    name: str | None = None\n    description: str | None = None\nclass Hazard(HazardBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass HazardCreate(HazardBase):\n    pass\nclass HazardUpdate(HazardBase):",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "Hazard",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class Hazard(HazardBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass HazardCreate(HazardBase):\n    pass\nclass HazardUpdate(HazardBase):\n    pass\n#\n# StockUnit Schemas\n#",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "HazardCreate",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class HazardCreate(HazardBase):\n    pass\nclass HazardUpdate(HazardBase):\n    pass\n#\n# StockUnit Schemas\n#\nclass StockUnitBase(BaseAuditModel):\n    name: str | None = None\n    description: str | None = None",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "HazardUpdate",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class HazardUpdate(HazardBase):\n    pass\n#\n# StockUnit Schemas\n#\nclass StockUnitBase(BaseAuditModel):\n    name: str | None = None\n    description: str | None = None\n    synonyms: str | None = None\nclass StockUnit(StockUnitBase):",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockUnitBase",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockUnitBase(BaseAuditModel):\n    name: str | None = None\n    description: str | None = None\n    synonyms: str | None = None\nclass StockUnit(StockUnitBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockUnitCreate(StockUnitBase):\n    pass\nclass StockUnitUpdate(StockUnitBase):",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockUnit",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockUnit(StockUnitBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockUnitCreate(StockUnitBase):\n    pass\nclass StockUnitUpdate(StockUnitBase):\n    pass\n#\n# StockLot Schemas\n#",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockUnitCreate",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockUnitCreate(StockUnitBase):\n    pass\nclass StockUnitUpdate(StockUnitBase):\n    pass\n#\n# StockLot Schemas\n#\nclass StockLotBase(BaseAuditModel):\n    product_uid: str | None = None\n    lot_number: str | None = None",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockUnitUpdate",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockUnitUpdate(StockUnitBase):\n    pass\n#\n# StockLot Schemas\n#\nclass StockLotBase(BaseAuditModel):\n    product_uid: str | None = None\n    lot_number: str | None = None\n    expiry_date: Optional[datetime] = None\n    remarks: str | None = None",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockLotBase",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockLotBase(BaseAuditModel):\n    product_uid: str | None = None\n    lot_number: str | None = None\n    expiry_date: Optional[datetime] = None\n    remarks: str | None = None\nclass StockLot(StockLotBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockLotCreate(StockLotBase):\n    pass",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockLot",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockLot(StockLotBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockLotCreate(StockLotBase):\n    pass\nclass StockLotUpdate(StockLotBase):\n    pass\n#\n# StockProductInventory Schemas\n#",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockLotCreate",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockLotCreate(StockLotBase):\n    pass\nclass StockLotUpdate(StockLotBase):\n    pass\n#\n# StockProductInventory Schemas\n#\nclass StockProductInventoryBase(BaseAuditModel):\n    product_uid: str | None = None\n    stock_lot_uid: str | None = None",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockLotUpdate",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockLotUpdate(StockLotBase):\n    pass\n#\n# StockProductInventory Schemas\n#\nclass StockProductInventoryBase(BaseAuditModel):\n    product_uid: str | None = None\n    stock_lot_uid: str | None = None\n    quantity: int = None\n    remarks: str | None = None",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockProductInventoryBase",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockProductInventoryBase(BaseAuditModel):\n    product_uid: str | None = None\n    stock_lot_uid: str | None = None\n    quantity: int = None\n    remarks: str | None = None\nclass StockProductInventory(StockProductInventoryBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockProductInventoryCreate(StockProductInventoryBase):\n    pass",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockProductInventory",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockProductInventory(StockProductInventoryBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockProductInventoryCreate(StockProductInventoryBase):\n    pass\nclass StockProductInventoryUpdate(StockProductInventoryBase):\n    pass\n#\n# StockReceipt Schemas\n#",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockProductInventoryCreate",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockProductInventoryCreate(StockProductInventoryBase):\n    pass\nclass StockProductInventoryUpdate(StockProductInventoryBase):\n    pass\n#\n# StockReceipt Schemas\n#\nclass StockReceiptBase(BaseAuditModel):\n    product_uid: str | None = None\n    stock_lot_uid: str | None = None",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockProductInventoryUpdate",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockProductInventoryUpdate(StockProductInventoryBase):\n    pass\n#\n# StockReceipt Schemas\n#\nclass StockReceiptBase(BaseAuditModel):\n    product_uid: str | None = None\n    stock_lot_uid: str | None = None\n    unit_price: float | None = None\n    total_price: float | None = None",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockReceiptBase",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockReceiptBase(BaseAuditModel):\n    product_uid: str | None = None\n    stock_lot_uid: str | None = None\n    unit_price: float | None = None\n    total_price: float | None = None\n    supplier_uid: str | None = None\n    unit_uid: str | None = None\n    singles_received: int | None = None\n    packages_received: int | None = None\n    package_factor: int | None = None",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockReceipt",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockReceipt(StockReceiptBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockReceiptCreate(StockReceiptBase):\n    pass\nclass StockReceiptUpdate(StockReceiptBase):\n    pass\n#\n# StockOrder Schemas\n#",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockReceiptCreate",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockReceiptCreate(StockReceiptBase):\n    pass\nclass StockReceiptUpdate(StockReceiptBase):\n    pass\n#\n# StockOrder Schemas\n#\nclass StockOrderBase(BaseAuditModel):\n    order_by_uid: str | None = None\n    order_by: Optional[User] = None",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockReceiptUpdate",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockReceiptUpdate(StockReceiptBase):\n    pass\n#\n# StockOrder Schemas\n#\nclass StockOrderBase(BaseAuditModel):\n    order_by_uid: str | None = None\n    order_by: Optional[User] = None\n    department_uid: str | None = None\n    department: Optional[Department] = None",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockOrderBase",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockOrderBase(BaseAuditModel):\n    order_by_uid: str | None = None\n    order_by: Optional[User] = None\n    department_uid: str | None = None\n    department: Optional[Department] = None\n    status: str | None = None\n    order_number: str | None = None\n    remarks: str | None = None\n    fulfilled_by_uid: str | None = None\n    fulfilled_by: Optional[User] = None",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockOrder",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockOrder(StockOrderBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockOrderCreate(StockOrderBase):\n    pass\nclass StockOrderUpdate(StockOrderBase):\n    pass\n#\n# StockOrderProduct Schemas\n#",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockOrderCreate",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockOrderCreate(StockOrderBase):\n    pass\nclass StockOrderUpdate(StockOrderBase):\n    pass\n#\n# StockOrderProduct Schemas\n#\nclass StockOrderProductBase(BaseAuditModel):\n    product_uid: str | None = None\n    product: Optional[StockItemVariant] = None",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockOrderUpdate",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockOrderUpdate(StockOrderBase):\n    pass\n#\n# StockOrderProduct Schemas\n#\nclass StockOrderProductBase(BaseAuditModel):\n    product_uid: str | None = None\n    product: Optional[StockItemVariant] = None\n    stock_lot_uid: str | None = None\n    order_uid: str | None = None",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockOrderProductBase",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockOrderProductBase(BaseAuditModel):\n    product_uid: str | None = None\n    product: Optional[StockItemVariant] = None\n    stock_lot_uid: str | None = None\n    order_uid: str | None = None\n    order: Optional[StockOrder] = None\n    quantity: int | None = None\n    remarks: str | None = None\nclass StockOrderProduct(StockOrderProductBase):\n    uid: str | None = None",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockOrderProduct",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockOrderProduct(StockOrderProductBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockOrderProductCreate(StockOrderProductBase):\n    pass\nclass StockOrderProductUpdate(StockOrderProductBase):\n    pass\n#\n# StockAdjustment Schemas\n#",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockOrderProductCreate",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockOrderProductCreate(StockOrderProductBase):\n    pass\nclass StockOrderProductUpdate(StockOrderProductBase):\n    pass\n#\n# StockAdjustment Schemas\n#\nclass StockAdjustmentBase(BaseAuditModel):\n    product_uid: str | None = None\n    product: Optional[StockItemVariant] = None",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockOrderProductUpdate",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockOrderProductUpdate(StockOrderProductBase):\n    pass\n#\n# StockAdjustment Schemas\n#\nclass StockAdjustmentBase(BaseAuditModel):\n    product_uid: str | None = None\n    product: Optional[StockItemVariant] = None\n    stock_lot_uid: str | None = None\n    adjustment_type: str | None = None",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockAdjustmentBase",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockAdjustmentBase(BaseAuditModel):\n    product_uid: str | None = None\n    product: Optional[StockItemVariant] = None\n    stock_lot_uid: str | None = None\n    adjustment_type: str | None = None\n    adjust: int | None = None\n    adjustment_date: datetime | None = None\n    remarks: str | None = None\n    adjustment_by_uid: str | None = None\n    adjustment_by: Optional[User] = None",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockAdjustment",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockAdjustment(StockAdjustmentBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockAdjustmentCreate(StockAdjustmentBase):\n    pass\nclass StockAdjustmentUpdate(StockAdjustmentBase):\n    pass",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockAdjustmentCreate",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockAdjustmentCreate(StockAdjustmentBase):\n    pass\nclass StockAdjustmentUpdate(StockAdjustmentBase):\n    pass",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockAdjustmentUpdate",
        "kind": 6,
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "peekOfCode": "class StockAdjustmentUpdate(StockAdjustmentBase):\n    pass",
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockItemService",
        "kind": 6,
        "importPath": "felicity.apps.inventory.services",
        "description": "felicity.apps.inventory.services",
        "peekOfCode": "class StockItemService(BaseService[StockItem, StockItemCreate, StockItemUpdate]):\n    def __init__(self) -> None:\n        super().__init__(StockItemRepository)\n    async def paginate_with_cursors(\n        self,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,\n        text: str | None = None,\n        sort_by: list[str] | None = None,",
        "detail": "felicity.apps.inventory.services",
        "documentation": {}
    },
    {
        "label": "StockCategoryService",
        "kind": 6,
        "importPath": "felicity.apps.inventory.services",
        "description": "felicity.apps.inventory.services",
        "peekOfCode": "class StockCategoryService(BaseService[StockCategory, StockCategoryCreate, StockCategoryUpdate]):\n    def __init__(self) -> None:\n        super().__init__(StockCategoryRepository)\nclass HazardService(BaseService[Hazard, HazardCreate, HazardUpdate]):\n    def __init__(self) -> None:\n        super().__init__(HazardRepository)\nclass StockUnitService(BaseService[StockUnit, StockUnitCreate, StockUnitUpdate]):\n    def __init__(self) -> None:\n        super().__init__(StockUnitRepository)\nclass StockOrderService(BaseService[StockOrder, StockOrderCreate, StockOrderUpdate]):",
        "detail": "felicity.apps.inventory.services",
        "documentation": {}
    },
    {
        "label": "HazardService",
        "kind": 6,
        "importPath": "felicity.apps.inventory.services",
        "description": "felicity.apps.inventory.services",
        "peekOfCode": "class HazardService(BaseService[Hazard, HazardCreate, HazardUpdate]):\n    def __init__(self) -> None:\n        super().__init__(HazardRepository)\nclass StockUnitService(BaseService[StockUnit, StockUnitCreate, StockUnitUpdate]):\n    def __init__(self) -> None:\n        super().__init__(StockUnitRepository)\nclass StockOrderService(BaseService[StockOrder, StockOrderCreate, StockOrderUpdate]):\n    def __init__(self) -> None:\n        super().__init__(StockOrderRepository)\n    async def paginate_with_cursors(",
        "detail": "felicity.apps.inventory.services",
        "documentation": {}
    },
    {
        "label": "StockUnitService",
        "kind": 6,
        "importPath": "felicity.apps.inventory.services",
        "description": "felicity.apps.inventory.services",
        "peekOfCode": "class StockUnitService(BaseService[StockUnit, StockUnitCreate, StockUnitUpdate]):\n    def __init__(self) -> None:\n        super().__init__(StockUnitRepository)\nclass StockOrderService(BaseService[StockOrder, StockOrderCreate, StockOrderUpdate]):\n    def __init__(self) -> None:\n        super().__init__(StockOrderRepository)\n    async def paginate_with_cursors(\n        self,\n        page_size: int | None = None,\n        after_cursor: str | None = None,",
        "detail": "felicity.apps.inventory.services",
        "documentation": {}
    },
    {
        "label": "StockOrderService",
        "kind": 6,
        "importPath": "felicity.apps.inventory.services",
        "description": "felicity.apps.inventory.services",
        "peekOfCode": "class StockOrderService(BaseService[StockOrder, StockOrderCreate, StockOrderUpdate]):\n    def __init__(self) -> None:\n        super().__init__(StockOrderRepository)\n    async def paginate_with_cursors(\n        self,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,\n        text: str | None = None,\n        status: None = None,",
        "detail": "felicity.apps.inventory.services",
        "documentation": {}
    },
    {
        "label": "StockOrderProductService",
        "kind": 6,
        "importPath": "felicity.apps.inventory.services",
        "description": "felicity.apps.inventory.services",
        "peekOfCode": "class StockOrderProductService(\n    BaseService[StockOrderProduct, StockOrderProductCreate, StockOrderProductUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(StockOrderProductRepository)\nclass StockAdjustmentService(\n    BaseService[StockAdjustment, StockAdjustmentCreate, StockAdjustmentUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(StockAdjustmentRepository)",
        "detail": "felicity.apps.inventory.services",
        "documentation": {}
    },
    {
        "label": "StockAdjustmentService",
        "kind": 6,
        "importPath": "felicity.apps.inventory.services",
        "description": "felicity.apps.inventory.services",
        "peekOfCode": "class StockAdjustmentService(\n    BaseService[StockAdjustment, StockAdjustmentCreate, StockAdjustmentUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(StockAdjustmentRepository)\n    async def paginate_with_cursors(\n        self,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,",
        "detail": "felicity.apps.inventory.services",
        "documentation": {}
    },
    {
        "label": "IOLService",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.services.action",
        "description": "felicity.apps.iol.fhir.services.action",
        "peekOfCode": "class IOLService(IIOLService):\n    def __init__(\n        self,\n        fhir_read_service: IFhirReadService,\n        fhir_create_service: IFhirCreateService,\n        user_service: IUserService,\n        job_service: IJobService,\n        shipment_service: IShipmentService,\n        activity_stream_service: IActivityStreamService,\n        shipped_sample_service: IShippedSampleService,",
        "detail": "felicity.apps.iol.fhir.services.action",
        "documentation": {}
    },
    {
        "label": "FhirCreateService",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.services.create",
        "description": "felicity.apps.iol.fhir.services.create",
        "peekOfCode": "class FhirCreateService(IFhirCreateService):\n    def __init__(\n        self,\n        shipment_service: IShipmentService,\n        referral_laboratory_service: IReferralLaboratoryService,\n        job_service: IJobService,\n    ):\n        self.shipment_service = shipment_service\n        self.referral_laboratory_service = referral_laboratory_service\n        self.job_service = job_service",
        "detail": "felicity.apps.iol.fhir.services.create",
        "documentation": {}
    },
    {
        "label": "FhirReadService",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.services.read",
        "description": "felicity.apps.iol.fhir.services.read",
        "peekOfCode": "class FhirReadService(IFhirReadService):\n    def __init__(\n        self,\n        analysis_request_service: IAnalysisRequestService,\n        sample_service: ISampleService,\n        analysis_result_service: IAnalysisResultService,\n        shipped_sample_service: IShippedSampleService,\n        patient_service: IPatientService,\n        shipment_service: IShipmentService,\n        laboratory_service: ILaboratoryService,",
        "detail": "felicity.apps.iol.fhir.services.read",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.iol.fhir.utils.create",
        "description": "felicity.apps.iol.fhir.utils.create",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def create_resource(\n    resource_type: str,\n    resource_data: BundleResource\n    | PatientResource\n    | ServiceRequestResource\n    | DiagnosticReportResource,\n    request: Request,\n    current_user: User,\n):",
        "detail": "felicity.apps.iol.fhir.utils.create",
        "documentation": {}
    },
    {
        "label": "one_of_else",
        "kind": 2,
        "importPath": "felicity.apps.iol.fhir.utils.read",
        "description": "felicity.apps.iol.fhir.utils.read",
        "peekOfCode": "def one_of_else(of: list, one: str, default=None):\n    return one if one in of else default\nasync def get_diagnostic_report_resource(\n    service_request_uid: str, obs_uids=None, for_referral=False\n) -> DiagnosticReportResource | None:\n    if obs_uids is None:\n        obs_uids = []\n    ar, sample = await asyncio.gather(\n        AnalysisRequest.get(uid=service_request_uid),\n        Sample.get(analysis_request_uid=service_request_uid),",
        "detail": "felicity.apps.iol.fhir.utils.read",
        "documentation": {}
    },
    {
        "label": "FhirTask",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.models",
        "description": "felicity.apps.iol.fhir.models",
        "peekOfCode": "class FhirTask(AuditUser):\n    incoming = Column(Boolean, default=True)\n    data = Column(JSONB)\n    status = Column(String)",
        "detail": "felicity.apps.iol.fhir.models",
        "documentation": {}
    },
    {
        "label": "BaseResource",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class BaseResource:\n    \"\"\"All resources base: https://www.hl7.org/fhir/resource.html\"\"\"\n    id: str\n    meta: None = None\n    extension: None = None\nclass Coding(BaseModel):\n    #  Identity of the terminology system\n    system: str | None = None\n    # Version of the system - if relevant\n    version: str | None = None",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Coding",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class Coding(BaseModel):\n    #  Identity of the terminology system\n    system: str | None = None\n    # Version of the system - if relevant\n    version: str | None = None\n    # Symbol in syntax defined by the system\n    code: str | None = None\n    # Representation defined by the system\n    display: str | None = None\n    # If this coding was chosen directly by the user",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "CodeableConcept",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class CodeableConcept(BaseModel):\n    # Code defined by a terminology system\n    coding: List[Coding] | None = None\n    # Plain text representation of the concept\n    text: str | None = None\nclass Period(BaseModel):\n    # C? Starting time with inclusive boundary\n    start: str | None = None\n    # C? End time with inclusive boundary, if not ongoing\n    end: str | None = None",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Period",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class Period(BaseModel):\n    # C? Starting time with inclusive boundary\n    start: str | None = None\n    # C? End time with inclusive boundary, if not ongoing\n    end: str | None = None\nReference = ForwardRef(\"Identifier\")\nclass Reference(BaseModel):\n    # C? Literal reference, Relative, internal or absolute URL\n    reference: str | None = None\n    # Type the reference refers to (e.g. \"Patient\")",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Reference",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class Reference(BaseModel):\n    # C? Literal reference, Relative, internal or absolute URL\n    reference: str | None = None\n    # Type the reference refers to (e.g. \"Patient\")\n    type: str | None = None\n    # Logical reference, when literal reference is not known\n    identifier: Optional[\"Identifier\"] = None\n    # Text alternative for the resource\n    display: str | None = None\nclass Identifier(BaseModel):",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Identifier",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class Identifier(BaseModel):\n    # usual | official | temp | secondary | old(If known)\n    use: str | None = None\n    # Description of identifier\n    type: CodeableConcept | None = None\n    # The namespace for the identifier value\n    system: str | None = None\n    # The value that is unique\n    value: str | None = None\n    # time period when id is / was valid for use",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "HumanName",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class HumanName(BaseModel):\n    # usual | official | temp | nickname | anonymous | old | maiden\n    use: str | None = None\n    # Text representation of the full name\n    text: str | None = None\n    # Family name (often called 'Surname')\n    family: str | None = None\n    # Given names (not always 'first'). Includes middle names\n    given: list[str] | None = None\n    # Parts that come before the name",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "ContactPoint",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class ContactPoint(BaseModel):\n    # C? phone | fax | email | pager | url | sms | other\n    system: str | None = None\n    # The actual contact point details\n    value: str | None = None\n    # home | work | temp | old | mobile - purpose of this contact point\n    use: str | None = None\n    # Specify preferred order of use (1 = highest)\n    rank: int | None = None\n    # Time period when the contact point was/is in use",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Address",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class Address(BaseModel):\n    # home | work | temp | old | billing - purpose of this address\n    use: str | None = None\n    # postal | physical | both\n    type: str | None = None\n    # Text representation of the address\n    text: str | None = None\n    # Street name, number, direction & P.O. Box etc.\n    line: str | None = None\n    # Name of city, town etc.",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Annotation",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class Annotation(BaseModel):\n    # Reference(Organization|Patient|Practitioner|RelatedPerson)\n    authorReference: Reference | None = None\n    authorString: str | None = None\n    # When the annotation was made\n    time: str | None = None\n    # R!  The annotation  - text content (as markdown)\n    text: str | None = None\nclass Quantity(BaseModel):\n    # Numerical value (with implicit precision)",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Quantity",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class Quantity(BaseModel):\n    # Numerical value (with implicit precision)\n    value: float | None = None\n    # < | <= | >= | > - how to understand the value\n    comparator: str | None = None\n    # Unit representation\n    unit: str | None = None\n    # C? System that defines coded unit form\n    system: str | None = None\n    code: str | None = None",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Range",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class Range(BaseModel):\n    # Low limit\n    low: Quantity | None = None\n    # High limit\n    high: Quantity | None = None\nclass ReferenceRange(BaseModel):\n    # C? Low Range, if relevant Quantity(SimpleQuantity)\n    low: Quantity | None = None\n    # C? High Range, if relevant Quantity(SimpleQuantity)\n    high: Quantity | None = None",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "ReferenceRange",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class ReferenceRange(BaseModel):\n    # C? Low Range, if relevant Quantity(SimpleQuantity)\n    low: Quantity | None = None\n    # C? High Range, if relevant Quantity(SimpleQuantity)\n    high: Quantity | None = None\n    # Reference range qualifier\n    type: CodeableConcept | None = None\n    # Reference range population\n    appliesTo: List[CodeableConcept] | None = None\n    # Applicable age range, if relevant",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Ratio",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class Ratio(BaseModel):\n    # Numerator value\n    numerator: Quantity | None = None\n    # Denominator value\n    denominator: Quantity | None = None\nclass SampledData(BaseModel):\n    # R!  Zero value and units\n    origin: Quantity | None = None\n    # R!  Number of milliseconds between samples\n    period: int | None = None",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "SampledData",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class SampledData(BaseModel):\n    # R!  Zero value and units\n    origin: Quantity | None = None\n    # R!  Number of milliseconds between samples\n    period: int | None = None\n    # Multiply data by this before adding to origin\n    factor: int | None = None\n    # Lower limit of detection\n    lowerLimit: int | None = None\n    # Upper limit of detection",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Extension",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class Extension(BaseModel):\n    url: str | None = None\n    valueString: str | dict | None = None\n    data: dict | None = None\nclass PatientResource(BaseModel):\n    resourceType: str = \"Patient\"\n    # An identifier for this patient\n    identifier: List[Identifier] | None = None\n    # Whether this patient's record is in active use\n    active: bool | None = None",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "PatientResource",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class PatientResource(BaseModel):\n    resourceType: str = \"Patient\"\n    # An identifier for this patient\n    identifier: List[Identifier] | None = None\n    # Whether this patient's record is in active use\n    active: bool | None = None\n    # A name associated with the patient\n    name: List[HumanName] | None = None\n    #  A contact detail for the individual\n    telecom: List[ContactPoint] | None = None",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "SpecimenCollection",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class SpecimenCollection(BaseModel):\n    #  Who collected the specimen Reference(Patient|Practitioner|PractitionerRole|RelatedPerson)\n    collector: Reference | None = None\n    collectedDateTime: str | None = None\n    #  The quantity of specimen collected Quantity(SimpleQuantity)\n    quantity: Quantity | None = None\n    # Technique used to perform collection\n    method: CodeableConcept | None = None\nclass SpecimenResource(BaseModel):\n    resourceType: str = \"Specimen\"",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "SpecimenResource",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class SpecimenResource(BaseModel):\n    resourceType: str = \"Specimen\"\n    # External Identifier\n    identifier: List[Identifier] | None = None\n    # Identifier assigned by the lab\n    accessionIdentifier: Identifier | None = None\n    # available | unavailable | unsatisfactory | entered-in-error\n    status: str | None = None\n    # Kind of material that forms the specimen icon\n    type: CodeableConcept",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "ServiceRequestResource",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class ServiceRequestResource(BaseModel):\n    resourceType: str = \"ServiceRequest\"\n    # Identifiers assigned to this order\n    identifier: List[Identifier] | None = None\n    # What request replaces Reference(ServiceRequest)\n    replaces: List[Reference] | None = None\n    # Composite Request ID\n    requisition: Identifier | None = None\n    # draft | active | on-hold | revoked | completed | entered-in-error | unknown\n    status: str | None = None",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "ObservationComponent",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class ObservationComponent(BaseModel):\n    # R!  Type of component observation (code / type)\n    code: CodeableConcept | None = None\n    # value[x]: Actual component result. One of these 11:\n    valueQuantity: Quantity | None = None\n    valueCodeableConcept: CodeableConcept\n    valueString: str | None = None\n    valueBoolean: bool | None = None\n    valueInteger: int | None = None\n    valueRange: Range | None = None",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "ObservationResource",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class ObservationResource(BaseModel):\n    resourceType: str = \"Observation\"\n    # Business Identifier for observation\n    identifier: List[Identifier] | None = None\n    # Fulfills plan, proposal or order\n    # Reference(CarePlan|DeviceRequest|ImmunizationRecommendation|MedicationRequest|NutritionOrder|ServiceRequest)\n    basedOn: List[Reference] | None = None\n    # R!  registered | preliminary | final | amended +\n    status: str | None = None\n    # R!  Type of observation (code / type)",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "DiagnosticReportResource",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class DiagnosticReportResource(BaseModel):\n    resourceType: str = \"DiagnosticReport\"\n    # Business identifier for report\n    identifier: List[Identifier] | None = None\n    # What was requested\n    # Reference(CarePlan|ImmunizationRecommendation|MedicationRequest|NutritionOrder|ServiceRequest)\n    basedOn: List[Reference] | None = None\n    # R!  registered | partial | preliminary | final +\n    status: str | None = None\n    # Service category",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Resource",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class Resource(BaseModel):\n    resourceType: str\n    # short description\n    property1: str | None = None\nclass BundleEntryRequest(BaseModel):\n    # I R!  GET | HEAD | POST | PUT | DELETE | PATCH\n    method: str\n    # R!  URL for HTTP equivalent of this entry\n    url: str | None = None\nclass BundleEntryResponse(BaseModel):",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "BundleEntryRequest",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class BundleEntryRequest(BaseModel):\n    # I R!  GET | HEAD | POST | PUT | DELETE | PATCH\n    method: str\n    # R!  URL for HTTP equivalent of this entry\n    url: str | None = None\nclass BundleEntryResponse(BaseModel):\n    # R!  Status response code (text optional)\n    status: str\n    # The location (if the operation returns a location)\n    location: str | None = None",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "BundleEntryResponse",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class BundleEntryResponse(BaseModel):\n    # R!  Status response code (text optional)\n    status: str\n    # The location (if the operation returns a location)\n    location: str | None = None\n    # Server's date time modified\n    lastModified: str | None = None\n    # // OperationOutcome with hints and warnings (for batch/transaction)\n    outcome: Resource\nclass BundleEntry(BaseModel):",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "BundleEntry",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class BundleEntry(BaseModel):\n    # A resource in the bundle\n    resource: Any = None\n    # Additional execution information (transaction/batch/history)\n    request: BundleEntryRequest | None = None\n    # Results of execution (transaction/batch/history)\n    response: BundleEntryResponse | None = None\n    @field_validator(\"resource\")\n    @classmethod\n    def validate_resource(cls, val):",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "BundleResource",
        "kind": 6,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "class BundleResource(BaseModel):\n    resourceType: str = \"Bundle\"\n    # Persistent identifier for the bundle\n    identifier: Identifier | None = None\n    # R!  document | message | transaction | transaction-response | batch | batch-response |  \\\n    # history | searchset | collection | subscription-notification\n    type: str\n    # When the bundle was assembled\n    timestamp: str\n    # If search, the total number of matches",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Reference",
        "kind": 5,
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "peekOfCode": "Reference = ForwardRef(\"Identifier\")\nclass Reference(BaseModel):\n    # C? Literal reference, Relative, internal or absolute URL\n    reference: str | None = None\n    # Type the reference refers to (e.g. \"Patient\")\n    type: str | None = None\n    # Logical reference, when literal reference is not known\n    identifier: Optional[\"Identifier\"] = None\n    # Text alternative for the resource\n    display: str | None = None",
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "States",
        "kind": 6,
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "peekOfCode": "class States:\n    PENDING = \"pending\"\n    RUNNING = \"running\"\n    FAILED = \"failed\"\n    FINISHED = \"finished\"\nstates = States()\nclass Priorities(object):\n    NORMAL = 0\n    MEDIUM = 1\n    HIGH = 2",
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "Priorities",
        "kind": 6,
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "peekOfCode": "class Priorities(object):\n    NORMAL = 0\n    MEDIUM = 1\n    HIGH = 2\npriorities = Priorities()\nclass Actions(object):\n    WS_ASSIGN = \"worksheet_assign\"\n    WS_MANUAL_ASSIGN = \"worksheet_manual_assign\"\n    WS_UN_ASSIGN = \"worksheet_un_assign\"\n    RESULT_VERIFY = \"result_verify\"",
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "Actions",
        "kind": 6,
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "peekOfCode": "class Actions(object):\n    WS_ASSIGN = \"worksheet_assign\"\n    WS_MANUAL_ASSIGN = \"worksheet_manual_assign\"\n    WS_UN_ASSIGN = \"worksheet_un_assign\"\n    RESULT_VERIFY = \"result_verify\"\n    RESULT_SUBMIT = \"result_submit\"\n    GENERATE_REPORT = \"generate_report\"\n    IMPRESS_REPORT = \"impress_report\"\n    SH_MANUAL_ASSIGN = \"shipment_manual_assign\"\n    SH_DISPATCH = \"shipment_dispatch\"",
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "Categories",
        "kind": 6,
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "peekOfCode": "class Categories(object):\n    SHIPMENT = \"shipment\"\n    WORKSHEET = \"worksheet\"\n    RESULT = \"result\"\n    REPORT = \"report\"\n    IMPRESS = \"impress\"\n    BILLING = \"billing\"\ncategories = Categories()",
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "states",
        "kind": 5,
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "peekOfCode": "states = States()\nclass Priorities(object):\n    NORMAL = 0\n    MEDIUM = 1\n    HIGH = 2\npriorities = Priorities()\nclass Actions(object):\n    WS_ASSIGN = \"worksheet_assign\"\n    WS_MANUAL_ASSIGN = \"worksheet_manual_assign\"\n    WS_UN_ASSIGN = \"worksheet_un_assign\"",
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "priorities",
        "kind": 5,
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "peekOfCode": "priorities = Priorities()\nclass Actions(object):\n    WS_ASSIGN = \"worksheet_assign\"\n    WS_MANUAL_ASSIGN = \"worksheet_manual_assign\"\n    WS_UN_ASSIGN = \"worksheet_un_assign\"\n    RESULT_VERIFY = \"result_verify\"\n    RESULT_SUBMIT = \"result_submit\"\n    GENERATE_REPORT = \"generate_report\"\n    IMPRESS_REPORT = \"impress_report\"\n    SH_MANUAL_ASSIGN = \"shipment_manual_assign\"",
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "actions",
        "kind": 5,
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "peekOfCode": "actions = Actions()\nclass Categories(object):\n    SHIPMENT = \"shipment\"\n    WORKSHEET = \"worksheet\"\n    RESULT = \"result\"\n    REPORT = \"report\"\n    IMPRESS = \"impress\"\n    BILLING = \"billing\"\ncategories = Categories()",
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "categories",
        "kind": 5,
        "importPath": "felicity.apps.job.conf",
        "description": "felicity.apps.job.conf",
        "peekOfCode": "categories = Categories()",
        "detail": "felicity.apps.job.conf",
        "documentation": {}
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": "felicity.apps.job.entities",
        "description": "felicity.apps.job.entities",
        "peekOfCode": "class Job(BaseEntity):\n    __tablename__ = \"job\"\n    action = Column(String)\n    category = Column(String)\n    priority = Column(Integer)\n    data = Column(JSONB)\n    job_id = Column(String)\n    creator_uid = Column(String)\n    status = Column(String)\n    reason = Column(String)",
        "detail": "felicity.apps.job.entities",
        "documentation": {}
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": "felicity.apps.job.models",
        "description": "felicity.apps.job.models",
        "peekOfCode": "class Job(BaseEntity):\n    __tablename__ = \"job\"\n    action = Column(String)\n    category = Column(String)\n    priority = Column(Integer)\n    data = Column(JSONB)\n    job_id = Column(String)\n    creator_uid = Column(String)\n    status = Column(String)\n    reason = Column(String)",
        "detail": "felicity.apps.job.models",
        "documentation": {}
    },
    {
        "label": "JobRepository",
        "kind": 6,
        "importPath": "felicity.apps.job.repository",
        "description": "felicity.apps.job.repository",
        "peekOfCode": "class JobRepository(BaseRepository[Job], IJobRepository):\n    def __init__(self) -> None:\n        self.model = Job\n        super().__init__()\n    async def fetch_sorted(self):\n        stmt = self._qb.smart_query(\n            filters={\n                \"status__notin\": [\n                    JobStates.FINISHED,\n                    JobStates.FAILED,",
        "detail": "felicity.apps.job.repository",
        "documentation": {}
    },
    {
        "label": "felicity_workforce_init",
        "kind": 2,
        "importPath": "felicity.apps.job.sched",
        "description": "felicity.apps.job.sched",
        "peekOfCode": "def felicity_workforce_init():\n    logging.info(\"Initialising felicity workforce ...\")\n    scheduler.add_job(\n        func=run_jobs_if_exists, trigger=IntervalTrigger(seconds=10), id=\"felicity_wf\"\n    )\n    scheduler.add_job(\n        func=prepare_for_impress,\n        trigger=IntervalTrigger(seconds=60 * 60),\n        id=\"felicity_impress\",\n    )",
        "detail": "felicity.apps.job.sched",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.job.sched",
        "description": "felicity.apps.job.sched",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# apscheduler\nlog = logging.getLogger(\"apscheduler.executors.default\")\nlog.setLevel(logging.WARNING)\nscheduler = AsyncIOScheduler()\nasync def run_jobs_if_exists():\n    async def unknown_action(action):\n        logging.warning(f\"Unknown job action: {action}\")\n    jobs: list[job_models.Job] = await job_models.Job.fetch_sorted()\n    # logging.info(f\"There are {len(jobs)} Jobs pending running.\")",
        "detail": "felicity.apps.job.sched",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "felicity.apps.job.sched",
        "description": "felicity.apps.job.sched",
        "peekOfCode": "log = logging.getLogger(\"apscheduler.executors.default\")\nlog.setLevel(logging.WARNING)\nscheduler = AsyncIOScheduler()\nasync def run_jobs_if_exists():\n    async def unknown_action(action):\n        logging.warning(f\"Unknown job action: {action}\")\n    jobs: list[job_models.Job] = await job_models.Job.fetch_sorted()\n    # logging.info(f\"There are {len(jobs)} Jobs pending running.\")\n    if len(jobs) == 0:\n        # felicity_pause_workforce()\\",
        "detail": "felicity.apps.job.sched",
        "documentation": {}
    },
    {
        "label": "scheduler",
        "kind": 5,
        "importPath": "felicity.apps.job.sched",
        "description": "felicity.apps.job.sched",
        "peekOfCode": "scheduler = AsyncIOScheduler()\nasync def run_jobs_if_exists():\n    async def unknown_action(action):\n        logging.warning(f\"Unknown job action: {action}\")\n    jobs: list[job_models.Job] = await job_models.Job.fetch_sorted()\n    # logging.info(f\"There are {len(jobs)} Jobs pending running.\")\n    if len(jobs) == 0:\n        # felicity_pause_workforce()\\\n        pass\n    else:",
        "detail": "felicity.apps.job.sched",
        "documentation": {}
    },
    {
        "label": "JobBase",
        "kind": 6,
        "importPath": "felicity.apps.job.schemas",
        "description": "felicity.apps.job.schemas",
        "peekOfCode": "class JobBase(BaseModel):\n    action: str | None = None\n    category: str | None = categories.WORKSHEET\n    priority: int | None = priorities.NORMAL\n    data: Optional[Any] = None\n    job_id: str | None = None\n    status: str | None = states.PENDING\n    reason: str | None = None\n    creator_uid: str | None = None\nclass Job(JobBase):",
        "detail": "felicity.apps.job.schemas",
        "documentation": {}
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": "felicity.apps.job.schemas",
        "description": "felicity.apps.job.schemas",
        "peekOfCode": "class Job(JobBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass JobCreate(JobBase):\n    pass\nclass JobUpdate(JobBase):\n    pass",
        "detail": "felicity.apps.job.schemas",
        "documentation": {}
    },
    {
        "label": "JobCreate",
        "kind": 6,
        "importPath": "felicity.apps.job.schemas",
        "description": "felicity.apps.job.schemas",
        "peekOfCode": "class JobCreate(JobBase):\n    pass\nclass JobUpdate(JobBase):\n    pass",
        "detail": "felicity.apps.job.schemas",
        "documentation": {}
    },
    {
        "label": "JobUpdate",
        "kind": 6,
        "importPath": "felicity.apps.job.schemas",
        "description": "felicity.apps.job.schemas",
        "peekOfCode": "class JobUpdate(JobBase):\n    pass",
        "detail": "felicity.apps.job.schemas",
        "documentation": {}
    },
    {
        "label": "JobService",
        "kind": 6,
        "importPath": "felicity.apps.job.services",
        "description": "felicity.apps.job.services",
        "peekOfCode": "class JobService(BaseService[Job], IJobService):\n    def __init__(self, repository: IJobRepository):\n        self.repository = repository\n        super().__init__(repository)\n    async def backoff(self, job: Job, minutes: int = 5, max_retries: int = 5):\n        bck = minutes * job.retries\n        job.next_try = datetime.now() + timedelta(minutes=bck)\n        if job.retries >= max_retries + 1:\n            job.status = JobStates.FAILED\n            job.reason = f\"max retries have been exceeded: {max_retries}\"",
        "detail": "felicity.apps.job.services",
        "documentation": {}
    },
    {
        "label": "JobWorkerService",
        "kind": 6,
        "importPath": "felicity.apps.job.services",
        "description": "felicity.apps.job.services",
        "peekOfCode": "class JobWorkerService(IJobWorkerService):\n    def __init__(self, job_service: IJobService):\n        self.job_service = job_service\n    async def run_jobs_if_exists(self):\n        jobs = await self.job_service.fetch_sorted()\n        # logging.info(f\"There are {len(jobs)} Jobs pending running.\")\n        if not jobs:\n            return\n        job_dispatch_table = {}\n        # job_dispatch_table = {",
        "detail": "felicity.apps.job.services",
        "documentation": {}
    },
    {
        "label": "MessageThread",
        "kind": 6,
        "importPath": "felicity.apps.messaging.entities",
        "description": "felicity.apps.messaging.entities",
        "peekOfCode": "class MessageThread(AuditUser):\n    \"\"\"MessageThread\"\"\"\n    __tablename__ = \"message_thread\"\n    broadcast = Column(Boolean, nullable=False)\n    messages = relationship(\"Message\", back_populates=\"thread\", lazy=\"selectin\")\n    recipients = relationship(\n        \"User\", secondary=message_thread_recipient, lazy=\"selectin\"\n    )\n    deleted_by = relationship(\"User\", secondary=message_thread_delete, lazy=\"selectin\")\n\"\"\"",
        "detail": "felicity.apps.messaging.entities",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "felicity.apps.messaging.entities",
        "description": "felicity.apps.messaging.entities",
        "peekOfCode": "class Message(AuditUser, BaseMPTT):\n    \"\"\"Message\"\"\"\n    __tablename__ = \"message\"\n    thread_uid = Column(String, ForeignKey(\"message_thread.uid\"), nullable=True)\n    thread = relationship(\"MessageThread\", back_populates=\"messages\", lazy=\"selectin\")\n    body = Column(String, nullable=False)\n    viewers = relationship(\"User\", secondary=message_view, lazy=\"selectin\")\n    deleted_by = relationship(\"User\", secondary=message_delete, lazy=\"selectin\")",
        "detail": "felicity.apps.messaging.entities",
        "documentation": {}
    },
    {
        "label": "message_thread_recipient",
        "kind": 5,
        "importPath": "felicity.apps.messaging.entities",
        "description": "felicity.apps.messaging.entities",
        "peekOfCode": "message_thread_recipient = Table(\n    \"message_thread_recipient\",\n    BaseEntity.metadata,\n    Column(\"message_thread_uid\", ForeignKey(\"message_thread.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\n\"\"\"\n Many to Many Link between Users (deletions)  and MessageThread\n\"\"\"\nmessage_thread_delete = Table(",
        "detail": "felicity.apps.messaging.entities",
        "documentation": {}
    },
    {
        "label": "message_thread_delete",
        "kind": 5,
        "importPath": "felicity.apps.messaging.entities",
        "description": "felicity.apps.messaging.entities",
        "peekOfCode": "message_thread_delete = Table(\n    \"message_thread_delete\",\n    BaseEntity.metadata,\n    Column(\"message_thread_uid\", ForeignKey(\"message_thread.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\nclass MessageThread(AuditUser):\n    \"\"\"MessageThread\"\"\"\n    __tablename__ = \"message_thread\"\n    broadcast = Column(Boolean, nullable=False)",
        "detail": "felicity.apps.messaging.entities",
        "documentation": {}
    },
    {
        "label": "message_view",
        "kind": 5,
        "importPath": "felicity.apps.messaging.entities",
        "description": "felicity.apps.messaging.entities",
        "peekOfCode": "message_view = Table(\n    \"message_view\",\n    BaseEntity.metadata,\n    Column(\"message_uid\", ForeignKey(\"message.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\n\"\"\"\n Many to Many Link between Users (deletions) and Message\n\"\"\"\nmessage_delete = Table(",
        "detail": "felicity.apps.messaging.entities",
        "documentation": {}
    },
    {
        "label": "message_delete",
        "kind": 5,
        "importPath": "felicity.apps.messaging.entities",
        "description": "felicity.apps.messaging.entities",
        "peekOfCode": "message_delete = Table(\n    \"message_delete\",\n    BaseEntity.metadata,\n    Column(\"message_uid\", ForeignKey(\"message.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\nclass Message(AuditUser, BaseMPTT):\n    \"\"\"Message\"\"\"\n    __tablename__ = \"message\"\n    thread_uid = Column(String, ForeignKey(\"message_thread.uid\"), nullable=True)",
        "detail": "felicity.apps.messaging.entities",
        "documentation": {}
    },
    {
        "label": "MessageThread",
        "kind": 6,
        "importPath": "felicity.apps.messaging.models",
        "description": "felicity.apps.messaging.models",
        "peekOfCode": "class MessageThread(AuditUser):\n    \"\"\"MessageThread\"\"\"\n    __tablename__ = \"message_thread\"\n    broadcast = Column(Boolean, nullable=False)\n    messages = relationship(\"Message\", back_populates=\"thread\", lazy=\"selectin\")\n    recipients = relationship(\n        \"User\", secondary=message_thread_recipient, lazy=\"selectin\"\n    )\n    deleted_by = relationship(\"User\", secondary=message_thread_delete, lazy=\"selectin\")\n    @classmethod",
        "detail": "felicity.apps.messaging.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "felicity.apps.messaging.models",
        "description": "felicity.apps.messaging.models",
        "peekOfCode": "class Message(AuditUser, BaseMPTT):\n    \"\"\"Message\"\"\"\n    __tablename__ = \"message\"\n    thread_uid = Column(String, ForeignKey(\"message_thread.uid\"), nullable=True)\n    thread = relationship(\"MessageThread\", back_populates=\"messages\", lazy=\"selectin\")\n    body = Column(String, nullable=False)\n    viewers = relationship(\"User\", secondary=message_view, lazy=\"selectin\")\n    deleted_by = relationship(\"User\", secondary=message_delete, lazy=\"selectin\")\n    @classmethod\n    async def create(cls, obj_in: dict | schemas.MessageCreate) -> schemas.Message:",
        "detail": "felicity.apps.messaging.models",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.messaging.models",
        "description": "felicity.apps.messaging.models",
        "peekOfCode": "logger = logging.getLogger(__name__)\n\"\"\"\n Many to Many Link between Users (recipients)  and MessageThread\n\"\"\"\nmessage_thread_recipient = Table(\n    \"message_thread_recipient\",\n    BaseEntity.metadata,\n    Column(\"message_thread_uid\", ForeignKey(\"message_thread.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)",
        "detail": "felicity.apps.messaging.models",
        "documentation": {}
    },
    {
        "label": "message_thread_recipient",
        "kind": 5,
        "importPath": "felicity.apps.messaging.models",
        "description": "felicity.apps.messaging.models",
        "peekOfCode": "message_thread_recipient = Table(\n    \"message_thread_recipient\",\n    BaseEntity.metadata,\n    Column(\"message_thread_uid\", ForeignKey(\"message_thread.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\n\"\"\"\n Many to Many Link between Users (deletions)  and MessageThread\n\"\"\"\nmessage_thread_delete = Table(",
        "detail": "felicity.apps.messaging.models",
        "documentation": {}
    },
    {
        "label": "message_thread_delete",
        "kind": 5,
        "importPath": "felicity.apps.messaging.models",
        "description": "felicity.apps.messaging.models",
        "peekOfCode": "message_thread_delete = Table(\n    \"message_thread_delete\",\n    BaseEntity.metadata,\n    Column(\"message_thread_uid\", ForeignKey(\"message_thread.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\nclass MessageThread(AuditUser):\n    \"\"\"MessageThread\"\"\"\n    __tablename__ = \"message_thread\"\n    broadcast = Column(Boolean, nullable=False)",
        "detail": "felicity.apps.messaging.models",
        "documentation": {}
    },
    {
        "label": "message_view",
        "kind": 5,
        "importPath": "felicity.apps.messaging.models",
        "description": "felicity.apps.messaging.models",
        "peekOfCode": "message_view = Table(\n    \"message_view\",\n    BaseEntity.metadata,\n    Column(\"message_uid\", ForeignKey(\"message.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\n\"\"\"\n Many to Many Link between Users (deletions) and Message\n\"\"\"\nmessage_delete = Table(",
        "detail": "felicity.apps.messaging.models",
        "documentation": {}
    },
    {
        "label": "message_delete",
        "kind": 5,
        "importPath": "felicity.apps.messaging.models",
        "description": "felicity.apps.messaging.models",
        "peekOfCode": "message_delete = Table(\n    \"message_delete\",\n    BaseEntity.metadata,\n    Column(\"message_uid\", ForeignKey(\"message.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\nclass Message(AuditUser, BaseMPTT):\n    \"\"\"Message\"\"\"\n    __tablename__ = \"message\"\n    thread_uid = Column(String, ForeignKey(\"message_thread.uid\"), nullable=True)",
        "detail": "felicity.apps.messaging.models",
        "documentation": {}
    },
    {
        "label": "MessageThreadRepository",
        "kind": 6,
        "importPath": "felicity.apps.messaging.repository",
        "description": "felicity.apps.messaging.repository",
        "peekOfCode": "class MessageThreadRepository(BaseRepository[MessageThread], IMessageThreadRepository):\n    def __init__(self) -> None:\n        self.model = MessageThread\n        super().__init__()\nclass MessageRepository(BaseRepository[Message], IMessageRepository):\n    def __init__(self) -> None:\n        self.model = Message\n        super().__init__()",
        "detail": "felicity.apps.messaging.repository",
        "documentation": {}
    },
    {
        "label": "MessageRepository",
        "kind": 6,
        "importPath": "felicity.apps.messaging.repository",
        "description": "felicity.apps.messaging.repository",
        "peekOfCode": "class MessageRepository(BaseRepository[Message], IMessageRepository):\n    def __init__(self) -> None:\n        self.model = Message\n        super().__init__()",
        "detail": "felicity.apps.messaging.repository",
        "documentation": {}
    },
    {
        "label": "MessageBase",
        "kind": 6,
        "importPath": "felicity.apps.messaging.schemas",
        "description": "felicity.apps.messaging.schemas",
        "peekOfCode": "class MessageBase(BaseAuditModel):\n    thread_uid: str\n    thread: Optional[\"MessageThread\"] = None\n    body: str | None = \"\"\n    viewers: Optional[List[User]] = []\n    deleted_by: Optional[List[User]] = []\n    parent_id: str | None = None\nclass Message(MessageBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)",
        "detail": "felicity.apps.messaging.schemas",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "felicity.apps.messaging.schemas",
        "description": "felicity.apps.messaging.schemas",
        "peekOfCode": "class Message(MessageBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass MessageCreate(MessageBase):\n    pass\nclass MessageUpdate(MessageBase):\n    pass\n#\n# MessageThread Schemas\n#",
        "detail": "felicity.apps.messaging.schemas",
        "documentation": {}
    },
    {
        "label": "MessageCreate",
        "kind": 6,
        "importPath": "felicity.apps.messaging.schemas",
        "description": "felicity.apps.messaging.schemas",
        "peekOfCode": "class MessageCreate(MessageBase):\n    pass\nclass MessageUpdate(MessageBase):\n    pass\n#\n# MessageThread Schemas\n#\nclass MessageThreadBase(BaseAuditModel):\n    broadcast: bool | None = False\n    recipients: Optional[List[User]] = []",
        "detail": "felicity.apps.messaging.schemas",
        "documentation": {}
    },
    {
        "label": "MessageUpdate",
        "kind": 6,
        "importPath": "felicity.apps.messaging.schemas",
        "description": "felicity.apps.messaging.schemas",
        "peekOfCode": "class MessageUpdate(MessageBase):\n    pass\n#\n# MessageThread Schemas\n#\nclass MessageThreadBase(BaseAuditModel):\n    broadcast: bool | None = False\n    recipients: Optional[List[User]] = []\n    messages: Optional[List[Message]] = []\n    recipients: Optional[List[User]] = []",
        "detail": "felicity.apps.messaging.schemas",
        "documentation": {}
    },
    {
        "label": "MessageThreadBase",
        "kind": 6,
        "importPath": "felicity.apps.messaging.schemas",
        "description": "felicity.apps.messaging.schemas",
        "peekOfCode": "class MessageThreadBase(BaseAuditModel):\n    broadcast: bool | None = False\n    recipients: Optional[List[User]] = []\n    messages: Optional[List[Message]] = []\n    recipients: Optional[List[User]] = []\nclass MessageThread(MessageThreadBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass MessageThreadCreate(MessageThreadBase):\n    pass",
        "detail": "felicity.apps.messaging.schemas",
        "documentation": {}
    },
    {
        "label": "MessageThread",
        "kind": 6,
        "importPath": "felicity.apps.messaging.schemas",
        "description": "felicity.apps.messaging.schemas",
        "peekOfCode": "class MessageThread(MessageThreadBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass MessageThreadCreate(MessageThreadBase):\n    pass\nclass MessageThreadUpdate(MessageThreadBase):\n    pass",
        "detail": "felicity.apps.messaging.schemas",
        "documentation": {}
    },
    {
        "label": "MessageThreadCreate",
        "kind": 6,
        "importPath": "felicity.apps.messaging.schemas",
        "description": "felicity.apps.messaging.schemas",
        "peekOfCode": "class MessageThreadCreate(MessageThreadBase):\n    pass\nclass MessageThreadUpdate(MessageThreadBase):\n    pass",
        "detail": "felicity.apps.messaging.schemas",
        "documentation": {}
    },
    {
        "label": "MessageThreadUpdate",
        "kind": 6,
        "importPath": "felicity.apps.messaging.schemas",
        "description": "felicity.apps.messaging.schemas",
        "peekOfCode": "class MessageThreadUpdate(MessageThreadBase):\n    pass",
        "detail": "felicity.apps.messaging.schemas",
        "documentation": {}
    },
    {
        "label": "MessageThreadService",
        "kind": 6,
        "importPath": "felicity.apps.messaging.services",
        "description": "felicity.apps.messaging.services",
        "peekOfCode": "class MessageThreadService(BaseService[MessageThread], IMessageThreadService):\n    def __init__(\n            self, repository: IMessageThreadRepository, message_service: IMessageService\n    ):\n        self.repository = repository\n        self.message_service = message_service\n    async def get_last_message(self, thread: MessageThread):\n        if not thread.messages:\n            return None\n        return sorted(self.messages, key=lambda x: x.created_at)[0]",
        "detail": "felicity.apps.messaging.services",
        "documentation": {}
    },
    {
        "label": "MessageService",
        "kind": 6,
        "importPath": "felicity.apps.messaging.services",
        "description": "felicity.apps.messaging.services",
        "peekOfCode": "class MessageService(BaseService[Message], IMessageService):\n    def __int__(\n            self,\n            repository: IMessageRepository,\n            thread_service: IMessageThreadService,\n            user_service: IUserService,\n    ):\n        self.repository = repository\n        self.thread_service = thread_service\n        self.user_service = user_service",
        "detail": "felicity.apps.messaging.services",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "felicity.apps.migrations.versions.10063ec72aac_more",
        "description": "felicity.apps.migrations.versions.10063ec72aac_more",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('id_sequence',\n    sa.Column('prefix', sa.String(), nullable=False),\n    sa.Column('number', sa.Integer(), nullable=False),\n    sa.Column('updated', sa.DateTime(), nullable=True),\n    sa.Column('uid', sa.String(), nullable=False),\n    sa.PrimaryKeyConstraint('uid'),\n    sa.UniqueConstraint('prefix')\n    )",
        "detail": "felicity.apps.migrations.versions.10063ec72aac_more",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "felicity.apps.migrations.versions.10063ec72aac_more",
        "description": "felicity.apps.migrations.versions.10063ec72aac_more",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('result_verification')\n    op.drop_index(op.f('ix_result_mutation_uid'), table_name='result_mutation')\n    op.drop_table('result_mutation')\n    op.drop_index(op.f('ix_shipped_sample_uid'), table_name='shipped_sample')\n    op.drop_table('shipped_sample')\n    op.drop_table('sample_rejection_reason')\n    op.drop_table('sample_profile')\n    op.drop_table('sample_analysis')",
        "detail": "felicity.apps.migrations.versions.10063ec72aac_more",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "felicity.apps.migrations.versions.10063ec72aac_more",
        "description": "felicity.apps.migrations.versions.10063ec72aac_more",
        "peekOfCode": "revision = '10063ec72aac'\ndown_revision = '62c9ae0d42b7'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('id_sequence',\n    sa.Column('prefix', sa.String(), nullable=False),\n    sa.Column('number', sa.Integer(), nullable=False),\n    sa.Column('updated', sa.DateTime(), nullable=True),",
        "detail": "felicity.apps.migrations.versions.10063ec72aac_more",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "felicity.apps.migrations.versions.10063ec72aac_more",
        "description": "felicity.apps.migrations.versions.10063ec72aac_more",
        "peekOfCode": "down_revision = '62c9ae0d42b7'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('id_sequence',\n    sa.Column('prefix', sa.String(), nullable=False),\n    sa.Column('number', sa.Integer(), nullable=False),\n    sa.Column('updated', sa.DateTime(), nullable=True),\n    sa.Column('uid', sa.String(), nullable=False),",
        "detail": "felicity.apps.migrations.versions.10063ec72aac_more",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "felicity.apps.migrations.versions.10063ec72aac_more",
        "description": "felicity.apps.migrations.versions.10063ec72aac_more",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('id_sequence',\n    sa.Column('prefix', sa.String(), nullable=False),\n    sa.Column('number', sa.Integer(), nullable=False),\n    sa.Column('updated', sa.DateTime(), nullable=True),\n    sa.Column('uid', sa.String(), nullable=False),\n    sa.PrimaryKeyConstraint('uid'),",
        "detail": "felicity.apps.migrations.versions.10063ec72aac_more",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "felicity.apps.migrations.versions.10063ec72aac_more",
        "description": "felicity.apps.migrations.versions.10063ec72aac_more",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('id_sequence',\n    sa.Column('prefix', sa.String(), nullable=False),\n    sa.Column('number', sa.Integer(), nullable=False),\n    sa.Column('updated', sa.DateTime(), nullable=True),\n    sa.Column('uid', sa.String(), nullable=False),\n    sa.PrimaryKeyConstraint('uid'),\n    sa.UniqueConstraint('prefix')",
        "detail": "felicity.apps.migrations.versions.10063ec72aac_more",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "felicity.apps.migrations.versions.23d73921be57_init",
        "description": "felicity.apps.migrations.versions.23d73921be57_init",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('audit_log',\n    sa.Column('user_id', sa.String(), nullable=True),\n    sa.Column('target_type', sa.String(length=100), nullable=False),\n    sa.Column('target_id', sa.String(), nullable=True),\n    sa.Column('action', sa.Integer(), nullable=True),\n    sa.Column('state_before', sa.UnicodeText(), nullable=True),\n    sa.Column('state_after', sa.UnicodeText(), nullable=True),\n    sa.Column('uid', sa.String(), nullable=False),",
        "detail": "felicity.apps.migrations.versions.23d73921be57_init",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "felicity.apps.migrations.versions.23d73921be57_init",
        "description": "felicity.apps.migrations.versions.23d73921be57_init",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('user_groups')\n    op.drop_table('permission_groups')\n    op.drop_index(op.f('ix_user_user_name'), table_name='user')\n    op.drop_index(op.f('ix_user_uid'), table_name='user')\n    op.drop_index(op.f('ix_user_last_name'), table_name='user')\n    op.drop_index(op.f('ix_user_first_name'), table_name='user')\n    op.drop_index(op.f('ix_user_email'), table_name='user')\n    op.drop_table('user')",
        "detail": "felicity.apps.migrations.versions.23d73921be57_init",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "felicity.apps.migrations.versions.23d73921be57_init",
        "description": "felicity.apps.migrations.versions.23d73921be57_init",
        "peekOfCode": "revision = '23d73921be57'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('audit_log',\n    sa.Column('user_id', sa.String(), nullable=True),\n    sa.Column('target_type', sa.String(length=100), nullable=False),\n    sa.Column('target_id', sa.String(), nullable=True),",
        "detail": "felicity.apps.migrations.versions.23d73921be57_init",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "felicity.apps.migrations.versions.23d73921be57_init",
        "description": "felicity.apps.migrations.versions.23d73921be57_init",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('audit_log',\n    sa.Column('user_id', sa.String(), nullable=True),\n    sa.Column('target_type', sa.String(length=100), nullable=False),\n    sa.Column('target_id', sa.String(), nullable=True),\n    sa.Column('action', sa.Integer(), nullable=True),",
        "detail": "felicity.apps.migrations.versions.23d73921be57_init",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "felicity.apps.migrations.versions.23d73921be57_init",
        "description": "felicity.apps.migrations.versions.23d73921be57_init",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('audit_log',\n    sa.Column('user_id', sa.String(), nullable=True),\n    sa.Column('target_type', sa.String(length=100), nullable=False),\n    sa.Column('target_id', sa.String(), nullable=True),\n    sa.Column('action', sa.Integer(), nullable=True),\n    sa.Column('state_before', sa.UnicodeText(), nullable=True),",
        "detail": "felicity.apps.migrations.versions.23d73921be57_init",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "felicity.apps.migrations.versions.23d73921be57_init",
        "description": "felicity.apps.migrations.versions.23d73921be57_init",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('audit_log',\n    sa.Column('user_id', sa.String(), nullable=True),\n    sa.Column('target_type', sa.String(length=100), nullable=False),\n    sa.Column('target_id', sa.String(), nullable=True),\n    sa.Column('action', sa.Integer(), nullable=True),\n    sa.Column('state_before', sa.UnicodeText(), nullable=True),\n    sa.Column('state_after', sa.UnicodeText(), nullable=True),",
        "detail": "felicity.apps.migrations.versions.23d73921be57_init",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "felicity.apps.migrations.versions.62c9ae0d42b7_added_jobs_tables",
        "description": "felicity.apps.migrations.versions.62c9ae0d42b7_added_jobs_tables",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('job',\n    sa.Column('action', sa.String(), nullable=True),\n    sa.Column('category', sa.String(), nullable=True),\n    sa.Column('priority', sa.Integer(), nullable=True),\n    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),\n    sa.Column('job_id', sa.String(), nullable=True),\n    sa.Column('creator_uid', sa.String(), nullable=True),\n    sa.Column('status', sa.String(), nullable=True),",
        "detail": "felicity.apps.migrations.versions.62c9ae0d42b7_added_jobs_tables",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "felicity.apps.migrations.versions.62c9ae0d42b7_added_jobs_tables",
        "description": "felicity.apps.migrations.versions.62c9ae0d42b7_added_jobs_tables",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_job_uid'), table_name='job')\n    op.drop_table('job')\n    # ### end Alembic commands ###",
        "detail": "felicity.apps.migrations.versions.62c9ae0d42b7_added_jobs_tables",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "felicity.apps.migrations.versions.62c9ae0d42b7_added_jobs_tables",
        "description": "felicity.apps.migrations.versions.62c9ae0d42b7_added_jobs_tables",
        "peekOfCode": "revision = '62c9ae0d42b7'\ndown_revision = '8007c8a98e07'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('job',\n    sa.Column('action', sa.String(), nullable=True),\n    sa.Column('category', sa.String(), nullable=True),\n    sa.Column('priority', sa.Integer(), nullable=True),",
        "detail": "felicity.apps.migrations.versions.62c9ae0d42b7_added_jobs_tables",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "felicity.apps.migrations.versions.62c9ae0d42b7_added_jobs_tables",
        "description": "felicity.apps.migrations.versions.62c9ae0d42b7_added_jobs_tables",
        "peekOfCode": "down_revision = '8007c8a98e07'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('job',\n    sa.Column('action', sa.String(), nullable=True),\n    sa.Column('category', sa.String(), nullable=True),\n    sa.Column('priority', sa.Integer(), nullable=True),\n    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),",
        "detail": "felicity.apps.migrations.versions.62c9ae0d42b7_added_jobs_tables",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "felicity.apps.migrations.versions.62c9ae0d42b7_added_jobs_tables",
        "description": "felicity.apps.migrations.versions.62c9ae0d42b7_added_jobs_tables",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('job',\n    sa.Column('action', sa.String(), nullable=True),\n    sa.Column('category', sa.String(), nullable=True),\n    sa.Column('priority', sa.Integer(), nullable=True),\n    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),\n    sa.Column('job_id', sa.String(), nullable=True),",
        "detail": "felicity.apps.migrations.versions.62c9ae0d42b7_added_jobs_tables",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "felicity.apps.migrations.versions.62c9ae0d42b7_added_jobs_tables",
        "description": "felicity.apps.migrations.versions.62c9ae0d42b7_added_jobs_tables",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('job',\n    sa.Column('action', sa.String(), nullable=True),\n    sa.Column('category', sa.String(), nullable=True),\n    sa.Column('priority', sa.Integer(), nullable=True),\n    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),\n    sa.Column('job_id', sa.String(), nullable=True),\n    sa.Column('creator_uid', sa.String(), nullable=True),",
        "detail": "felicity.apps.migrations.versions.62c9ae0d42b7_added_jobs_tables",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "felicity.apps.migrations.versions.8007c8a98e07_init",
        "description": "felicity.apps.migrations.versions.8007c8a98e07_init",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "felicity.apps.migrations.versions.8007c8a98e07_init",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "felicity.apps.migrations.versions.8007c8a98e07_init",
        "description": "felicity.apps.migrations.versions.8007c8a98e07_init",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "felicity.apps.migrations.versions.8007c8a98e07_init",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "felicity.apps.migrations.versions.8007c8a98e07_init",
        "description": "felicity.apps.migrations.versions.8007c8a98e07_init",
        "peekOfCode": "revision = '8007c8a98e07'\ndown_revision = '23d73921be57'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###",
        "detail": "felicity.apps.migrations.versions.8007c8a98e07_init",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "felicity.apps.migrations.versions.8007c8a98e07_init",
        "description": "felicity.apps.migrations.versions.8007c8a98e07_init",
        "peekOfCode": "down_revision = '23d73921be57'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass",
        "detail": "felicity.apps.migrations.versions.8007c8a98e07_init",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "felicity.apps.migrations.versions.8007c8a98e07_init",
        "description": "felicity.apps.migrations.versions.8007c8a98e07_init",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "felicity.apps.migrations.versions.8007c8a98e07_init",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "felicity.apps.migrations.versions.8007c8a98e07_init",
        "description": "felicity.apps.migrations.versions.8007c8a98e07_init",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "felicity.apps.migrations.versions.8007c8a98e07_init",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "felicity.apps.migrations.env",
        "description": "felicity.apps.migrations.env",
        "peekOfCode": "def run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "felicity.apps.migrations.env",
        "documentation": {}
    },
    {
        "label": "get_async_url",
        "kind": 2,
        "importPath": "felicity.apps.migrations.env",
        "description": "felicity.apps.migrations.env",
        "peekOfCode": "def get_async_url():\n    user = os.getenv(\"POSTGRES_USER\", \"felicity\")\n    password = os.getenv(\"POSTGRES_PASSWORD\", \"felicity\")\n    server = os.getenv(\"POSTGRES_SERVER\", \"localhost\")  # felicity_db\n    db = os.getenv(\"POSTGRES_DB\", \"felicity_lims_db\")\n    return f\"postgresql+asyncpg://{user}:{password}@{server}/{db}\"\ndef do_run_migrations(connection):\n    context.configure(connection=connection, target_metadata=target_metadata)\n    with context.begin_transaction():\n        context.run_migrations()",
        "detail": "felicity.apps.migrations.env",
        "documentation": {}
    },
    {
        "label": "do_run_migrations",
        "kind": 2,
        "importPath": "felicity.apps.migrations.env",
        "description": "felicity.apps.migrations.env",
        "peekOfCode": "def do_run_migrations(connection):\n    context.configure(connection=connection, target_metadata=target_metadata)\n    with context.begin_transaction():\n        context.run_migrations()\nasync def run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    configuration = config.get_section(config.config_ini_section)",
        "detail": "felicity.apps.migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "felicity.apps.migrations.env",
        "description": "felicity.apps.migrations.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\ntarget_metadata = BaseEntity.metadata\n# other values from the config, defined by the needs of env.py,",
        "detail": "felicity.apps.migrations.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "felicity.apps.migrations.env",
        "description": "felicity.apps.migrations.env",
        "peekOfCode": "target_metadata = BaseEntity.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "felicity.apps.migrations.env",
        "documentation": {}
    },
    {
        "label": "Notice",
        "kind": 6,
        "importPath": "felicity.apps.noticeboard.entities",
        "description": "felicity.apps.noticeboard.entities",
        "peekOfCode": "class Notice(AuditUser):\n    \"\"\"Notice\"\"\"\n    __tablename__ = \"notice\"\n    departments = relationship(\n        \"Department\", secondary=department_notice, lazy=\"selectin\"\n    )\n    groups = relationship(\"Group\", secondary=group_notice, lazy=\"selectin\")\n    title = Column(String, nullable=False)\n    body = Column(String, nullable=False)\n    viewers = relationship(\"User\", secondary=notice_view, lazy=\"selectin\")",
        "detail": "felicity.apps.noticeboard.entities",
        "documentation": {}
    },
    {
        "label": "Notice",
        "kind": 6,
        "importPath": "felicity.apps.noticeboard.models",
        "description": "felicity.apps.noticeboard.models",
        "peekOfCode": "class Notice(AuditUser):\n    \"\"\"Notice\"\"\"\n    __tablename__ = \"notice\"\n    departments = relationship(\n        \"Department\", secondary=department_notice, lazy=\"selectin\"\n    )\n    groups = relationship(\"Group\", secondary=group_notice, lazy=\"selectin\")\n    title = Column(String, nullable=False)\n    body = Column(String, nullable=False)\n    viewers = relationship(\"User\", secondary=notice_view, lazy=\"selectin\")",
        "detail": "felicity.apps.noticeboard.models",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.noticeboard.models",
        "description": "felicity.apps.noticeboard.models",
        "peekOfCode": "logger = logging.getLogger(__name__)\n\"\"\"\n Many to Many Link between Users and Notices\n\"\"\"\nnotice_view: Table = Table(\n    \"notice_view\",\n    BaseEntity.metadata,\n    Column(\"notice_uid\", ForeignKey(\"notice.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)",
        "detail": "felicity.apps.noticeboard.models",
        "documentation": {}
    },
    {
        "label": "NoticeRepository",
        "kind": 6,
        "importPath": "felicity.apps.noticeboard.repository",
        "description": "felicity.apps.noticeboard.repository",
        "peekOfCode": "class NoticeRepository(BaseRepository[Notice], INoticeRepository):\n    def __init__(self) -> None:\n        self.model = Notice\n        super().__init__()",
        "detail": "felicity.apps.noticeboard.repository",
        "documentation": {}
    },
    {
        "label": "NoticeBase",
        "kind": 6,
        "importPath": "felicity.apps.noticeboard.schemas",
        "description": "felicity.apps.noticeboard.schemas",
        "peekOfCode": "class NoticeBase(BaseAuditModel):\n    departments: Optional[List[Department]] = []\n    groups: Optional[List[Group]] = []\n    title: str | None = \"\"\n    body: str | None = \"\"\n    viewers: Optional[List[User]] = []\n    expiry: datetime | None = None\nclass Notice(NoticeBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)",
        "detail": "felicity.apps.noticeboard.schemas",
        "documentation": {}
    },
    {
        "label": "Notice",
        "kind": 6,
        "importPath": "felicity.apps.noticeboard.schemas",
        "description": "felicity.apps.noticeboard.schemas",
        "peekOfCode": "class Notice(NoticeBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass NoticeCreate(NoticeBase):\n    pass\nclass NoticeUpdate(NoticeBase):\n    pass",
        "detail": "felicity.apps.noticeboard.schemas",
        "documentation": {}
    },
    {
        "label": "NoticeCreate",
        "kind": 6,
        "importPath": "felicity.apps.noticeboard.schemas",
        "description": "felicity.apps.noticeboard.schemas",
        "peekOfCode": "class NoticeCreate(NoticeBase):\n    pass\nclass NoticeUpdate(NoticeBase):\n    pass",
        "detail": "felicity.apps.noticeboard.schemas",
        "documentation": {}
    },
    {
        "label": "NoticeUpdate",
        "kind": 6,
        "importPath": "felicity.apps.noticeboard.schemas",
        "description": "felicity.apps.noticeboard.schemas",
        "peekOfCode": "class NoticeUpdate(NoticeBase):\n    pass",
        "detail": "felicity.apps.noticeboard.schemas",
        "documentation": {}
    },
    {
        "label": "NoticeService",
        "kind": 6,
        "importPath": "felicity.apps.noticeboard.services",
        "description": "felicity.apps.noticeboard.services",
        "peekOfCode": "class NoticeService(BaseService[Notice], INoticeService):\n    def __init__(\n            self,\n            repository: INoticeRepository,\n            group_service: IGroupService,\n            department_service: IDepartmentService,\n            user_service: IUserService,\n    ):\n        self.repository = repository\n        self.group_service = group_service",
        "detail": "felicity.apps.noticeboard.services",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.notification.tasks.analyses",
        "description": "felicity.apps.notification.tasks.analyses",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def check_over_due_analyses():\n    \"\"\"Check Over-Due Analyses\n    @schedule: runs every morning 4:00 am\n    e.g.\n        there are 3456 analyses that are overdue\n    \"\"\"\n# abnormal activity monitoring\n# sample cancellations\n# analysis retests",
        "detail": "felicity.apps.notification.tasks.analyses",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.notification.tasks.instrument",
        "description": "felicity.apps.notification.tasks.instrument",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def caliberation_status():\n    \"\"\"\"\"\"",
        "detail": "felicity.apps.notification.tasks.instrument",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.notification.tasks.sample",
        "description": "felicity.apps.notification.tasks.sample",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def notpublished():\n    \"\"\"\"\"\"\n# abnormal activity monitoring\n# sample cancellations\n# analysis retests\n# set threshnold parameters e.g there must be no more than 10 cancellations within week\n# there must be no more that 2 rejection per day/week etc\n# these must be no more than x retests /retractions/ invalidations\n# is these thresholds are exceeded then a system management notification must be generated",
        "detail": "felicity.apps.notification.tasks.sample",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.notification.tasks.worksheet",
        "description": "felicity.apps.notification.tasks.worksheet",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def check_open_worksheets():\n    \"\"\"Check Open Worksheets\n    @schedule: runs every morning 4:00 am\n    e.g.\n        23 worksheets are in open state\n    \"\"\"\nasync def check_incomplete_worksheet_assignments():\n    \"\"\"Check Incomplete Worksheet Assignments\n    @schedule: runs every morning 4:00 am",
        "detail": "felicity.apps.notification.tasks.worksheet",
        "documentation": {}
    },
    {
        "label": "ActionObjects",
        "kind": 6,
        "importPath": "felicity.apps.notification.conf",
        "description": "felicity.apps.notification.conf",
        "peekOfCode": "class ActionObjects:\n    SAMPLE = \"SAMPLE\"\n    ANALYSIS_RESULT = \"ANALYSIS_RESULT\"\n    WORKSHEET = \"WORKSHEET\"\n    REPORT = \"REPORT\"\naction_objects = ActionObjects()\nclass Channels:\n    ACTIVITIES = \"activities\"\n    NOTIFICATIONS = \"notifications\"\n    JOBS = \"jobs\"",
        "detail": "felicity.apps.notification.conf",
        "documentation": {}
    },
    {
        "label": "Channels",
        "kind": 6,
        "importPath": "felicity.apps.notification.conf",
        "description": "felicity.apps.notification.conf",
        "peekOfCode": "class Channels:\n    ACTIVITIES = \"activities\"\n    NOTIFICATIONS = \"notifications\"\n    JOBS = \"jobs\"\nchannels = Channels()",
        "detail": "felicity.apps.notification.conf",
        "documentation": {}
    },
    {
        "label": "action_objects",
        "kind": 5,
        "importPath": "felicity.apps.notification.conf",
        "description": "felicity.apps.notification.conf",
        "peekOfCode": "action_objects = ActionObjects()\nclass Channels:\n    ACTIVITIES = \"activities\"\n    NOTIFICATIONS = \"notifications\"\n    JOBS = \"jobs\"\nchannels = Channels()",
        "detail": "felicity.apps.notification.conf",
        "documentation": {}
    },
    {
        "label": "channels",
        "kind": 5,
        "importPath": "felicity.apps.notification.conf",
        "description": "felicity.apps.notification.conf",
        "peekOfCode": "channels = Channels()",
        "detail": "felicity.apps.notification.conf",
        "documentation": {}
    },
    {
        "label": "ActivityFeed",
        "kind": 6,
        "importPath": "felicity.apps.notification.entities",
        "description": "felicity.apps.notification.entities",
        "peekOfCode": "class ActivityFeed(AuditUser):\n    \"\"\"ActivityFeed\"\"\"\n    __tablename__ = \"activity_feed\"\n    name = Column(String, nullable=False)\n    subscribers = relationship(\n        \"User\", secondary=activity_feed_subscription, lazy=\"selectin\"\n    )\n\"\"\"\n Many to Many Link between ActivityStream and ActivityFeed\n\"\"\"",
        "detail": "felicity.apps.notification.entities",
        "documentation": {}
    },
    {
        "label": "ActivityStream",
        "kind": 6,
        "importPath": "felicity.apps.notification.entities",
        "description": "felicity.apps.notification.entities",
        "peekOfCode": "class ActivityStream(AuditUser):\n    \"\"\"ActivityStream\n    Actor. The object that performed the activity.\n    Verb. The verb phrase that identifies the action of the activity.\n    Action Object. (Optional) The object linked to the action itself.\n    Target. (Optional) The object to which the activity was performed.\n    e.g. Aurthur (actor) verified (verb) worksheet ws20-1222 (action object) 20 on felicity lims (target) minutes ago\n    ?? maybe target as feed\n    \"\"\"\n    __tablename__ = \"activity_stream\"",
        "detail": "felicity.apps.notification.entities",
        "documentation": {}
    },
    {
        "label": "Notification",
        "kind": 6,
        "importPath": "felicity.apps.notification.entities",
        "description": "felicity.apps.notification.entities",
        "peekOfCode": "class Notification(AuditUser):\n    \"\"\"Notification\n    Custom messages about system status. These are more like activity streams only that they are very specific\n    messages to notify users about something important\n    examples:\n        32 samples are due in 4 days, today, etc ....\n        7 open worksheets have been lying idle for 3 weeks including 137 samples past their due date.\n        2 worksheets have no samples, consider populating or deleting them to avoid cluttering your dashboard\n        ...\n    \"\"\"",
        "detail": "felicity.apps.notification.entities",
        "documentation": {}
    },
    {
        "label": "activity_feed_subscription",
        "kind": 5,
        "importPath": "felicity.apps.notification.entities",
        "description": "felicity.apps.notification.entities",
        "peekOfCode": "activity_feed_subscription = Table(\n    \"activity_feed_subscription\",\n    BaseEntity.metadata,\n    Column(\"activity_feed_uid\", ForeignKey(\"activity_feed.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\nclass ActivityFeed(AuditUser):\n    \"\"\"ActivityFeed\"\"\"\n    __tablename__ = \"activity_feed\"\n    name = Column(String, nullable=False)",
        "detail": "felicity.apps.notification.entities",
        "documentation": {}
    },
    {
        "label": "activity_stream_feed",
        "kind": 5,
        "importPath": "felicity.apps.notification.entities",
        "description": "felicity.apps.notification.entities",
        "peekOfCode": "activity_stream_feed = Table(\n    \"activity_stream_feed\",\n    BaseEntity.metadata,\n    Column(\"activity_feed_uid\", ForeignKey(\"activity_feed.uid\"), primary_key=True),\n    Column(\"stream_uid\", ForeignKey(\"activity_stream.uid\"), primary_key=True),\n)\n\"\"\"\n Many to Many Link between Users and ActivityStream\n\"\"\"\nactivity_stream_view = Table(",
        "detail": "felicity.apps.notification.entities",
        "documentation": {}
    },
    {
        "label": "activity_stream_view",
        "kind": 5,
        "importPath": "felicity.apps.notification.entities",
        "description": "felicity.apps.notification.entities",
        "peekOfCode": "activity_stream_view = Table(\n    \"activity_stream_view\",\n    BaseEntity.metadata,\n    Column(\"activity_stream_uid\", ForeignKey(\"activity_stream.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\nclass ActivityStream(AuditUser):\n    \"\"\"ActivityStream\n    Actor. The object that performed the activity.\n    Verb. The verb phrase that identifies the action of the activity.",
        "detail": "felicity.apps.notification.entities",
        "documentation": {}
    },
    {
        "label": "user_notification",
        "kind": 5,
        "importPath": "felicity.apps.notification.entities",
        "description": "felicity.apps.notification.entities",
        "peekOfCode": "user_notification = Table(\n    \"user_notification\",\n    BaseEntity.metadata,\n    Column(\"notification_uid\", ForeignKey(\"notification.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\n\"\"\"\n Many to Many Link between Users and Notification\n\"\"\"\nnotification_view = Table(",
        "detail": "felicity.apps.notification.entities",
        "documentation": {}
    },
    {
        "label": "notification_view",
        "kind": 5,
        "importPath": "felicity.apps.notification.entities",
        "description": "felicity.apps.notification.entities",
        "peekOfCode": "notification_view = Table(\n    \"notification_view\",\n    BaseEntity.metadata,\n    Column(\"notification_uid\", ForeignKey(\"notification.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\n\"\"\"\n Many to Many Link between Group and Notification\n\"\"\"\ngroup_notification = Table(",
        "detail": "felicity.apps.notification.entities",
        "documentation": {}
    },
    {
        "label": "group_notification",
        "kind": 5,
        "importPath": "felicity.apps.notification.entities",
        "description": "felicity.apps.notification.entities",
        "peekOfCode": "group_notification = Table(\n    \"group_notification\",\n    BaseEntity.metadata,\n    Column(\"notification_uid\", ForeignKey(\"notification.uid\"), primary_key=True),\n    Column(\"group_uid\", ForeignKey(\"group.uid\"), primary_key=True),\n)\n\"\"\"\n Many to Many Link between Department and Notification\n\"\"\"\ndepartment_notification = Table(",
        "detail": "felicity.apps.notification.entities",
        "documentation": {}
    },
    {
        "label": "department_notification",
        "kind": 5,
        "importPath": "felicity.apps.notification.entities",
        "description": "felicity.apps.notification.entities",
        "peekOfCode": "department_notification = Table(\n    \"department_notification\",\n    BaseEntity.metadata,\n    Column(\"notification_uid\", ForeignKey(\"notification.uid\"), primary_key=True),\n    Column(\"department_uid\", ForeignKey(\"department.uid\"), primary_key=True),\n)\nclass Notification(AuditUser):\n    \"\"\"Notification\n    Custom messages about system status. These are more like activity streams only that they are very specific\n    messages to notify users about something important",
        "detail": "felicity.apps.notification.entities",
        "documentation": {}
    },
    {
        "label": "ActivityFeed",
        "kind": 6,
        "importPath": "felicity.apps.notification.models",
        "description": "felicity.apps.notification.models",
        "peekOfCode": "class ActivityFeed(AuditUser):\n    \"\"\"ActivityFeed\"\"\"\n    __tablename__ = \"activity_feed\"\n    name = Column(String, nullable=False)\n    subscribers = relationship(\n        \"User\", secondary=activity_feed_subscription, lazy=\"selectin\"\n    )\n    @classmethod\n    async def create(\n        cls, obj_in: dict | schemas.ActivityFeedCreate",
        "detail": "felicity.apps.notification.models",
        "documentation": {}
    },
    {
        "label": "ActivityStream",
        "kind": 6,
        "importPath": "felicity.apps.notification.models",
        "description": "felicity.apps.notification.models",
        "peekOfCode": "class ActivityStream(AuditUser):\n    \"\"\"ActivityStream\n    Actor. The object that performed the activity.\n    Verb. The verb phrase that identifies the action of the activity.\n    Action Object. (Optional) The object linked to the action itself.\n    Target. (Optional) The object to which the activity was performed.\n    e.g. Aurthur (actor) verified (verb) worksheet ws20-1222 (action object) 20 on felicity lims (target) minutes ago\n    ?? maybe target as feed\n    \"\"\"\n    __tablename__ = \"activity_stream\"",
        "detail": "felicity.apps.notification.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "kind": 6,
        "importPath": "felicity.apps.notification.models",
        "description": "felicity.apps.notification.models",
        "peekOfCode": "class Notification(AuditUser):\n    \"\"\"Notification\n    Custom messages about system status. These are more like activity streams only that they are very specific\n    messages to notify users about something important\n    examples:\n        32 samples are due in 4 days, today, etc ....\n        7 open worksheets have been lying idle for 3 weeks including 137 samples past their due date.\n        2 worksheets have no samples, consider populating or deleting them to avoid cluttering your dashboard\n        ...\n    \"\"\"",
        "detail": "felicity.apps.notification.models",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.notification.models",
        "description": "felicity.apps.notification.models",
        "peekOfCode": "logger = logging.getLogger(__name__)\n\"\"\"\n Many to Many Link between Users and ActivityFeed\n\"\"\"\nactivity_feed_subscription = Table(\n    \"activity_feed_subscription\",\n    BaseEntity.metadata,\n    Column(\"activity_feed_uid\", ForeignKey(\"activity_feed.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)",
        "detail": "felicity.apps.notification.models",
        "documentation": {}
    },
    {
        "label": "activity_feed_subscription",
        "kind": 5,
        "importPath": "felicity.apps.notification.models",
        "description": "felicity.apps.notification.models",
        "peekOfCode": "activity_feed_subscription = Table(\n    \"activity_feed_subscription\",\n    BaseEntity.metadata,\n    Column(\"activity_feed_uid\", ForeignKey(\"activity_feed.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\nclass ActivityFeed(AuditUser):\n    \"\"\"ActivityFeed\"\"\"\n    __tablename__ = \"activity_feed\"\n    name = Column(String, nullable=False)",
        "detail": "felicity.apps.notification.models",
        "documentation": {}
    },
    {
        "label": "activity_stream_feed",
        "kind": 5,
        "importPath": "felicity.apps.notification.models",
        "description": "felicity.apps.notification.models",
        "peekOfCode": "activity_stream_feed = Table(\n    \"activity_stream_feed\",\n    BaseEntity.metadata,\n    Column(\"activity_feed_uid\", ForeignKey(\"activity_feed.uid\"), primary_key=True),\n    Column(\"stream_uid\", ForeignKey(\"activity_stream.uid\"), primary_key=True),\n)\n\"\"\"\n Many to Many Link between Users and ActivityStream\n\"\"\"\nactivity_stream_view = Table(",
        "detail": "felicity.apps.notification.models",
        "documentation": {}
    },
    {
        "label": "activity_stream_view",
        "kind": 5,
        "importPath": "felicity.apps.notification.models",
        "description": "felicity.apps.notification.models",
        "peekOfCode": "activity_stream_view = Table(\n    \"activity_stream_view\",\n    BaseEntity.metadata,\n    Column(\"activity_stream_uid\", ForeignKey(\"activity_stream.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\nclass ActivityStream(AuditUser):\n    \"\"\"ActivityStream\n    Actor. The object that performed the activity.\n    Verb. The verb phrase that identifies the action of the activity.",
        "detail": "felicity.apps.notification.models",
        "documentation": {}
    },
    {
        "label": "user_notification",
        "kind": 5,
        "importPath": "felicity.apps.notification.models",
        "description": "felicity.apps.notification.models",
        "peekOfCode": "user_notification = Table(\n    \"user_notification\",\n    BaseEntity.metadata,\n    Column(\"notification_uid\", ForeignKey(\"notification.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\n\"\"\"\n Many to Many Link between Users and Notification\n\"\"\"\nnotification_view = Table(",
        "detail": "felicity.apps.notification.models",
        "documentation": {}
    },
    {
        "label": "notification_view",
        "kind": 5,
        "importPath": "felicity.apps.notification.models",
        "description": "felicity.apps.notification.models",
        "peekOfCode": "notification_view = Table(\n    \"notification_view\",\n    BaseEntity.metadata,\n    Column(\"notification_uid\", ForeignKey(\"notification.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\n\"\"\"\n Many to Many Link between Group and Notification\n\"\"\"\ngroup_notification = Table(",
        "detail": "felicity.apps.notification.models",
        "documentation": {}
    },
    {
        "label": "group_notification",
        "kind": 5,
        "importPath": "felicity.apps.notification.models",
        "description": "felicity.apps.notification.models",
        "peekOfCode": "group_notification = Table(\n    \"group_notification\",\n    BaseEntity.metadata,\n    Column(\"notification_uid\", ForeignKey(\"notification.uid\"), primary_key=True),\n    Column(\"group_uid\", ForeignKey(\"group.uid\"), primary_key=True),\n)\n\"\"\"\n Many to Many Link between Department and Notification\n\"\"\"\ndepartment_notification = Table(",
        "detail": "felicity.apps.notification.models",
        "documentation": {}
    },
    {
        "label": "department_notification",
        "kind": 5,
        "importPath": "felicity.apps.notification.models",
        "description": "felicity.apps.notification.models",
        "peekOfCode": "department_notification = Table(\n    \"department_notification\",\n    BaseEntity.metadata,\n    Column(\"notification_uid\", ForeignKey(\"notification.uid\"), primary_key=True),\n    Column(\"department_uid\", ForeignKey(\"department.uid\"), primary_key=True),\n)\nclass Notification(AuditUser):\n    \"\"\"Notification\n    Custom messages about system status. These are more like activity streams only that they are very specific\n    messages to notify users about something important",
        "detail": "felicity.apps.notification.models",
        "documentation": {}
    },
    {
        "label": "ActivityFeedRepository",
        "kind": 6,
        "importPath": "felicity.apps.notification.repository",
        "description": "felicity.apps.notification.repository",
        "peekOfCode": "class ActivityFeedRepository(BaseRepository[ActivityFeed], IActivityFeedRepository):\n    def __init__(self) -> None:\n        self.model = ActivityFeed\n        super().__init__()\nclass ActivityStreamRepository(\n    BaseRepository[ActivityStream], IActivityStreamRepository\n):\n    def __init__(self) -> None:\n        self.model = ActivityStream\n        super().__init__()",
        "detail": "felicity.apps.notification.repository",
        "documentation": {}
    },
    {
        "label": "ActivityStreamRepository",
        "kind": 6,
        "importPath": "felicity.apps.notification.repository",
        "description": "felicity.apps.notification.repository",
        "peekOfCode": "class ActivityStreamRepository(\n    BaseRepository[ActivityStream], IActivityStreamRepository\n):\n    def __init__(self) -> None:\n        self.model = ActivityStream\n        super().__init__()\nclass NotificationRepository(BaseRepository[Notification], INotificationRepository):\n    def __init__(self) -> None:\n        self.model = Notification\n        super().__init__()",
        "detail": "felicity.apps.notification.repository",
        "documentation": {}
    },
    {
        "label": "NotificationRepository",
        "kind": 6,
        "importPath": "felicity.apps.notification.repository",
        "description": "felicity.apps.notification.repository",
        "peekOfCode": "class NotificationRepository(BaseRepository[Notification], INotificationRepository):\n    def __init__(self) -> None:\n        self.model = Notification\n        super().__init__()",
        "detail": "felicity.apps.notification.repository",
        "documentation": {}
    },
    {
        "label": "ActivityFeedBase",
        "kind": 6,
        "importPath": "felicity.apps.notification.schemas",
        "description": "felicity.apps.notification.schemas",
        "peekOfCode": "class ActivityFeedBase(BaseAuditModel):\n    name: str | None = \"\"\n    subscribers: Optional[List[User]] = []\nclass ActivityFeed(ActivityFeedBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass ActivityFeedCreate(ActivityFeedBase):\n    pass\nclass ActivityFeedUpdate(ActivityFeedBase):\n    pass",
        "detail": "felicity.apps.notification.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityFeed",
        "kind": 6,
        "importPath": "felicity.apps.notification.schemas",
        "description": "felicity.apps.notification.schemas",
        "peekOfCode": "class ActivityFeed(ActivityFeedBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass ActivityFeedCreate(ActivityFeedBase):\n    pass\nclass ActivityFeedUpdate(ActivityFeedBase):\n    pass\n#\n# ActivityStream Schemas\n#",
        "detail": "felicity.apps.notification.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityFeedCreate",
        "kind": 6,
        "importPath": "felicity.apps.notification.schemas",
        "description": "felicity.apps.notification.schemas",
        "peekOfCode": "class ActivityFeedCreate(ActivityFeedBase):\n    pass\nclass ActivityFeedUpdate(ActivityFeedBase):\n    pass\n#\n# ActivityStream Schemas\n#\nclass ActivityStreamBase(BaseAuditModel):\n    feeds: Optional[List[ActivityFeed]] = []\n    actor_uid: str | None = None",
        "detail": "felicity.apps.notification.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityFeedUpdate",
        "kind": 6,
        "importPath": "felicity.apps.notification.schemas",
        "description": "felicity.apps.notification.schemas",
        "peekOfCode": "class ActivityFeedUpdate(ActivityFeedBase):\n    pass\n#\n# ActivityStream Schemas\n#\nclass ActivityStreamBase(BaseAuditModel):\n    feeds: Optional[List[ActivityFeed]] = []\n    actor_uid: str | None = None\n    actor: Optional[User] = None\n    verb: str | None = None",
        "detail": "felicity.apps.notification.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityStreamBase",
        "kind": 6,
        "importPath": "felicity.apps.notification.schemas",
        "description": "felicity.apps.notification.schemas",
        "peekOfCode": "class ActivityStreamBase(BaseAuditModel):\n    feeds: Optional[List[ActivityFeed]] = []\n    actor_uid: str | None = None\n    actor: Optional[User] = None\n    verb: str | None = None\n    action_object_type: str | None = None\n    action_object_uid: str | None = None\n    action_object: str | None = None\n    target_uid: str | None = None\n    target: str | None = None",
        "detail": "felicity.apps.notification.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityStream",
        "kind": 6,
        "importPath": "felicity.apps.notification.schemas",
        "description": "felicity.apps.notification.schemas",
        "peekOfCode": "class ActivityStream(ActivityStreamBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass ActivityStreamCreate(ActivityStream):\n    pass\nclass ActivityStreamUpdate(ActivityStreamBase):\n    pass\n#\n# Notification Schemas\n#",
        "detail": "felicity.apps.notification.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityStreamCreate",
        "kind": 6,
        "importPath": "felicity.apps.notification.schemas",
        "description": "felicity.apps.notification.schemas",
        "peekOfCode": "class ActivityStreamCreate(ActivityStream):\n    pass\nclass ActivityStreamUpdate(ActivityStreamBase):\n    pass\n#\n# Notification Schemas\n#\nclass NotificationBase(BaseAuditModel):\n    departments: Optional[List[Department]] = []\n    groups: Optional[List[Group]] = []",
        "detail": "felicity.apps.notification.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityStreamUpdate",
        "kind": 6,
        "importPath": "felicity.apps.notification.schemas",
        "description": "felicity.apps.notification.schemas",
        "peekOfCode": "class ActivityStreamUpdate(ActivityStreamBase):\n    pass\n#\n# Notification Schemas\n#\nclass NotificationBase(BaseAuditModel):\n    departments: Optional[List[Department]] = []\n    groups: Optional[List[Group]] = []\n    users: Optional[List[User]] = []\n    message: str | None = \"\"",
        "detail": "felicity.apps.notification.schemas",
        "documentation": {}
    },
    {
        "label": "NotificationBase",
        "kind": 6,
        "importPath": "felicity.apps.notification.schemas",
        "description": "felicity.apps.notification.schemas",
        "peekOfCode": "class NotificationBase(BaseAuditModel):\n    departments: Optional[List[Department]] = []\n    groups: Optional[List[Group]] = []\n    users: Optional[List[User]] = []\n    message: str | None = \"\"\n    viewers: Optional[List[User]] = []\nclass Notification(NotificationBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass NotificationCreate(NotificationBase):",
        "detail": "felicity.apps.notification.schemas",
        "documentation": {}
    },
    {
        "label": "Notification",
        "kind": 6,
        "importPath": "felicity.apps.notification.schemas",
        "description": "felicity.apps.notification.schemas",
        "peekOfCode": "class Notification(NotificationBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass NotificationCreate(NotificationBase):\n    pass\nclass NotificationUpdate(NotificationBase):\n    pass",
        "detail": "felicity.apps.notification.schemas",
        "documentation": {}
    },
    {
        "label": "NotificationCreate",
        "kind": 6,
        "importPath": "felicity.apps.notification.schemas",
        "description": "felicity.apps.notification.schemas",
        "peekOfCode": "class NotificationCreate(NotificationBase):\n    pass\nclass NotificationUpdate(NotificationBase):\n    pass",
        "detail": "felicity.apps.notification.schemas",
        "documentation": {}
    },
    {
        "label": "NotificationUpdate",
        "kind": 6,
        "importPath": "felicity.apps.notification.schemas",
        "description": "felicity.apps.notification.schemas",
        "peekOfCode": "class NotificationUpdate(NotificationBase):\n    pass",
        "detail": "felicity.apps.notification.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityFeedService",
        "kind": 6,
        "importPath": "felicity.apps.notification.services",
        "description": "felicity.apps.notification.services",
        "peekOfCode": "class ActivityFeedService(BaseService[ActivityFeed], IActivityFeedService):\n    def __init__(self, repository: IActivityFeedRepository):\n        self.repository = repository\n    async def reset_subscribers(self, activity_feed: ActivityFeed) -> ActivityFeed:\n        activity_feed.subscribers.clear()\n        return await super().update(activity_feed, **marshal(activity_feed))\n    async def remove_subscriber(\n            self, activity_feed: ActivityFeed, user: User\n    ) -> ActivityFeed:\n        activity_feed.subscribers.remove(user)",
        "detail": "felicity.apps.notification.services",
        "documentation": {}
    },
    {
        "label": "ActivityStreamService",
        "kind": 6,
        "importPath": "felicity.apps.notification.services",
        "description": "felicity.apps.notification.services",
        "peekOfCode": "class ActivityStreamService(BaseService[ActivityStream], IActivityStreamService):\n    def __init__(self, repository: IActivityStreamRepository):\n        self.repository = repository\n    @classmethod\n    async def stream(\n            cls,\n            obj: Any,\n            actor: User,\n            verb: str,\n            object_type: str,",
        "detail": "felicity.apps.notification.services",
        "documentation": {}
    },
    {
        "label": "NotificationService",
        "kind": 6,
        "importPath": "felicity.apps.notification.services",
        "description": "felicity.apps.notification.services",
        "peekOfCode": "class NotificationService(BaseService[Notification], INotificationService):\n    def __init__(self, repository: INotificationRepository):\n        self.repository = repository\n    async def notify(\n            self,\n            message: str,\n            departments,\n            groups,\n            users,\n    ) -> None:",
        "detail": "felicity.apps.notification.services",
        "documentation": {}
    },
    {
        "label": "FelicityStreamer",
        "kind": 6,
        "importPath": "felicity.apps.notification.utils",
        "description": "felicity.apps.notification.utils",
        "peekOfCode": "class FelicityStreamer:\n    \"\"\"activity streams helper util\"\"\"\n    @staticmethod\n    async def stream(obj: Any, actor: Any, verb: str, object_type: str):\n        s_in = ActivityStreamCreate(\n            feeds=[],\n            actor_uid=actor.uid,\n            verb=verb,\n            action_object_type=object_type,\n            action_object_uid=obj.uid,",
        "detail": "felicity.apps.notification.utils",
        "documentation": {}
    },
    {
        "label": "FelicityNotifier",
        "kind": 6,
        "importPath": "felicity.apps.notification.utils",
        "description": "felicity.apps.notification.utils",
        "peekOfCode": "class FelicityNotifier:\n    \"\"\"simple notification stream util util\"\"\"\n    @staticmethod\n    async def notify(\n        message: str, departments: Any = None, groups: Any = None, users: Any = None\n    ):\n        n_in = NotificationCreate(message=message)\n        notification: Notification = await Notification.create(n_in)\n        await broadcast.publish(channels.NOTIFICATIONS, notification)\nclass ReportNotifier:",
        "detail": "felicity.apps.notification.utils",
        "documentation": {}
    },
    {
        "label": "ReportNotifier",
        "kind": 6,
        "importPath": "felicity.apps.notification.utils",
        "description": "felicity.apps.notification.utils",
        "peekOfCode": "class ReportNotifier:\n    \"\"\"generated report status\"\"\"\n    @staticmethod\n    async def notify(message: str, user: Any = None):\n        n_in = NotificationCreate(message=message)\n        notification: Notification = await Notification.create(n_in)\n        notification.users = [user]\n        notification = await notification.save_async()\n        await broadcast.publish(channels.NOTIFICATIONS, notification)",
        "detail": "felicity.apps.notification.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.notification.utils",
        "description": "felicity.apps.notification.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass FelicityStreamer:\n    \"\"\"activity streams helper util\"\"\"\n    @staticmethod\n    async def stream(obj: Any, actor: Any, verb: str, object_type: str):\n        s_in = ActivityStreamCreate(\n            feeds=[],\n            actor_uid=actor.uid,\n            verb=verb,\n            action_object_type=object_type,",
        "detail": "felicity.apps.notification.utils",
        "documentation": {}
    },
    {
        "label": "Genders",
        "kind": 6,
        "importPath": "felicity.apps.patient.conf",
        "description": "felicity.apps.patient.conf",
        "peekOfCode": "class Genders(object):\n    \"\"\"Gender\"\"\"\n    MALE = \"Male\"\n    FEMALE = \"Female\"\n    MISSING = \"Missing\"\n    TRANS_GENDER = \"Trans Gender\"\ngenders = Genders()",
        "detail": "felicity.apps.patient.conf",
        "documentation": {}
    },
    {
        "label": "genders",
        "kind": 5,
        "importPath": "felicity.apps.patient.conf",
        "description": "felicity.apps.patient.conf",
        "peekOfCode": "genders = Genders()",
        "detail": "felicity.apps.patient.conf",
        "documentation": {}
    },
    {
        "label": "Identification",
        "kind": 6,
        "importPath": "felicity.apps.patient.entities",
        "description": "felicity.apps.patient.entities",
        "peekOfCode": "class Identification(AuditHistory):\n    __tablename__ = \"identification\"\n    name = Column(String, index=True, unique=True, nullable=True)\nclass PatientIdentification(AuditHistory):\n    __tablename__ = \"patient_identification\"\n    identification_uid = Column(String, ForeignKey(\"identification.uid\"), nullable=True)\n    identification: Mapped[\"Identification\"] = relationship(\n        \"Identification\", lazy=\"selectin\"\n    )\n    patient_uid = Column(String, ForeignKey(\"patient.uid\"), nullable=True)",
        "detail": "felicity.apps.patient.entities",
        "documentation": {}
    },
    {
        "label": "PatientIdentification",
        "kind": 6,
        "importPath": "felicity.apps.patient.entities",
        "description": "felicity.apps.patient.entities",
        "peekOfCode": "class PatientIdentification(AuditHistory):\n    __tablename__ = \"patient_identification\"\n    identification_uid = Column(String, ForeignKey(\"identification.uid\"), nullable=True)\n    identification: Mapped[\"Identification\"] = relationship(\n        \"Identification\", lazy=\"selectin\"\n    )\n    patient_uid = Column(String, ForeignKey(\"patient.uid\"), nullable=True)\n    patient: Mapped[\"Patient\"] = relationship(\n        \"Patient\", back_populates=\"identifications\", lazy=\"selectin\"\n    )",
        "detail": "felicity.apps.patient.entities",
        "documentation": {}
    },
    {
        "label": "Patient",
        "kind": 6,
        "importPath": "felicity.apps.patient.entities",
        "description": "felicity.apps.patient.entities",
        "peekOfCode": "class Patient(AuditHistory):\n    __tablename__ = \"patient\"\n    # Identification\n    client_patient_id = Column(String, index=True, unique=True, nullable=False)\n    patient_id = Column(String, index=True, unique=True, nullable=True)\n    client_uid = Column(String, ForeignKey(\"client.uid\"), nullable=True)\n    client = relationship(Client, backref=\"patients\", lazy=\"selectin\")\n    # Details\n    first_name = Column(String, nullable=False)\n    middle_name = Column(String, nullable=True)",
        "detail": "felicity.apps.patient.entities",
        "documentation": {}
    },
    {
        "label": "Identification",
        "kind": 6,
        "importPath": "felicity.apps.patient.models",
        "description": "felicity.apps.patient.models",
        "peekOfCode": "class Identification(AuditHistory):\n    __tablename__ = \"identification\"\n    name = Column(String, index=True, unique=True, nullable=True)\n    @classmethod\n    async def create(\n        cls, obj_in: dict | schemas.IdentificationCreate\n    ) -> schemas.Identification:\n        data = cls._import(obj_in)\n        return await super().create(**data)\n    async def update(",
        "detail": "felicity.apps.patient.models",
        "documentation": {}
    },
    {
        "label": "PatientIdentification",
        "kind": 6,
        "importPath": "felicity.apps.patient.models",
        "description": "felicity.apps.patient.models",
        "peekOfCode": "class PatientIdentification(AuditHistory):\n    __tablename__ = \"patient_identification\"\n    identification_uid = Column(String, ForeignKey(\"identification.uid\"), nullable=True)\n    identification: Mapped[\"Identification\"] = relationship(\n        \"Identification\", lazy=\"selectin\"\n    )\n    patient_uid = Column(String, ForeignKey(\"patient.uid\"), nullable=True)\n    patient: Mapped[\"Patient\"] = relationship(\n        \"Patient\", back_populates=\"identifications\", lazy=\"selectin\"\n    )",
        "detail": "felicity.apps.patient.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "kind": 6,
        "importPath": "felicity.apps.patient.models",
        "description": "felicity.apps.patient.models",
        "peekOfCode": "class Patient(AuditHistory):\n    __tablename__ = \"patient\"\n    # Identification\n    client_patient_id = Column(String, index=True, unique=True, nullable=False)\n    patient_id = Column(String, index=True, unique=True, nullable=True)\n    client_uid = Column(String, ForeignKey(\"client.uid\"), nullable=True)\n    client = relationship(Client, backref=\"patients\", lazy=\"selectin\")\n    # Details\n    first_name = Column(String, nullable=False)\n    middle_name = Column(String, nullable=True)",
        "detail": "felicity.apps.patient.models",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.patient.models",
        "description": "felicity.apps.patient.models",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Identification(AuditHistory):\n    __tablename__ = \"identification\"\n    name = Column(String, index=True, unique=True, nullable=True)\n    @classmethod\n    async def create(\n        cls, obj_in: dict | schemas.IdentificationCreate\n    ) -> schemas.Identification:\n        data = cls._import(obj_in)\n        return await super().create(**data)",
        "detail": "felicity.apps.patient.models",
        "documentation": {}
    },
    {
        "label": "PatientRepository",
        "kind": 6,
        "importPath": "felicity.apps.patient.repository",
        "description": "felicity.apps.patient.repository",
        "peekOfCode": "class PatientRepository(BaseRepository[Patient], IPatientRepository):\n    def __init__(self) -> None:\n        self.model = Patient\n        super().__init__()\n    async def paginate_with_cursors(\n            self,\n            page_size: int | None = None,\n            after_cursor: str | None = None,\n            before_cursor: str | None = None,\n            text: str | None = None,",
        "detail": "felicity.apps.patient.repository",
        "documentation": {}
    },
    {
        "label": "IdentificationRepository",
        "kind": 6,
        "importPath": "felicity.apps.patient.repository",
        "description": "felicity.apps.patient.repository",
        "peekOfCode": "class IdentificationRepository(\n    BaseRepository[Identification], IIdentificationRepository\n):\n    def __init__(self) -> None:\n        self.model = Identification\n        super().__init__()\nclass PatientIdentificationRepository(\n    BaseRepository[PatientIdentification], IPatientIdentificationRepository\n):\n    def __init__(self) -> None:",
        "detail": "felicity.apps.patient.repository",
        "documentation": {}
    },
    {
        "label": "PatientIdentificationRepository",
        "kind": 6,
        "importPath": "felicity.apps.patient.repository",
        "description": "felicity.apps.patient.repository",
        "peekOfCode": "class PatientIdentificationRepository(\n    BaseRepository[PatientIdentification], IPatientIdentificationRepository\n):\n    def __init__(self) -> None:\n        self.model = PatientIdentification\n        super().__init__()",
        "detail": "felicity.apps.patient.repository",
        "documentation": {}
    },
    {
        "label": "PatientBase",
        "kind": 6,
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "peekOfCode": "class PatientBase(BaseAuditModel):\n    client_patient_id: str | None = None\n    client_uid: str | None = None\n    patient_id: str | None = None\n    first_name: str | None = None\n    middle_name: str | None = None\n    last_name: str | None = None\n    gender: str | None = None\n    age: int | None = None\n    date_of_birth: datetime | None = None",
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientCreate",
        "kind": 6,
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "peekOfCode": "class PatientCreate(PatientBase):\n    client_patient_id: str\n    first_name: str\n    last_name: str\n    client_uid: str\n    active: bool = True\n# Properties to receive via API on update\nclass PatientUpdate(PatientBase):\n    pass\nclass PatientInDBBase(PatientBase):",
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientUpdate",
        "kind": 6,
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "peekOfCode": "class PatientUpdate(PatientBase):\n    pass\nclass PatientInDBBase(PatientBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Patient(PatientInDBBase):\n    pass\n# Additional properties stored in DB\nclass PatientInDB(PatientInDBBase):",
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientInDBBase",
        "kind": 6,
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "peekOfCode": "class PatientInDBBase(PatientBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Patient(PatientInDBBase):\n    pass\n# Additional properties stored in DB\nclass PatientInDB(PatientInDBBase):\n    pass\n#",
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "Patient",
        "kind": 6,
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "peekOfCode": "class Patient(PatientInDBBase):\n    pass\n# Additional properties stored in DB\nclass PatientInDB(PatientInDBBase):\n    pass\n#\n#  Identification Schema\n#\n# Shared properties\nclass IdentificationBase(BaseAuditModel):",
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientInDB",
        "kind": 6,
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "peekOfCode": "class PatientInDB(PatientInDBBase):\n    pass\n#\n#  Identification Schema\n#\n# Shared properties\nclass IdentificationBase(BaseAuditModel):\n    name: str\n# Properties to receive via API on creation\nclass IdentificationCreate(IdentificationBase):",
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "IdentificationBase",
        "kind": 6,
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "peekOfCode": "class IdentificationBase(BaseAuditModel):\n    name: str\n# Properties to receive via API on creation\nclass IdentificationCreate(IdentificationBase):\n    pass\n# Properties to receive via API on update\nclass IdentificationUpdate(IdentificationBase):\n    pass\nclass IdentificationInDBBase(IdentificationBase):\n    uid: str | None = None",
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "IdentificationCreate",
        "kind": 6,
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "peekOfCode": "class IdentificationCreate(IdentificationBase):\n    pass\n# Properties to receive via API on update\nclass IdentificationUpdate(IdentificationBase):\n    pass\nclass IdentificationInDBBase(IdentificationBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Identification(IdentificationInDBBase):",
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "IdentificationUpdate",
        "kind": 6,
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "peekOfCode": "class IdentificationUpdate(IdentificationBase):\n    pass\nclass IdentificationInDBBase(IdentificationBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Identification(IdentificationInDBBase):\n    pass\n# Additional properties stored in DB\nclass IdentificationInDB(IdentificationInDBBase):",
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "IdentificationInDBBase",
        "kind": 6,
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "peekOfCode": "class IdentificationInDBBase(IdentificationBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Identification(IdentificationInDBBase):\n    pass\n# Additional properties stored in DB\nclass IdentificationInDB(IdentificationInDBBase):\n    pass\n#",
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "Identification",
        "kind": 6,
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "peekOfCode": "class Identification(IdentificationInDBBase):\n    pass\n# Additional properties stored in DB\nclass IdentificationInDB(IdentificationInDBBase):\n    pass\n#\n#  PatientIdentification Schema\n#\n# Shared properties\nclass PatientIdentificationBase(BaseAuditModel):",
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "IdentificationInDB",
        "kind": 6,
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "peekOfCode": "class IdentificationInDB(IdentificationInDBBase):\n    pass\n#\n#  PatientIdentification Schema\n#\n# Shared properties\nclass PatientIdentificationBase(BaseAuditModel):\n    patient_uid: str\n    identification_uid: str\n    value: str",
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientIdentificationBase",
        "kind": 6,
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "peekOfCode": "class PatientIdentificationBase(BaseAuditModel):\n    patient_uid: str\n    identification_uid: str\n    value: str\n# Properties to receive via API on creation\nclass PatientIdentificationCreate(PatientIdentificationBase):\n    pass\n# Properties to receive via API on update\nclass PatientIdentificationUpdate(PatientIdentificationBase):\n    pass",
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientIdentificationCreate",
        "kind": 6,
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "peekOfCode": "class PatientIdentificationCreate(PatientIdentificationBase):\n    pass\n# Properties to receive via API on update\nclass PatientIdentificationUpdate(PatientIdentificationBase):\n    pass\nclass PatientIdentificationInDBBase(PatientIdentificationBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass PatientIdentification(PatientIdentificationInDBBase):",
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientIdentificationUpdate",
        "kind": 6,
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "peekOfCode": "class PatientIdentificationUpdate(PatientIdentificationBase):\n    pass\nclass PatientIdentificationInDBBase(PatientIdentificationBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass PatientIdentification(PatientIdentificationInDBBase):\n    pass\n# Additional properties stored in DB\nclass PatientIdentificationInDB(PatientIdentificationInDBBase):",
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientIdentificationInDBBase",
        "kind": 6,
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "peekOfCode": "class PatientIdentificationInDBBase(PatientIdentificationBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass PatientIdentification(PatientIdentificationInDBBase):\n    pass\n# Additional properties stored in DB\nclass PatientIdentificationInDB(PatientIdentificationInDBBase):\n    pass",
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientIdentification",
        "kind": 6,
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "peekOfCode": "class PatientIdentification(PatientIdentificationInDBBase):\n    pass\n# Additional properties stored in DB\nclass PatientIdentificationInDB(PatientIdentificationInDBBase):\n    pass",
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientIdentificationInDB",
        "kind": 6,
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "peekOfCode": "class PatientIdentificationInDB(PatientIdentificationInDBBase):\n    pass",
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "IdentificationService",
        "kind": 6,
        "importPath": "felicity.apps.patient.services",
        "description": "felicity.apps.patient.services",
        "peekOfCode": "class IdentificationService(BaseService[Identification], IIdentificationService):\n    def __init__(self, repository: IIdentificationRepository):\n        self.repository = repository\n    async def create(self, name: str, user: User) -> Identification:\n        exists = await self.get(name=name)\n        if exists:\n            raise AlreadyExistsError(\n                f\"The Identification name -> {name} <- already exists\"\n            )\n        incoming = {",
        "detail": "felicity.apps.patient.services",
        "documentation": {}
    },
    {
        "label": "PatientIdentificationService",
        "kind": 6,
        "importPath": "felicity.apps.patient.services",
        "description": "felicity.apps.patient.services",
        "peekOfCode": "class PatientIdentificationService(\n    BaseService[PatientIdentification], IPatientIdentificationService\n):\n    def __init__(self, repository: IPatientIdentificationRepository):\n        self.repository = repository\n    async def create(\n            self, patient: Patient, identifications: list[IdentificationIn]\n    ) -> None:\n        for p_id in identifications:\n            pid_in = PatientIdentificationCreate(",
        "detail": "felicity.apps.patient.services",
        "documentation": {}
    },
    {
        "label": "PatientService",
        "kind": 6,
        "importPath": "felicity.apps.patient.services",
        "description": "felicity.apps.patient.services",
        "peekOfCode": "class PatientService(BaseService[Patient], IPatientService):\n    def __init__(\n            self,\n            repository: IPatientRepository,\n            id_sequence_service: IIdSequenceService,\n            client_service: IClientService,\n            patient_identification_service: IPatientIdentificationService,\n    ):\n        self.repository = repository\n        self.id_sequence_service = id_sequence_service",
        "detail": "felicity.apps.patient.services",
        "documentation": {}
    },
    {
        "label": "ReflexRule",
        "kind": 6,
        "importPath": "felicity.apps.reflex.entities",
        "description": "felicity.apps.reflex.entities",
        "peekOfCode": "class ReflexRule(AuditHistory):\n    __tablename__ = \"reflex_rule\"\n    name = Column(String, index=True, unique=True, nullable=False)\n    description = Column(String, nullable=False)\n    reflex_actions = relationship(\n        \"ReflexAction\", back_populates=\"reflex_rule\", lazy=\"selectin\"\n    )\nclass ReflexBrainAddition(BaseEntity):\n    \"\"\"Many to Many Link between ReflexBrain and Analysis\n    with extra data for additions",
        "detail": "felicity.apps.reflex.entities",
        "documentation": {}
    },
    {
        "label": "ReflexBrainAddition",
        "kind": 6,
        "importPath": "felicity.apps.reflex.entities",
        "description": "felicity.apps.reflex.entities",
        "peekOfCode": "class ReflexBrainAddition(BaseEntity):\n    \"\"\"Many to Many Link between ReflexBrain and Analysis\n    with extra data for additions\n    \"\"\"\n    __tablename__ = \"reflex_brain_addition\"\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), primary_key=True)\n    analysis = relationship(\"Analysis\", lazy=\"selectin\")\n    reflex_brain_uid = Column(String, ForeignKey(\"reflex_brain.uid\"), primary_key=True)\n    count = Column(Integer, default=1)\nclass ReflexBrainFinal(BaseEntity):",
        "detail": "felicity.apps.reflex.entities",
        "documentation": {}
    },
    {
        "label": "ReflexBrainFinal",
        "kind": 6,
        "importPath": "felicity.apps.reflex.entities",
        "description": "felicity.apps.reflex.entities",
        "peekOfCode": "class ReflexBrainFinal(BaseEntity):\n    \"\"\"Many to Many Link between ReflexBrain and Analysis\n    with extra data for finalize where necessary\n    \"\"\"\n    __tablename__ = \"reflex_brain_final\"\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), primary_key=True)\n    analysis = relationship(\"Analysis\", lazy=\"selectin\")\n    reflex_brain_uid = Column(String, ForeignKey(\"reflex_brain.uid\"), primary_key=True)\n    value = Column(String)\nclass ReflexBrainCriteria(BaseEntity):",
        "detail": "felicity.apps.reflex.entities",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCriteria",
        "kind": 6,
        "importPath": "felicity.apps.reflex.entities",
        "description": "felicity.apps.reflex.entities",
        "peekOfCode": "class ReflexBrainCriteria(BaseEntity):\n    \"\"\"Many to Many Link between ReflexBrain and Analysis\n    with extra data for criteria/decision making\n    operators: =, !=, >, >=, <, <=\n    \"\"\"\n    __tablename__ = \"reflex_brain_criteria\"\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), primary_key=True)\n    analysis = relationship(\"Analysis\", lazy=\"selectin\")\n    reflex_brain_uid = Column(String, ForeignKey(\"reflex_brain.uid\"), primary_key=True)\n    operator = Column(String, nullable=False)",
        "detail": "felicity.apps.reflex.entities",
        "documentation": {}
    },
    {
        "label": "ReflexBrain",
        "kind": 6,
        "importPath": "felicity.apps.reflex.entities",
        "description": "felicity.apps.reflex.entities",
        "peekOfCode": "class ReflexBrain(AuditHistory):\n    __tablename__ = \"reflex_brain\"\n    reflex_action_uid = Column(\n        String, ForeignKey(\"reflex_action.uid\"), nullable=False, default=1\n    )\n    reflex_action = relationship(\n        \"ReflexAction\", back_populates=\"brains\", lazy=\"selectin\"\n    )\n    description = Column(String, nullable=True)\n    analyses_values = relationship(ReflexBrainCriteria, lazy=\"selectin\")",
        "detail": "felicity.apps.reflex.entities",
        "documentation": {}
    },
    {
        "label": "ReflexAction",
        "kind": 6,
        "importPath": "felicity.apps.reflex.entities",
        "description": "felicity.apps.reflex.entities",
        "peekOfCode": "class ReflexAction(AuditHistory):\n    __tablename__ = \"reflex_action\"\n    level = Column(Integer, nullable=False, default=1)\n    description = Column(String, nullable=False)\n    # triggers\n    analyses = relationship(\n        \"Analysis\", secondary=reflex_action_analysis, lazy=\"selectin\"\n    )\n    sample_type_uid = Column(String, ForeignKey(\"sample_type.uid\"), nullable=True)\n    sample_type = relationship(\"SampleType\", lazy=\"selectin\")",
        "detail": "felicity.apps.reflex.entities",
        "documentation": {}
    },
    {
        "label": "reflex_action_analysis",
        "kind": 5,
        "importPath": "felicity.apps.reflex.entities",
        "description": "felicity.apps.reflex.entities",
        "peekOfCode": "reflex_action_analysis = Table(\n    \"reflex_action_analysis\",\n    BaseEntity.metadata,\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n    Column(\"reflex_action_uid\", ForeignKey(\"reflex_action.uid\"), primary_key=True),\n)\nclass ReflexAction(AuditHistory):\n    __tablename__ = \"reflex_action\"\n    level = Column(Integer, nullable=False, default=1)\n    description = Column(String, nullable=False)",
        "detail": "felicity.apps.reflex.entities",
        "documentation": {}
    },
    {
        "label": "ReflexRule",
        "kind": 6,
        "importPath": "felicity.apps.reflex.models",
        "description": "felicity.apps.reflex.models",
        "peekOfCode": "class ReflexRule(AuditHistory):\n    __tablename__ = \"reflex_rule\"\n    name = Column(String, index=True, unique=True, nullable=False)\n    description = Column(String, nullable=False)\n    reflex_actions = relationship(\n        \"ReflexAction\", back_populates=\"reflex_rule\", lazy=\"selectin\"\n    )\n    @classmethod\n    async def create(\n        cls, obj_in: dict | schemas.ReflexRuleCreate",
        "detail": "felicity.apps.reflex.models",
        "documentation": {}
    },
    {
        "label": "ReflexBrainAddition",
        "kind": 6,
        "importPath": "felicity.apps.reflex.models",
        "description": "felicity.apps.reflex.models",
        "peekOfCode": "class ReflexBrainAddition(BaseEntity):\n    \"\"\"Many to Many Link between ReflexBrain and Analysis\n    with extra data for additions\n    \"\"\"\n    __tablename__ = \"reflex_brain_addition\"\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), primary_key=True)\n    analysis = relationship(\"Analysis\", lazy=\"selectin\")\n    reflex_brain_uid = Column(String, ForeignKey(\"reflex_brain.uid\"), primary_key=True)\n    count = Column(Integer, default=1)\n    @classmethod",
        "detail": "felicity.apps.reflex.models",
        "documentation": {}
    },
    {
        "label": "ReflexBrainFinal",
        "kind": 6,
        "importPath": "felicity.apps.reflex.models",
        "description": "felicity.apps.reflex.models",
        "peekOfCode": "class ReflexBrainFinal(BaseEntity):\n    \"\"\"Many to Many Link between ReflexBrain and Analysis\n    with extra data for finalize where necessary\n    \"\"\"\n    __tablename__ = \"reflex_brain_final\"\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), primary_key=True)\n    analysis = relationship(\"Analysis\", lazy=\"selectin\")\n    reflex_brain_uid = Column(String, ForeignKey(\"reflex_brain.uid\"), primary_key=True)\n    value = Column(String)\n    @classmethod",
        "detail": "felicity.apps.reflex.models",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCriteria",
        "kind": 6,
        "importPath": "felicity.apps.reflex.models",
        "description": "felicity.apps.reflex.models",
        "peekOfCode": "class ReflexBrainCriteria(BaseEntity):\n    \"\"\"Many to Many Link between ReflexBrain and Analysis\n    with extra data for criteria/decision making\n    operators: =, !=, >, >=, <, <=\n    \"\"\"\n    __tablename__ = \"reflex_brain_criteria\"\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), primary_key=True)\n    analysis = relationship(\"Analysis\", lazy=\"selectin\")\n    reflex_brain_uid = Column(String, ForeignKey(\"reflex_brain.uid\"), primary_key=True)\n    operator = Column(String, nullable=False)",
        "detail": "felicity.apps.reflex.models",
        "documentation": {}
    },
    {
        "label": "ReflexBrain",
        "kind": 6,
        "importPath": "felicity.apps.reflex.models",
        "description": "felicity.apps.reflex.models",
        "peekOfCode": "class ReflexBrain(AuditHistory):\n    __tablename__ = \"reflex_brain\"\n    reflex_action_uid = Column(\n        String, ForeignKey(\"reflex_action.uid\"), nullable=False, default=1\n    )\n    reflex_action = relationship(\n        \"ReflexAction\", back_populates=\"brains\", lazy=\"selectin\"\n    )\n    description = Column(String, nullable=True)\n    analyses_values = relationship(ReflexBrainCriteria, lazy=\"selectin\")",
        "detail": "felicity.apps.reflex.models",
        "documentation": {}
    },
    {
        "label": "ReflexAction",
        "kind": 6,
        "importPath": "felicity.apps.reflex.models",
        "description": "felicity.apps.reflex.models",
        "peekOfCode": "class ReflexAction(AuditHistory):\n    __tablename__ = \"reflex_action\"\n    level = Column(Integer, nullable=False, default=1)\n    description = Column(String, nullable=False)\n    # triggers\n    analyses = relationship(\n        \"Analysis\", secondary=reflex_action_analysis, lazy=\"selectin\"\n    )\n    sample_type_uid = Column(String, ForeignKey(\"sample_type.uid\"), nullable=True)\n    sample_type = relationship(\"SampleType\", lazy=\"selectin\")",
        "detail": "felicity.apps.reflex.models",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.reflex.models",
        "description": "felicity.apps.reflex.models",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ReflexRule(AuditHistory):\n    __tablename__ = \"reflex_rule\"\n    name = Column(String, index=True, unique=True, nullable=False)\n    description = Column(String, nullable=False)\n    reflex_actions = relationship(\n        \"ReflexAction\", back_populates=\"reflex_rule\", lazy=\"selectin\"\n    )\n    @classmethod\n    async def create(",
        "detail": "felicity.apps.reflex.models",
        "documentation": {}
    },
    {
        "label": "reflex_action_analysis",
        "kind": 5,
        "importPath": "felicity.apps.reflex.models",
        "description": "felicity.apps.reflex.models",
        "peekOfCode": "reflex_action_analysis = Table(\n    \"reflex_action_analysis\",\n    BaseEntity.metadata,\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n    Column(\"reflex_action_uid\", ForeignKey(\"reflex_action.uid\"), primary_key=True),\n)\nclass ReflexAction(AuditHistory):\n    __tablename__ = \"reflex_action\"\n    level = Column(Integer, nullable=False, default=1)\n    description = Column(String, nullable=False)",
        "detail": "felicity.apps.reflex.models",
        "documentation": {}
    },
    {
        "label": "ReflexRuleRepository",
        "kind": 6,
        "importPath": "felicity.apps.reflex.repository",
        "description": "felicity.apps.reflex.repository",
        "peekOfCode": "class ReflexRuleRepository(BaseRepository[ReflexRule], IReflexRuleRepository):\n    def __init__(self) -> None:\n        self.model = ReflexRule\n        super().__init__()\n    async def paginate_with_cursors(\n            self,\n            page_size: int | None = None,\n            after_cursor: str | None = None,\n            before_cursor: str | None = None,\n            text: str | None = None,",
        "detail": "felicity.apps.reflex.repository",
        "documentation": {}
    },
    {
        "label": "ReflexBrainAdditionRepository",
        "kind": 6,
        "importPath": "felicity.apps.reflex.repository",
        "description": "felicity.apps.reflex.repository",
        "peekOfCode": "class ReflexBrainAdditionRepository(\n    BaseRepository[ReflexBrainAddition], IReflexBrainAdditionRepository\n):\n    def __init__(self) -> None:\n        self.model = ReflexBrainAddition\n        super().__init__()\nclass ReflexBrainFinalRepository(\n    BaseRepository[ReflexBrainFinal], IReflexBrainFinalRepository\n):\n    def __init__(self) -> None:",
        "detail": "felicity.apps.reflex.repository",
        "documentation": {}
    },
    {
        "label": "ReflexBrainFinalRepository",
        "kind": 6,
        "importPath": "felicity.apps.reflex.repository",
        "description": "felicity.apps.reflex.repository",
        "peekOfCode": "class ReflexBrainFinalRepository(\n    BaseRepository[ReflexBrainFinal], IReflexBrainFinalRepository\n):\n    def __init__(self) -> None:\n        self.model = ReflexBrainFinal\n        super().__init__()\nclass ReflexBrainCriteriaRepository(\n    BaseRepository[ReflexBrainCriteria], IReflexBrainCriteriaRepository\n):\n    def __init__(self) -> None:",
        "detail": "felicity.apps.reflex.repository",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCriteriaRepository",
        "kind": 6,
        "importPath": "felicity.apps.reflex.repository",
        "description": "felicity.apps.reflex.repository",
        "peekOfCode": "class ReflexBrainCriteriaRepository(\n    BaseRepository[ReflexBrainCriteria], IReflexBrainCriteriaRepository\n):\n    def __init__(self) -> None:\n        self.model = ReflexBrainCriteria\n        super().__init__()\nclass ReflexBrainRepository(BaseRepository[ReflexBrain], IReflexBrainRepository):\n    def __init__(self) -> None:\n        self.model = ReflexBrain\n        super().__init__()",
        "detail": "felicity.apps.reflex.repository",
        "documentation": {}
    },
    {
        "label": "ReflexBrainRepository",
        "kind": 6,
        "importPath": "felicity.apps.reflex.repository",
        "description": "felicity.apps.reflex.repository",
        "peekOfCode": "class ReflexBrainRepository(BaseRepository[ReflexBrain], IReflexBrainRepository):\n    def __init__(self) -> None:\n        self.model = ReflexBrain\n        super().__init__()\nclass ReflexActionRepository(BaseRepository[ReflexAction], IReflexActionRepository):\n    def __init__(self) -> None:\n        self.model = ReflexAction\n        super().__init__()",
        "detail": "felicity.apps.reflex.repository",
        "documentation": {}
    },
    {
        "label": "ReflexActionRepository",
        "kind": 6,
        "importPath": "felicity.apps.reflex.repository",
        "description": "felicity.apps.reflex.repository",
        "peekOfCode": "class ReflexActionRepository(BaseRepository[ReflexAction], IReflexActionRepository):\n    def __init__(self) -> None:\n        self.model = ReflexAction\n        super().__init__()",
        "detail": "felicity.apps.reflex.repository",
        "documentation": {}
    },
    {
        "label": "ReflexRuleBase",
        "kind": 6,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "class ReflexRuleBase(BaseAuditModel):\n    name: str\n    description: str\n    sample_types: Optional[List[SampleType]] = []\n# Additional properties to return via API\nclass ReflexRule(ReflexRuleBase):\n    uid: str\nmodel_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReflexRuleCreate(ReflexRuleBase):",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexRule",
        "kind": 6,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "class ReflexRule(ReflexRuleBase):\n    uid: str\nmodel_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReflexRuleCreate(ReflexRuleBase):\n    pass\n# Properties to receive via API on update\nclass ReflexRuleUpdate(ReflexRuleBase):\n    pass\n#",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexRuleCreate",
        "kind": 6,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "class ReflexRuleCreate(ReflexRuleBase):\n    pass\n# Properties to receive via API on update\nclass ReflexRuleUpdate(ReflexRuleBase):\n    pass\n#\n#  ReflexBrainAddition Schema\n#\n# Shared properties\nclass ReflexBrainAdditionBase(BaseAuditModel):",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexRuleUpdate",
        "kind": 6,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "class ReflexRuleUpdate(ReflexRuleBase):\n    pass\n#\n#  ReflexBrainAddition Schema\n#\n# Shared properties\nclass ReflexBrainAdditionBase(BaseAuditModel):\n    analysis_uid: str\n    analysis: Optional[Analysis] = None\n    reflex_brain_uid: str",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainAdditionBase",
        "kind": 6,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "class ReflexBrainAdditionBase(BaseAuditModel):\n    analysis_uid: str\n    analysis: Optional[Analysis] = None\n    reflex_brain_uid: str\n    reflex_brain: Optional[\"ReflexBrain\"] = None\n    count: int\n# Additional properties to return via API\nclass ReflexBrainAddition(ReflexBrainAdditionBase):\n    uid: str\nmodel_config = ConfigDict(from_attributes=True)",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainAddition",
        "kind": 6,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "class ReflexBrainAddition(ReflexBrainAdditionBase):\n    uid: str\nmodel_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReflexBrainAdditionCreate(ReflexBrainAdditionBase):\n    pass\n# Properties to receive via API on update\nclass ReflexBrainAdditionUpdate(ReflexBrainAdditionBase):\n    pass\n#",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainAdditionCreate",
        "kind": 6,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "class ReflexBrainAdditionCreate(ReflexBrainAdditionBase):\n    pass\n# Properties to receive via API on update\nclass ReflexBrainAdditionUpdate(ReflexBrainAdditionBase):\n    pass\n#\n#  ReflexBrainFinal Schema\n#\n# Shared properties\nclass ReflexBrainFinalBase(BaseAuditModel):",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainAdditionUpdate",
        "kind": 6,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "class ReflexBrainAdditionUpdate(ReflexBrainAdditionBase):\n    pass\n#\n#  ReflexBrainFinal Schema\n#\n# Shared properties\nclass ReflexBrainFinalBase(BaseAuditModel):\n    analysis_uid: str\n    analysis: Optional[Analysis] = None\n    reflex_brain_uid: str",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainFinalBase",
        "kind": 6,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "class ReflexBrainFinalBase(BaseAuditModel):\n    analysis_uid: str\n    analysis: Optional[Analysis] = None\n    reflex_brain_uid: str\n    reflex_brain: Optional[\"ReflexBrain\"] = None\n    value: str\n# Additional properties to return via API\nclass ReflexBrainFinal(ReflexBrainFinalBase):\n    uid: str\nmodel_config = ConfigDict(from_attributes=True)",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainFinal",
        "kind": 6,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "class ReflexBrainFinal(ReflexBrainFinalBase):\n    uid: str\nmodel_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReflexBrainFinalCreate(ReflexBrainFinalBase):\n    pass\n# Properties to receive via API on update\nclass ReflexBrainFinalUpdate(ReflexBrainFinalBase):\n    pass\n#",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainFinalCreate",
        "kind": 6,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "class ReflexBrainFinalCreate(ReflexBrainFinalBase):\n    pass\n# Properties to receive via API on update\nclass ReflexBrainFinalUpdate(ReflexBrainFinalBase):\n    pass\n#\n#  ReflexBrainCriteria Schema\n#\n# Shared properties\nclass ReflexBrainCriteriaBase(BaseAuditModel):",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainFinalUpdate",
        "kind": 6,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "class ReflexBrainFinalUpdate(ReflexBrainFinalBase):\n    pass\n#\n#  ReflexBrainCriteria Schema\n#\n# Shared properties\nclass ReflexBrainCriteriaBase(BaseAuditModel):\n    analysis_uid: str\n    analysis: Optional[Analysis] = None\n    reflex_brain_uid: str",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCriteriaBase",
        "kind": 6,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "class ReflexBrainCriteriaBase(BaseAuditModel):\n    analysis_uid: str\n    analysis: Optional[Analysis] = None\n    reflex_brain_uid: str\n    reflex_brain: Optional[\"ReflexBrain\"] = None\n    value: str\n# Additional properties to return via API\nclass ReflexBrainCriteria(ReflexBrainCriteriaBase):\n    uid: str\nmodel_config = ConfigDict(from_attributes=True)",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCriteria",
        "kind": 6,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "class ReflexBrainCriteria(ReflexBrainCriteriaBase):\n    uid: str\nmodel_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReflexBrainCriteriaCreate(ReflexBrainCriteriaBase):\n    pass\n# Properties to receive via API on update\nclass ReflexBrainCriteriaUpdate(ReflexBrainCriteriaBase):\n    pass\n#",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCriteriaCreate",
        "kind": 6,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "class ReflexBrainCriteriaCreate(ReflexBrainCriteriaBase):\n    pass\n# Properties to receive via API on update\nclass ReflexBrainCriteriaUpdate(ReflexBrainCriteriaBase):\n    pass\n#\n#  ReflexBrain Schema\n#\n# Shared properties\nclass ReflexBrainBase(BaseAuditModel):",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCriteriaUpdate",
        "kind": 6,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "class ReflexBrainCriteriaUpdate(ReflexBrainCriteriaBase):\n    pass\n#\n#  ReflexBrain Schema\n#\n# Shared properties\nclass ReflexBrainBase(BaseAuditModel):\n    reflex_action_uid: str\n    reflex_action: Optional[\"ReflexAction\"] = None\n    description: str | None",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainBase",
        "kind": 6,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "class ReflexBrainBase(BaseAuditModel):\n    reflex_action_uid: str\n    reflex_action: Optional[\"ReflexAction\"] = None\n    description: str | None\n    analyses_values: Optional[List[ReflexBrainCriteria]] = None\n    add_new: Optional[List[ReflexBrainAddition]] = None\n    finalise: Optional[List[ReflexBrainFinal]] = None\n# Additional properties to return via API\nclass ReflexBrain(ReflexBrainBase):\n    uid: str | None = None",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrain",
        "kind": 6,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "class ReflexBrain(ReflexBrainBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReflexBrainCreate(ReflexBrainBase):\n    pass\n# Properties to receive via API on update\nclass ReflexBrainUpdate(ReflexBrainBase):\n    pass\n#",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCreate",
        "kind": 6,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "class ReflexBrainCreate(ReflexBrainBase):\n    pass\n# Properties to receive via API on update\nclass ReflexBrainUpdate(ReflexBrainBase):\n    pass\n#\n#  ReflexBrain Schema\n#\n# Shared properties\nclass ReflexActionBase(BaseAuditModel):",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainUpdate",
        "kind": 6,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "class ReflexBrainUpdate(ReflexBrainBase):\n    pass\n#\n#  ReflexBrain Schema\n#\n# Shared properties\nclass ReflexActionBase(BaseAuditModel):\n    level: int\n    description: str | None\n    reflex_rule_uid: str",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexActionBase",
        "kind": 6,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "class ReflexActionBase(BaseAuditModel):\n    level: int\n    description: str | None\n    reflex_rule_uid: str\n    reflex_rule: Optional[ReflexRule] = None\n    brains: Optional[List[ReflexBrain]] = None\n    analyses: Optional[List[Analysis]] = []\n    sample_type_uid: str | None\n    sample_type: Optional[SampleType] = None\n# Additional properties to return via API",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexAction",
        "kind": 6,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "class ReflexAction(ReflexActionBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReflexActionCreate(ReflexActionBase):\n    pass\n# Properties to receive via API on update\nclass ReflexActionUpdate(ReflexActionBase):\n    pass",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexActionCreate",
        "kind": 6,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "class ReflexActionCreate(ReflexActionBase):\n    pass\n# Properties to receive via API on update\nclass ReflexActionUpdate(ReflexActionBase):\n    pass",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexActionUpdate",
        "kind": 6,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "class ReflexActionUpdate(ReflexActionBase):\n    pass",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "model_config",
        "kind": 5,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReflexRuleCreate(ReflexRuleBase):\n    pass\n# Properties to receive via API on update\nclass ReflexRuleUpdate(ReflexRuleBase):\n    pass\n#\n#  ReflexBrainAddition Schema\n#",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "model_config",
        "kind": 5,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReflexBrainAdditionCreate(ReflexBrainAdditionBase):\n    pass\n# Properties to receive via API on update\nclass ReflexBrainAdditionUpdate(ReflexBrainAdditionBase):\n    pass\n#\n#  ReflexBrainFinal Schema\n#",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "model_config",
        "kind": 5,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReflexBrainFinalCreate(ReflexBrainFinalBase):\n    pass\n# Properties to receive via API on update\nclass ReflexBrainFinalUpdate(ReflexBrainFinalBase):\n    pass\n#\n#  ReflexBrainCriteria Schema\n#",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "model_config",
        "kind": 5,
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "peekOfCode": "model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReflexBrainCriteriaCreate(ReflexBrainCriteriaBase):\n    pass\n# Properties to receive via API on update\nclass ReflexBrainCriteriaUpdate(ReflexBrainCriteriaBase):\n    pass\n#\n#  ReflexBrain Schema\n#",
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexRuleService",
        "kind": 6,
        "importPath": "felicity.apps.reflex.services",
        "description": "felicity.apps.reflex.services",
        "peekOfCode": "class ReflexRuleService(BaseService[ReflexRule], IReflexRuleService):\n    def __init__(self, repository: IReflexRuleRepository):\n        self.repository = repository\n    async def create(self, name: str, description: str, user: User) -> ReflexRule:\n        payload = locals()\n        exists = await self.get(name=name)\n        if exists:\n            raise AlreadyExistsError(f\"Reflex Rule name must be unique\")\n        incoming: dict = {\n            \"created_by_uid\": user.uid,",
        "detail": "felicity.apps.reflex.services",
        "documentation": {}
    },
    {
        "label": "ReflexBrainAdditionService",
        "kind": 6,
        "importPath": "felicity.apps.reflex.services",
        "description": "felicity.apps.reflex.services",
        "peekOfCode": "class ReflexBrainAdditionService(\n    BaseService[ReflexBrainAddition], IReflexBrainAdditionService\n):\n    def __init__(self, repository: IReflexBrainAdditionRepository):\n        self.repository = repository\nclass ReflexBrainFinalService(BaseService[ReflexBrainFinal], IReflexBrainFinalService):\n    def __init__(self, repository: IReflexBrainFinalRepository):\n        self.repository = repository\nclass ReflexBrainCriteriaService(\n    BaseService[ReflexBrainCriteria], IReflexBrainCriteriaService",
        "detail": "felicity.apps.reflex.services",
        "documentation": {}
    },
    {
        "label": "ReflexBrainFinalService",
        "kind": 6,
        "importPath": "felicity.apps.reflex.services",
        "description": "felicity.apps.reflex.services",
        "peekOfCode": "class ReflexBrainFinalService(BaseService[ReflexBrainFinal], IReflexBrainFinalService):\n    def __init__(self, repository: IReflexBrainFinalRepository):\n        self.repository = repository\nclass ReflexBrainCriteriaService(\n    BaseService[ReflexBrainCriteria], IReflexBrainCriteriaService\n):\n    def __init__(self, repository: IReflexBrainCriteriaRepository):\n        self.repository = repository\nclass ReflexBrainService(BaseService[ReflexBrain], IReflexBrainService):\n    def __init__(",
        "detail": "felicity.apps.reflex.services",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCriteriaService",
        "kind": 6,
        "importPath": "felicity.apps.reflex.services",
        "description": "felicity.apps.reflex.services",
        "peekOfCode": "class ReflexBrainCriteriaService(\n    BaseService[ReflexBrainCriteria], IReflexBrainCriteriaService\n):\n    def __init__(self, repository: IReflexBrainCriteriaRepository):\n        self.repository = repository\nclass ReflexBrainService(BaseService[ReflexBrain], IReflexBrainService):\n    def __init__(\n        self, repository: IReflexBrainRepository, analysis_service: IAnalysisService\n    ):\n        self.repository = repository",
        "detail": "felicity.apps.reflex.services",
        "documentation": {}
    },
    {
        "label": "ReflexBrainService",
        "kind": 6,
        "importPath": "felicity.apps.reflex.services",
        "description": "felicity.apps.reflex.services",
        "peekOfCode": "class ReflexBrainService(BaseService[ReflexBrain], IReflexBrainService):\n    def __init__(\n        self, repository: IReflexBrainRepository, analysis_service: IAnalysisService\n    ):\n        self.repository = repository\n        self.analysis_service = analysis_service\n    async def create(\n        self,\n        reflex_action_uid: str,\n        description: str,",
        "detail": "felicity.apps.reflex.services",
        "documentation": {}
    },
    {
        "label": "ReflexActionService",
        "kind": 6,
        "importPath": "felicity.apps.reflex.services",
        "description": "felicity.apps.reflex.services",
        "peekOfCode": "class ReflexActionService(BaseService[ReflexAction], IReflexActionService):\n    def __init__(\n        self, repository: IReflexActionRepository, analysis_service: IAnalysisService\n    ):\n        self.repository = repository\n        self.analysis_service = analysis_service\n    async def create(\n        self,\n        level: int,\n        description: str,",
        "detail": "felicity.apps.reflex.services",
        "documentation": {}
    },
    {
        "label": "ReflexEngineService",
        "kind": 6,
        "importPath": "felicity.apps.reflex.services",
        "description": "felicity.apps.reflex.services",
        "peekOfCode": "class ReflexEngineService(IReflexEngineService):\n    _siblings: list[AnalysisResult] = []\n    _cousins: list[AnalysisResult] = []\n    _reflex_action: ReflexAction = None\n    user = None\n    analysis_result = None\n    analysis = None\n    def __init__(\n        self,\n        reflex_action_service: IReflexActionService,",
        "detail": "felicity.apps.reflex.services",
        "documentation": {}
    },
    {
        "label": "ReflexUtil",
        "kind": 6,
        "importPath": "felicity.apps.reflex.utils",
        "description": "felicity.apps.reflex.utils",
        "peekOfCode": "class ReflexUtil:\n    _siblings: List[AnalysisResult] = None\n    _cousins: List[AnalysisResult] = None\n    _results_pool: List[AnalysisResult] = None\n    _reflex_action: reflex_models.ReflexAction = None\n    def __init__(self, analysis_result, user):\n        self.analysis_result: AnalysisResult = analysis_result\n        self.sample: Sample = analysis_result.sample\n        self.analysis: Analysis = analysis_result.analysis\n        self.user = user",
        "detail": "felicity.apps.reflex.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.reflex.utils",
        "description": "felicity.apps.reflex.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ReflexUtil:\n    _siblings: List[AnalysisResult] = None\n    _cousins: List[AnalysisResult] = None\n    _results_pool: List[AnalysisResult] = None\n    _reflex_action: reflex_models.ReflexAction = None\n    def __init__(self, analysis_result, user):\n        self.analysis_result: AnalysisResult = analysis_result\n        self.sample: Sample = analysis_result.sample\n        self.analysis: Analysis = analysis_result.analysis",
        "detail": "felicity.apps.reflex.utils",
        "documentation": {}
    },
    {
        "label": "LocationBase",
        "kind": 6,
        "importPath": "felicity.apps.setup.entities.location",
        "description": "felicity.apps.setup.entities.location",
        "peekOfCode": "class LocationBase(AuditUser):\n    __abstract__ = True\n    code = Column(String, index=True, unique=True, nullable=True)\n    name = Column(String)\n    email = Column(String, nullable=True)\n    email_cc = Column(String, nullable=True)\n    mobile_phone = Column(String, nullable=True)\n    business_phone = Column(String, nullable=True)\n    active = Column(Boolean(), default=False)\nclass District(LocationBase):",
        "detail": "felicity.apps.setup.entities.location",
        "documentation": {}
    },
    {
        "label": "District",
        "kind": 6,
        "importPath": "felicity.apps.setup.entities.location",
        "description": "felicity.apps.setup.entities.location",
        "peekOfCode": "class District(LocationBase):\n    __tablename__ = \"district\"\n    province_uid = Column(String, ForeignKey(\"province.uid\"))\n    province = relationship(\"Province\", backref=\"districts\", lazy=\"selectin\")\nclass Province(LocationBase):\n    __tablename__ = \"province\"\n    country_uid = Column(String, ForeignKey(\"country.uid\"))\n    country = relationship(\"Country\", backref=\"provinces\", lazy=\"selectin\")\nclass Country(AuditUser):\n    __tablename__ = \"country\"",
        "detail": "felicity.apps.setup.entities.location",
        "documentation": {}
    },
    {
        "label": "Province",
        "kind": 6,
        "importPath": "felicity.apps.setup.entities.location",
        "description": "felicity.apps.setup.entities.location",
        "peekOfCode": "class Province(LocationBase):\n    __tablename__ = \"province\"\n    country_uid = Column(String, ForeignKey(\"country.uid\"))\n    country = relationship(\"Country\", backref=\"provinces\", lazy=\"selectin\")\nclass Country(AuditUser):\n    __tablename__ = \"country\"\n    name = Column(String, default=\"Zimbabwe\")\n    code = Column(String, index=True, unique=True, nullable=True)\n    active = Column(Boolean(), default=False)",
        "detail": "felicity.apps.setup.entities.location",
        "documentation": {}
    },
    {
        "label": "Country",
        "kind": 6,
        "importPath": "felicity.apps.setup.entities.location",
        "description": "felicity.apps.setup.entities.location",
        "peekOfCode": "class Country(AuditUser):\n    __tablename__ = \"country\"\n    name = Column(String, default=\"Zimbabwe\")\n    code = Column(String, index=True, unique=True, nullable=True)\n    active = Column(Boolean(), default=False)",
        "detail": "felicity.apps.setup.entities.location",
        "documentation": {}
    },
    {
        "label": "Laboratory",
        "kind": 6,
        "importPath": "felicity.apps.setup.entities.setup",
        "description": "felicity.apps.setup.entities.setup",
        "peekOfCode": "class Laboratory(AuditUser):\n    __tablename__ = \"laboratory\"\n    setup_name = Column(\n        String, default=\"felicity\", nullable=False\n    )  # Do not change this value ever\n    lab_name = Column(String, nullable=False)\n    code = Column(String, nullable=True)\n    lab_manager_uid = Column(String, ForeignKey(\"user.uid\"), nullable=True)\n    lab_manager = relationship(\n        User, foreign_keys=[lab_manager_uid], backref=\"user_uid\", lazy=\"selectin\"",
        "detail": "felicity.apps.setup.entities.setup",
        "documentation": {}
    },
    {
        "label": "LaboratorySetting",
        "kind": 6,
        "importPath": "felicity.apps.setup.entities.setup",
        "description": "felicity.apps.setup.entities.setup",
        "peekOfCode": "class LaboratorySetting(AuditUser):\n    __tablename__ = \"laboratory_setting\"\n    laboratory_uid = Column(String, ForeignKey(\"laboratory.uid\"), nullable=True)\n    laboratory = relationship(\n        Laboratory, foreign_keys=[laboratory_uid], backref=\"settings\", lazy=\"selectin\"\n    )\n    allow_self_verification = Column(Boolean(), nullable=False)\n    allow_patient_registration = Column(Boolean(), nullable=True)\n    allow_sample_registration = Column(Boolean(), nullable=True)\n    allow_worksheet_creation = Column(Boolean(), nullable=True)",
        "detail": "felicity.apps.setup.entities.setup",
        "documentation": {}
    },
    {
        "label": "Supplier",
        "kind": 6,
        "importPath": "felicity.apps.setup.entities.setup",
        "description": "felicity.apps.setup.entities.setup",
        "peekOfCode": "class Supplier(AuditUser):\n    \"\"\"Supplier\"\"\"\n    __tablename__ = \"supplier\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)\nclass Manufacturer(AuditUser):\n    \"\"\"Manufacturer\"\"\"\n    __tablename__ = \"manufacturer\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)",
        "detail": "felicity.apps.setup.entities.setup",
        "documentation": {}
    },
    {
        "label": "Manufacturer",
        "kind": 6,
        "importPath": "felicity.apps.setup.entities.setup",
        "description": "felicity.apps.setup.entities.setup",
        "peekOfCode": "class Manufacturer(AuditUser):\n    \"\"\"Manufacturer\"\"\"\n    __tablename__ = \"manufacturer\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)\nclass Department(AuditUser):\n    \"\"\"Departrments/Sections\"\"\"\n    __tablename__ = \"department\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)",
        "detail": "felicity.apps.setup.entities.setup",
        "documentation": {}
    },
    {
        "label": "Department",
        "kind": 6,
        "importPath": "felicity.apps.setup.entities.setup",
        "description": "felicity.apps.setup.entities.setup",
        "peekOfCode": "class Department(AuditUser):\n    \"\"\"Departrments/Sections\"\"\"\n    __tablename__ = \"department\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)\n    code = Column(String, nullable=True)\nclass Unit(AuditUser):\n    \"\"\"Unit for analyte measurement\"\"\"\n    __tablename__ = \"unit\"\n    name = Column(String, nullable=False)",
        "detail": "felicity.apps.setup.entities.setup",
        "documentation": {}
    },
    {
        "label": "Unit",
        "kind": 6,
        "importPath": "felicity.apps.setup.entities.setup",
        "description": "felicity.apps.setup.entities.setup",
        "peekOfCode": "class Unit(AuditUser):\n    \"\"\"Unit for analyte measurement\"\"\"\n    __tablename__ = \"unit\"\n    name = Column(String, nullable=False)\n    is_si_unit = Column(Boolean(), default=False)",
        "detail": "felicity.apps.setup.entities.setup",
        "documentation": {}
    },
    {
        "label": "LocationBase",
        "kind": 6,
        "importPath": "felicity.apps.setup.models.location",
        "description": "felicity.apps.setup.models.location",
        "peekOfCode": "class LocationBase(AuditUser):\n    __abstract__ = True\n    code = Column(String, index=True, unique=True, nullable=True)\n    name = Column(String)\n    email = Column(String, nullable=True)\n    email_cc = Column(String, nullable=True)\n    mobile_phone = Column(String, nullable=True)\n    business_phone = Column(String, nullable=True)\n    active = Column(Boolean(), default=False)\nclass District(LocationBase):",
        "detail": "felicity.apps.setup.models.location",
        "documentation": {}
    },
    {
        "label": "District",
        "kind": 6,
        "importPath": "felicity.apps.setup.models.location",
        "description": "felicity.apps.setup.models.location",
        "peekOfCode": "class District(LocationBase):\n    __tablename__ = \"district\"\n    province_uid = Column(String, ForeignKey(\"province.uid\"))\n    province = relationship(\"Province\", backref=\"districts\", lazy=\"selectin\")\n    @classmethod\n    async def create(cls, district: schemas.DistrictCreate):\n        \"\"\"Create a new District and return the new instance.\"\"\"\n        exists = await cls.get(code=district.code)\n        if exists:\n            raise Exception(f\"District with code {district.code} already Exists\")",
        "detail": "felicity.apps.setup.models.location",
        "documentation": {}
    },
    {
        "label": "Province",
        "kind": 6,
        "importPath": "felicity.apps.setup.models.location",
        "description": "felicity.apps.setup.models.location",
        "peekOfCode": "class Province(LocationBase):\n    __tablename__ = \"province\"\n    country_uid = Column(String, ForeignKey(\"country.uid\"))\n    country = relationship(\"Country\", backref=\"provinces\", lazy=\"selectin\")\n    @classmethod\n    async def create(cls, province: schemas.ProvinceCreate):\n        \"\"\"Create a new province and return the new instance.\"\"\"\n        exists = await cls.get(code=province.code)\n        if exists:\n            raise Exception(f\"Province with code {province.code} already Exists\")",
        "detail": "felicity.apps.setup.models.location",
        "documentation": {}
    },
    {
        "label": "Country",
        "kind": 6,
        "importPath": "felicity.apps.setup.models.location",
        "description": "felicity.apps.setup.models.location",
        "peekOfCode": "class Country(AuditUser):\n    __tablename__ = \"country\"\n    name = Column(String, default=\"Zimbabwe\")\n    code = Column(String, index=True, unique=True, nullable=True)\n    active = Column(Boolean(), default=False)\n    @classmethod\n    async def create(cls, country: schemas.CountryCreate):\n        \"\"\"Create a new Country and return the new instance.\"\"\"\n        exists = await cls.get(code=country.code)\n        if exists:",
        "detail": "felicity.apps.setup.models.location",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.setup.models.location",
        "description": "felicity.apps.setup.models.location",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass LocationBase(AuditUser):\n    __abstract__ = True\n    code = Column(String, index=True, unique=True, nullable=True)\n    name = Column(String)\n    email = Column(String, nullable=True)\n    email_cc = Column(String, nullable=True)\n    mobile_phone = Column(String, nullable=True)\n    business_phone = Column(String, nullable=True)\n    active = Column(Boolean(), default=False)",
        "detail": "felicity.apps.setup.models.location",
        "documentation": {}
    },
    {
        "label": "Laboratory",
        "kind": 6,
        "importPath": "felicity.apps.setup.models.setup",
        "description": "felicity.apps.setup.models.setup",
        "peekOfCode": "class Laboratory(AuditUser):\n    __tablename__ = \"laboratory\"\n    setup_name = Column(\n        String, default=\"felicity\", nullable=False\n    )  # Do not change this value ever\n    lab_name = Column(String, nullable=False)\n    tag_line = Column(String, nullable=True)\n    code = Column(String, nullable=True)\n    lab_manager_uid = Column(String, ForeignKey(\"user.uid\"), nullable=True)\n    lab_manager = relationship(User, foreign_keys=[lab_manager_uid], lazy=\"selectin\")",
        "detail": "felicity.apps.setup.models.setup",
        "documentation": {}
    },
    {
        "label": "LaboratorySetting",
        "kind": 6,
        "importPath": "felicity.apps.setup.models.setup",
        "description": "felicity.apps.setup.models.setup",
        "peekOfCode": "class LaboratorySetting(AuditUser):\n    __tablename__ = \"laboratory_setting\"\n    laboratory_uid = Column(String, ForeignKey(\"laboratory.uid\"), nullable=True)\n    laboratory = relationship(\n        Laboratory, foreign_keys=[laboratory_uid], backref=\"settings\", lazy=\"selectin\"\n    )\n    allow_self_verification = Column(Boolean(), nullable=False)\n    allow_patient_registration = Column(Boolean(), nullable=True)\n    allow_sample_registration = Column(Boolean(), nullable=True)\n    allow_worksheet_creation = Column(Boolean(), nullable=True)",
        "detail": "felicity.apps.setup.models.setup",
        "documentation": {}
    },
    {
        "label": "Supplier",
        "kind": 6,
        "importPath": "felicity.apps.setup.models.setup",
        "description": "felicity.apps.setup.models.setup",
        "peekOfCode": "class Supplier(AuditUser):\n    \"\"\"Supplier\"\"\"\n    __tablename__ = \"supplier\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)\n    @classmethod\n    async def create(cls, obj_in: dict | schemas.SupplierCreate):\n        data = cls._import(obj_in)\n        return await super().create(**data)\n    async def update(self, obj_in: dict | schemas.SupplierUpdate):",
        "detail": "felicity.apps.setup.models.setup",
        "documentation": {}
    },
    {
        "label": "Manufacturer",
        "kind": 6,
        "importPath": "felicity.apps.setup.models.setup",
        "description": "felicity.apps.setup.models.setup",
        "peekOfCode": "class Manufacturer(AuditUser):\n    \"\"\"Manufacturer\"\"\"\n    __tablename__ = \"manufacturer\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)\n    @classmethod\n    async def create(\n            cls, obj_in: dict | schemas.ManufacturerCreate\n    ):\n        data = cls._import(obj_in)",
        "detail": "felicity.apps.setup.models.setup",
        "documentation": {}
    },
    {
        "label": "Department",
        "kind": 6,
        "importPath": "felicity.apps.setup.models.setup",
        "description": "felicity.apps.setup.models.setup",
        "peekOfCode": "class Department(AuditUser):\n    \"\"\"Departments/Sections\"\"\"\n    __tablename__ = \"department\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)\n    code = Column(String, nullable=True)\n    @classmethod\n    async def create(\n            cls, obj_in: dict | schemas.DepartmentCreate\n    ):",
        "detail": "felicity.apps.setup.models.setup",
        "documentation": {}
    },
    {
        "label": "Unit",
        "kind": 6,
        "importPath": "felicity.apps.setup.models.setup",
        "description": "felicity.apps.setup.models.setup",
        "peekOfCode": "class Unit(AuditUser):\n    \"\"\"Unit for analyte measurement\"\"\"\n    __tablename__ = \"unit\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)\n    @classmethod\n    async def create(cls, obj_in: dict | schemas.UnitCreate):\n        data = cls._import(obj_in)\n        return await super().create(**data)\n    async def update(self, obj_in: dict | schemas.UnitUpdate):",
        "detail": "felicity.apps.setup.models.setup",
        "documentation": {}
    },
    {
        "label": "CountryRepository",
        "kind": 6,
        "importPath": "felicity.apps.setup.repositories.location",
        "description": "felicity.apps.setup.repositories.location",
        "peekOfCode": "class CountryRepository(BaseRepository[Country], ICountryRepository):\n    def __init__(self) -> None:\n        self.model = Country\n        super().__init__()\nclass ProvinceRepository(BaseRepository[Province], IProvinceRepository):\n    def __init__(self) -> None:\n        self.model = Province\n        super().__init__()\n    async def paginate_with_cursors(\n            self,",
        "detail": "felicity.apps.setup.repositories.location",
        "documentation": {}
    },
    {
        "label": "ProvinceRepository",
        "kind": 6,
        "importPath": "felicity.apps.setup.repositories.location",
        "description": "felicity.apps.setup.repositories.location",
        "peekOfCode": "class ProvinceRepository(BaseRepository[Province], IProvinceRepository):\n    def __init__(self) -> None:\n        self.model = Province\n        super().__init__()\n    async def paginate_with_cursors(\n            self,\n            page_size: int | None = None,\n            after_cursor: str | None = None,\n            before_cursor: str | None = None,\n            text: str | None = None,",
        "detail": "felicity.apps.setup.repositories.location",
        "documentation": {}
    },
    {
        "label": "DistrictRepository",
        "kind": 6,
        "importPath": "felicity.apps.setup.repositories.location",
        "description": "felicity.apps.setup.repositories.location",
        "peekOfCode": "class DistrictRepository(BaseRepository[District], IDistrictRepository):\n    def __init__(self) -> None:\n        self.model = District\n        super().__init__()\n    async def paginate_with_cursors(\n            self,\n            page_size: int | None = None,\n            after_cursor: str | None = None,\n            before_cursor: str | None = None,\n            text: str | None = None,",
        "detail": "felicity.apps.setup.repositories.location",
        "documentation": {}
    },
    {
        "label": "DepartmentRepository",
        "kind": 6,
        "importPath": "felicity.apps.setup.repositories.setup",
        "description": "felicity.apps.setup.repositories.setup",
        "peekOfCode": "class DepartmentRepository(BaseRepository[Department], IDepartmentRepository):\n    def __init__(self) -> None:\n        self.model = Department\n        super().__init__()\nclass LaboratoryRepository(BaseRepository[Laboratory], ILaboratoryRepository):\n    def __init__(self) -> None:\n        self.model = Laboratory\n        super().__init__()\nclass LaboratorySettingRepository(\n    BaseRepository[LaboratorySetting], ILaboratorySettingRepository",
        "detail": "felicity.apps.setup.repositories.setup",
        "documentation": {}
    },
    {
        "label": "LaboratoryRepository",
        "kind": 6,
        "importPath": "felicity.apps.setup.repositories.setup",
        "description": "felicity.apps.setup.repositories.setup",
        "peekOfCode": "class LaboratoryRepository(BaseRepository[Laboratory], ILaboratoryRepository):\n    def __init__(self) -> None:\n        self.model = Laboratory\n        super().__init__()\nclass LaboratorySettingRepository(\n    BaseRepository[LaboratorySetting], ILaboratorySettingRepository\n):\n    def __init__(self) -> None:\n        self.model = LaboratorySetting\n        super().__init__()",
        "detail": "felicity.apps.setup.repositories.setup",
        "documentation": {}
    },
    {
        "label": "LaboratorySettingRepository",
        "kind": 6,
        "importPath": "felicity.apps.setup.repositories.setup",
        "description": "felicity.apps.setup.repositories.setup",
        "peekOfCode": "class LaboratorySettingRepository(\n    BaseRepository[LaboratorySetting], ILaboratorySettingRepository\n):\n    def __init__(self) -> None:\n        self.model = LaboratorySetting\n        super().__init__()\nclass ManufacturerRepository(BaseRepository[Manufacturer], IManufacturerRepository):\n    def __init__(self) -> None:\n        self.model = Manufacturer\n        super().__init__()",
        "detail": "felicity.apps.setup.repositories.setup",
        "documentation": {}
    },
    {
        "label": "ManufacturerRepository",
        "kind": 6,
        "importPath": "felicity.apps.setup.repositories.setup",
        "description": "felicity.apps.setup.repositories.setup",
        "peekOfCode": "class ManufacturerRepository(BaseRepository[Manufacturer], IManufacturerRepository):\n    def __init__(self) -> None:\n        self.model = Manufacturer\n        super().__init__()\nclass SupplierRepository(BaseRepository[Supplier], ISupplierRepository):\n    def __init__(self) -> None:\n        self.model = Supplier\n        super().__init__()\nclass UnitRepository(BaseRepository[Unit], IUnitRepository):\n    def __init__(self) -> None:",
        "detail": "felicity.apps.setup.repositories.setup",
        "documentation": {}
    },
    {
        "label": "SupplierRepository",
        "kind": 6,
        "importPath": "felicity.apps.setup.repositories.setup",
        "description": "felicity.apps.setup.repositories.setup",
        "peekOfCode": "class SupplierRepository(BaseRepository[Supplier], ISupplierRepository):\n    def __init__(self) -> None:\n        self.model = Supplier\n        super().__init__()\nclass UnitRepository(BaseRepository[Unit], IUnitRepository):\n    def __init__(self) -> None:\n        self.model = Unit\n        super().__init__()",
        "detail": "felicity.apps.setup.repositories.setup",
        "documentation": {}
    },
    {
        "label": "UnitRepository",
        "kind": 6,
        "importPath": "felicity.apps.setup.repositories.setup",
        "description": "felicity.apps.setup.repositories.setup",
        "peekOfCode": "class UnitRepository(BaseRepository[Unit], IUnitRepository):\n    def __init__(self) -> None:\n        self.model = Unit\n        super().__init__()",
        "detail": "felicity.apps.setup.repositories.setup",
        "documentation": {}
    },
    {
        "label": "LaboratoryBase",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class LaboratoryBase(BaseModel):\n    setup_name: str | None = \"felicity\"\n    lab_name: str | None = None\n    tag_line: str | None = None\n    email: Optional[EmailStr] = None\n    email_cc: str | None = None\n    mobile_phone: str | None = None\n    business_phone: str | None = None\n    lab_manager_uid: str | None = None\n    address: str | None = \"\"",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryCreate",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class LaboratoryCreate(LaboratoryBase):\n    pass\n# Properties to receive via API on update\nclass LaboratoryUpdate(LaboratoryBase):\n    pass\nclass LaboratoryInDBBase(LaboratoryBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Laboratory(LaboratoryInDBBase):",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryUpdate",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class LaboratoryUpdate(LaboratoryBase):\n    pass\nclass LaboratoryInDBBase(LaboratoryBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Laboratory(LaboratoryInDBBase):\n    pass\n# Additional properties stored in DB\nclass LaboratoryInDB(LaboratoryInDBBase):",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryInDBBase",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class LaboratoryInDBBase(LaboratoryBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Laboratory(LaboratoryInDBBase):\n    pass\n# Additional properties stored in DB\nclass LaboratoryInDB(LaboratoryInDBBase):\n    pass\nclass LaboratorySettingBase(BaseAuditModel):",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Laboratory",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class Laboratory(LaboratoryInDBBase):\n    pass\n# Additional properties stored in DB\nclass LaboratoryInDB(LaboratoryInDBBase):\n    pass\nclass LaboratorySettingBase(BaseAuditModel):\n    laboratory_uid: str | None = None\n    laboratory: Optional[Laboratory] = None\n    allow_self_verification: bool | None = False\n    allow_patient_registration: bool | None = True",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryInDB",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class LaboratoryInDB(LaboratoryInDBBase):\n    pass\nclass LaboratorySettingBase(BaseAuditModel):\n    laboratory_uid: str | None = None\n    laboratory: Optional[Laboratory] = None\n    allow_self_verification: bool | None = False\n    allow_patient_registration: bool | None = True\n    allow_sample_registration: bool | None = True\n    allow_worksheet_creation: bool | None = True\n    default_route: str | None = None",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratorySettingBase",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class LaboratorySettingBase(BaseAuditModel):\n    laboratory_uid: str | None = None\n    laboratory: Optional[Laboratory] = None\n    allow_self_verification: bool | None = False\n    allow_patient_registration: bool | None = True\n    allow_sample_registration: bool | None = True\n    allow_worksheet_creation: bool | None = True\n    default_route: str | None = None\n    password_lifetime: int | None = None\n    inactivity_log_out: int | None = None",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratorySettingCreate",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class LaboratorySettingCreate(LaboratorySettingBase):\n    pass\nclass LaboratorySettingUpdate(LaboratorySettingBase):\n    pass\nclass LaboratorySetting(LaboratorySettingBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n#\n#  Department\n#",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratorySettingUpdate",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class LaboratorySettingUpdate(LaboratorySettingBase):\n    pass\nclass LaboratorySetting(LaboratorySettingBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n#\n#  Department\n#\n# Shared properties\nclass DepartmentBase(BaseModel):",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratorySetting",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class LaboratorySetting(LaboratorySettingBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n#\n#  Department\n#\n# Shared properties\nclass DepartmentBase(BaseModel):\n    name: str = None\n    description: str = None",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "DepartmentBase",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class DepartmentBase(BaseModel):\n    name: str = None\n    description: str = None\n    code: str = None\n# Properties to receive via API on creation\nclass DepartmentCreate(DepartmentBase):\n    pass\n# Properties to receive via API on update\nclass DepartmentUpdate(DepartmentBase):\n    pass",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "DepartmentCreate",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class DepartmentCreate(DepartmentBase):\n    pass\n# Properties to receive via API on update\nclass DepartmentUpdate(DepartmentBase):\n    pass\nclass DepartmentInDBBase(DepartmentBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Department(DepartmentInDBBase):",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "DepartmentUpdate",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class DepartmentUpdate(DepartmentBase):\n    pass\nclass DepartmentInDBBase(DepartmentBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Department(DepartmentInDBBase):\n    pass\n# Additional properties stored in DB\nclass DepartmentInDB(DepartmentInDBBase):",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "DepartmentInDBBase",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class DepartmentInDBBase(DepartmentBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Department(DepartmentInDBBase):\n    pass\n# Additional properties stored in DB\nclass DepartmentInDB(DepartmentInDBBase):\n    pass\n#",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Department",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class Department(DepartmentInDBBase):\n    pass\n# Additional properties stored in DB\nclass DepartmentInDB(DepartmentInDBBase):\n    pass\n#\n#  Unit\n#\n# Shared properties\nclass UnitBase(BaseModel):",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "DepartmentInDB",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class DepartmentInDB(DepartmentInDBBase):\n    pass\n#\n#  Unit\n#\n# Shared properties\nclass UnitBase(BaseModel):\n    name: str = None\n    description: str | None = None\n# Properties to receive via API on creation",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "UnitBase",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class UnitBase(BaseModel):\n    name: str = None\n    description: str | None = None\n# Properties to receive via API on creation\nclass UnitCreate(UnitBase):\n    pass\n# Properties to receive via API on update\nclass UnitUpdate(UnitBase):\n    pass\nclass UnitInDBBase(UnitBase):",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "UnitCreate",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class UnitCreate(UnitBase):\n    pass\n# Properties to receive via API on update\nclass UnitUpdate(UnitBase):\n    pass\nclass UnitInDBBase(UnitBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Unit(UnitInDBBase):",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "UnitUpdate",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class UnitUpdate(UnitBase):\n    pass\nclass UnitInDBBase(UnitBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Unit(UnitInDBBase):\n    pass\n# Additional properties stored in DB\nclass UnitInDB(UnitInDBBase):",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "UnitInDBBase",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class UnitInDBBase(UnitBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Unit(UnitInDBBase):\n    pass\n# Additional properties stored in DB\nclass UnitInDB(UnitInDBBase):\n    pass\n#",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Unit",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class Unit(UnitInDBBase):\n    pass\n# Additional properties stored in DB\nclass UnitInDB(UnitInDBBase):\n    pass\n#\n#  Supplier\n#\n# Shared properties\nclass SupplierBase(BaseModel):",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "UnitInDB",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class UnitInDB(UnitInDBBase):\n    pass\n#\n#  Supplier\n#\n# Shared properties\nclass SupplierBase(BaseModel):\n    name: str = None\n    description: str = None\n    keyword: str = None",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "SupplierBase",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class SupplierBase(BaseModel):\n    name: str = None\n    description: str = None\n    keyword: str = None\n# Properties to receive via API on creation\nclass SupplierCreate(SupplierBase):\n    pass\n# Properties to receive via API on update\nclass SupplierUpdate(SupplierBase):\n    pass",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "SupplierCreate",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class SupplierCreate(SupplierBase):\n    pass\n# Properties to receive via API on update\nclass SupplierUpdate(SupplierBase):\n    pass\nclass SupplierInDBBase(SupplierBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Supplier(SupplierInDBBase):",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "SupplierUpdate",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class SupplierUpdate(SupplierBase):\n    pass\nclass SupplierInDBBase(SupplierBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Supplier(SupplierInDBBase):\n    pass\n# Additional properties stored in DB\nclass SupplierInDB(SupplierInDBBase):",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "SupplierInDBBase",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class SupplierInDBBase(SupplierBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Supplier(SupplierInDBBase):\n    pass\n# Additional properties stored in DB\nclass SupplierInDB(SupplierInDBBase):\n    pass\n#",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Supplier",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class Supplier(SupplierInDBBase):\n    pass\n# Additional properties stored in DB\nclass SupplierInDB(SupplierInDBBase):\n    pass\n#\n#  Manufacturer\n#\n# Shared properties\nclass ManufacturerBase(BaseModel):",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "SupplierInDB",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class SupplierInDB(SupplierInDBBase):\n    pass\n#\n#  Manufacturer\n#\n# Shared properties\nclass ManufacturerBase(BaseModel):\n    name: str = None\n    description: str = None\n    keyword: str = None",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "ManufacturerBase",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class ManufacturerBase(BaseModel):\n    name: str = None\n    description: str = None\n    keyword: str = None\n# Properties to receive via API on creation\nclass ManufacturerCreate(ManufacturerBase):\n    pass\n# Properties to receive via API on update\nclass ManufacturerUpdate(ManufacturerBase):\n    pass",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "ManufacturerCreate",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class ManufacturerCreate(ManufacturerBase):\n    pass\n# Properties to receive via API on update\nclass ManufacturerUpdate(ManufacturerBase):\n    pass\nclass ManufacturerInDBBase(ManufacturerBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Manufacturer(ManufacturerInDBBase):",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "ManufacturerUpdate",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class ManufacturerUpdate(ManufacturerBase):\n    pass\nclass ManufacturerInDBBase(ManufacturerBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Manufacturer(ManufacturerInDBBase):\n    pass\n# Additional properties stored in DB\nclass ManufacturerInDB(ManufacturerInDBBase):",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "ManufacturerInDBBase",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class ManufacturerInDBBase(ManufacturerBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Manufacturer(ManufacturerInDBBase):\n    pass\n# Additional properties stored in DB\nclass ManufacturerInDB(ManufacturerInDBBase):\n    pass\n#",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Manufacturer",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class Manufacturer(ManufacturerInDBBase):\n    pass\n# Additional properties stored in DB\nclass ManufacturerInDB(ManufacturerInDBBase):\n    pass\n#\n# Country s\n#\n# Shared properties\nclass CountryBase(BaseModel):",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "ManufacturerInDB",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class ManufacturerInDB(ManufacturerInDBBase):\n    pass\n#\n# Country s\n#\n# Shared properties\nclass CountryBase(BaseModel):\n    name: str | None = None\n    code: str | None = None\n    active: bool | None = True",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "CountryBase",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class CountryBase(BaseModel):\n    name: str | None = None\n    code: str | None = None\n    active: bool | None = True\nclass CountryBaseInDB(CountryBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass CountryCreate(CountryBase):\n    pass",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "CountryBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class CountryBaseInDB(CountryBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass CountryCreate(CountryBase):\n    pass\n# Properties to receive via API on update\nclass CountryUpdate(CountryBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "CountryCreate",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class CountryCreate(CountryBase):\n    pass\n# Properties to receive via API on update\nclass CountryUpdate(CountryBase):\n    pass\n# Properties to return via API\nclass Country(CountryBaseInDB):\n    pass\n# Properties stored in DB\nclass CountryInDB(CountryBaseInDB):",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "CountryUpdate",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class CountryUpdate(CountryBase):\n    pass\n# Properties to return via API\nclass Country(CountryBaseInDB):\n    pass\n# Properties stored in DB\nclass CountryInDB(CountryBaseInDB):\n    pass\n#\n# Province s",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Country",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class Country(CountryBaseInDB):\n    pass\n# Properties stored in DB\nclass CountryInDB(CountryBaseInDB):\n    pass\n#\n# Province s\n#\n# Shared properties\nclass ProvinceBase(BaseModel):",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "CountryInDB",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class CountryInDB(CountryBaseInDB):\n    pass\n#\n# Province s\n#\n# Shared properties\nclass ProvinceBase(BaseModel):\n    name: str | None = None\n    country_uid: str | None = None\n    code: str | None = None",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "ProvinceBase",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class ProvinceBase(BaseModel):\n    name: str | None = None\n    country_uid: str | None = None\n    code: str | None = None\n    email: str | None = None\n    email_cc: str | None = None\n    consent_email: str | None = None\n    mobile_phone: str | None = None\n    business_phone: str | None = None\n    consent_sms: str | None = None",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "ProvinceBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class ProvinceBaseInDB(ProvinceBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ProvinceCreate(ProvinceBase):\n    country_uid: str\n# Properties to receive via API on update\nclass ProvinceUpdate(ProvinceBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "ProvinceCreate",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class ProvinceCreate(ProvinceBase):\n    country_uid: str\n# Properties to receive via API on update\nclass ProvinceUpdate(ProvinceBase):\n    pass\n# Properties to return via API\nclass Province(ProvinceBaseInDB):\n    pass\n# Properties stored in DB\nclass ProvinceInDB(ProvinceBaseInDB):",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "ProvinceUpdate",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class ProvinceUpdate(ProvinceBase):\n    pass\n# Properties to return via API\nclass Province(ProvinceBaseInDB):\n    pass\n# Properties stored in DB\nclass ProvinceInDB(ProvinceBaseInDB):\n    pass\n#\n# District s",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Province",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class Province(ProvinceBaseInDB):\n    pass\n# Properties stored in DB\nclass ProvinceInDB(ProvinceBaseInDB):\n    pass\n#\n# District s\n#\n# Shared properties\nclass DistrictBase(BaseModel):",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "ProvinceInDB",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class ProvinceInDB(ProvinceBaseInDB):\n    pass\n#\n# District s\n#\n# Shared properties\nclass DistrictBase(BaseModel):\n    name: str | None = None\n    province_uid: str | None = None\n    code: str | None = None",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "DistrictBase",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class DistrictBase(BaseModel):\n    name: str | None = None\n    province_uid: str | None = None\n    code: str | None = None\n    email: str | None = None\n    email_cc: str | None = None\n    consent_email: str | None = None\n    mobile_phone: str | None = None\n    business_phone: str | None = None\n    consent_sms: str | None = None",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "DistrictBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class DistrictBaseInDB(DistrictBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass DistrictCreate(DistrictBase):\n    province_uid: str\n# Properties to receive via API on update\nclass DistrictUpdate(DistrictBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "DistrictCreate",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class DistrictCreate(DistrictBase):\n    province_uid: str\n# Properties to receive via API on update\nclass DistrictUpdate(DistrictBase):\n    pass\n# Properties to return via API\nclass District(DistrictBaseInDB):\n    pass\n# Properties stored in DB\nclass DistrictInDB(DistrictBaseInDB):",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "DistrictUpdate",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class DistrictUpdate(DistrictBase):\n    pass\n# Properties to return via API\nclass District(DistrictBaseInDB):\n    pass\n# Properties stored in DB\nclass DistrictInDB(DistrictBaseInDB):\n    pass",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "District",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class District(DistrictBaseInDB):\n    pass\n# Properties stored in DB\nclass DistrictInDB(DistrictBaseInDB):\n    pass",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "DistrictInDB",
        "kind": 6,
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "peekOfCode": "class DistrictInDB(DistrictBaseInDB):\n    pass",
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratorySettingService",
        "kind": 6,
        "importPath": "felicity.apps.setup.services",
        "description": "felicity.apps.setup.services",
        "peekOfCode": "class LaboratorySettingService(\n    BaseService[LaboratorySetting], ILaboratorySettingService\n):\n    def __init__(self, repository: ILaboratorySettingRepository):\n        self.repository = repository\n    async def update(\n        self,\n        uid: str,\n        laboratory_uid: str,\n        allow_self_verification: bool | None,",
        "detail": "felicity.apps.setup.services",
        "documentation": {}
    },
    {
        "label": "SupplierService",
        "kind": 6,
        "importPath": "felicity.apps.setup.services",
        "description": "felicity.apps.setup.services",
        "peekOfCode": "class SupplierService(BaseService[Supplier], ISupplierService):\n    def __init__(self, repository: ISupplierRepository):\n        self.repository = repository\n    async def create(\n        self,\n        name: str,\n        description: str | None,\n        code: str | None = None,\n    ) -> Supplier:  # noqa\n        payload = locals()",
        "detail": "felicity.apps.setup.services",
        "documentation": {}
    },
    {
        "label": "ManufacturerService",
        "kind": 6,
        "importPath": "felicity.apps.setup.services",
        "description": "felicity.apps.setup.services",
        "peekOfCode": "class ManufacturerService(BaseService[Manufacturer], IManufacturerService):\n    def __init__(self, repository: IManufacturerRepository):\n        self.repository = repository\n    async def create(\n        self,\n        name: str,\n        description: str | None,\n    ) -> Manufacturer:  # noqa\n        payload = locals()\n        exists = await self.get(name=name)",
        "detail": "felicity.apps.setup.services",
        "documentation": {}
    },
    {
        "label": "DepartmentService",
        "kind": 6,
        "importPath": "felicity.apps.setup.services",
        "description": "felicity.apps.setup.services",
        "peekOfCode": "class DepartmentService(BaseService[Department], IDepartmentService):\n    def __init__(self, repository: IDepartmentRepository):\n        self.repository = repository\n    async def create(\n        self,\n        name: str,\n        description: str | None,\n        code: str | None,\n    ) -> Department:\n        payload = locals()",
        "detail": "felicity.apps.setup.services",
        "documentation": {}
    },
    {
        "label": "UnitService",
        "kind": 6,
        "importPath": "felicity.apps.setup.services",
        "description": "felicity.apps.setup.services",
        "peekOfCode": "class UnitService(BaseService[Unit], IUnitService):\n    def __init__(self, repository: IUnitRepository):\n        self.repository = repository\n    async def create(self, name: str, is_si_unit: bool) -> Unit:  # noqa\n        payload = locals()\n        exists = await self.get(name=name)\n        if exists:\n            raise AlreadyExistsError(f\"Unit named {name} already exists\")\n        incoming = dict()\n        for k, v in payload.__dict__.items():",
        "detail": "felicity.apps.setup.services",
        "documentation": {}
    },
    {
        "label": "LaboratoryService",
        "kind": 6,
        "importPath": "felicity.apps.setup.services",
        "description": "felicity.apps.setup.services",
        "peekOfCode": "class LaboratoryService(BaseService[Laboratory], ILaboratoryService):\n    def __init__(self, repository: ILaboratoryRepository):\n        self.repository = repository\n    async def get_by_setup_name(self, keyword=\"felicity\") -> Laboratory:\n        return await self.get(setup_name=keyword)\n    async def update(\n        self,\n        uid: str,\n        lab_name: str,\n        setup_name: str,",
        "detail": "felicity.apps.setup.services",
        "documentation": {}
    },
    {
        "label": "DistrictService",
        "kind": 6,
        "importPath": "felicity.apps.setup.services",
        "description": "felicity.apps.setup.services",
        "peekOfCode": "class DistrictService(BaseService[District], IDistrictService):\n    def __init__(self, repository: IDistrictRepository):\n        self.repository = repository\n    async def create(\n        self,\n        name: str,\n        province_uid: str | None,\n        code: str | None,\n        email: str | None,\n        email_cc: str | None,",
        "detail": "felicity.apps.setup.services",
        "documentation": {}
    },
    {
        "label": "ProvinceService",
        "kind": 6,
        "importPath": "felicity.apps.setup.services",
        "description": "felicity.apps.setup.services",
        "peekOfCode": "class ProvinceService(BaseService[Province], IProvinceService):\n    def __init__(self, repository: IProvinceRepository):\n        self.repository = repository\n    async def create(\n        self,\n        name: str | None,\n        country_uid: str | None,\n        code: str | None,\n        email: str | None,\n        email_cc: str | None,",
        "detail": "felicity.apps.setup.services",
        "documentation": {}
    },
    {
        "label": "CountryService",
        "kind": 6,
        "importPath": "felicity.apps.setup.services",
        "description": "felicity.apps.setup.services",
        "peekOfCode": "class CountryService(BaseService[Country], ICountryService):\n    def __init__(self, repository: ICountryRepository):\n        self.repository = repository\n    async def create(\n        self, name: str, code: str, active: bool | None\n    ) -> Country:  # noqa\n        payload = locals()\n        exists = await self.get(code=code)\n        if exists:\n            raise AlreadyExistsError(",
        "detail": "felicity.apps.setup.services",
        "documentation": {}
    },
    {
        "label": "ShipmentStates",
        "kind": 6,
        "importPath": "felicity.apps.shipment.conf",
        "description": "felicity.apps.shipment.conf",
        "peekOfCode": "class ShipmentStates(object):\n    \"\"\"Shipment Workflow States\n    empty -> preperation -> ready -> shipped\n    Other:\n    rejected, recalled, received\n    \"\"\"\n    DUE = \"due\"  # shipment recived from external labs\n    RECEIVING = \"receiving\"\n    EMPTY = \"empty\"  # shipment without samples\n    PREPERATION = \"preperation\"  # shipment containing at least a single sample",
        "detail": "felicity.apps.shipment.conf",
        "documentation": {}
    },
    {
        "label": "shipment_states",
        "kind": 5,
        "importPath": "felicity.apps.shipment.conf",
        "description": "felicity.apps.shipment.conf",
        "peekOfCode": "shipment_states = ShipmentStates()",
        "detail": "felicity.apps.shipment.conf",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratory",
        "kind": 6,
        "importPath": "felicity.apps.shipment.entities",
        "description": "felicity.apps.shipment.entities",
        "peekOfCode": "class ReferralLaboratory(AuditHistory):\n    __tablename__ = \"referral_laboratory\"\n    name = Column(String, nullable=True)\n    code = Column(String, index=True, unique=True, nullable=False)\n    url = Column(String, nullable=False)\n    username = Column(String, nullable=False)\n    password = Column(String, nullable=False)\n    is_reference = Column(Boolean(), default=False)\n    is_referral = Column(Boolean(), default=False)\nclass Shipment(AuditHistory):",
        "detail": "felicity.apps.shipment.entities",
        "documentation": {}
    },
    {
        "label": "Shipment",
        "kind": 6,
        "importPath": "felicity.apps.shipment.entities",
        "description": "felicity.apps.shipment.entities",
        "peekOfCode": "class Shipment(AuditHistory):\n    __tablename__ = \"shipment\"\n    shipment_id = Column(String, index=True, unique=True, nullable=False)\n    comment = Column(String, nullable=True)\n    courier = Column(String, nullable=False)\n    assigned_count = Column(Integer, nullable=False, default=0)\n    data = Column(JSONB)\n    state = Column(String)\n    laboratory_uid = Column(\n        String, ForeignKey(\"referral_laboratory.uid\"), nullable=True",
        "detail": "felicity.apps.shipment.entities",
        "documentation": {}
    },
    {
        "label": "ShippedSample",
        "kind": 6,
        "importPath": "felicity.apps.shipment.entities",
        "description": "felicity.apps.shipment.entities",
        "peekOfCode": "class ShippedSample(BaseEntity):\n    __tablename__ = \"shipped_sample\"\n    \"\"\"ShippedSample enables samples to be shipped multiple times\n    A sample can be tracked through different shipments from inception to end\n    \"\"\"\n    sample_uid = Column(String, ForeignKey(\"sample.uid\"), nullable=True)\n    sample = relationship(\"Sample\", foreign_keys=[sample_uid], lazy=\"selectin\")\n    shipment_uid = Column(String, ForeignKey(\"shipment.uid\"), nullable=True)\n    shipment = relationship(Shipment, foreign_keys=[shipment_uid], lazy=\"selectin\")\n    result_notified = Column(Boolean(), default=False)",
        "detail": "felicity.apps.shipment.entities",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratory",
        "kind": 6,
        "importPath": "felicity.apps.shipment.models",
        "description": "felicity.apps.shipment.models",
        "peekOfCode": "class ReferralLaboratory(AuditHistory):\n    __tablename__ = \"referral_laboratory\"\n    name = Column(String, nullable=True)\n    code = Column(String, index=True, unique=True, nullable=False)\n    url = Column(String, nullable=False)\n    username = Column(String, nullable=False)\n    password = Column(String, nullable=False)\n    is_reference = Column(Boolean(), default=False)\n    is_referral = Column(Boolean(), default=False)\n    @classmethod",
        "detail": "felicity.apps.shipment.models",
        "documentation": {}
    },
    {
        "label": "Shipment",
        "kind": 6,
        "importPath": "felicity.apps.shipment.models",
        "description": "felicity.apps.shipment.models",
        "peekOfCode": "class Shipment(AuditHistory):\n    __tablename__ = \"shipment\"\n    shipment_id = Column(String, index=True, unique=True, nullable=False)\n    comment = Column(String, nullable=True)\n    courier = Column(String, nullable=False)\n    assigned_count = Column(Integer, nullable=False, default=0)\n    data = Column(JSONB)\n    state = Column(String)\n    laboratory_uid = Column(\n        String, ForeignKey(\"referral_laboratory.uid\"), nullable=True",
        "detail": "felicity.apps.shipment.models",
        "documentation": {}
    },
    {
        "label": "ShippedSample",
        "kind": 6,
        "importPath": "felicity.apps.shipment.models",
        "description": "felicity.apps.shipment.models",
        "peekOfCode": "class ShippedSample(BaseEntity):\n    \"\"\"ShippedSample enables samples to be shipped multiple times\n    A sample can be tracked through different shipments from inception to end\n    \"\"\"\n    __tablename__ = \"shipped_sample\"\n    sample_uid = Column(String, ForeignKey(\"sample.uid\"), nullable=True)\n    sample = relationship(\"Sample\", foreign_keys=[sample_uid], lazy=\"selectin\")\n    shipment_uid = Column(String, ForeignKey(\"shipment.uid\"), nullable=True)\n    shipment = relationship(Shipment, foreign_keys=[shipment_uid], lazy=\"selectin\")\n    result_notified = Column(Boolean(), default=False)",
        "detail": "felicity.apps.shipment.models",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.shipment.models",
        "description": "felicity.apps.shipment.models",
        "peekOfCode": "logger = logging.getLogger(__name__)\nstreamer = FelicityStreamer()\nclass ReferralLaboratory(AuditHistory):\n    __tablename__ = \"referral_laboratory\"\n    name = Column(String, nullable=True)\n    code = Column(String, index=True, unique=True, nullable=False)\n    url = Column(String, nullable=False)\n    username = Column(String, nullable=False)\n    password = Column(String, nullable=False)\n    is_reference = Column(Boolean(), default=False)",
        "detail": "felicity.apps.shipment.models",
        "documentation": {}
    },
    {
        "label": "streamer",
        "kind": 5,
        "importPath": "felicity.apps.shipment.models",
        "description": "felicity.apps.shipment.models",
        "peekOfCode": "streamer = FelicityStreamer()\nclass ReferralLaboratory(AuditHistory):\n    __tablename__ = \"referral_laboratory\"\n    name = Column(String, nullable=True)\n    code = Column(String, index=True, unique=True, nullable=False)\n    url = Column(String, nullable=False)\n    username = Column(String, nullable=False)\n    password = Column(String, nullable=False)\n    is_reference = Column(Boolean(), default=False)\n    is_referral = Column(Boolean(), default=False)",
        "detail": "felicity.apps.shipment.models",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratoryRepository",
        "kind": 6,
        "importPath": "felicity.apps.shipment.repository",
        "description": "felicity.apps.shipment.repository",
        "peekOfCode": "class ReferralLaboratoryRepository(\n    BaseRepository[ReferralLaboratory], IReferralLaboratoryRepository\n):\n    def __init__(self) -> None:\n        self.model = ReferralLaboratory\n        super().__init__()\nclass ShipmentRepository(BaseRepository[Shipment], IShipmentRepository):\n    def __init__(self) -> None:\n        self.model = Shipment\n        super().__init__()",
        "detail": "felicity.apps.shipment.repository",
        "documentation": {}
    },
    {
        "label": "ShipmentRepository",
        "kind": 6,
        "importPath": "felicity.apps.shipment.repository",
        "description": "felicity.apps.shipment.repository",
        "peekOfCode": "class ShipmentRepository(BaseRepository[Shipment], IShipmentRepository):\n    def __init__(self) -> None:\n        self.model = Shipment\n        super().__init__()\n    async def paginate_with_cursors(\n        self,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,\n        text: str | None = None,",
        "detail": "felicity.apps.shipment.repository",
        "documentation": {}
    },
    {
        "label": "ShippedSampleRepository",
        "kind": 6,
        "importPath": "felicity.apps.shipment.repository",
        "description": "felicity.apps.shipment.repository",
        "peekOfCode": "class ShippedSampleRepository(BaseRepository[ShippedSample], IShippedSampleRepository):\n    def __init__(self) -> None:\n        self.model = ShippedSample\n        super().__init__()",
        "detail": "felicity.apps.shipment.repository",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratoryBase",
        "kind": 6,
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "peekOfCode": "class ReferralLaboratoryBase(BaseModel):\n    name: str | None = None\n    code: str | None = None\n    url: str | None = None\n    username: str | None = None\n    password: str | None = None\n    is_reference: bool | None = None\n    is_referral: bool | None = None\nclass ReferralLaboratoryBaseInDB(ReferralLaboratoryBase):\n    uid: str | None = None",
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratoryBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "peekOfCode": "class ReferralLaboratoryBaseInDB(ReferralLaboratoryBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReferralLaboratoryCreate(ReferralLaboratoryBase):\n    pass\n# Properties to receive via API on update\nclass ReferralLaboratoryUpdate(ReferralLaboratoryBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratoryCreate",
        "kind": 6,
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "peekOfCode": "class ReferralLaboratoryCreate(ReferralLaboratoryBase):\n    pass\n# Properties to receive via API on update\nclass ReferralLaboratoryUpdate(ReferralLaboratoryBase):\n    pass\n# Properties to return via API\nclass ReferralLaboratory(ReferralLaboratoryBaseInDB):\n    pass\n# Properties stored in DB\nclass ReferralLaboratoryInDB(ReferralLaboratoryBaseInDB):",
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratoryUpdate",
        "kind": 6,
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "peekOfCode": "class ReferralLaboratoryUpdate(ReferralLaboratoryBase):\n    pass\n# Properties to return via API\nclass ReferralLaboratory(ReferralLaboratoryBaseInDB):\n    pass\n# Properties stored in DB\nclass ReferralLaboratoryInDB(ReferralLaboratoryBaseInDB):\n    pass\n#\n# Shipment Schemas",
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratory",
        "kind": 6,
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "peekOfCode": "class ReferralLaboratory(ReferralLaboratoryBaseInDB):\n    pass\n# Properties stored in DB\nclass ReferralLaboratoryInDB(ReferralLaboratoryBaseInDB):\n    pass\n#\n# Shipment Schemas\n#\n# Shared properties\nclass ShipmentBase(BaseModel):",
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratoryInDB",
        "kind": 6,
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "peekOfCode": "class ReferralLaboratoryInDB(ReferralLaboratoryBaseInDB):\n    pass\n#\n# Shipment Schemas\n#\n# Shared properties\nclass ShipmentBase(BaseModel):\n    shipment_id: str | None = None\n    comment: str | None = None\n    courier: str | None = None",
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShipmentBase",
        "kind": 6,
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "peekOfCode": "class ShipmentBase(BaseModel):\n    shipment_id: str | None = None\n    comment: str | None = None\n    courier: str | None = None\n    assigned_count: int | None = None\n    data: dict | None = {}\n    samples: SampleBaseInDB | None = None\n    state: str | None = None\n    incoming: bool | None = False\n    laboratory_uid: str | None = None",
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShipmentBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "peekOfCode": "class ShipmentBaseInDB(ShipmentBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ShipmentCreate(ShipmentBase):\n    pass\n# Properties to receive via API on update\nclass ShipmentUpdate(ShipmentBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShipmentCreate",
        "kind": 6,
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "peekOfCode": "class ShipmentCreate(ShipmentBase):\n    pass\n# Properties to receive via API on update\nclass ShipmentUpdate(ShipmentBase):\n    pass\n# Properties to return via API\nclass Shipment(ShipmentBaseInDB):\n    pass\n# Properties stored in DB\nclass ShipmentInDB(ShipmentBaseInDB):",
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShipmentUpdate",
        "kind": 6,
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "peekOfCode": "class ShipmentUpdate(ShipmentBase):\n    pass\n# Properties to return via API\nclass Shipment(ShipmentBaseInDB):\n    pass\n# Properties stored in DB\nclass ShipmentInDB(ShipmentBaseInDB):\n    pass\n#\n# ShippedSample Schemas",
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "Shipment",
        "kind": 6,
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "peekOfCode": "class Shipment(ShipmentBaseInDB):\n    pass\n# Properties stored in DB\nclass ShipmentInDB(ShipmentBaseInDB):\n    pass\n#\n# ShippedSample Schemas\n#\n# Shared properties\nclass ShippedSampleBase(BaseModel):",
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShipmentInDB",
        "kind": 6,
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "peekOfCode": "class ShipmentInDB(ShipmentBaseInDB):\n    pass\n#\n# ShippedSample Schemas\n#\n# Shared properties\nclass ShippedSampleBase(BaseModel):\n    sample_uid: str | None = None\n    shipment_uid: str | None = None\nclass ShippedSampleBaseInDB(ShippedSampleBase):",
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShippedSampleBase",
        "kind": 6,
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "peekOfCode": "class ShippedSampleBase(BaseModel):\n    sample_uid: str | None = None\n    shipment_uid: str | None = None\nclass ShippedSampleBaseInDB(ShippedSampleBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ShippedSampleCreate(ShippedSampleBase):\n    pass\n# Properties to receive via API on update",
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShippedSampleBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "peekOfCode": "class ShippedSampleBaseInDB(ShippedSampleBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ShippedSampleCreate(ShippedSampleBase):\n    pass\n# Properties to receive via API on update\nclass ShippedSampleUpdate(ShippedSampleBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShippedSampleCreate",
        "kind": 6,
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "peekOfCode": "class ShippedSampleCreate(ShippedSampleBase):\n    pass\n# Properties to receive via API on update\nclass ShippedSampleUpdate(ShippedSampleBase):\n    pass\n# Properties to return via API\nclass ShippedSample(ShippedSampleBaseInDB):\n    pass\n# Properties stored in DB\nclass ShippedSampleInDB(ShippedSampleBaseInDB):",
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShippedSampleUpdate",
        "kind": 6,
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "peekOfCode": "class ShippedSampleUpdate(ShippedSampleBase):\n    pass\n# Properties to return via API\nclass ShippedSample(ShippedSampleBaseInDB):\n    pass\n# Properties stored in DB\nclass ShippedSampleInDB(ShippedSampleBaseInDB):\n    pass",
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShippedSample",
        "kind": 6,
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "peekOfCode": "class ShippedSample(ShippedSampleBaseInDB):\n    pass\n# Properties stored in DB\nclass ShippedSampleInDB(ShippedSampleBaseInDB):\n    pass",
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShippedSampleInDB",
        "kind": 6,
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "peekOfCode": "class ShippedSampleInDB(ShippedSampleBaseInDB):\n    pass",
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratoryService",
        "kind": 6,
        "importPath": "felicity.apps.shipment.services",
        "description": "felicity.apps.shipment.services",
        "peekOfCode": "class ReferralLaboratoryService(\n    BaseService[ReferralLaboratory], IReferralLaboratoryService\n):\n    def __init__(self, repository: IReferralLaboratoryRepository):\n        self.repository = repository\n    async def create(\n        self,\n        name: str,\n        code: str,\n        url: str,",
        "detail": "felicity.apps.shipment.services",
        "documentation": {}
    },
    {
        "label": "ShippedSampleService",
        "kind": 6,
        "importPath": "felicity.apps.shipment.services",
        "description": "felicity.apps.shipment.services",
        "peekOfCode": "class ShippedSampleService(BaseService[ShippedSample], IShippedSampleService):\n    def __init__(self, repository: IShippedSampleRepository):\n        self.repository = repository\nclass ShipmentService(BaseService[Shipment], IShipmentService):\n    def __init__(\n        self,\n        repository: IShipmentRepository,\n        shipped_sample_service: IShippedSampleService,\n        stream_service: IActivityStreamService,\n        id_sequence_service: IIdSequenceService,",
        "detail": "felicity.apps.shipment.services",
        "documentation": {}
    },
    {
        "label": "ShipmentService",
        "kind": 6,
        "importPath": "felicity.apps.shipment.services",
        "description": "felicity.apps.shipment.services",
        "peekOfCode": "class ShipmentService(BaseService[Shipment], IShipmentService):\n    def __init__(\n        self,\n        repository: IShipmentRepository,\n        shipped_sample_service: IShippedSampleService,\n        stream_service: IActivityStreamService,\n        id_sequence_service: IIdSequenceService,\n        job_service: IJobService,\n        sample_service: ISampleService,\n        analysis_result_service: IAnalysisResultService,",
        "detail": "felicity.apps.shipment.services",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.shipment.tasks",
        "description": "felicity.apps.shipment.tasks",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def populate_shipment_manually(job_uid: str):\n    logger.info(f\"starting job {job_uid} ....\")\n    job: job_models.Job = await job_models.Job.get(uid=job_uid)\n    if not job:\n        return\n    if not job.status == job_states.PENDING:\n        return\n    await job.change_status(new_status=job_states.RUNNING)\n    shipment_uid = job.job_id",
        "detail": "felicity.apps.shipment.tasks",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.shipment.utils",
        "description": "felicity.apps.shipment.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# shipments\nasync def shipment_assign(shipment_uid: str, samples_data: list[dict], actor_uid):\n    shipment: Shipment = await Shipment.get(uid=shipment_uid)\n    async def process_sample(_sample_data):\n        sample: Sample = await Sample.get(uid=_sample_data.get(\"sample_uid\", None))\n        if not sample:\n            logger.info(f\"Failed to retrieve sample {_sample_data} .... skipping\")\n            return\n        analytes: list[AnalysisResult] = await AnalysisResult.get_by_uids(",
        "detail": "felicity.apps.shipment.utils",
        "documentation": {}
    },
    {
        "label": "StoreRoom",
        "kind": 6,
        "importPath": "felicity.apps.storage.entities",
        "description": "felicity.apps.storage.entities",
        "peekOfCode": "class StoreRoom(AuditUser):\n    \"\"\"Store Room\"\"\"\n    __tablename__ = \"store_room\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\nclass StorageLocation(AuditUser):\n    \"\"\"Storage Location\n    e.g: Fridge, CupBoard, Floor, Box, etc\n    \"\"\"\n    __tablename__ = \"storage_location\"",
        "detail": "felicity.apps.storage.entities",
        "documentation": {}
    },
    {
        "label": "StorageLocation",
        "kind": 6,
        "importPath": "felicity.apps.storage.entities",
        "description": "felicity.apps.storage.entities",
        "peekOfCode": "class StorageLocation(AuditUser):\n    \"\"\"Storage Location\n    e.g: Fridge, CupBoard, Floor, Box, etc\n    \"\"\"\n    __tablename__ = \"storage_location\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    store_room_uid = Column(String, ForeignKey(\"store_room.uid\"), nullable=False)\n    store_room = relationship(StoreRoom, backref=\"storage_locations\", lazy=\"selectin\")\nclass StorageSection(AuditUser):",
        "detail": "felicity.apps.storage.entities",
        "documentation": {}
    },
    {
        "label": "StorageSection",
        "kind": 6,
        "importPath": "felicity.apps.storage.entities",
        "description": "felicity.apps.storage.entities",
        "peekOfCode": "class StorageSection(AuditUser):\n    \"\"\"Storage Location Section/Compartment\n    e.g: Shelve, Tray, Rack, etc\n    \"\"\"\n    __tablename__ = \"storage_section\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    storage_location_uid = Column(\n        String, ForeignKey(\"storage_location.uid\"), nullable=False\n    )",
        "detail": "felicity.apps.storage.entities",
        "documentation": {}
    },
    {
        "label": "StorageContainer",
        "kind": 6,
        "importPath": "felicity.apps.storage.entities",
        "description": "felicity.apps.storage.entities",
        "peekOfCode": "class StorageContainer(AuditUser):\n    \"\"\"Storage Carrier\n    e.g: Sample K-Lite, etc\n    \"\"\"\n    __tablename__ = \"storage_container\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    storage_section_uid = Column(\n        String, ForeignKey(\"storage_section.uid\"), nullable=False\n    )",
        "detail": "felicity.apps.storage.entities",
        "documentation": {}
    },
    {
        "label": "StoreRoom",
        "kind": 6,
        "importPath": "felicity.apps.storage.models",
        "description": "felicity.apps.storage.models",
        "peekOfCode": "class StoreRoom(AuditUser):\n    \"\"\"Store Room\"\"\"\n    __tablename__ = \"store_room\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    @classmethod\n    async def create(cls, obj_in: dict | schemas.StoreRoomCreate) -> schemas.StoreRoom:\n        data = cls._import(obj_in)\n        return await super().create(**data)\n    async def update(self, obj_in: dict | schemas.StoreRoomUpdate) -> schemas.StoreRoom:",
        "detail": "felicity.apps.storage.models",
        "documentation": {}
    },
    {
        "label": "StorageLocation",
        "kind": 6,
        "importPath": "felicity.apps.storage.models",
        "description": "felicity.apps.storage.models",
        "peekOfCode": "class StorageLocation(AuditUser):\n    \"\"\"Storage Location\n    e.g: Fridge, CupBoard, Floor, Box, etc\n    \"\"\"\n    __tablename__ = \"storage_location\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    store_room_uid = Column(String, ForeignKey(\"store_room.uid\"), nullable=False)\n    store_room = relationship(StoreRoom, backref=\"storage_locations\", lazy=\"selectin\")\n    @classmethod",
        "detail": "felicity.apps.storage.models",
        "documentation": {}
    },
    {
        "label": "StorageSection",
        "kind": 6,
        "importPath": "felicity.apps.storage.models",
        "description": "felicity.apps.storage.models",
        "peekOfCode": "class StorageSection(AuditUser):\n    \"\"\"Storage Location Section/Compartment\n    e.g: Shelve, Tray, Rack, etc\n    \"\"\"\n    __tablename__ = \"storage_section\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    storage_location_uid = Column(\n        String, ForeignKey(\"storage_location.uid\"), nullable=False\n    )",
        "detail": "felicity.apps.storage.models",
        "documentation": {}
    },
    {
        "label": "StorageContainer",
        "kind": 6,
        "importPath": "felicity.apps.storage.models",
        "description": "felicity.apps.storage.models",
        "peekOfCode": "class StorageContainer(AuditUser):\n    \"\"\"Storage Carrier\n    e.g: Sample K-Lite, etc\n    \"\"\"\n    __tablename__ = \"storage_container\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    storage_section_uid = Column(\n        String, ForeignKey(\"storage_section.uid\"), nullable=False\n    )",
        "detail": "felicity.apps.storage.models",
        "documentation": {}
    },
    {
        "label": "StoreRoomRepository",
        "kind": 6,
        "importPath": "felicity.apps.storage.repository",
        "description": "felicity.apps.storage.repository",
        "peekOfCode": "class StoreRoomRepository(BaseRepository[StoreRoom], IStoreRoomRepository):\n    def __init__(self) -> None:\n        self.model = StoreRoom\n        super().__init__()\nclass StorageLocationRepository(\n    BaseRepository[StorageLocation], IStorageLocationRepository\n):\n    def __init__(self) -> None:\n        self.model = StorageLocation\n        super().__init__()",
        "detail": "felicity.apps.storage.repository",
        "documentation": {}
    },
    {
        "label": "StorageLocationRepository",
        "kind": 6,
        "importPath": "felicity.apps.storage.repository",
        "description": "felicity.apps.storage.repository",
        "peekOfCode": "class StorageLocationRepository(\n    BaseRepository[StorageLocation], IStorageLocationRepository\n):\n    def __init__(self) -> None:\n        self.model = StorageLocation\n        super().__init__()\nclass StorageSectionRepository(\n    BaseRepository[StorageSection], IStorageSectionRepository\n):\n    def __init__(self) -> None:",
        "detail": "felicity.apps.storage.repository",
        "documentation": {}
    },
    {
        "label": "StorageSectionRepository",
        "kind": 6,
        "importPath": "felicity.apps.storage.repository",
        "description": "felicity.apps.storage.repository",
        "peekOfCode": "class StorageSectionRepository(\n    BaseRepository[StorageSection], IStorageSectionRepository\n):\n    def __init__(self) -> None:\n        self.model = StorageSection\n        super().__init__()\nclass StorageContainerRepository(\n    BaseRepository[StorageContainer], IStorageContainerRepository\n):\n    def __init__(self) -> None:",
        "detail": "felicity.apps.storage.repository",
        "documentation": {}
    },
    {
        "label": "StorageContainerRepository",
        "kind": 6,
        "importPath": "felicity.apps.storage.repository",
        "description": "felicity.apps.storage.repository",
        "peekOfCode": "class StorageContainerRepository(\n    BaseRepository[StorageContainer], IStorageContainerRepository\n):\n    def __init__(self) -> None:\n        self.model = StorageContainer\n        super().__init__()",
        "detail": "felicity.apps.storage.repository",
        "documentation": {}
    },
    {
        "label": "StoreRoomBase",
        "kind": 6,
        "importPath": "felicity.apps.storage.schemas",
        "description": "felicity.apps.storage.schemas",
        "peekOfCode": "class StoreRoomBase(BaseModel):\n    name: str | None = None\n    description: str | None = None\nclass StoreRoom(StoreRoomBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass StoreRoomCreate(StoreRoomBase):\n    pass\n# Properties to receive via API on update",
        "detail": "felicity.apps.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StoreRoom",
        "kind": 6,
        "importPath": "felicity.apps.storage.schemas",
        "description": "felicity.apps.storage.schemas",
        "peekOfCode": "class StoreRoom(StoreRoomBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass StoreRoomCreate(StoreRoomBase):\n    pass\n# Properties to receive via API on update\nclass StoreRoomUpdate(StoreRoomBase):\n    pass\n#",
        "detail": "felicity.apps.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StoreRoomCreate",
        "kind": 6,
        "importPath": "felicity.apps.storage.schemas",
        "description": "felicity.apps.storage.schemas",
        "peekOfCode": "class StoreRoomCreate(StoreRoomBase):\n    pass\n# Properties to receive via API on update\nclass StoreRoomUpdate(StoreRoomBase):\n    pass\n#\n# StorageLocation Schemas\n#\n# Shared properties\nclass StorageLocationBase(BaseModel):",
        "detail": "felicity.apps.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StoreRoomUpdate",
        "kind": 6,
        "importPath": "felicity.apps.storage.schemas",
        "description": "felicity.apps.storage.schemas",
        "peekOfCode": "class StoreRoomUpdate(StoreRoomBase):\n    pass\n#\n# StorageLocation Schemas\n#\n# Shared properties\nclass StorageLocationBase(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    store_room_uid: str",
        "detail": "felicity.apps.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageLocationBase",
        "kind": 6,
        "importPath": "felicity.apps.storage.schemas",
        "description": "felicity.apps.storage.schemas",
        "peekOfCode": "class StorageLocationBase(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    store_room_uid: str\n    store_room: Optional[StoreRoom] = None\nclass StorageLocation(StorageLocationBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass StorageLocationCreate(StorageLocationBase):",
        "detail": "felicity.apps.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageLocation",
        "kind": 6,
        "importPath": "felicity.apps.storage.schemas",
        "description": "felicity.apps.storage.schemas",
        "peekOfCode": "class StorageLocation(StorageLocationBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass StorageLocationCreate(StorageLocationBase):\n    pass\n# Properties to receive via API on update\nclass StorageLocationUpdate(StorageLocationBase):\n    pass\n#",
        "detail": "felicity.apps.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageLocationCreate",
        "kind": 6,
        "importPath": "felicity.apps.storage.schemas",
        "description": "felicity.apps.storage.schemas",
        "peekOfCode": "class StorageLocationCreate(StorageLocationBase):\n    pass\n# Properties to receive via API on update\nclass StorageLocationUpdate(StorageLocationBase):\n    pass\n#\n# StorageSection Schemas\n#\n# Shared properties\nclass StorageSectionBase(BaseModel):",
        "detail": "felicity.apps.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageLocationUpdate",
        "kind": 6,
        "importPath": "felicity.apps.storage.schemas",
        "description": "felicity.apps.storage.schemas",
        "peekOfCode": "class StorageLocationUpdate(StorageLocationBase):\n    pass\n#\n# StorageSection Schemas\n#\n# Shared properties\nclass StorageSectionBase(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    storage_location_uid: str",
        "detail": "felicity.apps.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageSectionBase",
        "kind": 6,
        "importPath": "felicity.apps.storage.schemas",
        "description": "felicity.apps.storage.schemas",
        "peekOfCode": "class StorageSectionBase(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    storage_location_uid: str\n    storage_location: Optional[StorageLocation] = None\nclass StorageSection(StorageSectionBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass StorageSectionCreate(StorageSectionBase):",
        "detail": "felicity.apps.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageSection",
        "kind": 6,
        "importPath": "felicity.apps.storage.schemas",
        "description": "felicity.apps.storage.schemas",
        "peekOfCode": "class StorageSection(StorageSectionBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass StorageSectionCreate(StorageSectionBase):\n    pass\n# Properties to receive via API on update\nclass StorageSectionUpdate(StorageSectionBase):\n    pass\n#",
        "detail": "felicity.apps.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageSectionCreate",
        "kind": 6,
        "importPath": "felicity.apps.storage.schemas",
        "description": "felicity.apps.storage.schemas",
        "peekOfCode": "class StorageSectionCreate(StorageSectionBase):\n    pass\n# Properties to receive via API on update\nclass StorageSectionUpdate(StorageSectionBase):\n    pass\n#\n# StorageContainer Schemas\n#\n# Shared properties\nclass StorageContainerBase(BaseModel):",
        "detail": "felicity.apps.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageSectionUpdate",
        "kind": 6,
        "importPath": "felicity.apps.storage.schemas",
        "description": "felicity.apps.storage.schemas",
        "peekOfCode": "class StorageSectionUpdate(StorageSectionBase):\n    pass\n#\n# StorageContainer Schemas\n#\n# Shared properties\nclass StorageContainerBase(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    storage_section_uid: str",
        "detail": "felicity.apps.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageContainerBase",
        "kind": 6,
        "importPath": "felicity.apps.storage.schemas",
        "description": "felicity.apps.storage.schemas",
        "peekOfCode": "class StorageContainerBase(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    storage_section_uid: str\n    storage_section: Optional[StorageSection] = None\n    grid: bool = False\n    row_wise: bool = False\n    cols: int | None = None\n    rows: int | None = None\n    slots: int | None = 0",
        "detail": "felicity.apps.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageContainer",
        "kind": 6,
        "importPath": "felicity.apps.storage.schemas",
        "description": "felicity.apps.storage.schemas",
        "peekOfCode": "class StorageContainer(StorageContainerBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass StorageContainerCreate(StorageContainerBase):\n    pass\n# Properties to receive via API on update\nclass StorageContainerUpdate(StorageContainerBase):\n    pass",
        "detail": "felicity.apps.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageContainerCreate",
        "kind": 6,
        "importPath": "felicity.apps.storage.schemas",
        "description": "felicity.apps.storage.schemas",
        "peekOfCode": "class StorageContainerCreate(StorageContainerBase):\n    pass\n# Properties to receive via API on update\nclass StorageContainerUpdate(StorageContainerBase):\n    pass",
        "detail": "felicity.apps.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageContainerUpdate",
        "kind": 6,
        "importPath": "felicity.apps.storage.schemas",
        "description": "felicity.apps.storage.schemas",
        "peekOfCode": "class StorageContainerUpdate(StorageContainerBase):\n    pass",
        "detail": "felicity.apps.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StoreRoomService",
        "kind": 6,
        "importPath": "felicity.apps.storage.services",
        "description": "felicity.apps.storage.services",
        "peekOfCode": "class StoreRoomService(BaseService[StoreRoom], IStoreRoomService):\n    def __init__(self, repository: IStoreRoomRepository):\n        self.repository = repository\n    async def create(\n            self, name: str, description: str, felicity_user: User\n    ) -> StoreRoom:\n        payload = locals()\n        exists = await self.get(name=name)\n        if exists:\n            raise AlreadyExistsError(f\"StoreRoom with this name {name} already exists\")",
        "detail": "felicity.apps.storage.services",
        "documentation": {}
    },
    {
        "label": "StorageLocationService",
        "kind": 6,
        "importPath": "felicity.apps.storage.services",
        "description": "felicity.apps.storage.services",
        "peekOfCode": "class StorageLocationService(BaseService[StorageLocation], IStorageLocationService):\n    def __init__(\n            self,\n            repository: IStorageLocationRepository,\n            store_room_service: IStoreRoomService,\n    ):\n        self.repository = repository\n        self.store_room_service = store_room_service\n    async def create(\n            self, name: str, description: str, store_room_uid: str, felicity_user: User",
        "detail": "felicity.apps.storage.services",
        "documentation": {}
    },
    {
        "label": "StorageSectionService",
        "kind": 6,
        "importPath": "felicity.apps.storage.services",
        "description": "felicity.apps.storage.services",
        "peekOfCode": "class StorageSectionService(BaseService[StorageSection], IStorageSectionService):\n    def __init__(\n            self,\n            repository: IStorageSectionRepository,\n            storage_location_service: IStorageLocationService,\n    ):\n        self.repository = repository\n        self.storage_location_service = storage_location_service\n    async def create(\n            self,",
        "detail": "felicity.apps.storage.services",
        "documentation": {}
    },
    {
        "label": "StorageContainerService",
        "kind": 6,
        "importPath": "felicity.apps.storage.services",
        "description": "felicity.apps.storage.services",
        "peekOfCode": "class StorageContainerService(BaseService[StorageContainer], IStorageContainerService):\n    def __init__(\n            self, repository: IStorageContainerRepository, sample_service: ISampleService\n    ):\n        self.repository = repository\n        self.sample_service = sample_service\n    async def get_samples(self, storage_container_uid: str) -> list[Sample]:\n        return await self.sample_service.get_all(\n            storage_container_uid=storage_container_uid\n        )",
        "detail": "felicity.apps.storage.services",
        "documentation": {}
    },
    {
        "label": "SimpleAuditMixin",
        "kind": 6,
        "importPath": "felicity.apps.user.abstract",
        "description": "felicity.apps.user.abstract",
        "peekOfCode": "class SimpleAuditMixin(object):\n    \"\"\"\n    Can't use BaseAuditMixin since\n    user table does not exist yest\n    \"\"\"\n    @declared_attr\n    def created_at(self):\n        return Column(DateTime, default=datetime.utcnow)\n    @declared_attr\n    def creator_name(self):",
        "detail": "felicity.apps.user.abstract",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "kind": 6,
        "importPath": "felicity.apps.user.abstract",
        "description": "felicity.apps.user.abstract",
        "peekOfCode": "class AbstractBaseUser(SimpleAuditMixin, BaseEntity):\n    __abstract__ = True\n    first_name = Column(String, index=True)\n    last_name = Column(String, index=True)\n    email = Column(String, unique=True, index=True, nullable=False)\n    mobile_phone = Column(String, nullable=True)\n    business_phone = Column(String, nullable=True)\n    is_active = Column(Boolean(), default=True)\n    is_superuser = Column(Boolean(), default=False)\n    @property",
        "detail": "felicity.apps.user.abstract",
        "documentation": {}
    },
    {
        "label": "AbstractAuth",
        "kind": 6,
        "importPath": "felicity.apps.user.abstract",
        "description": "felicity.apps.user.abstract",
        "peekOfCode": "class AbstractAuth(SimpleAuditMixin, BaseEntity):\n    __abstract__ = True\n    user_name = Column(String, unique=True, index=True, nullable=False)\n    hashed_password = Column(String, nullable=False)\n    login_retry = Column(Integer)\n    is_blocked = Column(Boolean(), default=False)\n    @property\n    def has_password(self):\n        return True if self.hashed_password else False\n    @classmethod",
        "detail": "felicity.apps.user.abstract",
        "documentation": {}
    },
    {
        "label": "Themes",
        "kind": 6,
        "importPath": "felicity.apps.user.conf",
        "description": "felicity.apps.user.conf",
        "peekOfCode": "class Themes:\n    DARK = \"dark\"\n    LIGHT = \"light\"\nthemes = Themes()",
        "detail": "felicity.apps.user.conf",
        "documentation": {}
    },
    {
        "label": "DISPATCH_CONTACT",
        "kind": 5,
        "importPath": "felicity.apps.user.conf",
        "description": "felicity.apps.user.conf",
        "peekOfCode": "DISPATCH_CONTACT = \"dcuser\"\nCLIENT_CONTACT = \"ccuser\"\nLABORATORY_CONTACT = \"lcuser\"\nclass Themes:\n    DARK = \"dark\"\n    LIGHT = \"light\"\nthemes = Themes()",
        "detail": "felicity.apps.user.conf",
        "documentation": {}
    },
    {
        "label": "CLIENT_CONTACT",
        "kind": 5,
        "importPath": "felicity.apps.user.conf",
        "description": "felicity.apps.user.conf",
        "peekOfCode": "CLIENT_CONTACT = \"ccuser\"\nLABORATORY_CONTACT = \"lcuser\"\nclass Themes:\n    DARK = \"dark\"\n    LIGHT = \"light\"\nthemes = Themes()",
        "detail": "felicity.apps.user.conf",
        "documentation": {}
    },
    {
        "label": "LABORATORY_CONTACT",
        "kind": 5,
        "importPath": "felicity.apps.user.conf",
        "description": "felicity.apps.user.conf",
        "peekOfCode": "LABORATORY_CONTACT = \"lcuser\"\nclass Themes:\n    DARK = \"dark\"\n    LIGHT = \"light\"\nthemes = Themes()",
        "detail": "felicity.apps.user.conf",
        "documentation": {}
    },
    {
        "label": "themes",
        "kind": 5,
        "importPath": "felicity.apps.user.conf",
        "description": "felicity.apps.user.conf",
        "peekOfCode": "themes = Themes()",
        "detail": "felicity.apps.user.conf",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "peekOfCode": "class User(AbstractBaseUser):\n    __tablename__ = \"user\"\n    groups = relationship(\n        \"Group\", secondary=user_groups, back_populates=\"members\", lazy=\"selectin\"\n    )\n    avatar = Column(String, nullable=True)\n    bio = Column(String, nullable=True)\n    default_route = Column(Boolean(), nullable=True)\n    user_type = Column(String, nullable=True)\nclass Permission(BaseEntity):",
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "Permission",
        "kind": 6,
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "peekOfCode": "class Permission(BaseEntity):\n    __tablename__ = \"permission\"\n    action = Column(String, nullable=False)  # e.g create, modify\n    target = Column(String, nullable=False)  # e.g sample, worksheet\n    active = Column(Boolean(), default=True)\nclass Group(BaseEntity):\n    __tablename__ = \"group\"\n    name = Column(String, unique=True, index=True, nullable=False)\n    keyword = Column(\n        String, unique=True, index=True, nullable=False, default=\"keyword_x\"",
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "Group",
        "kind": 6,
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "peekOfCode": "class Group(BaseEntity):\n    __tablename__ = \"group\"\n    name = Column(String, unique=True, index=True, nullable=False)\n    keyword = Column(\n        String, unique=True, index=True, nullable=False, default=\"keyword_x\"\n    )\n    members = relationship(\n        \"User\", secondary=user_groups, back_populates=\"groups\", lazy=\"selectin\"\n    )\n    permissions = relationship(",
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "user_groups",
        "kind": 5,
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "peekOfCode": "user_groups = Table(\n    \"user_groups\",\n    BaseEntity.metadata,\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n    Column(\"group_uid\", ForeignKey(\"group.uid\"), primary_key=True),\n)\n\"\"\"\nMany to Many Link between Group and Permission\n\"\"\"\npermission_groups = Table(",
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "permission_groups",
        "kind": 5,
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "peekOfCode": "permission_groups = Table(\n    \"permission_groups\",\n    BaseEntity.metadata,\n    Column(\"permission_uid\", ForeignKey(\"permission.uid\"), primary_key=True),\n    Column(\"group_uid\", ForeignKey(\"group.uid\"), primary_key=True),\n)\nclass User(AbstractBaseUser):\n    __tablename__ = \"user\"\n    groups = relationship(\n        \"Group\", secondary=user_groups, back_populates=\"members\", lazy=\"selectin\"",
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "new_account_created",
        "kind": 2,
        "importPath": "felicity.apps.user.events",
        "description": "felicity.apps.user.events",
        "peekOfCode": "def new_account_created(**kwargs):\n    send_new_account_email(\n        settings.FIRST_SUPERUSER_EMAIL,\n        settings.FIRST_SUPERUSER_USERNAME,\n        settings.FIRST_SUPERUSER_PASSWORD,\n    )\ndef password_reset(user, token):\n    send_reset_password_email(email_to=user.email, email=user.email, token=token)\ndef init_user_events():\n    subscribe(\"new-account-created\", new_account_created)",
        "detail": "felicity.apps.user.events",
        "documentation": {}
    },
    {
        "label": "password_reset",
        "kind": 2,
        "importPath": "felicity.apps.user.events",
        "description": "felicity.apps.user.events",
        "peekOfCode": "def password_reset(user, token):\n    send_reset_password_email(email_to=user.email, email=user.email, token=token)\ndef init_user_events():\n    subscribe(\"new-account-created\", new_account_created)\n    subscribe(\"password-reset\", password_reset)",
        "detail": "felicity.apps.user.events",
        "documentation": {}
    },
    {
        "label": "init_user_events",
        "kind": 2,
        "importPath": "felicity.apps.user.events",
        "description": "felicity.apps.user.events",
        "peekOfCode": "def init_user_events():\n    subscribe(\"new-account-created\", new_account_created)\n    subscribe(\"password-reset\", password_reset)",
        "detail": "felicity.apps.user.events",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "felicity.apps.user.events",
        "description": "felicity.apps.user.events",
        "peekOfCode": "settings = get_settings()\ndef new_account_created(**kwargs):\n    send_new_account_email(\n        settings.FIRST_SUPERUSER_EMAIL,\n        settings.FIRST_SUPERUSER_USERNAME,\n        settings.FIRST_SUPERUSER_PASSWORD,\n    )\ndef password_reset(user, token):\n    send_reset_password_email(email_to=user.email, email=user.email, token=token)\ndef init_user_events():",
        "detail": "felicity.apps.user.events",
        "documentation": {}
    },
    {
        "label": "UserAuth",
        "kind": 6,
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "peekOfCode": "class UserAuth(AbstractAuth):\n    \"\"\"Authentication class user access\n    @param user_type is dynamically accessed and values are:\n    ccuser: client contacts\n    lcuser: laboratory contacts\n    dcuser: dispatch center contacts\n    \"\"\"\n    __tablename__ = \"user_auth\"\n    user_type = Column(String, nullable=True)\n    async def acquire_user_type(self, user_type):",
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "peekOfCode": "class User(AbstractBaseUser):\n    __tablename__ = \"user\"\n    auth_uid = Column(String, ForeignKey(\"user_auth.uid\"))\n    auth = relationship(\n        \"UserAuth\",\n        backref=backref(conf.LABORATORY_CONTACT, uselist=False),\n        lazy=\"joined\",\n    )\n    groups = relationship(\n        \"Group\", secondary=user_groups, back_populates=\"members\", lazy=\"selectin\"",
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "Permission",
        "kind": 6,
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "peekOfCode": "class Permission(BaseEntity):\n    __tablename__ = \"permission\"\n    action = Column(String, nullable=False)  # e.g create, modify\n    target = Column(String, nullable=False)  # e.g sample, worksheet\n    active = Column(Boolean(), default=True)\n    @classmethod\n    async def create(cls, obj_in):\n        data = cls._import(obj_in)\n        return await super().create(**data)\n    async def update(self, obj_in):",
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "kind": 6,
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "peekOfCode": "class Group(BaseEntity):\n    __tablename__ = \"group\"\n    name = Column(String, unique=True, index=True, nullable=False)\n    keyword = Column(\n        String, unique=True, index=True, nullable=False, default=\"keyword_x\"\n    )\n    members = relationship(\n        \"User\", secondary=user_groups, back_populates=\"groups\", lazy=\"selectin\"\n    )\n    permissions = relationship(",
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "UserPreference",
        "kind": 6,
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "peekOfCode": "class UserPreference(BaseEntity):\n    \"\"\"Preferences for System Personalisation\"\"\"\n    __tablename__ = \"user_preference\"\n    expanded_menu = Column(Boolean(), default=False)\n    departments = relationship(\n        \"Department\", secondary=department_preference, lazy=\"selectin\"\n    )\n    theme = Column(String, default=conf.themes.LIGHT)  # dark, light\n    @classmethod\n    async def create(",
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# TODO: Refactor User to LaboratoryContact, UserAuth to ContactAuth\nclass UserAuth(AbstractAuth):\n    \"\"\"Authentication class user access\n    @param user_type is dynamically accessed and values are:\n    ccuser: client contacts\n    lcuser: laboratory contacts\n    dcuser: dispatch center contacts\n    \"\"\"\n    __tablename__ = \"user_auth\"",
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "user_groups",
        "kind": 5,
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "peekOfCode": "user_groups = Table(\n    \"user_groups\",\n    BaseEntity.metadata,\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n    Column(\"group_uid\", ForeignKey(\"group.uid\"), primary_key=True),\n)\n\"\"\"\nMany to Many Link between Group and Permission\n\"\"\"\npermission_groups = Table(",
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "permission_groups",
        "kind": 5,
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "peekOfCode": "permission_groups = Table(\n    \"permission_groups\",\n    BaseEntity.metadata,\n    Column(\"permission_uid\", ForeignKey(\"permission.uid\"), primary_key=True),\n    Column(\"group_uid\", ForeignKey(\"group.uid\"), primary_key=True),\n)\nclass User(AbstractBaseUser):\n    __tablename__ = \"user\"\n    auth_uid = Column(String, ForeignKey(\"user_auth.uid\"))\n    auth = relationship(",
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "department_preference",
        "kind": 5,
        "importPath": "felicity.apps.user.models",
        "description": "felicity.apps.user.models",
        "peekOfCode": "department_preference = Table(\n    \"department_preference\",\n    BaseEntity.metadata,\n    Column(\"department_uid\", ForeignKey(\"department.uid\"), primary_key=True),\n    Column(\"preference_uid\", ForeignKey(\"user_preference.uid\"), primary_key=True),\n)\nclass UserPreference(BaseEntity):\n    \"\"\"Preferences for System Personalisation\"\"\"\n    __tablename__ = \"user_preference\"\n    expanded_menu = Column(Boolean(), default=False)",
        "detail": "felicity.apps.user.models",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "kind": 6,
        "importPath": "felicity.apps.user.repository",
        "description": "felicity.apps.user.repository",
        "peekOfCode": "class UserRepository(BaseRepository[User], IUserRepository):\n    def __init__(self) -> None:\n        self.model = User\n        super().__init__()\n    async def paginate_with_cursors(\n        self,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,\n        text: str | None = None,",
        "detail": "felicity.apps.user.repository",
        "documentation": {}
    },
    {
        "label": "PermissionRepository",
        "kind": 6,
        "importPath": "felicity.apps.user.repository",
        "description": "felicity.apps.user.repository",
        "peekOfCode": "class PermissionRepository(BaseRepository[Permission], IPermissionRepository):\n    def __init__(self) -> None:\n        self.model = Permission\n        super().__init__()\nclass GroupRepository(BaseRepository[Group], IGroupRepository):\n    def __init__(self) -> None:\n        self.model = Group\n        super().__init__()",
        "detail": "felicity.apps.user.repository",
        "documentation": {}
    },
    {
        "label": "GroupRepository",
        "kind": 6,
        "importPath": "felicity.apps.user.repository",
        "description": "felicity.apps.user.repository",
        "peekOfCode": "class GroupRepository(BaseRepository[Group], IGroupRepository):\n    def __init__(self) -> None:\n        self.model = Group\n        super().__init__()",
        "detail": "felicity.apps.user.repository",
        "documentation": {}
    },
    {
        "label": "PermissionBase",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class PermissionBase(BaseModel):\n    action: str | None = None\n    target: str | None = None\n    active: bool = False\n# Properties to receive via API on creation\nclass PermissionCreate(PermissionBase):\n    pass\n# Properties to receive via API on update\nclass PermissionUpdate(PermissionBase):\n    uid: str | None = None",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "PermissionCreate",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class PermissionCreate(PermissionBase):\n    pass\n# Properties to receive via API on update\nclass PermissionUpdate(PermissionBase):\n    uid: str | None = None\nclass PermissionInDBBase(PermissionBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Permission(PermissionInDBBase):",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "PermissionUpdate",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class PermissionUpdate(PermissionBase):\n    uid: str | None = None\nclass PermissionInDBBase(PermissionBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Permission(PermissionInDBBase):\n    pass\n# Additional properties stored in DB\nclass PermissionInDB(PermissionInDBBase):",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "PermissionInDBBase",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class PermissionInDBBase(PermissionBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Permission(PermissionInDBBase):\n    pass\n# Additional properties stored in DB\nclass PermissionInDB(PermissionInDBBase):\n    pass\n#",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "Permission",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class Permission(PermissionInDBBase):\n    pass\n# Additional properties stored in DB\nclass PermissionInDB(PermissionInDBBase):\n    pass\n#\n#  Group Schema\n#\n# Shared properties\nclass GroupBase(BaseModel):",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "PermissionInDB",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class PermissionInDB(PermissionInDBBase):\n    pass\n#\n#  Group Schema\n#\n# Shared properties\nclass GroupBase(BaseModel):\n    name: str | None = None\n    keyword: str | None = None\n    permissions: Optional[List[Permission]] = None",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "GroupBase",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class GroupBase(BaseModel):\n    name: str | None = None\n    keyword: str | None = None\n    permissions: Optional[List[Permission]] = None\n    active: bool = False\n# Properties to receive via API on creation\nclass GroupCreate(GroupBase):\n    pass\n# Properties to receive via API on update\nclass GroupUpdate(GroupBase):",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "GroupCreate",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class GroupCreate(GroupBase):\n    pass\n# Properties to receive via API on update\nclass GroupUpdate(GroupBase):\n    uid: str | None = None\nclass GroupInDBBase(GroupBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Group(GroupInDBBase):",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "GroupUpdate",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class GroupUpdate(GroupBase):\n    uid: str | None = None\nclass GroupInDBBase(GroupBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Group(GroupInDBBase):\n    pass\n# Additional properties stored in DB\nclass GroupInDB(GroupInDBBase):",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "GroupInDBBase",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class GroupInDBBase(GroupBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Group(GroupInDBBase):\n    pass\n# Additional properties stored in DB\nclass GroupInDB(GroupInDBBase):\n    pass\n#",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "Group",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class Group(GroupInDBBase):\n    pass\n# Additional properties stored in DB\nclass GroupInDB(GroupInDBBase):\n    pass\n#\n#  User Preferences\n#\nclass UserPreferenceBase(BaseAuditModel):\n    expanded_menu: bool | None = False",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "GroupInDB",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class GroupInDB(GroupInDBBase):\n    pass\n#\n#  User Preferences\n#\nclass UserPreferenceBase(BaseAuditModel):\n    expanded_menu: bool | None = False\n    theme: str | None = themes.LIGHT\nclass UserPreference(UserPreferenceBase):\n    uid: str | None = None",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "UserPreferenceBase",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class UserPreferenceBase(BaseAuditModel):\n    expanded_menu: bool | None = False\n    theme: str | None = themes.LIGHT\nclass UserPreference(UserPreferenceBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass UserPreferenceCreate(UserPreferenceBase):\n    pass\nclass UserPreferenceUpdate(UserPreferenceBase):\n    pass",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "UserPreference",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class UserPreference(UserPreferenceBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass UserPreferenceCreate(UserPreferenceBase):\n    pass\nclass UserPreferenceUpdate(UserPreferenceBase):\n    pass\n#\n#  User Schema\n#",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "UserPreferenceCreate",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class UserPreferenceCreate(UserPreferenceBase):\n    pass\nclass UserPreferenceUpdate(UserPreferenceBase):\n    pass\n#\n#  User Schema\n#\n# Shared properties\nclass UserBasicBase(BaseModel):\n    first_name: str | None = None",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "UserPreferenceUpdate",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class UserPreferenceUpdate(UserPreferenceBase):\n    pass\n#\n#  User Schema\n#\n# Shared properties\nclass UserBasicBase(BaseModel):\n    first_name: str | None = None\n    last_name: str | None = None\n    user_name: str | None = None",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "UserBasicBase",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class UserBasicBase(BaseModel):\n    first_name: str | None = None\n    last_name: str | None = None\n    user_name: str | None = None\nclass UserBase(BaseModel):\n    email: Optional[EmailStr] = None\n    is_active: bool | None = True\n    is_superuser: bool = False\n    first_name: str | None = None\n    last_name: str | None = None",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "UserBase",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class UserBase(BaseModel):\n    email: Optional[EmailStr] = None\n    is_active: bool | None = True\n    is_superuser: bool = False\n    first_name: str | None = None\n    last_name: str | None = None\n    password: str | None = None\n    user_name: str | None = None\n    avatar: str | None = None\n    bio: str | None = None",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class UserCreate(UserBase):\n    pass\n# Properties to receive via API on update\nclass UserUpdate(UserBase):\n    auth_uid: str | None = None\n    preference_uid: str | None = None\nclass UserInDBBase(UserBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "UserUpdate",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class UserUpdate(UserBase):\n    auth_uid: str | None = None\n    preference_uid: str | None = None\nclass UserInDBBase(UserBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass UserBasic(UserBasicBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "UserInDBBase",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class UserInDBBase(UserBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass UserBasic(UserBasicBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass User(UserInDBBase):\n    pass",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "UserBasic",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class UserBasic(UserBasicBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass User(UserInDBBase):\n    pass\n# Additional properties stored in DB\nclass UserInDB(UserInDBBase):\n    pass\n#",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class User(UserInDBBase):\n    pass\n# Additional properties stored in DB\nclass UserInDB(UserInDBBase):\n    pass\n#\n#  Auth Schema\n#\n# Shared properties\nclass AuthBase(BaseModel):",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "UserInDB",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class UserInDB(UserInDBBase):\n    pass\n#\n#  Auth Schema\n#\n# Shared properties\nclass AuthBase(BaseModel):\n    user_name: str | None = None\n    password: str | None = None\n    login_retry: int | None = 0",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "AuthBase",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class AuthBase(BaseModel):\n    user_name: str | None = None\n    password: str | None = None\n    login_retry: int | None = 0\n    is_blocked: bool | None = False\n    user_type: str | None = None\n# Properties to receive via API on creation\nclass AuthCreate(AuthBase):\n    user_name: str\n    password: str",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "AuthCreate",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class AuthCreate(AuthBase):\n    user_name: str\n    password: str\n    login_retry: int = 0\n    is_blocked: bool = False\n# Properties to receive via API on update\nclass AuthUpdate(AuthBase):\n    pass\nclass AuthInDBBase(AuthBase):\n    uid: str | None = None",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "AuthUpdate",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class AuthUpdate(AuthBase):\n    pass\nclass AuthInDBBase(AuthBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Auth(AuthInDBBase):\n    pass\n# Additional properties stored in DB\nclass AuthInDB(AuthInDBBase):",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "AuthInDBBase",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class AuthInDBBase(AuthBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Auth(AuthInDBBase):\n    pass\n# Additional properties stored in DB\nclass AuthInDB(AuthInDBBase):\n    hashed_password: str",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "Auth",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class Auth(AuthInDBBase):\n    pass\n# Additional properties stored in DB\nclass AuthInDB(AuthInDBBase):\n    hashed_password: str",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "AuthInDB",
        "kind": 6,
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "peekOfCode": "class AuthInDB(AuthInDBBase):\n    hashed_password: str",
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "UserService",
        "kind": 6,
        "importPath": "felicity.apps.user.services",
        "description": "felicity.apps.user.services",
        "peekOfCode": "class UserService(BaseService[User], IUserService):\n    repository = None\n    user_preference_service = None\n    group_service = None\n    permission_service = None\n    def __init__(\n            self,\n            repository: IUserRepository,\n            group_service: IGroupService,\n            permission_service: IPermissionService,",
        "detail": "felicity.apps.user.services",
        "documentation": {}
    },
    {
        "label": "GroupService",
        "kind": 6,
        "importPath": "felicity.apps.user.services",
        "description": "felicity.apps.user.services",
        "peekOfCode": "class GroupService(BaseService[Group], IGroupService):\n    def __init__(\n            self, repository: IGroupRepository, permission_service: IPermissionService\n    ):\n        self.repository = repository\n        self.permission_service = permission_service\n        super().__init__(repository)\n    async def create(self, name: str, pages: str, active: bool = True) -> Group:\n        if not name:\n            raise ValidationError(\"Name Required\")",
        "detail": "felicity.apps.user.services",
        "documentation": {}
    },
    {
        "label": "PermissionService",
        "kind": 6,
        "importPath": "felicity.apps.user.services",
        "description": "felicity.apps.user.services",
        "peekOfCode": "class PermissionService(BaseService[Permission], IPermissionService):\n    ...",
        "detail": "felicity.apps.user.services",
        "documentation": {}
    },
    {
        "label": "WSTypes",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.conf",
        "description": "felicity.apps.worksheet.conf",
        "peekOfCode": "class WSTypes(object):\n    \"\"\"Worksheet Types\n    FLAT: Single Column, can be displayed as Multi Column when needed\n    GRID: Multi Column: Specific Rows and Columns\n    \"\"\"\n    FLAT = 0\n    GRID = 1\nworksheet_types = WSTypes()\nclass WSStates(object):\n    \"\"\"Worksheet Workflow States",
        "detail": "felicity.apps.worksheet.conf",
        "documentation": {}
    },
    {
        "label": "WSStates",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.conf",
        "description": "felicity.apps.worksheet.conf",
        "peekOfCode": "class WSStates(object):\n    \"\"\"Worksheet Workflow States\n    empty -> pending -> submitting -> awaiting -> approving -> approved\n    \"\"\"\n    EMPTY = \"empty\"  # worksheets without samples\n    PENDING = \"pending\"  # worksheets containing at least a single 'pending' analyte\n    SUBMITTING = \"submitting\"\n    AWAITING = \"awaiting\"  # worksheets whose analytes are results but not all approved/verified\n    APPROVING = \"approving\"\n    APPROVED = \"approved\"  # worksheets where all analytes are approved/verified",
        "detail": "felicity.apps.worksheet.conf",
        "documentation": {}
    },
    {
        "label": "worksheet_types",
        "kind": 5,
        "importPath": "felicity.apps.worksheet.conf",
        "description": "felicity.apps.worksheet.conf",
        "peekOfCode": "worksheet_types = WSTypes()\nclass WSStates(object):\n    \"\"\"Worksheet Workflow States\n    empty -> pending -> submitting -> awaiting -> approving -> approved\n    \"\"\"\n    EMPTY = \"empty\"  # worksheets without samples\n    PENDING = \"pending\"  # worksheets containing at least a single 'pending' analyte\n    SUBMITTING = \"submitting\"\n    AWAITING = \"awaiting\"  # worksheets whose analytes are results but not all approved/verified\n    APPROVING = \"approving\"",
        "detail": "felicity.apps.worksheet.conf",
        "documentation": {}
    },
    {
        "label": "worksheet_states",
        "kind": 5,
        "importPath": "felicity.apps.worksheet.conf",
        "description": "felicity.apps.worksheet.conf",
        "peekOfCode": "worksheet_states = WSStates()",
        "detail": "felicity.apps.worksheet.conf",
        "documentation": {}
    },
    {
        "label": "WSBase",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.entities",
        "description": "felicity.apps.worksheet.entities",
        "peekOfCode": "class WSBase(AuditUser):\n    __abstract__ = True\n    worksheet_type = Column(String)\n    reserved = Column(JSONB)\n    number_of_samples = Column(Integer)\n    rows = Column(Integer)\n    cols = Column(Integer)\n    row_wise = Column(Boolean(), default=False)\n    state = Column(String)\n\"\"\"",
        "detail": "felicity.apps.worksheet.entities",
        "documentation": {}
    },
    {
        "label": "WorkSheetTemplate",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.entities",
        "description": "felicity.apps.worksheet.entities",
        "peekOfCode": "class WorkSheetTemplate(WSBase):\n    \"\"\"WorkSheetTemplate\n    a template has a single analyses associated in order to avoid\n    cases where multi analyses can be assigned to a single ws\n    \"\"\"\n    __tablename__ = \"worksheet_template\"\n    name = Column(String, unique=True, nullable=False)\n    description = Column(String)\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    analysis = relationship(analysis_models.Analysis, lazy=\"selectin\")",
        "detail": "felicity.apps.worksheet.entities",
        "documentation": {}
    },
    {
        "label": "WorkSheet",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.entities",
        "description": "felicity.apps.worksheet.entities",
        "peekOfCode": "class WorkSheet(AuditHistory, WSBase):\n    __tablename__ = \"worksheet\"\n    template_uid = Column(String, ForeignKey(\"worksheet_template.uid\"), nullable=False)\n    template = relationship(\"WorkSheetTemplate\", lazy=\"selectin\")\n    analyst_uid = Column(String, ForeignKey(\"user.uid\"), nullable=False)\n    analyst = relationship(User, foreign_keys=[analyst_uid], lazy=\"selectin\")\n    worksheet_id = Column(String, index=True, unique=True, nullable=False)\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    analysis = relationship(analysis_models.Analysis, lazy=\"selectin\")\n    instrument_uid = Column(String, ForeignKey(\"instrument.uid\"), nullable=True)",
        "detail": "felicity.apps.worksheet.entities",
        "documentation": {}
    },
    {
        "label": "worksheet_template_qc_level",
        "kind": 5,
        "importPath": "felicity.apps.worksheet.entities",
        "description": "felicity.apps.worksheet.entities",
        "peekOfCode": "worksheet_template_qc_level = Table(\n    \"worksheet_template_qc_level\",\n    BaseEntity.metadata,\n    Column(\"ws_template_uid\", ForeignKey(\"worksheet_template.uid\"), primary_key=True),\n    Column(\"qc_level_uid\", ForeignKey(\"qc_level.uid\"), primary_key=True),\n)\nclass WorkSheetTemplate(WSBase):\n    \"\"\"WorkSheetTemplate\n    a template has a single analyses associated in order to avoid\n    cases where multi analyses can be assigned to a single ws",
        "detail": "felicity.apps.worksheet.entities",
        "documentation": {}
    },
    {
        "label": "WSBase",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.models",
        "description": "felicity.apps.worksheet.models",
        "peekOfCode": "class WSBase(AuditUser):\n    __abstract__ = True\n    worksheet_type = Column(String)\n    reserved = Column(JSONB)\n    number_of_samples = Column(Integer)\n    rows = Column(Integer)\n    cols = Column(Integer)\n    row_wise = Column(Boolean(), default=False)\n    state = Column(String)\n\"\"\"",
        "detail": "felicity.apps.worksheet.models",
        "documentation": {}
    },
    {
        "label": "WorkSheetTemplate",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.models",
        "description": "felicity.apps.worksheet.models",
        "peekOfCode": "class WorkSheetTemplate(WSBase):\n    \"\"\"WorkSheetTemplate\n    a template has a single analyses associated in order to avoid\n    cases where multi analyses can be assigned to a single ws\n    \"\"\"\n    __tablename__ = \"worksheet_template\"\n    name = Column(String, unique=True, nullable=False)\n    description = Column(String)\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    analysis = relationship(analysis_models.Analysis, lazy=\"selectin\")",
        "detail": "felicity.apps.worksheet.models",
        "documentation": {}
    },
    {
        "label": "WorkSheet",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.models",
        "description": "felicity.apps.worksheet.models",
        "peekOfCode": "class WorkSheet(AuditHistory, WSBase):\n    __tablename__ = \"worksheet\"\n    template_uid = Column(String, ForeignKey(\"worksheet_template.uid\"), nullable=False)\n    template = relationship(\"WorkSheetTemplate\", lazy=\"selectin\")\n    analyst_uid = Column(String, ForeignKey(\"user.uid\"), nullable=False)\n    analyst = relationship(User, foreign_keys=[analyst_uid], lazy=\"selectin\")\n    worksheet_id = Column(String, index=True, unique=True, nullable=False)\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    analysis = relationship(analysis_models.Analysis, lazy=\"selectin\")\n    instrument_uid = Column(String, ForeignKey(\"instrument.uid\"), nullable=True)",
        "detail": "felicity.apps.worksheet.models",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.worksheet.models",
        "description": "felicity.apps.worksheet.models",
        "peekOfCode": "logger = logging.getLogger(__name__)\nstreamer = FelicityStreamer()\nclass WSBase(AuditUser):\n    __abstract__ = True\n    worksheet_type = Column(String)\n    reserved = Column(JSONB)\n    number_of_samples = Column(Integer)\n    rows = Column(Integer)\n    cols = Column(Integer)\n    row_wise = Column(Boolean(), default=False)",
        "detail": "felicity.apps.worksheet.models",
        "documentation": {}
    },
    {
        "label": "streamer",
        "kind": 5,
        "importPath": "felicity.apps.worksheet.models",
        "description": "felicity.apps.worksheet.models",
        "peekOfCode": "streamer = FelicityStreamer()\nclass WSBase(AuditUser):\n    __abstract__ = True\n    worksheet_type = Column(String)\n    reserved = Column(JSONB)\n    number_of_samples = Column(Integer)\n    rows = Column(Integer)\n    cols = Column(Integer)\n    row_wise = Column(Boolean(), default=False)\n    state = Column(String)",
        "detail": "felicity.apps.worksheet.models",
        "documentation": {}
    },
    {
        "label": "worksheet_template_qc_level",
        "kind": 5,
        "importPath": "felicity.apps.worksheet.models",
        "description": "felicity.apps.worksheet.models",
        "peekOfCode": "worksheet_template_qc_level = Table(\n    \"worksheet_template_qc_level\",\n    BaseEntity.metadata,\n    Column(\"ws_template_uid\", ForeignKey(\"worksheet_template.uid\"), primary_key=True),\n    Column(\"qc_level_uid\", ForeignKey(\"qc_level.uid\"), primary_key=True),\n)\nclass WorkSheetTemplate(WSBase):\n    \"\"\"WorkSheetTemplate\n    a template has a single analyses associated in order to avoid\n    cases where multi analyses can be assigned to a single ws",
        "detail": "felicity.apps.worksheet.models",
        "documentation": {}
    },
    {
        "label": "WorkSheetRepository",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.repository",
        "description": "felicity.apps.worksheet.repository",
        "peekOfCode": "class WorkSheetRepository(BaseRepository[WorkSheet], IWorkSheetRepository):\n    def __init__(self) -> None:\n        self.model = WorkSheet\n        super().__init__()\n    async def paginate_with_cursors(\n        self,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,\n        text: str | None = None,",
        "detail": "felicity.apps.worksheet.repository",
        "documentation": {}
    },
    {
        "label": "WorkSheetTemplateRepository",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.repository",
        "description": "felicity.apps.worksheet.repository",
        "peekOfCode": "class WorkSheetTemplateRepository(\n    BaseRepository[WorkSheetTemplate], IWorkSheetTemplateRepository\n):\n    def __init__(self) -> None:\n        self.model = WorkSheetTemplate\n        super().__init__()",
        "detail": "felicity.apps.worksheet.repository",
        "documentation": {}
    },
    {
        "label": "WorkSheetBase",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.schemas",
        "description": "felicity.apps.worksheet.schemas",
        "peekOfCode": "class WorkSheetBase(BaseModel):\n    analyst_uid: str | None = None\n    template_uid: str | None = None\n    worksheet_id: str | None = None\n    instrument_uid: str | None = None\n    sample_type_uid: str | None = None\n    analysis_uid: str | None = None\n    analysis: Optional[AnalysisBaseInDB] = None\n    reserved: Optional[dict] = None\n    number_of_samples: int | None = None",
        "detail": "felicity.apps.worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WorkSheetBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.schemas",
        "description": "felicity.apps.worksheet.schemas",
        "peekOfCode": "class WorkSheetBaseInDB(WorkSheetBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass WorkSheetCreate(WorkSheetBase):\n    pass\n# Properties to receive via API on update\nclass WorkSheetUpdate(WorkSheetBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WorkSheetCreate",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.schemas",
        "description": "felicity.apps.worksheet.schemas",
        "peekOfCode": "class WorkSheetCreate(WorkSheetBase):\n    pass\n# Properties to receive via API on update\nclass WorkSheetUpdate(WorkSheetBase):\n    pass\n# Properties to return via API\nclass WorkSheet(WorkSheetBaseInDB):\n    pass\n# Properties stored in DB\nclass WorkSheetInDB(WorkSheetBaseInDB):",
        "detail": "felicity.apps.worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WorkSheetUpdate",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.schemas",
        "description": "felicity.apps.worksheet.schemas",
        "peekOfCode": "class WorkSheetUpdate(WorkSheetBase):\n    pass\n# Properties to return via API\nclass WorkSheet(WorkSheetBaseInDB):\n    pass\n# Properties stored in DB\nclass WorkSheetInDB(WorkSheetBaseInDB):\n    pass\n#\n# WSTemplate Schemas",
        "detail": "felicity.apps.worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WorkSheet",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.schemas",
        "description": "felicity.apps.worksheet.schemas",
        "peekOfCode": "class WorkSheet(WorkSheetBaseInDB):\n    pass\n# Properties stored in DB\nclass WorkSheetInDB(WorkSheetBaseInDB):\n    pass\n#\n# WSTemplate Schemas\n#\n# Shared properties\nclass WSTemplateBase(BaseModel):",
        "detail": "felicity.apps.worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WorkSheetInDB",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.schemas",
        "description": "felicity.apps.worksheet.schemas",
        "peekOfCode": "class WorkSheetInDB(WorkSheetBaseInDB):\n    pass\n#\n# WSTemplate Schemas\n#\n# Shared properties\nclass WSTemplateBase(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    instrument_uid: str | None = None",
        "detail": "felicity.apps.worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WSTemplateBase",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.schemas",
        "description": "felicity.apps.worksheet.schemas",
        "peekOfCode": "class WSTemplateBase(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    instrument_uid: str | None = None\n    sample_type_uid: str | None = None\n    analysis_uid: str | None = None\n    analysis: Optional[AnalysisBaseInDB] = None\n    qc_analyses: Optional[List[AnalysisBaseInDB]] = []\n    qc_levels: Optional[List[QCLevelInDB]] = []\n    reserved: Optional[dict] = None",
        "detail": "felicity.apps.worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WSTemplateBaseInDB",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.schemas",
        "description": "felicity.apps.worksheet.schemas",
        "peekOfCode": "class WSTemplateBaseInDB(WSTemplateBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass WSTemplateCreate(WSTemplateBase):\n    pass\n# Properties to receive via API on update\nclass WSTemplateUpdate(WSTemplateBase):\n    pass\n# Properties to return via API",
        "detail": "felicity.apps.worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WSTemplateCreate",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.schemas",
        "description": "felicity.apps.worksheet.schemas",
        "peekOfCode": "class WSTemplateCreate(WSTemplateBase):\n    pass\n# Properties to receive via API on update\nclass WSTemplateUpdate(WSTemplateBase):\n    pass\n# Properties to return via API\nclass WSTemplate(WSTemplateBaseInDB):\n    pass\n# Properties stored in DB\nclass WSTemplateInDB(WSTemplateBaseInDB):",
        "detail": "felicity.apps.worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WSTemplateUpdate",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.schemas",
        "description": "felicity.apps.worksheet.schemas",
        "peekOfCode": "class WSTemplateUpdate(WSTemplateBase):\n    pass\n# Properties to return via API\nclass WSTemplate(WSTemplateBaseInDB):\n    pass\n# Properties stored in DB\nclass WSTemplateInDB(WSTemplateBaseInDB):\n    pass",
        "detail": "felicity.apps.worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WSTemplate",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.schemas",
        "description": "felicity.apps.worksheet.schemas",
        "peekOfCode": "class WSTemplate(WSTemplateBaseInDB):\n    pass\n# Properties stored in DB\nclass WSTemplateInDB(WSTemplateBaseInDB):\n    pass",
        "detail": "felicity.apps.worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WSTemplateInDB",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.schemas",
        "description": "felicity.apps.worksheet.schemas",
        "peekOfCode": "class WSTemplateInDB(WSTemplateBaseInDB):\n    pass",
        "detail": "felicity.apps.worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WorkSheetService",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.services",
        "description": "felicity.apps.worksheet.services",
        "peekOfCode": "class WorkSheetService(BaseService[WorkSheet], IWorkSheetService):\n    def __init__(\n        self,\n        repository: IWorkSheetRepository,\n        analysis_result_service: IAnalysisResultService,\n        sample_service: ISampleService,\n        template_service: IWorkSheetTemplateService,\n        id_service: IIdSequenceService,\n        job_service: IJobService,\n        qc_set_service: IQCSetService,",
        "detail": "felicity.apps.worksheet.services",
        "documentation": {}
    },
    {
        "label": "WorkSheetTemplateService",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.services",
        "description": "felicity.apps.worksheet.services",
        "peekOfCode": "class WorkSheetTemplateService(BaseService[WSTemplate], IWorkSheetTemplateService):\n    def __init__(\n        self,\n        repository: IWorkSheetTemplateRepository,\n        sample_type_service: ISampleTypeService,\n        qc_template_service: IQCTemplateService,\n        qc_level_service: IQCLevelService,\n    ):\n        self.repository = repository\n        self.sample_type_service = sample_type_service",
        "detail": "felicity.apps.worksheet.services",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.worksheet.services",
        "description": "felicity.apps.worksheet.services",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass WorkSheetService(BaseService[WorkSheet], IWorkSheetService):\n    def __init__(\n        self,\n        repository: IWorkSheetRepository,\n        analysis_result_service: IAnalysisResultService,\n        sample_service: ISampleService,\n        template_service: IWorkSheetTemplateService,\n        id_service: IIdSequenceService,\n        job_service: IJobService,",
        "detail": "felicity.apps.worksheet.services",
        "documentation": {}
    },
    {
        "label": "run_ws_jobs",
        "kind": 2,
        "importPath": "felicity.apps.worksheet.tasks",
        "description": "felicity.apps.worksheet.tasks",
        "peekOfCode": "def run_ws_jobs():\n    pass\ndef get_sample_position(reserved, level_uid) -> int:\n    if not reserved:\n        return 0\n    matching_keys = [\n        k for k, v in reserved.items() if v.get(\"level_uid\", 0) == level_uid\n    ]\n    return int(matching_keys[0]) if matching_keys else 0\nasync def setup_ws_quality_control(ws: models.WorkSheet):",
        "detail": "felicity.apps.worksheet.tasks",
        "documentation": {}
    },
    {
        "label": "get_sample_position",
        "kind": 2,
        "importPath": "felicity.apps.worksheet.tasks",
        "description": "felicity.apps.worksheet.tasks",
        "peekOfCode": "def get_sample_position(reserved, level_uid) -> int:\n    if not reserved:\n        return 0\n    matching_keys = [\n        k for k, v in reserved.items() if v.get(\"level_uid\", 0) == level_uid\n    ]\n    return int(matching_keys[0]) if matching_keys else 0\nasync def setup_ws_quality_control(ws: models.WorkSheet):\n    reserved_pos = ws.reserved\n    if ws.template.qc_levels:",
        "detail": "felicity.apps.worksheet.tasks",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.apps.worksheet.tasks",
        "description": "felicity.apps.worksheet.tasks",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def populate_worksheet_plate(job_uid: str):\n    logger.info(f\"starting job {job_uid} ....\")\n    job = await job_models.Job.get(uid=job_uid)\n    if not job:\n        return\n    if not job.status == job_states.PENDING:\n        return\n    await job.change_status(new_status=job_states.RUNNING)\n    ws_uid = job.job_id",
        "detail": "felicity.apps.worksheet.tasks",
        "documentation": {}
    },
    {
        "label": "WorkSheetPlater",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.utils",
        "description": "felicity.apps.worksheet.utils",
        "peekOfCode": "class WorkSheetPlater:\n    \"\"\"\n     Deprecated\n     WorkSheet Plate Filler / WorkSheetTemplate creator\n     100% Grid Compatible\n        A    B    C\n     ---------------------------\n    1 | A1 | B1 | C1 | ...\n       --   --   --\n    2 | A2 | B2 | C2 | ...",
        "detail": "felicity.apps.worksheet.utils",
        "documentation": {}
    },
    {
        "label": "add_samples",
        "kind": 2,
        "importPath": "felicity.apps.worksheet.utils",
        "description": "felicity.apps.worksheet.utils",
        "peekOfCode": "def add_samples(template: dict, samples, reserved: list):\n    temp = copy.deepcopy(template)\n    # sort samples by uid or sample_id\n    sorted_samples = samples.sort()\n    for c, val in enumerate(sorted_samples):\n        if c not in reserved:\n            temp[c] = val\n    return temp\ndef create_plate_template(uid: str, model: str):\n    item_model = None",
        "detail": "felicity.apps.worksheet.utils",
        "documentation": {}
    },
    {
        "label": "create_plate_template",
        "kind": 2,
        "importPath": "felicity.apps.worksheet.utils",
        "description": "felicity.apps.worksheet.utils",
        "peekOfCode": "def create_plate_template(uid: str, model: str):\n    item_model = None\n    if model == \"wst\":\n        item_model = models.WorkSheetTemplate.get(uid=uid)\n    if model == \"ws\":\n        item_model = models.WorkSheet.get(uid=uid)\n    # get plate_template values\n    plate_values = item_model.plate_values()\n    # create a template\n    factory = WorkSheetPlater(**plate_values)",
        "detail": "felicity.apps.worksheet.utils",
        "documentation": {}
    },
    {
        "label": "WorksheetWorkFlowException",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.workflow",
        "description": "felicity.apps.worksheet.workflow",
        "peekOfCode": "class WorksheetWorkFlowException(Exception):\n    ...\nclass WorksheetWorkFlow:\n    \"\"\"WorksheetWorkFlow\n    Defines a set of guards that allow or prevent actions taken on Worksheet\n    \"\"\"\n    def __init__(self):\n        ...\n    @classmethod\n    async def submit(cls, uid, submitter):",
        "detail": "felicity.apps.worksheet.workflow",
        "documentation": {}
    },
    {
        "label": "WorksheetWorkFlow",
        "kind": 6,
        "importPath": "felicity.apps.worksheet.workflow",
        "description": "felicity.apps.worksheet.workflow",
        "peekOfCode": "class WorksheetWorkFlow:\n    \"\"\"WorksheetWorkFlow\n    Defines a set of guards that allow or prevent actions taken on Worksheet\n    \"\"\"\n    def __init__(self):\n        ...\n    @classmethod\n    async def submit(cls, uid, submitter):\n        worksheet = await WorkSheet.get(uid=uid)\n        await cls._guard_submit(worksheet)",
        "detail": "felicity.apps.worksheet.workflow",
        "documentation": {}
    },
    {
        "label": "observe_events",
        "kind": 2,
        "importPath": "felicity.apps.events",
        "description": "felicity.apps.events",
        "peekOfCode": "def observe_events():\n    init_user_events()",
        "detail": "felicity.apps.events",
        "documentation": {}
    },
    {
        "label": "NotFoundError",
        "kind": 6,
        "importPath": "felicity.apps.exceptions",
        "description": "felicity.apps.exceptions",
        "peekOfCode": "class NotFoundError(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)\nclass AlreadyExistsError(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)\nclass NotAllowedError(Exception):\n    def __init__(self, message):",
        "detail": "felicity.apps.exceptions",
        "documentation": {}
    },
    {
        "label": "AlreadyExistsError",
        "kind": 6,
        "importPath": "felicity.apps.exceptions",
        "description": "felicity.apps.exceptions",
        "peekOfCode": "class AlreadyExistsError(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)\nclass NotAllowedError(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)\nclass GenericError(Exception):\n    def __init__(self, message):",
        "detail": "felicity.apps.exceptions",
        "documentation": {}
    },
    {
        "label": "NotAllowedError",
        "kind": 6,
        "importPath": "felicity.apps.exceptions",
        "description": "felicity.apps.exceptions",
        "peekOfCode": "class NotAllowedError(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)\nclass GenericError(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)\nclass MissingDataError(Exception):\n    def __init__(self, message):",
        "detail": "felicity.apps.exceptions",
        "documentation": {}
    },
    {
        "label": "GenericError",
        "kind": 6,
        "importPath": "felicity.apps.exceptions",
        "description": "felicity.apps.exceptions",
        "peekOfCode": "class GenericError(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)\nclass MissingDataError(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)\nclass ValidationError(Exception):\n    def __init__(self, message):",
        "detail": "felicity.apps.exceptions",
        "documentation": {}
    },
    {
        "label": "MissingDataError",
        "kind": 6,
        "importPath": "felicity.apps.exceptions",
        "description": "felicity.apps.exceptions",
        "peekOfCode": "class MissingDataError(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)\nclass ValidationError(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)",
        "detail": "felicity.apps.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "kind": 6,
        "importPath": "felicity.apps.exceptions",
        "description": "felicity.apps.exceptions",
        "peekOfCode": "class ValidationError(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)",
        "detail": "felicity.apps.exceptions",
        "documentation": {}
    },
    {
        "label": "Snowflake",
        "kind": 6,
        "importPath": "felicity.core.uid_gen.snow_flake",
        "description": "felicity.core.uid_gen.snow_flake",
        "peekOfCode": "class Snowflake:\n    \"\"\"\n    Snowflake.\n    Attributes\n    ----------\n    snowflake : int\n        an existing snowflake to parse\n    process_id : int\n        the process_id ( for multi-processing ), max value is 63\n    \"\"\"",
        "detail": "felicity.core.uid_gen.snow_flake",
        "documentation": {}
    },
    {
        "label": "SonyFlake",
        "kind": 6,
        "importPath": "felicity.core.uid_gen.sony_flake",
        "description": "felicity.core.uid_gen.sony_flake",
        "peekOfCode": "class SonyFlake:\n    \"\"\"\n    The distributed unique ID generator.\n    \"\"\"\n    _start_time: int\n    _machine_id: int\n    def __new__(\n        cls,\n        start_time: datetime.datetime | None = None,\n        machine_id: Callable[[], int] | None = None,",
        "detail": "felicity.core.uid_gen.sony_flake",
        "documentation": {}
    },
    {
        "label": "lower_16bit_private_ip",
        "kind": 2,
        "importPath": "felicity.core.uid_gen.sony_flake",
        "description": "felicity.core.uid_gen.sony_flake",
        "peekOfCode": "def lower_16bit_private_ip() -> int:\n    \"\"\"\n    Returns the lower 16 bits of the private IP address.\n    you can also use uui.getnode() to get machine_id\n    \"\"\"\n    ip: ipaddress.IPv4Address = ipaddress.ip_address(gethostbyname(gethostname()))\n    ip_bytes = ip.packed\n    return (ip_bytes[2] << 8) + ip_bytes[3]\nclass SonyFlake:\n    \"\"\"",
        "detail": "felicity.core.uid_gen.sony_flake",
        "documentation": {}
    },
    {
        "label": "BIT_LEN_TIME",
        "kind": 5,
        "importPath": "felicity.core.uid_gen.sony_flake",
        "description": "felicity.core.uid_gen.sony_flake",
        "peekOfCode": "BIT_LEN_TIME = 39\nBIT_LEN_SEQUENCE = 8\nBIT_LEN_MACHINE_ID = 63 - (BIT_LEN_TIME + BIT_LEN_SEQUENCE)\nUTC = datetime.timezone.utc\nSONYFLAKE_EPOCH = datetime.datetime(2023, 1, 1, 0, 0, 0, tzinfo=UTC)\ndef lower_16bit_private_ip() -> int:\n    \"\"\"\n    Returns the lower 16 bits of the private IP address.\n    you can also use uui.getnode() to get machine_id\n    \"\"\"",
        "detail": "felicity.core.uid_gen.sony_flake",
        "documentation": {}
    },
    {
        "label": "BIT_LEN_SEQUENCE",
        "kind": 5,
        "importPath": "felicity.core.uid_gen.sony_flake",
        "description": "felicity.core.uid_gen.sony_flake",
        "peekOfCode": "BIT_LEN_SEQUENCE = 8\nBIT_LEN_MACHINE_ID = 63 - (BIT_LEN_TIME + BIT_LEN_SEQUENCE)\nUTC = datetime.timezone.utc\nSONYFLAKE_EPOCH = datetime.datetime(2023, 1, 1, 0, 0, 0, tzinfo=UTC)\ndef lower_16bit_private_ip() -> int:\n    \"\"\"\n    Returns the lower 16 bits of the private IP address.\n    you can also use uui.getnode() to get machine_id\n    \"\"\"\n    ip: ipaddress.IPv4Address = ipaddress.ip_address(gethostbyname(gethostname()))",
        "detail": "felicity.core.uid_gen.sony_flake",
        "documentation": {}
    },
    {
        "label": "BIT_LEN_MACHINE_ID",
        "kind": 5,
        "importPath": "felicity.core.uid_gen.sony_flake",
        "description": "felicity.core.uid_gen.sony_flake",
        "peekOfCode": "BIT_LEN_MACHINE_ID = 63 - (BIT_LEN_TIME + BIT_LEN_SEQUENCE)\nUTC = datetime.timezone.utc\nSONYFLAKE_EPOCH = datetime.datetime(2023, 1, 1, 0, 0, 0, tzinfo=UTC)\ndef lower_16bit_private_ip() -> int:\n    \"\"\"\n    Returns the lower 16 bits of the private IP address.\n    you can also use uui.getnode() to get machine_id\n    \"\"\"\n    ip: ipaddress.IPv4Address = ipaddress.ip_address(gethostbyname(gethostname()))\n    ip_bytes = ip.packed",
        "detail": "felicity.core.uid_gen.sony_flake",
        "documentation": {}
    },
    {
        "label": "UTC",
        "kind": 5,
        "importPath": "felicity.core.uid_gen.sony_flake",
        "description": "felicity.core.uid_gen.sony_flake",
        "peekOfCode": "UTC = datetime.timezone.utc\nSONYFLAKE_EPOCH = datetime.datetime(2023, 1, 1, 0, 0, 0, tzinfo=UTC)\ndef lower_16bit_private_ip() -> int:\n    \"\"\"\n    Returns the lower 16 bits of the private IP address.\n    you can also use uui.getnode() to get machine_id\n    \"\"\"\n    ip: ipaddress.IPv4Address = ipaddress.ip_address(gethostbyname(gethostname()))\n    ip_bytes = ip.packed\n    return (ip_bytes[2] << 8) + ip_bytes[3]",
        "detail": "felicity.core.uid_gen.sony_flake",
        "documentation": {}
    },
    {
        "label": "SONYFLAKE_EPOCH",
        "kind": 5,
        "importPath": "felicity.core.uid_gen.sony_flake",
        "description": "felicity.core.uid_gen.sony_flake",
        "peekOfCode": "SONYFLAKE_EPOCH = datetime.datetime(2023, 1, 1, 0, 0, 0, tzinfo=UTC)\ndef lower_16bit_private_ip() -> int:\n    \"\"\"\n    Returns the lower 16 bits of the private IP address.\n    you can also use uui.getnode() to get machine_id\n    \"\"\"\n    ip: ipaddress.IPv4Address = ipaddress.ip_address(gethostbyname(gethostname()))\n    ip_bytes = ip.packed\n    return (ip_bytes[2] << 8) + ip_bytes[3]\nclass SonyFlake:",
        "detail": "felicity.core.uid_gen.sony_flake",
        "documentation": {}
    },
    {
        "label": "celery_app",
        "kind": 5,
        "importPath": "felicity.core.celery_app",
        "description": "felicity.core.celery_app",
        "peekOfCode": "celery_app = Celery(\"worker\", broker=\"amqp://guest@queue//\")\ncelery_app.conf.task_routes = {\"app.worker.test_celery\": \"main-queue\"}",
        "detail": "felicity.core.celery_app",
        "documentation": {}
    },
    {
        "label": "celery_app.conf.task_routes",
        "kind": 5,
        "importPath": "felicity.core.celery_app",
        "description": "felicity.core.celery_app",
        "peekOfCode": "celery_app.conf.task_routes = {\"app.worker.test_celery\": \"main-queue\"}",
        "detail": "felicity.core.celery_app",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "peekOfCode": "class Settings(BaseSettings):\n    BASE_DIR: str = BASE_DIR\n    SEEDS_DIR: str = os.path.abspath(os.path.join(BASE_DIR, \"lims\", \"seeds\", \"data\")) \n    STATIC_DIR: str = os.path.join(BASE_DIR, \"static\")\n    API_V1_STR: str = \"/api/v1\"\n    ALGORITHM: str = \"HS256\"\n    # secrets.token_urlsafe(32)\n    SECRET_KEY: str = \"Eoy7XAjJWnr6PcgFi0FK37XbjXEfx2PdFV8GFbucReDbWiew8T79ob3ZIF3bgYi62THktkoTNdC1SrFyd_k4xQ\"\n    REFRESH_SECRET_KEY: str = \"KKj6HeSWwizXDnzc1SS_e-PYn3EwA4XuotoOD3J0mvmu1PLdVzbDkAeThJDTQsgYHVgYwbV5PnSbo_ZJZHEMEg\"\n    ACCESS_TOKEN_EXPIRE_MINUTES: int = 60 * 4 * 1  # 4 hours",
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "kind": 2,
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "peekOfCode": "def get_settings():\n    return Settings()\nsettings = get_settings()",
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "peekOfCode": "settings = get_settings()",
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "get_time_now",
        "kind": 2,
        "importPath": "felicity.core.dtz",
        "description": "felicity.core.dtz",
        "peekOfCode": "def get_time_now(str_format=True) -> str | datetime:\n    if settings.TIMEZONE_AWARE:\n        now = datetime.now(settings.TIMEZONE)\n    else:\n        now = datetime.now()\n    str_time = now.strftime(settings.DATETIME_STR_FORMAT)\n    if str_format:\n        return str_time\n    return datetime.strptime(str_time, settings.DATETIME_STR_FORMAT)\ndef to_datetime(date_value: str) -> datetime:",
        "detail": "felicity.core.dtz",
        "documentation": {}
    },
    {
        "label": "to_datetime",
        "kind": 2,
        "importPath": "felicity.core.dtz",
        "description": "felicity.core.dtz",
        "peekOfCode": "def to_datetime(date_value: str) -> datetime:\n    return parser.parse(date_value)\ndef datetime_math(date_val: str | datetime, days: int, addition=True) -> datetime:\n    if isinstance(date_val, str):\n        date_val: datetime = to_datetime(date_val)\n    if addition:\n        return date_val + timedelta(days=days)  # noqa\n    else:\n        return date_val - timedelta(days=days)  # noqa\ndef format_datetime(",
        "detail": "felicity.core.dtz",
        "documentation": {}
    },
    {
        "label": "datetime_math",
        "kind": 2,
        "importPath": "felicity.core.dtz",
        "description": "felicity.core.dtz",
        "peekOfCode": "def datetime_math(date_val: str | datetime, days: int, addition=True) -> datetime:\n    if isinstance(date_val, str):\n        date_val: datetime = to_datetime(date_val)\n    if addition:\n        return date_val + timedelta(days=days)  # noqa\n    else:\n        return date_val - timedelta(days=days)  # noqa\ndef format_datetime(\n    dat_value: str | datetime, human_format=False, with_time=True\n) -> str:",
        "detail": "felicity.core.dtz",
        "documentation": {}
    },
    {
        "label": "format_datetime",
        "kind": 2,
        "importPath": "felicity.core.dtz",
        "description": "felicity.core.dtz",
        "peekOfCode": "def format_datetime(\n    dat_value: str | datetime, human_format=False, with_time=True\n) -> str:\n    if human_format:\n        if with_time:\n            _format = settings.DATETIME_HUMAN_FORMAT\n        else:\n            _format = settings.DATE_HUMAN_FORMAT\n    else:\n        if with_time:",
        "detail": "felicity.core.dtz",
        "documentation": {}
    },
    {
        "label": "make_tz_aware",
        "kind": 2,
        "importPath": "felicity.core.dtz",
        "description": "felicity.core.dtz",
        "peekOfCode": "def make_tz_aware(unaware: str | datetime):\n    if isinstance(unaware, datetime):\n        return unaware.replace(tzinfo=settings.TIMEZONE)\n    return datetime.strptime(unaware, settings.DATETIME_STR_FORMAT).replace(\n        tzinfo=settings.TIMEZONE\n    )",
        "detail": "felicity.core.dtz",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "felicity.core.dtz",
        "description": "felicity.core.dtz",
        "peekOfCode": "settings = get_settings()\ndef get_time_now(str_format=True) -> str | datetime:\n    if settings.TIMEZONE_AWARE:\n        now = datetime.now(settings.TIMEZONE)\n    else:\n        now = datetime.now()\n    str_time = now.strftime(settings.DATETIME_STR_FORMAT)\n    if str_format:\n        return str_time\n    return datetime.strptime(str_time, settings.DATETIME_STR_FORMAT)",
        "detail": "felicity.core.dtz",
        "documentation": {}
    },
    {
        "label": "subscribe",
        "kind": 2,
        "importPath": "felicity.core.events",
        "description": "felicity.core.events",
        "peekOfCode": "def subscribe(event_type: str, fn: Callable):\n    if event_type not in subscribers:\n        subscribers[event_type] = []\n    subscribers[event_type].append(fn)\ndef post_event(event_type: str, **kwargs):\n    if event_type not in subscribers:\n        return\n    for fn in subscribers[event_type]:\n        fn(**kwargs)",
        "detail": "felicity.core.events",
        "documentation": {}
    },
    {
        "label": "post_event",
        "kind": 2,
        "importPath": "felicity.core.events",
        "description": "felicity.core.events",
        "peekOfCode": "def post_event(event_type: str, **kwargs):\n    if event_type not in subscribers:\n        return\n    for fn in subscribers[event_type]:\n        fn(**kwargs)",
        "detail": "felicity.core.events",
        "documentation": {}
    },
    {
        "label": "subscribers",
        "kind": 5,
        "importPath": "felicity.core.events",
        "description": "felicity.core.events",
        "peekOfCode": "subscribers = dict()\ndef subscribe(event_type: str, fn: Callable):\n    if event_type not in subscribers:\n        subscribers[event_type] = []\n    subscribers[event_type].append(fn)\ndef post_event(event_type: str, **kwargs):\n    if event_type not in subscribers:\n        return\n    for fn in subscribers[event_type]:\n        fn(**kwargs)",
        "detail": "felicity.core.events",
        "documentation": {}
    },
    {
        "label": "repeat_every",
        "kind": 2,
        "importPath": "felicity.core.repeater",
        "description": "felicity.core.repeater",
        "peekOfCode": "def repeat_every(\n    *,\n    seconds: float,\n    wait_first: bool = False,\n    logger: Optional[logging.Logger] = None,\n    raise_exceptions: bool = False,\n    max_repetitions: int | None = None,\n) -> NoArgsNoReturnDecorator:\n    \"\"\"\n    This function returns a decorator that modifies a function so it is periodically re-executed after its first call.",
        "detail": "felicity.core.repeater",
        "documentation": {}
    },
    {
        "label": "NoArgsNoReturnFuncT",
        "kind": 5,
        "importPath": "felicity.core.repeater",
        "description": "felicity.core.repeater",
        "peekOfCode": "NoArgsNoReturnFuncT = Callable[[], None]\nNoArgsNoReturnAsyncFuncT = Callable[[], Coroutine[Any, Any, None]]\nNoArgsNoReturnDecorator = Callable[\n    [Union[NoArgsNoReturnFuncT, NoArgsNoReturnAsyncFuncT]], NoArgsNoReturnAsyncFuncT\n]\ndef repeat_every(\n    *,\n    seconds: float,\n    wait_first: bool = False,\n    logger: Optional[logging.Logger] = None,",
        "detail": "felicity.core.repeater",
        "documentation": {}
    },
    {
        "label": "NoArgsNoReturnAsyncFuncT",
        "kind": 5,
        "importPath": "felicity.core.repeater",
        "description": "felicity.core.repeater",
        "peekOfCode": "NoArgsNoReturnAsyncFuncT = Callable[[], Coroutine[Any, Any, None]]\nNoArgsNoReturnDecorator = Callable[\n    [Union[NoArgsNoReturnFuncT, NoArgsNoReturnAsyncFuncT]], NoArgsNoReturnAsyncFuncT\n]\ndef repeat_every(\n    *,\n    seconds: float,\n    wait_first: bool = False,\n    logger: Optional[logging.Logger] = None,\n    raise_exceptions: bool = False,",
        "detail": "felicity.core.repeater",
        "documentation": {}
    },
    {
        "label": "NoArgsNoReturnDecorator",
        "kind": 5,
        "importPath": "felicity.core.repeater",
        "description": "felicity.core.repeater",
        "peekOfCode": "NoArgsNoReturnDecorator = Callable[\n    [Union[NoArgsNoReturnFuncT, NoArgsNoReturnAsyncFuncT]], NoArgsNoReturnAsyncFuncT\n]\ndef repeat_every(\n    *,\n    seconds: float,\n    wait_first: bool = False,\n    logger: Optional[logging.Logger] = None,\n    raise_exceptions: bool = False,\n    max_repetitions: int | None = None,",
        "detail": "felicity.core.repeater",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "felicity.core.security",
        "description": "felicity.core.security",
        "peekOfCode": "def verify_password(plain_password: str, hashed_password: str) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)\ndef get_password_hash(password: str) -> str:\n    return pwd_context.hash(password)\n#  JWTokens\ndef create_access_token(\n    subject: Union[str, Any], expires_delta: timedelta = None\n) -> str:\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta",
        "detail": "felicity.core.security",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "kind": 2,
        "importPath": "felicity.core.security",
        "description": "felicity.core.security",
        "peekOfCode": "def get_password_hash(password: str) -> str:\n    return pwd_context.hash(password)\n#  JWTokens\ndef create_access_token(\n    subject: Union[str, Any], expires_delta: timedelta = None\n) -> str:\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(",
        "detail": "felicity.core.security",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "felicity.core.security",
        "description": "felicity.core.security",
        "peekOfCode": "def create_access_token(\n    subject: Union[str, Any], expires_delta: timedelta = None\n) -> str:\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(\n            minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES\n        )\n    expire = expire.timestamp() * 1000  # convert to milliseconds",
        "detail": "felicity.core.security",
        "documentation": {}
    },
    {
        "label": "create_access_token_from_refresh",
        "kind": 2,
        "importPath": "felicity.core.security",
        "description": "felicity.core.security",
        "peekOfCode": "def create_access_token_from_refresh(refresh: str) -> str | None:\n    try:\n        payload = jwt.decode(\n            refresh, settings.REFRESH_SECRET_KEY, algorithms=[settings.ALGORITHM]\n        )\n    except jwt.JWTError as e:\n        return None\n    return create_access_token(payload[\"sub\"])\ndef create_refresh_token(\n    subject: Union[str, Any], expires_delta: timedelta = None",
        "detail": "felicity.core.security",
        "documentation": {}
    },
    {
        "label": "create_refresh_token",
        "kind": 2,
        "importPath": "felicity.core.security",
        "description": "felicity.core.security",
        "peekOfCode": "def create_refresh_token(\n    subject: Union[str, Any], expires_delta: timedelta = None\n) -> str:\n    if expires_delta:\n        expires_delta = datetime.utcnow() + expires_delta\n    else:\n        expires_delta = datetime.utcnow() + timedelta(\n            minutes=settings.REFRESH_TOKEN_EXPIRE_MINUTES\n        )\n    to_encode = {\"exp\": expires_delta.timestamp() * 1000, \"sub\": str(subject)}",
        "detail": "felicity.core.security",
        "documentation": {}
    },
    {
        "label": "generate_password_reset_token",
        "kind": 2,
        "importPath": "felicity.core.security",
        "description": "felicity.core.security",
        "peekOfCode": "def generate_password_reset_token(email: str) -> str:\n    delta = timedelta(hours=settings.EMAIL_RESET_TOKEN_EXPIRE_HOURS)\n    now = datetime.utcnow()\n    expires = now + delta\n    exp = expires.timestamp()\n    encoded_jwt = jwt.encode(\n        {\"exp\": exp, \"nbf\": now, \"sub\": email},\n        settings.SECRET_KEY,\n        algorithm=settings.ALGORITHM,\n    )",
        "detail": "felicity.core.security",
        "documentation": {}
    },
    {
        "label": "verify_password_reset_token",
        "kind": 2,
        "importPath": "felicity.core.security",
        "description": "felicity.core.security",
        "peekOfCode": "def verify_password_reset_token(token: str) -> str | None:\n    try:\n        decoded_token = jwt.decode(\n            token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM]\n        )\n        logger.info(f\"decoded_token: {decoded_token}\")\n        return decoded_token[\"sub\"]\n    except jwt.JWTError:\n        return None\ndef password_similarity(username: str, password: str, max_similarity=0.7):",
        "detail": "felicity.core.security",
        "documentation": {}
    },
    {
        "label": "password_similarity",
        "kind": 2,
        "importPath": "felicity.core.security",
        "description": "felicity.core.security",
        "peekOfCode": "def password_similarity(username: str, password: str, max_similarity=0.7):\n    \"\"\"\n    check is the similarity between the password and username\n    ratio > max_similarity is similar\n    ratio <= max_similarity is not similar\n    \"\"\"\n    ratio = SequenceMatcher(None, username, password).ratio()\n    return True if ratio > max_similarity else False, ratio\ndef format_password_message(old: str, new: str):\n    if not old:",
        "detail": "felicity.core.security",
        "documentation": {}
    },
    {
        "label": "format_password_message",
        "kind": 2,
        "importPath": "felicity.core.security",
        "description": "felicity.core.security",
        "peekOfCode": "def format_password_message(old: str, new: str):\n    if not old:\n        return new\n    return f\"{old}, {new}\"\ndef password_check(password, username):\n    \"\"\"\n    Verify the strength of 'password'\n    Returns a dict indicating the wrong criteria\n    A password is considered strong if:\n        8 characters length or more",
        "detail": "felicity.core.security",
        "documentation": {}
    },
    {
        "label": "password_check",
        "kind": 2,
        "importPath": "felicity.core.security",
        "description": "felicity.core.security",
        "peekOfCode": "def password_check(password, username):\n    \"\"\"\n    Verify the strength of 'password'\n    Returns a dict indicating the wrong criteria\n    A password is considered strong if:\n        8 characters length or more\n        1 digit or more\n        1 symbol or more\n        1 uppercase letter or more\n        1 lowercase letter or more",
        "detail": "felicity.core.security",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "felicity.core.security",
        "description": "felicity.core.security",
        "peekOfCode": "settings = get_settings()\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n#  Passwords\ndef verify_password(plain_password: str, hashed_password: str) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)\ndef get_password_hash(password: str) -> str:\n    return pwd_context.hash(password)\n#  JWTokens",
        "detail": "felicity.core.security",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.core.security",
        "description": "felicity.core.security",
        "peekOfCode": "logger = logging.getLogger(__name__)\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n#  Passwords\ndef verify_password(plain_password: str, hashed_password: str) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)\ndef get_password_hash(password: str) -> str:\n    return pwd_context.hash(password)\n#  JWTokens\ndef create_access_token(\n    subject: Union[str, Any], expires_delta: timedelta = None",
        "detail": "felicity.core.security",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "felicity.core.security",
        "description": "felicity.core.security",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n#  Passwords\ndef verify_password(plain_password: str, hashed_password: str) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)\ndef get_password_hash(password: str) -> str:\n    return pwd_context.hash(password)\n#  JWTokens\ndef create_access_token(\n    subject: Union[str, Any], expires_delta: timedelta = None\n) -> str:",
        "detail": "felicity.core.security",
        "documentation": {}
    },
    {
        "label": "ModelNotFoundError",
        "kind": 6,
        "importPath": "felicity.database.queryset.builder",
        "description": "felicity.database.queryset.builder",
        "peekOfCode": "class ModelNotFoundError(ValueError):\n    pass\ndef _flatten_filter_keys(filters):\n    \"\"\"\n    :type filters: dict|list\n    Flatten the nested filters, extracting keys where they correspond\n    to smart_query paths, e.g.\n    {or_: {'id__gt': 1000, and_ : {\n        'id__lt': 500,\n        'related___property__in': (1,2,3)",
        "detail": "felicity.database.queryset.builder",
        "documentation": {}
    },
    {
        "label": "QueryBuilder",
        "kind": 6,
        "importPath": "felicity.database.queryset.builder",
        "description": "felicity.database.queryset.builder",
        "peekOfCode": "class QueryBuilder:\n    def __init__(self, model: M) -> None:\n        self.model = model\n    @property\n    def query(self):\n        return select(self.model)\n    def with_(self, schema):\n        \"\"\"\n        Query class and eager load schema at once.\n        :type schema: dict",
        "detail": "felicity.database.queryset.builder",
        "documentation": {}
    },
    {
        "label": "filter_expr",
        "kind": 2,
        "importPath": "felicity.database.queryset.builder",
        "description": "felicity.database.queryset.builder",
        "peekOfCode": "def filter_expr(model, **filters):\n    \"\"\"\n    forms expressions like [Product.age_from = 5,\n                            Product.subject_ids.in_([1,2])]\n    from filters like {'age_from': 5, 'subject_ids__in': [1,2]}\n    Example 1:\n        db.query(Product).filter(\n            *Product.filter_expr(age_from = 5, subject_ids__in=[1, 2]))\n    Example 2:\n        filters = {'age_from': 5, 'subject_ids__in': [1,2]}",
        "detail": "felicity.database.queryset.builder",
        "documentation": {}
    },
    {
        "label": "smart_query",
        "kind": 2,
        "importPath": "felicity.database.queryset.builder",
        "description": "felicity.database.queryset.builder",
        "peekOfCode": "def smart_query(query, filters=None, sort_attrs=None, schema=None):\n    \"\"\"\n    Does magic Django-ish joins like post___user___name__startswith='Bob'\n     (see https://goo.gl/jAgCyM)\n    Does filtering, sorting and eager loading at the same time.\n    And if, say, filters and sorting need the same joinm it will be done\n     only one. That's why all stuff is combined in single method\n    :param query: sqlalchemy.orm.query.Query\n    :param filters: dict\n    :param sort_attrs: List[basestring]",
        "detail": "felicity.database.queryset.builder",
        "documentation": {}
    },
    {
        "label": "eager_expr",
        "kind": 2,
        "importPath": "felicity.database.queryset.builder",
        "description": "felicity.database.queryset.builder",
        "peekOfCode": "def eager_expr(schema):\n    \"\"\"\n    :type schema: dict\n    \"\"\"\n    return _eager_expr_from_schema(schema)\ndef _flatten_schema(schema):\n    \"\"\"\n    :type schema: dict\n    \"\"\"\n    def _flatten(schema, parent_path, result):",
        "detail": "felicity.database.queryset.builder",
        "documentation": {}
    },
    {
        "label": "order_expr",
        "kind": 2,
        "importPath": "felicity.database.queryset.builder",
        "description": "felicity.database.queryset.builder",
        "peekOfCode": "def order_expr(model, *columns):\n    \"\"\"\n    Forms expressions like [desc(User.first_name), asc(User.phone)]\n      from list like ['-first_name', 'phone']\n    Example for 1 column:\n      db.query(User).order_by(*User.order_expr('-first_name'))\n      # will compile to ORDER BY user.first_name DESC\n    Example for multiple columns:\n      columns = ['-first_name', 'phone']\n      db.query(User).order_by(*User.order_expr(*columns))",
        "detail": "felicity.database.queryset.builder",
        "documentation": {}
    },
    {
        "label": "columns",
        "kind": 2,
        "importPath": "felicity.database.queryset.builder",
        "description": "felicity.database.queryset.builder",
        "peekOfCode": "def columns(model):\n    return inspect(model).columns.keys()\ndef primary_keys_full(model):\n    \"\"\"Get primary key properties for a SQLAlchemy cls.\n    Taken from marshmallow_sqlalchemy\n    \"\"\"\n    mapper = model.__mapper__\n    return [mapper.get_property_by_column(column) for column in mapper.primary_key]\ndef primary_keys(model):\n    return [pk.key for pk in primary_keys_full(model)]",
        "detail": "felicity.database.queryset.builder",
        "documentation": {}
    },
    {
        "label": "primary_keys_full",
        "kind": 2,
        "importPath": "felicity.database.queryset.builder",
        "description": "felicity.database.queryset.builder",
        "peekOfCode": "def primary_keys_full(model):\n    \"\"\"Get primary key properties for a SQLAlchemy cls.\n    Taken from marshmallow_sqlalchemy\n    \"\"\"\n    mapper = model.__mapper__\n    return [mapper.get_property_by_column(column) for column in mapper.primary_key]\ndef primary_keys(model):\n    return [pk.key for pk in primary_keys_full(model)]\ndef relations(model):\n    \"\"\"Return a `list` of relationship names or the given model\"\"\"",
        "detail": "felicity.database.queryset.builder",
        "documentation": {}
    },
    {
        "label": "primary_keys",
        "kind": 2,
        "importPath": "felicity.database.queryset.builder",
        "description": "felicity.database.queryset.builder",
        "peekOfCode": "def primary_keys(model):\n    return [pk.key for pk in primary_keys_full(model)]\ndef relations(model):\n    \"\"\"Return a `list` of relationship names or the given model\"\"\"\n    return [\n        c.key for c in model.__mapper__.attrs if isinstance(c, RelationshipProperty)\n    ]\ndef settable_relations(model):\n    \"\"\"Return a `list` of relationship names or the given model\"\"\"\n    return [r for r in model.relations if getattr(model, r).property.viewonly is False]",
        "detail": "felicity.database.queryset.builder",
        "documentation": {}
    },
    {
        "label": "relations",
        "kind": 2,
        "importPath": "felicity.database.queryset.builder",
        "description": "felicity.database.queryset.builder",
        "peekOfCode": "def relations(model):\n    \"\"\"Return a `list` of relationship names or the given model\"\"\"\n    return [\n        c.key for c in model.__mapper__.attrs if isinstance(c, RelationshipProperty)\n    ]\ndef settable_relations(model):\n    \"\"\"Return a `list` of relationship names or the given model\"\"\"\n    return [r for r in model.relations if getattr(model, r).property.viewonly is False]\ndef hybrid_properties(model):\n    items = inspect(model).all_orm_descriptors",
        "detail": "felicity.database.queryset.builder",
        "documentation": {}
    },
    {
        "label": "settable_relations",
        "kind": 2,
        "importPath": "felicity.database.queryset.builder",
        "description": "felicity.database.queryset.builder",
        "peekOfCode": "def settable_relations(model):\n    \"\"\"Return a `list` of relationship names or the given model\"\"\"\n    return [r for r in model.relations if getattr(model, r).property.viewonly is False]\ndef hybrid_properties(model):\n    items = inspect(model).all_orm_descriptors\n    return [item.__name__ for item in items if isinstance(item, hybrid_property)]\ndef hybrid_methods_full(model):\n    items = inspect(model).all_orm_descriptors\n    return {item.func.__name__: item for item in items if type(item) == hybrid_method}\ndef hybrid_methods(model):",
        "detail": "felicity.database.queryset.builder",
        "documentation": {}
    },
    {
        "label": "hybrid_properties",
        "kind": 2,
        "importPath": "felicity.database.queryset.builder",
        "description": "felicity.database.queryset.builder",
        "peekOfCode": "def hybrid_properties(model):\n    items = inspect(model).all_orm_descriptors\n    return [item.__name__ for item in items if isinstance(item, hybrid_property)]\ndef hybrid_methods_full(model):\n    items = inspect(model).all_orm_descriptors\n    return {item.func.__name__: item for item in items if type(item) == hybrid_method}\ndef hybrid_methods(model):\n    return list(hybrid_methods_full(model).keys())\ndef filterable_attributes(model):\n    return (",
        "detail": "felicity.database.queryset.builder",
        "documentation": {}
    },
    {
        "label": "hybrid_methods_full",
        "kind": 2,
        "importPath": "felicity.database.queryset.builder",
        "description": "felicity.database.queryset.builder",
        "peekOfCode": "def hybrid_methods_full(model):\n    items = inspect(model).all_orm_descriptors\n    return {item.func.__name__: item for item in items if type(item) == hybrid_method}\ndef hybrid_methods(model):\n    return list(hybrid_methods_full(model).keys())\ndef filterable_attributes(model):\n    return (\n        relations(model)\n        + columns(model)\n        + hybrid_properties(model)",
        "detail": "felicity.database.queryset.builder",
        "documentation": {}
    },
    {
        "label": "hybrid_methods",
        "kind": 2,
        "importPath": "felicity.database.queryset.builder",
        "description": "felicity.database.queryset.builder",
        "peekOfCode": "def hybrid_methods(model):\n    return list(hybrid_methods_full(model).keys())\ndef filterable_attributes(model):\n    return (\n        relations(model)\n        + columns(model)\n        + hybrid_properties(model)\n        + hybrid_methods(model)\n    )\ndef sortable_attributes(model):",
        "detail": "felicity.database.queryset.builder",
        "documentation": {}
    },
    {
        "label": "filterable_attributes",
        "kind": 2,
        "importPath": "felicity.database.queryset.builder",
        "description": "felicity.database.queryset.builder",
        "peekOfCode": "def filterable_attributes(model):\n    return (\n        relations(model)\n        + columns(model)\n        + hybrid_properties(model)\n        + hybrid_methods(model)\n    )\ndef sortable_attributes(model):\n    return columns(model) + hybrid_properties(model)\ndef settable_attributes(model):",
        "detail": "felicity.database.queryset.builder",
        "documentation": {}
    },
    {
        "label": "sortable_attributes",
        "kind": 2,
        "importPath": "felicity.database.queryset.builder",
        "description": "felicity.database.queryset.builder",
        "peekOfCode": "def sortable_attributes(model):\n    return columns(model) + hybrid_properties(model)\ndef settable_attributes(model):\n    return sortable_attributes(model) + settable_relations(model)\nclass QueryBuilder:\n    def __init__(self, model: M) -> None:\n        self.model = model\n    @property\n    def query(self):\n        return select(self.model)",
        "detail": "felicity.database.queryset.builder",
        "documentation": {}
    },
    {
        "label": "settable_attributes",
        "kind": 2,
        "importPath": "felicity.database.queryset.builder",
        "description": "felicity.database.queryset.builder",
        "peekOfCode": "def settable_attributes(model):\n    return sortable_attributes(model) + settable_relations(model)\nclass QueryBuilder:\n    def __init__(self, model: M) -> None:\n        self.model = model\n    @property\n    def query(self):\n        return select(self.model)\n    def with_(self, schema):\n        \"\"\"",
        "detail": "felicity.database.queryset.builder",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": "felicity.database.queryset.builder",
        "description": "felicity.database.queryset.builder",
        "peekOfCode": "M = TypeVar(\"M\")\nJOINED = \"joined\"\nSUBQUERY = \"subquery\"\nRELATION_SPLITTER = \"___\"\nOPERATOR_SPLITTER = \"__\"\nDESC_PREFIX = \"-\"\nclass ModelNotFoundError(ValueError):\n    pass\ndef _flatten_filter_keys(filters):\n    \"\"\"",
        "detail": "felicity.database.queryset.builder",
        "documentation": {}
    },
    {
        "label": "JOINED",
        "kind": 5,
        "importPath": "felicity.database.queryset.builder",
        "description": "felicity.database.queryset.builder",
        "peekOfCode": "JOINED = \"joined\"\nSUBQUERY = \"subquery\"\nRELATION_SPLITTER = \"___\"\nOPERATOR_SPLITTER = \"__\"\nDESC_PREFIX = \"-\"\nclass ModelNotFoundError(ValueError):\n    pass\ndef _flatten_filter_keys(filters):\n    \"\"\"\n    :type filters: dict|list",
        "detail": "felicity.database.queryset.builder",
        "documentation": {}
    },
    {
        "label": "SUBQUERY",
        "kind": 5,
        "importPath": "felicity.database.queryset.builder",
        "description": "felicity.database.queryset.builder",
        "peekOfCode": "SUBQUERY = \"subquery\"\nRELATION_SPLITTER = \"___\"\nOPERATOR_SPLITTER = \"__\"\nDESC_PREFIX = \"-\"\nclass ModelNotFoundError(ValueError):\n    pass\ndef _flatten_filter_keys(filters):\n    \"\"\"\n    :type filters: dict|list\n    Flatten the nested filters, extracting keys where they correspond",
        "detail": "felicity.database.queryset.builder",
        "documentation": {}
    },
    {
        "label": "RELATION_SPLITTER",
        "kind": 5,
        "importPath": "felicity.database.queryset.builder",
        "description": "felicity.database.queryset.builder",
        "peekOfCode": "RELATION_SPLITTER = \"___\"\nOPERATOR_SPLITTER = \"__\"\nDESC_PREFIX = \"-\"\nclass ModelNotFoundError(ValueError):\n    pass\ndef _flatten_filter_keys(filters):\n    \"\"\"\n    :type filters: dict|list\n    Flatten the nested filters, extracting keys where they correspond\n    to smart_query paths, e.g.",
        "detail": "felicity.database.queryset.builder",
        "documentation": {}
    },
    {
        "label": "OPERATOR_SPLITTER",
        "kind": 5,
        "importPath": "felicity.database.queryset.builder",
        "description": "felicity.database.queryset.builder",
        "peekOfCode": "OPERATOR_SPLITTER = \"__\"\nDESC_PREFIX = \"-\"\nclass ModelNotFoundError(ValueError):\n    pass\ndef _flatten_filter_keys(filters):\n    \"\"\"\n    :type filters: dict|list\n    Flatten the nested filters, extracting keys where they correspond\n    to smart_query paths, e.g.\n    {or_: {'id__gt': 1000, and_ : {",
        "detail": "felicity.database.queryset.builder",
        "documentation": {}
    },
    {
        "label": "DESC_PREFIX",
        "kind": 5,
        "importPath": "felicity.database.queryset.builder",
        "description": "felicity.database.queryset.builder",
        "peekOfCode": "DESC_PREFIX = \"-\"\nclass ModelNotFoundError(ValueError):\n    pass\ndef _flatten_filter_keys(filters):\n    \"\"\"\n    :type filters: dict|list\n    Flatten the nested filters, extracting keys where they correspond\n    to smart_query paths, e.g.\n    {or_: {'id__gt': 1000, and_ : {\n        'id__lt': 500,",
        "detail": "felicity.database.queryset.builder",
        "documentation": {}
    },
    {
        "label": "_operators",
        "kind": 5,
        "importPath": "felicity.database.queryset.builder",
        "description": "felicity.database.queryset.builder",
        "peekOfCode": "_operators = {\n    \"isnull\": lambda c, v: (c == None) if v else (c != None),\n    \"exact\": operators.eq,\n    \"ne\": operators.ne,  # not equal or is not (for None)\n    \"gt\": operators.gt,  # greater than , >\n    \"ge\": operators.ge,  # greater than or equal, >=\n    \"lt\": operators.lt,  # lower than, <\n    \"le\": operators.le,  # lower than or equal, <=\n    \"in\": operators.in_op,\n    \"notin\": operators.notin_op,",
        "detail": "felicity.database.queryset.builder",
        "documentation": {}
    },
    {
        "label": "DBModel",
        "kind": 6,
        "importPath": "felicity.database.base_class",
        "description": "felicity.database.base_class",
        "peekOfCode": "class DBModel(DeclarativeBase, AsyncAttrs, ActiveRecordMixinAsync, AllFeaturesMixin):\n    __name__: str\n    __abstract__ = True\n    __mapper_args__ = {\"eager_defaults\": True}\n    uid = Column(\n        String,\n        primary_key=True,\n        index=True,\n        nullable=False,\n        default=get_flake_uid,",
        "detail": "felicity.database.base_class",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": "felicity.database.base_class",
        "description": "felicity.database.base_class",
        "peekOfCode": "M = TypeVar(\"M\", bound=BaseModel)\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\nclass DBModel(DeclarativeBase, AsyncAttrs, ActiveRecordMixinAsync, AllFeaturesMixin):\n    __name__: str\n    __abstract__ = True\n    __mapper_args__ = {\"eager_defaults\": True}\n    uid = Column(\n        String,\n        primary_key=True,",
        "detail": "felicity.database.base_class",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.database.base_class",
        "description": "felicity.database.base_class",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass DBModel(DeclarativeBase, AsyncAttrs, ActiveRecordMixinAsync, AllFeaturesMixin):\n    __name__: str\n    __abstract__ = True\n    __mapper_args__ = {\"eager_defaults\": True}\n    uid = Column(\n        String,\n        primary_key=True,\n        index=True,\n        nullable=False,",
        "detail": "felicity.database.base_class",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "kind": 6,
        "importPath": "felicity.database.entity",
        "description": "felicity.database.entity",
        "peekOfCode": "class BaseEntity(DeclarativeBase, AsyncAttrs):\n    __name__: str\n    __abstract__ = True\n    __mapper_args__ = {\"eager_defaults\": True}\n    uid = Column(\n        String,\n        primary_key=True,\n        index=True,\n        nullable=False,\n        default=get_flake_uid,",
        "detail": "felicity.database.entity",
        "documentation": {}
    },
    {
        "label": "EdgeNode",
        "kind": 6,
        "importPath": "felicity.database.paging",
        "description": "felicity.database.paging",
        "peekOfCode": "class EdgeNode:\n    def __init__(self, cursor: str = None, node: dict = None):\n        self.cursor = cursor\n        self.node = node\nclass PageInfo:\n    def __init__(\n            self,\n            start_cursor: str = None,\n            end_cursor: str = None,\n            has_next_page: bool = False,",
        "detail": "felicity.database.paging",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "kind": 6,
        "importPath": "felicity.database.paging",
        "description": "felicity.database.paging",
        "peekOfCode": "class PageInfo:\n    def __init__(\n            self,\n            start_cursor: str = None,\n            end_cursor: str = None,\n            has_next_page: bool = False,\n            has_previous_page: bool = False,\n    ):\n        self.start_cursor = start_cursor\n        self.end_cursor = end_cursor",
        "detail": "felicity.database.paging",
        "documentation": {}
    },
    {
        "label": "PageCursor",
        "kind": 6,
        "importPath": "felicity.database.paging",
        "description": "felicity.database.paging",
        "peekOfCode": "class PageCursor:\n    def __init__(\n            self,\n            total_count: int = 0,\n            edges: List[EdgeNode] = None,\n            items: List[dict] = None,\n            page_info: PageInfo = None,\n    ):\n        self.total_count = total_count\n        self.edges = edges",
        "detail": "felicity.database.paging",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.database.paging",
        "description": "felicity.database.paging",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass EdgeNode:\n    def __init__(self, cursor: str = None, node: dict = None):\n        self.cursor = cursor\n        self.node = node\nclass PageInfo:\n    def __init__(\n            self,\n            start_cursor: str = None,\n            end_cursor: str = None,",
        "detail": "felicity.database.paging",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "kind": 6,
        "importPath": "felicity.database.repository",
        "description": "felicity.database.repository",
        "peekOfCode": "class BaseRepository(Generic[M]):\n    async_session = async_session\n    model: M = None\n    def __init__(self, model: M) -> None:\n        self.model = model\n        self.queryset = QueryBuilder(model=self.model)\n    @staticmethod\n    def fill(m: M, **kwargs):\n        for name in kwargs.keys():\n            if name in settable_attributes(m):",
        "detail": "felicity.database.repository",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": "felicity.database.repository",
        "description": "felicity.database.repository",
        "peekOfCode": "M = TypeVar(\"M\", bound=DeclarativeBase)\nclass BaseRepository(Generic[M]):\n    async_session = async_session\n    model: M = None\n    def __init__(self, model: M) -> None:\n        self.model = model\n        self.queryset = QueryBuilder(model=self.model)\n    @staticmethod\n    def fill(m: M, **kwargs):\n        for name in kwargs.keys():",
        "detail": "felicity.database.repository",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "felicity.database.session",
        "description": "felicity.database.session",
        "peekOfCode": "settings = get_settings()\nengine = create_engine(settings.SQLALCHEMY_DATABASE_URI)\nasync_engine = create_async_engine(\n    settings.SQLALCHEMY_TEST_DATABASE_URI\n    if settings.TESTING\n    else settings.SQLALCHEMY_DATABASE_URI,\n    pool_pre_ping=True,\n    echo=False,\n    future=True,\n)",
        "detail": "felicity.database.session",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "felicity.database.session",
        "description": "felicity.database.session",
        "peekOfCode": "engine = create_engine(settings.SQLALCHEMY_DATABASE_URI)\nasync_engine = create_async_engine(\n    settings.SQLALCHEMY_TEST_DATABASE_URI\n    if settings.TESTING\n    else settings.SQLALCHEMY_DATABASE_URI,\n    pool_pre_ping=True,\n    echo=False,\n    future=True,\n)\n# async_session_factory can be used directly using: async with async_session_factory() as session: ...",
        "detail": "felicity.database.session",
        "documentation": {}
    },
    {
        "label": "async_engine",
        "kind": 5,
        "importPath": "felicity.database.session",
        "description": "felicity.database.session",
        "peekOfCode": "async_engine = create_async_engine(\n    settings.SQLALCHEMY_TEST_DATABASE_URI\n    if settings.TESTING\n    else settings.SQLALCHEMY_DATABASE_URI,\n    pool_pre_ping=True,\n    echo=False,\n    future=True,\n)\n# async_session_factory can be used directly using: async with async_session_factory() as session: ...\nasync_session_factory = sessionmaker(",
        "detail": "felicity.database.session",
        "documentation": {}
    },
    {
        "label": "async_session_factory",
        "kind": 5,
        "importPath": "felicity.database.session",
        "description": "felicity.database.session",
        "peekOfCode": "async_session_factory = sessionmaker(\n    bind=async_engine, expire_on_commit=False, autoflush=False, class_=AsyncSession\n)\nAsyncSessionScoped = async_scoped_session(async_session_factory, scopefunc=current_task)\nasync_session = async_sessionmaker(\n    bind=async_engine,\n    expire_on_commit=False,\n    autoflush=False,\n    class_=AsyncSession\n)",
        "detail": "felicity.database.session",
        "documentation": {}
    },
    {
        "label": "AsyncSessionScoped",
        "kind": 5,
        "importPath": "felicity.database.session",
        "description": "felicity.database.session",
        "peekOfCode": "AsyncSessionScoped = async_scoped_session(async_session_factory, scopefunc=current_task)\nasync_session = async_sessionmaker(\n    bind=async_engine,\n    expire_on_commit=False,\n    autoflush=False,\n    class_=AsyncSession\n)",
        "detail": "felicity.database.session",
        "documentation": {}
    },
    {
        "label": "async_session",
        "kind": 5,
        "importPath": "felicity.database.session",
        "description": "felicity.database.session",
        "peekOfCode": "async_session = async_sessionmaker(\n    bind=async_engine,\n    expire_on_commit=False,\n    autoflush=False,\n    class_=AsyncSession\n)",
        "detail": "felicity.database.session",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.lims.checks.db",
        "description": "felicity.lims.checks.db",
        "peekOfCode": "logger = logging.getLogger(__name__)\nmax_tries = 60 * 5  # 5 minutes\nwait_seconds = 1\n@retry(\n    stop=stop_after_attempt(max_tries),\n    wait=wait_fixed(wait_seconds),\n    before=before_log(logger, logging.INFO),\n    after=after_log(logger, logging.WARN),\n)\nasync def check_db_conn_status() -> None:",
        "detail": "felicity.lims.checks.db",
        "documentation": {}
    },
    {
        "label": "max_tries",
        "kind": 5,
        "importPath": "felicity.lims.checks.db",
        "description": "felicity.lims.checks.db",
        "peekOfCode": "max_tries = 60 * 5  # 5 minutes\nwait_seconds = 1\n@retry(\n    stop=stop_after_attempt(max_tries),\n    wait=wait_fixed(wait_seconds),\n    before=before_log(logger, logging.INFO),\n    after=after_log(logger, logging.WARN),\n)\nasync def check_db_conn_status() -> None:\n    logger.info(\"Checking database status ...\")",
        "detail": "felicity.lims.checks.db",
        "documentation": {}
    },
    {
        "label": "wait_seconds",
        "kind": 5,
        "importPath": "felicity.lims.checks.db",
        "description": "felicity.lims.checks.db",
        "peekOfCode": "wait_seconds = 1\n@retry(\n    stop=stop_after_attempt(max_tries),\n    wait=wait_fixed(wait_seconds),\n    before=before_log(logger, logging.INFO),\n    after=after_log(logger, logging.WARN),\n)\nasync def check_db_conn_status() -> None:\n    logger.info(\"Checking database status ...\")\n    try:",
        "detail": "felicity.lims.checks.db",
        "documentation": {}
    },
    {
        "label": "FGroup",
        "kind": 6,
        "importPath": "felicity.lims.seeds.groups_perms",
        "description": "felicity.lims.seeds.groups_perms",
        "peekOfCode": "class FGroup:  # (KEYWORD, NAME)\n    ADMINISTRATOR = \"ADMINISTRATOR\"\n    LAB_MANAGER = \"LAB_MANAGER\"\n    SCIENTIST = \"SCIENTIST\"\n    TECHNOLOGIST = \"TECHNOLOGIST\"\n    LAB_HAND = \"LABORATORY HAND\"\n    GUEST = \"GUEST\"\n    STORES = \"STORES\"\n    ACCOUNTING = \"ACCOUNTING\"\nclass FObject:",
        "detail": "felicity.lims.seeds.groups_perms",
        "documentation": {}
    },
    {
        "label": "FObject",
        "kind": 6,
        "importPath": "felicity.lims.seeds.groups_perms",
        "description": "felicity.lims.seeds.groups_perms",
        "peekOfCode": "class FObject:\n    ANALYTICS = \"ANALYTICS\"\n    CLIENT = \"CLIENT\"\n    PATIENT = \"PATIENT\"\n    SAMPLE = \"SAMPLE\"\n    RESULT = \"RESULT\"\n    WORKSHEET = \"WORKSHEET\"\n    PRODUCT = \"PRODUCT\"\n    SHIPMENT = \"SHIPMENT\"\n    STORAGE = \"STORAGE\"",
        "detail": "felicity.lims.seeds.groups_perms",
        "documentation": {}
    },
    {
        "label": "FAction",
        "kind": 6,
        "importPath": "felicity.lims.seeds.groups_perms",
        "description": "felicity.lims.seeds.groups_perms",
        "peekOfCode": "class FAction:\n    CREATE = \"CREATE\"\n    READ = \"READ\"\n    UPDATE = \"UPDATE\"\n    DELETE = \"DELETE\"\n    SUBMIT = \"SUBMIT\"\n    VERIFY = \"VERIFY\"\n    CANCEL = \"CANCEL\"\n    INVALIDATE = \"INVALIDATE\"\n    REJECT = \"REJECT\"",
        "detail": "felicity.lims.seeds.groups_perms",
        "documentation": {}
    },
    {
        "label": "get_action_targets",
        "kind": 2,
        "importPath": "felicity.lims.seeds.groups_perms",
        "description": "felicity.lims.seeds.groups_perms",
        "peekOfCode": "def get_action_targets():  # e.g ('verify', 'worksheet'),\n    final = []\n    for a_key, action in permissions.items():\n        for o_key, obj in action.items():\n            final.append((a_key, o_key))\n    return final\nasync def seed_groups() -> None:\n    logger.info(\"Setting up groups .....\")\n    for _grp in groups:\n        exists = await models.Group.get(name=_grp)",
        "detail": "felicity.lims.seeds.groups_perms",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.lims.seeds.groups_perms",
        "description": "felicity.lims.seeds.groups_perms",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass FGroup:  # (KEYWORD, NAME)\n    ADMINISTRATOR = \"ADMINISTRATOR\"\n    LAB_MANAGER = \"LAB_MANAGER\"\n    SCIENTIST = \"SCIENTIST\"\n    TECHNOLOGIST = \"TECHNOLOGIST\"\n    LAB_HAND = \"LABORATORY HAND\"\n    GUEST = \"GUEST\"\n    STORES = \"STORES\"\n    ACCOUNTING = \"ACCOUNTING\"",
        "detail": "felicity.lims.seeds.groups_perms",
        "documentation": {}
    },
    {
        "label": "fg",
        "kind": 5,
        "importPath": "felicity.lims.seeds.groups_perms",
        "description": "felicity.lims.seeds.groups_perms",
        "peekOfCode": "fg = FGroup()\nfo = FObject()\nfa = FAction()\ngroups = [\n    fg.ADMINISTRATOR,\n    fg.LAB_MANAGER,\n    fg.SCIENTIST,\n    fg.TECHNOLOGIST,\n    fg.LAB_HAND,\n    fg.GUEST,",
        "detail": "felicity.lims.seeds.groups_perms",
        "documentation": {}
    },
    {
        "label": "fo",
        "kind": 5,
        "importPath": "felicity.lims.seeds.groups_perms",
        "description": "felicity.lims.seeds.groups_perms",
        "peekOfCode": "fo = FObject()\nfa = FAction()\ngroups = [\n    fg.ADMINISTRATOR,\n    fg.LAB_MANAGER,\n    fg.SCIENTIST,\n    fg.TECHNOLOGIST,\n    fg.LAB_HAND,\n    fg.GUEST,\n    fg.STORES,",
        "detail": "felicity.lims.seeds.groups_perms",
        "documentation": {}
    },
    {
        "label": "fa",
        "kind": 5,
        "importPath": "felicity.lims.seeds.groups_perms",
        "description": "felicity.lims.seeds.groups_perms",
        "peekOfCode": "fa = FAction()\ngroups = [\n    fg.ADMINISTRATOR,\n    fg.LAB_MANAGER,\n    fg.SCIENTIST,\n    fg.TECHNOLOGIST,\n    fg.LAB_HAND,\n    fg.GUEST,\n    fg.STORES,\n    fg.ACCOUNTING,",
        "detail": "felicity.lims.seeds.groups_perms",
        "documentation": {}
    },
    {
        "label": "groups",
        "kind": 5,
        "importPath": "felicity.lims.seeds.groups_perms",
        "description": "felicity.lims.seeds.groups_perms",
        "peekOfCode": "groups = [\n    fg.ADMINISTRATOR,\n    fg.LAB_MANAGER,\n    fg.SCIENTIST,\n    fg.TECHNOLOGIST,\n    fg.LAB_HAND,\n    fg.GUEST,\n    fg.STORES,\n    fg.ACCOUNTING,\n]",
        "detail": "felicity.lims.seeds.groups_perms",
        "documentation": {}
    },
    {
        "label": "permissions",
        "kind": 5,
        "importPath": "felicity.lims.seeds.groups_perms",
        "description": "felicity.lims.seeds.groups_perms",
        "peekOfCode": "permissions = {\n    fa.CREATE: {\n        fo.CLIENT: [fg.ADMINISTRATOR],\n        fo.PATIENT: [fg.LAB_HAND],\n        fo.SAMPLE: [fg.LAB_HAND],\n        fo.WORKSHEET: [fg.SCIENTIST, fg.TECHNOLOGIST],\n        fo.PRODUCT: [fg.STORES],\n        fo.SHIPMENT: [fg.LAB_HAND, fg.SCIENTIST, fg.TECHNOLOGIST],\n        fo.STORAGE: [\n            fg.ADMINISTRATOR,",
        "detail": "felicity.lims.seeds.groups_perms",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "felicity.lims.seeds.setup_analyses",
        "description": "felicity.lims.seeds.setup_analyses",
        "peekOfCode": "settings = get_settings()\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\nunits = {}\nasync def unit_resolver(name: str, description=\"\"):\n    if not name or name is None:\n        return None\n    if name in units:\n        return units[name]\n    unit = await Unit.get(name=name)",
        "detail": "felicity.lims.seeds.setup_analyses",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.lims.seeds.setup_analyses",
        "description": "felicity.lims.seeds.setup_analyses",
        "peekOfCode": "logger = logging.getLogger(__name__)\nunits = {}\nasync def unit_resolver(name: str, description=\"\"):\n    if not name or name is None:\n        return None\n    if name in units:\n        return units[name]\n    unit = await Unit.get(name=name)\n    if not unit:\n        unit_in = UnitCreate(name=name, descritpion=description)",
        "detail": "felicity.lims.seeds.setup_analyses",
        "documentation": {}
    },
    {
        "label": "units",
        "kind": 5,
        "importPath": "felicity.lims.seeds.setup_analyses",
        "description": "felicity.lims.seeds.setup_analyses",
        "peekOfCode": "units = {}\nasync def unit_resolver(name: str, description=\"\"):\n    if not name or name is None:\n        return None\n    if name in units:\n        return units[name]\n    unit = await Unit.get(name=name)\n    if not unit:\n        unit_in = UnitCreate(name=name, descritpion=description)\n        unit = await Unit.create(unit_in)",
        "detail": "felicity.lims.seeds.setup_analyses",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "felicity.lims.seeds.setup_instruments",
        "description": "felicity.lims.seeds.setup_instruments",
        "peekOfCode": "settings = get_settings()\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\nasync def seed_instrument_categories() -> None:\n    logger.info(\"Setting up instrument categories .....\")\n    data = get_seeds(\"instrument\")\n    for inst_type in data.get(\"categories\"):\n        instrument_type = await models.InstrumentType.get(name=inst_type)\n        if not instrument_type:\n            inst_type_in = schemas.InstrumentTypeCreate(name=inst_type, description=inst_type)",
        "detail": "felicity.lims.seeds.setup_instruments",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.lims.seeds.setup_instruments",
        "description": "felicity.lims.seeds.setup_instruments",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def seed_instrument_categories() -> None:\n    logger.info(\"Setting up instrument categories .....\")\n    data = get_seeds(\"instrument\")\n    for inst_type in data.get(\"categories\"):\n        instrument_type = await models.InstrumentType.get(name=inst_type)\n        if not instrument_type:\n            inst_type_in = schemas.InstrumentTypeCreate(name=inst_type, description=inst_type)\n            await models.InstrumentType.create(inst_type_in)\n    for _meth in data.get(\"methods\"):",
        "detail": "felicity.lims.seeds.setup_instruments",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "felicity.lims.seeds.setup_inventory",
        "description": "felicity.lims.seeds.setup_inventory",
        "peekOfCode": "settings = get_settings()\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\nasync def seed_stock_units():\n    logger.info(\"Setting up stock units .....\")\n    data = get_seeds(\"inventory\")\n    stock_units = data.get(\"units\", [])\n    for _unit in stock_units:\n        stock_unit = await models.StockUnit.get(name=_unit.get(\"name\"))\n        if not stock_unit:",
        "detail": "felicity.lims.seeds.setup_inventory",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.lims.seeds.setup_inventory",
        "description": "felicity.lims.seeds.setup_inventory",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def seed_stock_units():\n    logger.info(\"Setting up stock units .....\")\n    data = get_seeds(\"inventory\")\n    stock_units = data.get(\"units\", [])\n    for _unit in stock_units:\n        stock_unit = await models.StockUnit.get(name=_unit.get(\"name\"))\n        if not stock_unit:\n            su_in = schemas.StockUnitCreate(\n                name=_unit.get(\"name\"),",
        "detail": "felicity.lims.seeds.setup_inventory",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "felicity.lims.seeds.setup_laboratory",
        "description": "felicity.lims.seeds.setup_laboratory",
        "peekOfCode": "settings = get_settings()\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\nasync def seed_geographies() -> None:\n    logger.info(\"Setting up geographies (country, province, districts) .....\")\n    data = get_seeds(\"country\")\n    country_data = data.get(\"country\")\n    c_name = country_data.get(\"name\")\n    c_code = country_data.get(\"code\")\n    if c_name and c_code:",
        "detail": "felicity.lims.seeds.setup_laboratory",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.lims.seeds.setup_laboratory",
        "description": "felicity.lims.seeds.setup_laboratory",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def seed_geographies() -> None:\n    logger.info(\"Setting up geographies (country, province, districts) .....\")\n    data = get_seeds(\"country\")\n    country_data = data.get(\"country\")\n    c_name = country_data.get(\"name\")\n    c_code = country_data.get(\"code\")\n    if c_name and c_code:\n        country: Optional[models.Country] = await models.Country.get(name=c_name)\n        if not country:",
        "detail": "felicity.lims.seeds.setup_laboratory",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "felicity.lims.seeds.setup_person",
        "description": "felicity.lims.seeds.setup_person",
        "peekOfCode": "settings = get_settings()\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\nasync def seed_person() -> None:\n    logger.info(\"Setting up person .....\")\n    data = get_seeds(\"person\")\n    for id_type in data.get(\"identifiers\"):\n        if not (await models.Identification.get(name=id_type)):\n            inst_type_in = schemas.IdentificationCreate(name=id_type)\n            await models.Identification.create(inst_type_in)",
        "detail": "felicity.lims.seeds.setup_person",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.lims.seeds.setup_person",
        "description": "felicity.lims.seeds.setup_person",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def seed_person() -> None:\n    logger.info(\"Setting up person .....\")\n    data = get_seeds(\"person\")\n    for id_type in data.get(\"identifiers\"):\n        if not (await models.Identification.get(name=id_type)):\n            inst_type_in = schemas.IdentificationCreate(name=id_type)\n            await models.Identification.create(inst_type_in)",
        "detail": "felicity.lims.seeds.setup_person",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "felicity.lims.seeds.superusers",
        "description": "felicity.lims.seeds.superusers",
        "peekOfCode": "settings = get_settings()\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\nasync def seed_daemon_user() -> None:\n    logger.info(\"Setting up system-daemon - System Daemon - .....\")\n    system_daemon: Optional[models.User] = await models.User.get_by_email(\n        settings.SYSTEM_DAEMON_EMAIL\n    )\n    if not system_daemon:\n        su_in = schemas.UserCreate(",
        "detail": "felicity.lims.seeds.superusers",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.lims.seeds.superusers",
        "description": "felicity.lims.seeds.superusers",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def seed_daemon_user() -> None:\n    logger.info(\"Setting up system-daemon - System Daemon - .....\")\n    system_daemon: Optional[models.User] = await models.User.get_by_email(\n        settings.SYSTEM_DAEMON_EMAIL\n    )\n    if not system_daemon:\n        su_in = schemas.UserCreate(\n            first_name=\"System\",\n            last_name=\"Daemon\",",
        "detail": "felicity.lims.seeds.superusers",
        "documentation": {}
    },
    {
        "label": "register_cors",
        "kind": 2,
        "importPath": "felicity.lims.boot",
        "description": "felicity.lims.boot",
        "peekOfCode": "def register_cors(app: FastAPI):\n    app.add_middleware(\n        CORSMiddleware,\n        allow_origins=settings.CORS_ORIGINS,\n        allow_credentials=True,\n        allow_methods=[\"*\"],\n        allow_headers=[\"*\"],\n    )\ndef register_routes(app: FastAPI):\n    @app.get(\"/health\")",
        "detail": "felicity.lims.boot",
        "documentation": {}
    },
    {
        "label": "register_routes",
        "kind": 2,
        "importPath": "felicity.lims.boot",
        "description": "felicity.lims.boot",
        "peekOfCode": "def register_routes(app: FastAPI):\n    @app.get(\"/health\")\n    async def get_health(request):\n        return {\"up\": True}\n    app.include_router(api, prefix=\"/api/v1\")\n    setup_webapp(app, settings.SERVE_WEBAPP, schema)\ndef register_graphql(app: FastAPI):\n    if settings.RUN_OPEN_TRACING:\n        schema.extensions = schema.extensions + (OpenTelemetryExtension,)\n    graphql_app = GraphQLRouter(",
        "detail": "felicity.lims.boot",
        "documentation": {}
    },
    {
        "label": "register_graphql",
        "kind": 2,
        "importPath": "felicity.lims.boot",
        "description": "felicity.lims.boot",
        "peekOfCode": "def register_graphql(app: FastAPI):\n    if settings.RUN_OPEN_TRACING:\n        schema.extensions = schema.extensions + (OpenTelemetryExtension,)\n    graphql_app = GraphQLRouter(\n        schema,\n        graphiql=True,\n        context_getter=get_gql_context,\n        subscription_protocols=[GRAPHQL_TRANSPORT_WS_PROTOCOL, GRAPHQL_WS_PROTOCOL],\n    )\n    app.include_router(graphql_app, prefix=\"/felicity-gql\")",
        "detail": "felicity.lims.boot",
        "documentation": {}
    },
    {
        "label": "register_tracer",
        "kind": 2,
        "importPath": "felicity.lims.boot",
        "description": "felicity.lims.boot",
        "peekOfCode": "def register_tracer(app: FastAPI):\n    if settings.RUN_OPEN_TRACING:\n        otlp_exporter = OTLPSpanExporter(\n            endpoint=settings.OTLP_SPAN_EXPORT_URL, insecure=True\n        )\n        resource = Resource.create({\"service.name\": settings.PROJECT_NAME})\n        trace.set_tracer_provider(TracerProvider(resource=resource))\n        tracer = trace.get_tracer(__name__)\n        span_processor = SimpleSpanProcessor(otlp_exporter)\n        trace.get_tracer_provider().add_span_processor(span_processor)",
        "detail": "felicity.lims.boot",
        "documentation": {}
    },
    {
        "label": "factory",
        "kind": 2,
        "importPath": "felicity.lims.boot",
        "description": "felicity.lims.boot",
        "peekOfCode": "def factory(config: dict):\n    config[\"lifespan\"] = lifespan\n    app = FastAPI(**config)\n    register_cors(app)\n    register_routes(app)\n    register_graphql(app)\n    register_tracer(app)\n    return app",
        "detail": "felicity.lims.boot",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "felicity.lims.boot",
        "description": "felicity.lims.boot",
        "peekOfCode": "settings = get_settings()\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    if settings.LOAD_SETUP_DATA:\n        await initialize_felicity()\n    # bg_tasks = BackgroundTasks(tasks=None)\n    # bg_tasks.add_task(felicity_workforce_init)\n    felicity_workforce_init()\n    observe_events()\n    #",
        "detail": "felicity.lims.boot",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "felicity.migrations.versions.65f077efa77b_init_db",
        "description": "felicity.migrations.versions.65f077efa77b_init_db",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('audit_log',\n    sa.Column('user_id', sa.String(), nullable=True),\n    sa.Column('target_type', sa.String(length=100), nullable=False),\n    sa.Column('target_id', sa.String(), nullable=True),\n    sa.Column('action', sa.Integer(), nullable=True),\n    sa.Column('state_before', sa.UnicodeText(), nullable=True),\n    sa.Column('state_after', sa.UnicodeText(), nullable=True),\n    sa.Column('uid', sa.String(), nullable=False),",
        "detail": "felicity.migrations.versions.65f077efa77b_init_db",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "felicity.migrations.versions.65f077efa77b_init_db",
        "description": "felicity.migrations.versions.65f077efa77b_init_db",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('result_verification')\n    op.drop_index(op.f('ix_result_mutation_uid'), table_name='result_mutation')\n    op.drop_table('result_mutation')\n    op.drop_index(op.f('ix_shipped_sample_uid'), table_name='shipped_sample')\n    op.drop_table('shipped_sample')\n    op.drop_table('sample_rejection_reason')\n    op.drop_table('sample_profile')\n    op.drop_table('sample_analysis')",
        "detail": "felicity.migrations.versions.65f077efa77b_init_db",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "felicity.migrations.versions.65f077efa77b_init_db",
        "description": "felicity.migrations.versions.65f077efa77b_init_db",
        "peekOfCode": "revision = '65f077efa77b'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('audit_log',\n    sa.Column('user_id', sa.String(), nullable=True),\n    sa.Column('target_type', sa.String(length=100), nullable=False),\n    sa.Column('target_id', sa.String(), nullable=True),",
        "detail": "felicity.migrations.versions.65f077efa77b_init_db",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "felicity.migrations.versions.65f077efa77b_init_db",
        "description": "felicity.migrations.versions.65f077efa77b_init_db",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('audit_log',\n    sa.Column('user_id', sa.String(), nullable=True),\n    sa.Column('target_type', sa.String(length=100), nullable=False),\n    sa.Column('target_id', sa.String(), nullable=True),\n    sa.Column('action', sa.Integer(), nullable=True),",
        "detail": "felicity.migrations.versions.65f077efa77b_init_db",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "felicity.migrations.versions.65f077efa77b_init_db",
        "description": "felicity.migrations.versions.65f077efa77b_init_db",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('audit_log',\n    sa.Column('user_id', sa.String(), nullable=True),\n    sa.Column('target_type', sa.String(length=100), nullable=False),\n    sa.Column('target_id', sa.String(), nullable=True),\n    sa.Column('action', sa.Integer(), nullable=True),\n    sa.Column('state_before', sa.UnicodeText(), nullable=True),",
        "detail": "felicity.migrations.versions.65f077efa77b_init_db",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "felicity.migrations.versions.65f077efa77b_init_db",
        "description": "felicity.migrations.versions.65f077efa77b_init_db",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('audit_log',\n    sa.Column('user_id', sa.String(), nullable=True),\n    sa.Column('target_type', sa.String(length=100), nullable=False),\n    sa.Column('target_id', sa.String(), nullable=True),\n    sa.Column('action', sa.Integer(), nullable=True),\n    sa.Column('state_before', sa.UnicodeText(), nullable=True),\n    sa.Column('state_after', sa.UnicodeText(), nullable=True),",
        "detail": "felicity.migrations.versions.65f077efa77b_init_db",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "felicity.migrations.versions.c6fda1d97c67_add_atemplates",
        "description": "felicity.migrations.versions.c6fda1d97c67_add_atemplates",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('analysis_template',\n    sa.Column('name', sa.String(), nullable=False),\n    sa.Column('description', sa.String(), nullable=False),\n    sa.Column('department_uid', sa.String(), nullable=True),\n    sa.Column('uid', sa.String(), nullable=False),\n    sa.Column('created_at', sa.DateTime(), nullable=True),\n    sa.Column('created_by_uid', sa.String(), nullable=True),\n    sa.Column('updated_at', sa.DateTime(), nullable=True),",
        "detail": "felicity.migrations.versions.c6fda1d97c67_add_atemplates",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "felicity.migrations.versions.c6fda1d97c67_add_atemplates",
        "description": "felicity.migrations.versions.c6fda1d97c67_add_atemplates",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('analysis_analysis_template')\n    op.drop_index(op.f('ix_analysis_template_uid'), table_name='analysis_template')\n    op.drop_table('analysis_template')\n    # ### end Alembic commands ###",
        "detail": "felicity.migrations.versions.c6fda1d97c67_add_atemplates",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "felicity.migrations.versions.c6fda1d97c67_add_atemplates",
        "description": "felicity.migrations.versions.c6fda1d97c67_add_atemplates",
        "peekOfCode": "revision = 'c6fda1d97c67'\ndown_revision = '65f077efa77b'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('analysis_template',\n    sa.Column('name', sa.String(), nullable=False),\n    sa.Column('description', sa.String(), nullable=False),\n    sa.Column('department_uid', sa.String(), nullable=True),",
        "detail": "felicity.migrations.versions.c6fda1d97c67_add_atemplates",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "felicity.migrations.versions.c6fda1d97c67_add_atemplates",
        "description": "felicity.migrations.versions.c6fda1d97c67_add_atemplates",
        "peekOfCode": "down_revision = '65f077efa77b'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('analysis_template',\n    sa.Column('name', sa.String(), nullable=False),\n    sa.Column('description', sa.String(), nullable=False),\n    sa.Column('department_uid', sa.String(), nullable=True),\n    sa.Column('uid', sa.String(), nullable=False),",
        "detail": "felicity.migrations.versions.c6fda1d97c67_add_atemplates",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "felicity.migrations.versions.c6fda1d97c67_add_atemplates",
        "description": "felicity.migrations.versions.c6fda1d97c67_add_atemplates",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('analysis_template',\n    sa.Column('name', sa.String(), nullable=False),\n    sa.Column('description', sa.String(), nullable=False),\n    sa.Column('department_uid', sa.String(), nullable=True),\n    sa.Column('uid', sa.String(), nullable=False),\n    sa.Column('created_at', sa.DateTime(), nullable=True),",
        "detail": "felicity.migrations.versions.c6fda1d97c67_add_atemplates",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "felicity.migrations.versions.c6fda1d97c67_add_atemplates",
        "description": "felicity.migrations.versions.c6fda1d97c67_add_atemplates",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('analysis_template',\n    sa.Column('name', sa.String(), nullable=False),\n    sa.Column('description', sa.String(), nullable=False),\n    sa.Column('department_uid', sa.String(), nullable=True),\n    sa.Column('uid', sa.String(), nullable=False),\n    sa.Column('created_at', sa.DateTime(), nullable=True),\n    sa.Column('created_by_uid', sa.String(), nullable=True),",
        "detail": "felicity.migrations.versions.c6fda1d97c67_add_atemplates",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "felicity.migrations.env",
        "description": "felicity.migrations.env",
        "peekOfCode": "def run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "felicity.migrations.env",
        "documentation": {}
    },
    {
        "label": "get_async_url",
        "kind": 2,
        "importPath": "felicity.migrations.env",
        "description": "felicity.migrations.env",
        "peekOfCode": "def get_async_url():\n    user = settings.POSTGRES_USER\n    password = settings.POSTGRES_PASSWORD\n    server = settings.POSTGRES_SERVER\n    db = settings.POSTGRES_DB\n    return f\"postgresql+asyncpg://{user}:{password}@{server}/{db}\"\ndef do_run_migrations(connection):\n    context.configure(connection=connection, target_metadata=target_metadata)\n    with context.begin_transaction():\n        context.run_migrations()",
        "detail": "felicity.migrations.env",
        "documentation": {}
    },
    {
        "label": "do_run_migrations",
        "kind": 2,
        "importPath": "felicity.migrations.env",
        "description": "felicity.migrations.env",
        "peekOfCode": "def do_run_migrations(connection):\n    context.configure(connection=connection, target_metadata=target_metadata)\n    with context.begin_transaction():\n        context.run_migrations()\nasync def run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    configuration = config.get_section(config.config_ini_section)",
        "detail": "felicity.migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "felicity.migrations.env",
        "description": "felicity.migrations.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\ntarget_metadata = DBModel.metadata\n# other values from the config, defined by the needs of env.py,",
        "detail": "felicity.migrations.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "felicity.migrations.env",
        "description": "felicity.migrations.env",
        "peekOfCode": "target_metadata = DBModel.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "felicity.migrations.env",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "felicity.server.gunicorn-conf",
        "description": "felicity.server.gunicorn-conf",
        "peekOfCode": "name = \"gunicorn config for Felicity LiMS systemd daemon\"\naccesslog = \"/home/aurthur/Development/Python/felicity/felicity_lims/backend/gunicorn-access.log\"\nerrorlog = (\n    \"/home/aurthur/Development/Python/felicity/felicity_lims/backend/gunicorn-error.log\"\n)\nbind = \"0.0.0.0:8000\"\nworker_class = \"uvicorn.workers.UvicornWorker\"\nworkers = multiprocessing.cpu_count() * 2 + 1\nworker_connections = 1024\nbacklog = 2048",
        "detail": "felicity.server.gunicorn-conf",
        "documentation": {}
    },
    {
        "label": "accesslog",
        "kind": 5,
        "importPath": "felicity.server.gunicorn-conf",
        "description": "felicity.server.gunicorn-conf",
        "peekOfCode": "accesslog = \"/home/aurthur/Development/Python/felicity/felicity_lims/backend/gunicorn-access.log\"\nerrorlog = (\n    \"/home/aurthur/Development/Python/felicity/felicity_lims/backend/gunicorn-error.log\"\n)\nbind = \"0.0.0.0:8000\"\nworker_class = \"uvicorn.workers.UvicornWorker\"\nworkers = multiprocessing.cpu_count() * 2 + 1\nworker_connections = 1024\nbacklog = 2048\nmax_requests = 5120",
        "detail": "felicity.server.gunicorn-conf",
        "documentation": {}
    },
    {
        "label": "errorlog",
        "kind": 5,
        "importPath": "felicity.server.gunicorn-conf",
        "description": "felicity.server.gunicorn-conf",
        "peekOfCode": "errorlog = (\n    \"/home/aurthur/Development/Python/felicity/felicity_lims/backend/gunicorn-error.log\"\n)\nbind = \"0.0.0.0:8000\"\nworker_class = \"uvicorn.workers.UvicornWorker\"\nworkers = multiprocessing.cpu_count() * 2 + 1\nworker_connections = 1024\nbacklog = 2048\nmax_requests = 5120\ntimeout = 120",
        "detail": "felicity.server.gunicorn-conf",
        "documentation": {}
    },
    {
        "label": "bind",
        "kind": 5,
        "importPath": "felicity.server.gunicorn-conf",
        "description": "felicity.server.gunicorn-conf",
        "peekOfCode": "bind = \"0.0.0.0:8000\"\nworker_class = \"uvicorn.workers.UvicornWorker\"\nworkers = multiprocessing.cpu_count() * 2 + 1\nworker_connections = 1024\nbacklog = 2048\nmax_requests = 5120\ntimeout = 120\nkeepalive = 2\ndebug = os.environ.get(\"DEBUG\", \"false\") == \"true\"\nreload = debug",
        "detail": "felicity.server.gunicorn-conf",
        "documentation": {}
    },
    {
        "label": "worker_class",
        "kind": 5,
        "importPath": "felicity.server.gunicorn-conf",
        "description": "felicity.server.gunicorn-conf",
        "peekOfCode": "worker_class = \"uvicorn.workers.UvicornWorker\"\nworkers = multiprocessing.cpu_count() * 2 + 1\nworker_connections = 1024\nbacklog = 2048\nmax_requests = 5120\ntimeout = 120\nkeepalive = 2\ndebug = os.environ.get(\"DEBUG\", \"false\") == \"true\"\nreload = debug\npreload_app = False",
        "detail": "felicity.server.gunicorn-conf",
        "documentation": {}
    },
    {
        "label": "workers",
        "kind": 5,
        "importPath": "felicity.server.gunicorn-conf",
        "description": "felicity.server.gunicorn-conf",
        "peekOfCode": "workers = multiprocessing.cpu_count() * 2 + 1\nworker_connections = 1024\nbacklog = 2048\nmax_requests = 5120\ntimeout = 120\nkeepalive = 2\ndebug = os.environ.get(\"DEBUG\", \"false\") == \"true\"\nreload = debug\npreload_app = False\ndaemon = False",
        "detail": "felicity.server.gunicorn-conf",
        "documentation": {}
    },
    {
        "label": "worker_connections",
        "kind": 5,
        "importPath": "felicity.server.gunicorn-conf",
        "description": "felicity.server.gunicorn-conf",
        "peekOfCode": "worker_connections = 1024\nbacklog = 2048\nmax_requests = 5120\ntimeout = 120\nkeepalive = 2\ndebug = os.environ.get(\"DEBUG\", \"false\") == \"true\"\nreload = debug\npreload_app = False\ndaemon = False",
        "detail": "felicity.server.gunicorn-conf",
        "documentation": {}
    },
    {
        "label": "backlog",
        "kind": 5,
        "importPath": "felicity.server.gunicorn-conf",
        "description": "felicity.server.gunicorn-conf",
        "peekOfCode": "backlog = 2048\nmax_requests = 5120\ntimeout = 120\nkeepalive = 2\ndebug = os.environ.get(\"DEBUG\", \"false\") == \"true\"\nreload = debug\npreload_app = False\ndaemon = False",
        "detail": "felicity.server.gunicorn-conf",
        "documentation": {}
    },
    {
        "label": "max_requests",
        "kind": 5,
        "importPath": "felicity.server.gunicorn-conf",
        "description": "felicity.server.gunicorn-conf",
        "peekOfCode": "max_requests = 5120\ntimeout = 120\nkeepalive = 2\ndebug = os.environ.get(\"DEBUG\", \"false\") == \"true\"\nreload = debug\npreload_app = False\ndaemon = False",
        "detail": "felicity.server.gunicorn-conf",
        "documentation": {}
    },
    {
        "label": "timeout",
        "kind": 5,
        "importPath": "felicity.server.gunicorn-conf",
        "description": "felicity.server.gunicorn-conf",
        "peekOfCode": "timeout = 120\nkeepalive = 2\ndebug = os.environ.get(\"DEBUG\", \"false\") == \"true\"\nreload = debug\npreload_app = False\ndaemon = False",
        "detail": "felicity.server.gunicorn-conf",
        "documentation": {}
    },
    {
        "label": "keepalive",
        "kind": 5,
        "importPath": "felicity.server.gunicorn-conf",
        "description": "felicity.server.gunicorn-conf",
        "peekOfCode": "keepalive = 2\ndebug = os.environ.get(\"DEBUG\", \"false\") == \"true\"\nreload = debug\npreload_app = False\ndaemon = False",
        "detail": "felicity.server.gunicorn-conf",
        "documentation": {}
    },
    {
        "label": "debug",
        "kind": 5,
        "importPath": "felicity.server.gunicorn-conf",
        "description": "felicity.server.gunicorn-conf",
        "peekOfCode": "debug = os.environ.get(\"DEBUG\", \"false\") == \"true\"\nreload = debug\npreload_app = False\ndaemon = False",
        "detail": "felicity.server.gunicorn-conf",
        "documentation": {}
    },
    {
        "label": "reload",
        "kind": 5,
        "importPath": "felicity.server.gunicorn-conf",
        "description": "felicity.server.gunicorn-conf",
        "peekOfCode": "reload = debug\npreload_app = False\ndaemon = False",
        "detail": "felicity.server.gunicorn-conf",
        "documentation": {}
    },
    {
        "label": "preload_app",
        "kind": 5,
        "importPath": "felicity.server.gunicorn-conf",
        "description": "felicity.server.gunicorn-conf",
        "peekOfCode": "preload_app = False\ndaemon = False",
        "detail": "felicity.server.gunicorn-conf",
        "documentation": {}
    },
    {
        "label": "daemon",
        "kind": 5,
        "importPath": "felicity.server.gunicorn-conf",
        "description": "felicity.server.gunicorn-conf",
        "peekOfCode": "daemon = False",
        "detail": "felicity.server.gunicorn-conf",
        "documentation": {}
    },
    {
        "label": "fake_engine",
        "kind": 5,
        "importPath": "felicity.tests.integration.sample_workflow.conftest",
        "description": "felicity.tests.integration.sample_workflow.conftest",
        "peekOfCode": "fake_engine = Faker()\nengine = create_async_engine(settings.SQLALCHEMY_TEST_DATABASE_URI)\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n@pytest_asyncio.fixture(scope=\"function\")\nasync def clients(app, auth_data):\n    response = await app.post(\n        \"felicity-gql\",\n        json={\n            \"query\": \"\"\"",
        "detail": "felicity.tests.integration.sample_workflow.conftest",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "felicity.tests.integration.sample_workflow.conftest",
        "description": "felicity.tests.integration.sample_workflow.conftest",
        "peekOfCode": "engine = create_async_engine(settings.SQLALCHEMY_TEST_DATABASE_URI)\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n@pytest_asyncio.fixture(scope=\"function\")\nasync def clients(app, auth_data):\n    response = await app.post(\n        \"felicity-gql\",\n        json={\n            \"query\": \"\"\"\n            query GetClients{",
        "detail": "felicity.tests.integration.sample_workflow.conftest",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.tests.integration.sample_workflow.conftest",
        "description": "felicity.tests.integration.sample_workflow.conftest",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@pytest_asyncio.fixture(scope=\"function\")\nasync def clients(app, auth_data):\n    response = await app.post(\n        \"felicity-gql\",\n        json={\n            \"query\": \"\"\"\n            query GetClients{\n                clientAll{\n                    items {",
        "detail": "felicity.tests.integration.sample_workflow.conftest",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.tests.integration.sample_workflow.test_00_setup",
        "description": "felicity.tests.integration.sample_workflow.test_00_setup",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@pytest.mark.asyncio\n@pytest.mark.order(1)\nasync def test_check_installation(app):\n    response = await app.get(\"api/v1/setup/installation\")\n    logger.info(f\"reset-password response: {response} {response.json}\")\n    assert response.status_code == 200\n    logger.info(f\"reset-password response: {response} {response.json}\")\n    _data = response.json()\n    assert _data[\"laboratory\"] is None",
        "detail": "felicity.tests.integration.sample_workflow.test_00_setup",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.tests.integration.sample_workflow.test_01_user",
        "description": "felicity.tests.integration.sample_workflow.test_01_user",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@pytest.mark.asyncio\n@pytest.mark.order(10)\nasync def test_user_login(app):\n    authe = \"\"\"\n        mutation Auth($username: String!, $password: String!){\n          authenticateUser(username: $username, password: $password) {\n            ... on AuthenticatedData {\n                user {\n                    uid",
        "detail": "felicity.tests.integration.sample_workflow.test_01_user",
        "documentation": {}
    },
    {
        "label": "fake_engine",
        "kind": 5,
        "importPath": "felicity.tests.integration.sample_workflow.test_02_client",
        "description": "felicity.tests.integration.sample_workflow.test_02_client",
        "peekOfCode": "fake_engine = Faker()\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\nadd_client_query = \"\"\"\n  mutation AddClient($payload: ClientInputType!){\n      createClient(payload: $payload) {\n        __typename\n        ... on ClientType {\n          uid\n          name",
        "detail": "felicity.tests.integration.sample_workflow.test_02_client",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.tests.integration.sample_workflow.test_02_client",
        "description": "felicity.tests.integration.sample_workflow.test_02_client",
        "peekOfCode": "logger = logging.getLogger(__name__)\nadd_client_query = \"\"\"\n  mutation AddClient($payload: ClientInputType!){\n      createClient(payload: $payload) {\n        __typename\n        ... on ClientType {\n          uid\n          name\n          code\n          email",
        "detail": "felicity.tests.integration.sample_workflow.test_02_client",
        "documentation": {}
    },
    {
        "label": "add_client_query",
        "kind": 5,
        "importPath": "felicity.tests.integration.sample_workflow.test_02_client",
        "description": "felicity.tests.integration.sample_workflow.test_02_client",
        "peekOfCode": "add_client_query = \"\"\"\n  mutation AddClient($payload: ClientInputType!){\n      createClient(payload: $payload) {\n        __typename\n        ... on ClientType {\n          uid\n          name\n          code\n          email\n          phoneMobile",
        "detail": "felicity.tests.integration.sample_workflow.test_02_client",
        "documentation": {}
    },
    {
        "label": "fake_engine",
        "kind": 5,
        "importPath": "felicity.tests.integration.sample_workflow.test_03_patient",
        "description": "felicity.tests.integration.sample_workflow.test_03_patient",
        "peekOfCode": "fake_engine = Faker()\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\nadd_patient_query = \"\"\"\n  mutation AddPatient($payload: PatientInputType!){\n  createPatient(payload: $payload) {\n    ... on PatientType {\n        uid\n        clientPatientId\n        firstName",
        "detail": "felicity.tests.integration.sample_workflow.test_03_patient",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.tests.integration.sample_workflow.test_03_patient",
        "description": "felicity.tests.integration.sample_workflow.test_03_patient",
        "peekOfCode": "logger = logging.getLogger(__name__)\nadd_patient_query = \"\"\"\n  mutation AddPatient($payload: PatientInputType!){\n  createPatient(payload: $payload) {\n    ... on PatientType {\n        uid\n        clientPatientId\n        firstName\n        lastName\n        age",
        "detail": "felicity.tests.integration.sample_workflow.test_03_patient",
        "documentation": {}
    },
    {
        "label": "add_patient_query",
        "kind": 5,
        "importPath": "felicity.tests.integration.sample_workflow.test_03_patient",
        "description": "felicity.tests.integration.sample_workflow.test_03_patient",
        "peekOfCode": "add_patient_query = \"\"\"\n  mutation AddPatient($payload: PatientInputType!){\n  createPatient(payload: $payload) {\n    ... on PatientType {\n        uid\n        clientPatientId\n        firstName\n        lastName\n        age\n        gender",
        "detail": "felicity.tests.integration.sample_workflow.test_03_patient",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.tests.integration.sample_workflow.test_04_analysis_setup",
        "description": "felicity.tests.integration.sample_workflow.test_04_analysis_setup",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@pytest.mark.asyncio\n@pytest.mark.order(40)\nasync def test_add_sample_type(app, auth_data):\n    add_gql = \"\"\"\n      mutation AddSampleType($payload: SampleTypeInputType!){\n          createSampleType(payload: $payload) {\n            __typename\n            ... on SampleTypeTyp {\n              uid",
        "detail": "felicity.tests.integration.sample_workflow.test_04_analysis_setup",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.tests.integration.sample_workflow.test_05_analysis_request",
        "description": "felicity.tests.integration.sample_workflow.test_05_analysis_request",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@pytest.mark.asyncio\n@pytest.mark.order(60)\nasync def test_add_analysis_request(\n    app, auth_data, profiles, sample_types, clients, client_contacts, patients\n):\n    add_gql = \"\"\"\n        mutation AddAnalysisRequest ($payload: AnalysisRequestInputType!) {\n          createAnalysisRequest(payload: $payload) {\n            ... on AnalysisRequestWithSamples{",
        "detail": "felicity.tests.integration.sample_workflow.test_05_analysis_request",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.tests.integration.sample_workflow.test_06_worksheet",
        "description": "felicity.tests.integration.sample_workflow.test_06_worksheet",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@pytest.mark.asyncio\n@pytest.mark.order(70)\nasync def test_add_worksheet_template(\n    app, auth_data, sample_types, analyses, instruments\n):\n    add_gql = \"\"\"\n        mutation AddWorkSheetTemplate($payload: WorksheetTemplateInputType!){\n          createWorksheetTemplate(payload: $payload)\n          {",
        "detail": "felicity.tests.integration.sample_workflow.test_06_worksheet",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.tests.integration.sample_workflow.test_07_results",
        "description": "felicity.tests.integration.sample_workflow.test_07_results",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@pytest.mark.asyncio\n@pytest.mark.order(80)\nasync def test_submit_results(app, auth_data, samples, worksheets):\n    add_gql = \"\"\"\n     mutation SubmitAnalysisResults($analysisResults: [ARResultInputType!]!, $sourceObject: String!, $sourceObjectUid: String!) {\n        submitAnalysisResults(analysisResults: $analysisResults, sourceObject: $sourceObject, sourceObjectUid: $sourceObjectUid){\n          ... on OperationSuccess {\n            message\n          }",
        "detail": "felicity.tests.integration.sample_workflow.test_07_results",
        "documentation": {}
    },
    {
        "label": "make_username",
        "kind": 2,
        "importPath": "felicity.tests.integration.utils.user",
        "description": "felicity.tests.integration.utils.user",
        "peekOfCode": "def make_username(val: str) -> str:\n    return val.lower()\ndef make_password(val: str):\n    return f\"!{make_username(val).capitalize()}#100\"",
        "detail": "felicity.tests.integration.utils.user",
        "documentation": {}
    },
    {
        "label": "make_password",
        "kind": 2,
        "importPath": "felicity.tests.integration.utils.user",
        "description": "felicity.tests.integration.utils.user",
        "peekOfCode": "def make_password(val: str):\n    return f\"!{make_username(val).capitalize()}#100\"",
        "detail": "felicity.tests.integration.utils.user",
        "documentation": {}
    },
    {
        "label": "add_user_mutation",
        "kind": 5,
        "importPath": "felicity.tests.integration.utils.user",
        "description": "felicity.tests.integration.utils.user",
        "peekOfCode": "add_user_mutation = \"\"\"\n  mutation AddUser(\n      $firstName: String!,\n      $lastName: String!,\n      $email: String!,\n      $openReg: Boolean\n    ){\n    createUser(\n      firstName: $firstName,\n      lastName: $lastName,",
        "detail": "felicity.tests.integration.utils.user",
        "documentation": {}
    },
    {
        "label": "add_auth_mutation",
        "kind": 5,
        "importPath": "felicity.tests.integration.utils.user",
        "description": "felicity.tests.integration.utils.user",
        "peekOfCode": "add_auth_mutation = \"\"\"\n  mutation AddUserAuth(\n      $userUid: String!,\n      $userName: String!,\n      $password: String!,\n      $passwordc: String!\n    ){\n    createUserAuth(\n      userUid: $userUid,\n      userName: $userName,",
        "detail": "felicity.tests.integration.utils.user",
        "documentation": {}
    },
    {
        "label": "fetch_users",
        "kind": 5,
        "importPath": "felicity.tests.integration.utils.user",
        "description": "felicity.tests.integration.utils.user",
        "peekOfCode": "fetch_users = \"\"\"\n    query {\n        userAll {\n            items {\n            auth {\n                userName\n            }\n            }\n        }\n    }",
        "detail": "felicity.tests.integration.utils.user",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 2,
        "importPath": "felicity.tests.integration.conftest",
        "description": "felicity.tests.integration.conftest",
        "peekOfCode": "def app():\n    client = AsyncClient(app=felicity, base_url=\"http://localhost:8000\")\n    yield client\n@pytest_asyncio.fixture(autouse=True)\nasync def auth_data(app):\n    authe = \"\"\"\n        mutation Auth($username: String!, $password: String!){\n          authenticateUser(username: $username, password: $password) {\n            ... on AuthenticatedData {\n                user {",
        "detail": "felicity.tests.integration.conftest",
        "documentation": {}
    },
    {
        "label": "fake_engine",
        "kind": 5,
        "importPath": "felicity.tests.integration.conftest",
        "description": "felicity.tests.integration.conftest",
        "peekOfCode": "fake_engine = Faker()\nengine = create_async_engine(settings.SQLALCHEMY_TEST_DATABASE_URI)\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n@pytest_asyncio.fixture(scope=\"session\")\nasync def setup():\n    logger.info(\"pytest_configure integration tests...\")\n    async with engine.begin() as conn:\n        # await conn.run_sync(DBModel.metadata.drop_all)\n        await conn.run_sync(DBModel.metadata.create_all)",
        "detail": "felicity.tests.integration.conftest",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "felicity.tests.integration.conftest",
        "description": "felicity.tests.integration.conftest",
        "peekOfCode": "engine = create_async_engine(settings.SQLALCHEMY_TEST_DATABASE_URI)\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n@pytest_asyncio.fixture(scope=\"session\")\nasync def setup():\n    logger.info(\"pytest_configure integration tests...\")\n    async with engine.begin() as conn:\n        # await conn.run_sync(DBModel.metadata.drop_all)\n        await conn.run_sync(DBModel.metadata.create_all)\n    connection = engine.connect()",
        "detail": "felicity.tests.integration.conftest",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.tests.integration.conftest",
        "description": "felicity.tests.integration.conftest",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@pytest_asyncio.fixture(scope=\"session\")\nasync def setup():\n    logger.info(\"pytest_configure integration tests...\")\n    async with engine.begin() as conn:\n        # await conn.run_sync(DBModel.metadata.drop_all)\n        await conn.run_sync(DBModel.metadata.create_all)\n    connection = engine.connect()\n    yield connection\n    async with engine.begin() as conn:",
        "detail": "felicity.tests.integration.conftest",
        "documentation": {}
    },
    {
        "label": "trial_data",
        "kind": 2,
        "importPath": "felicity.tests.unit.core.test_security",
        "description": "felicity.tests.unit.core.test_security",
        "peekOfCode": "def trial_data():\n    return {\n        \"username\": \"johnndoe\",\n        \"email\": \"johnndoe@test.here\",\n        \"pass_weak\": \"jd123\",\n        \"pass_similar\": \"johnndoe123456\",\n        \"pass_strong\": \"!AT3#876j^$#fg\",\n    }\n@pytest.mark.asyncio\nasync def test_password_hash_ok(trial_data):",
        "detail": "felicity.tests.unit.core.test_security",
        "documentation": {}
    },
    {
        "label": "UserServiceTestCase",
        "kind": 6,
        "importPath": "felicity.tests.unit.domain.user.test_user_service",
        "description": "felicity.tests.unit.domain.user.test_user_service",
        "peekOfCode": "class UserServiceTestCase(unittest.IsolatedAsyncioTestCase):\n    async def asyncSetUp(self):\n        self.repository = mock.create_autospec(IUserRepository)\n        self.group_service = mock.AsyncMock()\n        self.permission_service = mock.AsyncMock()\n        self.user_preference_service = mock.AsyncMock()\n        self.user_service = UserService(\n            self.repository,\n            self.user_preference_service,\n            self.group_service,",
        "detail": "felicity.tests.unit.domain.user.test_user_service",
        "documentation": {}
    },
    {
        "label": "user_service",
        "kind": 2,
        "importPath": "felicity.tests.unit.domain.user.test_user_service2",
        "description": "felicity.tests.unit.domain.user.test_user_service2",
        "peekOfCode": "def user_service(mocker):\n    repository = mocker.create_autospec(IUserRepository)\n    group_service = mocker.AsyncMock()\n    permission_service = mocker.AsyncMock()\n    user_preference_service = mocker.AsyncMock()\n    return UserService(\n        repository, user_preference_service, group_service, permission_service\n    )\n@pytest.fixture\ndef user_data():",
        "detail": "felicity.tests.unit.domain.user.test_user_service2",
        "documentation": {}
    },
    {
        "label": "user_data",
        "kind": 2,
        "importPath": "felicity.tests.unit.domain.user.test_user_service2",
        "description": "felicity.tests.unit.domain.user.test_user_service2",
        "peekOfCode": "def user_data():\n    return {\n        \"first_name\": \"anesu\",\n        \"last_name\": \"mpofu\",\n        \"email\": \"amusewem@gmail.com\",\n        \"user_name\": \"amusem\",\n        \"password\": \"!Try#@8787?\",\n        \"passwordc\": \"!Try#@8787?\",\n        \"open_reg\": False,\n    }",
        "detail": "felicity.tests.unit.domain.user.test_user_service2",
        "documentation": {}
    },
    {
        "label": "fake_engine",
        "kind": 5,
        "importPath": "felicity.tests.unit.conftest",
        "description": "felicity.tests.unit.conftest",
        "peekOfCode": "fake_engine = Faker()\nengine = create_async_engine(settings.SQLALCHEMY_TEST_DATABASE_URI)\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n@pytest_asyncio.fixture(scope=\"function\", autouse=True)\nasync def setup():\n    logger.info(\"pytest_configure unittest...\")\n    async with engine.begin() as conn:\n        await conn.run_sync(DBModel.metadata.create_all)\n    connection = engine.connect()",
        "detail": "felicity.tests.unit.conftest",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "felicity.tests.unit.conftest",
        "description": "felicity.tests.unit.conftest",
        "peekOfCode": "engine = create_async_engine(settings.SQLALCHEMY_TEST_DATABASE_URI)\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n@pytest_asyncio.fixture(scope=\"function\", autouse=True)\nasync def setup():\n    logger.info(\"pytest_configure unittest...\")\n    async with engine.begin() as conn:\n        await conn.run_sync(DBModel.metadata.create_all)\n    connection = engine.connect()\n    yield connection",
        "detail": "felicity.tests.unit.conftest",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.tests.unit.conftest",
        "description": "felicity.tests.unit.conftest",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@pytest_asyncio.fixture(scope=\"function\", autouse=True)\nasync def setup():\n    logger.info(\"pytest_configure unittest...\")\n    async with engine.begin() as conn:\n        await conn.run_sync(DBModel.metadata.create_all)\n    connection = engine.connect()\n    yield connection\n    async with engine.begin() as conn:\n        await conn.run_sync(DBModel.metadata.drop_all)",
        "detail": "felicity.tests.unit.conftest",
        "documentation": {}
    },
    {
        "label": "mock_user_auth",
        "kind": 2,
        "importPath": "felicity.tests.unit.test_user",
        "description": "felicity.tests.unit.test_user",
        "peekOfCode": "def mock_user_auth() -> AsyncMock:\n    \"\"\"\n    User Auth Async Mock Fixture\n    :return:\n    \"\"\"\n    mock_thing = AsyncMock()\n    mock_thing.UserAuth.acquire_user_type = AsyncMock(return_value=\"lcuser\")\n    mock_thing.UserAuth.has_access = AsyncMock(return_value=True)\n    mock_thing.UserAuth.authenticate = AsyncMock(return_value=True)\n    return mock_thing",
        "detail": "felicity.tests.unit.test_user",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 2,
        "importPath": "felicity.tests.conftest",
        "description": "felicity.tests.conftest",
        "peekOfCode": "def event_loop():\n    \"\"\"Overrides pytest default function scoped event loop\"\"\"\n    policy = asyncio.get_event_loop_policy()\n    loop = policy.new_event_loop()\n    yield loop\n    loop.close()",
        "detail": "felicity.tests.conftest",
        "documentation": {}
    },
    {
        "label": "send_email",
        "kind": 2,
        "importPath": "felicity.utils.email.email",
        "description": "felicity.utils.email.email",
        "peekOfCode": "def send_email(\n    email_to: str, subject_template: str = \"\", html_template: str = \"\", environment=None\n) -> None:\n    if environment is None:\n        environment = {}\n    assert settings.EMAILS_ENABLED, \"no provided configuration for email variables\"\n    message = emails.Message(\n        subject=JinjaTemplate(subject_template),\n        html=JinjaTemplate(html_template),\n        mail_from=(settings.EMAILS_FROM_NAME, settings.EMAILS_FROM_EMAIL),",
        "detail": "felicity.utils.email.email",
        "documentation": {}
    },
    {
        "label": "send_test_email",
        "kind": 2,
        "importPath": "felicity.utils.email.email",
        "description": "felicity.utils.email.email",
        "peekOfCode": "def send_test_email(email_to: str) -> None:\n    project_name = settings.PROJECT_NAME\n    subject = f\"{project_name} - Test email\"\n    with open(Path(settings.EMAIL_TEMPLATES_DIR) / \"test_email.html\") as f:\n        template_str = f.read()\n    send_email(\n        email_to=email_to,\n        subject_template=subject,\n        html_template=template_str,\n        environment={\"project_name\": settings.PROJECT_NAME, \"email\": email_to},",
        "detail": "felicity.utils.email.email",
        "documentation": {}
    },
    {
        "label": "send_reset_password_email",
        "kind": 2,
        "importPath": "felicity.utils.email.email",
        "description": "felicity.utils.email.email",
        "peekOfCode": "def send_reset_password_email(email_to: str, email: str, token: str) -> None:\n    project_name = settings.PROJECT_NAME\n    subject = f\"{project_name} - Password recovery token for user {email}\"\n    with open(Path(settings.EMAIL_TEMPLATES_DIR) / \"reset_password.html\") as f:\n        template_str = f.read()\n    server_host = settings.SERVER_HOST\n    link = f\"{server_host}/reset-password?token={token}\"\n    send_email(\n        email_to=email_to,\n        subject_template=subject,",
        "detail": "felicity.utils.email.email",
        "documentation": {}
    },
    {
        "label": "send_new_account_email",
        "kind": 2,
        "importPath": "felicity.utils.email.email",
        "description": "felicity.utils.email.email",
        "peekOfCode": "def send_new_account_email(email_to: str, username: str, password: str) -> None:\n    project_name = settings.PROJECT_NAME\n    subject = f\"{project_name} - New account for user {username}\"\n    with open(Path(settings.EMAIL_TEMPLATES_DIR) / \"new_account.html\") as f:\n        template_str = f.read()\n    link = settings.SERVER_HOST\n    send_email(\n        email_to=email_to,\n        subject_template=subject,\n        html_template=template_str,",
        "detail": "felicity.utils.email.email",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "felicity.utils.email.email",
        "description": "felicity.utils.email.email",
        "peekOfCode": "settings = get_settings()\ndef send_email(\n    email_to: str, subject_template: str = \"\", html_template: str = \"\", environment=None\n) -> None:\n    if environment is None:\n        environment = {}\n    assert settings.EMAILS_ENABLED, \"no provided configuration for email variables\"\n    message = emails.Message(\n        subject=JinjaTemplate(subject_template),\n        html=JinjaTemplate(html_template),",
        "detail": "felicity.utils.email.email",
        "documentation": {}
    },
    {
        "label": "delete_file",
        "kind": 2,
        "importPath": "felicity.utils.dirs",
        "description": "felicity.utils.dirs",
        "peekOfCode": "def delete_file(file_name: str) -> bool:\n    file_path = Path(file_name)\n    if file_path.is_file():\n        file_path.unlink()\n        return True\n    # Also return true to allow deletion of image reference that no longer exists.\n    return True\ndef resolve_media_dirs_for(target: str) -> str:\n    \"\"\"\n    Creates directories if not exist",
        "detail": "felicity.utils.dirs",
        "documentation": {}
    },
    {
        "label": "resolve_media_dirs_for",
        "kind": 2,
        "importPath": "felicity.utils.dirs",
        "description": "felicity.utils.dirs",
        "peekOfCode": "def resolve_media_dirs_for(target: str) -> str:\n    \"\"\"\n    Creates directories if not exist\n    \"\"\"\n    str_path = \"media/\" + target + \"/\" + datetime.now().strftime(\"%Y/%m/%d\") + \"/\"\n    path = Path(str_path)\n    if not path.is_dir():\n        dir_util.mkpath(str_path)\n    return str_path\ndef create_dir(dir_name: str):",
        "detail": "felicity.utils.dirs",
        "documentation": {}
    },
    {
        "label": "create_dir",
        "kind": 2,
        "importPath": "felicity.utils.dirs",
        "description": "felicity.utils.dirs",
        "peekOfCode": "def create_dir(dir_name: str):\n    path = Path(dir_name)\n    if not path.is_dir():\n        dir_util.mkpath(dir_name)\ndef resolve_root_dirs():\n    _dirs = [\"media\"]\n    for _dir in _dirs:\n        create_dir(_dir)",
        "detail": "felicity.utils.dirs",
        "documentation": {}
    },
    {
        "label": "resolve_root_dirs",
        "kind": 2,
        "importPath": "felicity.utils.dirs",
        "description": "felicity.utils.dirs",
        "peekOfCode": "def resolve_root_dirs():\n    _dirs = [\"media\"]\n    for _dir in _dirs:\n        create_dir(_dir)",
        "detail": "felicity.utils.dirs",
        "documentation": {}
    },
    {
        "label": "getenv_boolean",
        "kind": 2,
        "importPath": "felicity.utils.env",
        "description": "felicity.utils.env",
        "peekOfCode": "def getenv_boolean(var_name: Any, default_value: bool = False) -> bool:\n    result = default_value\n    env_value = os.getenv(var_name)\n    if env_value is not None:\n        result = env_value.upper() in (\"TRUE\", \"1\")\n    return result\ndef getenv_value(value: Any, default_value: Any = None) -> Any:\n    env_value = os.getenv(value)\n    if env_value is None:\n        env_value = default_value",
        "detail": "felicity.utils.env",
        "documentation": {}
    },
    {
        "label": "getenv_value",
        "kind": 2,
        "importPath": "felicity.utils.env",
        "description": "felicity.utils.env",
        "peekOfCode": "def getenv_value(value: Any, default_value: Any = None) -> Any:\n    env_value = os.getenv(value)\n    if env_value is None:\n        env_value = default_value\n    return env_value",
        "detail": "felicity.utils.env",
        "documentation": {}
    },
    {
        "label": "get_passed_args",
        "kind": 2,
        "importPath": "felicity.utils.helpers",
        "description": "felicity.utils.helpers",
        "peekOfCode": "def get_passed_args(inspection):\n    \"\"\"\n    Retrieve user passed function arguments from the current frame from inspect\n    :param inspection: current frame arguments\n    :return: dict of arguments passed into function\n    usage:\n        import inspector\n        inspector = inspect.getargvalues(inspect.currentframe())\n        passed_args = get_passed_args(inspector)\n    \"\"\"",
        "detail": "felicity.utils.helpers",
        "documentation": {}
    },
    {
        "label": "has_value_or_is_truthy",
        "kind": 2,
        "importPath": "felicity.utils.helpers",
        "description": "felicity.utils.helpers",
        "peekOfCode": "def has_value_or_is_truthy(val) -> bool:  # noqa\n    if isinstance(val, bool):\n        return True\n    if not val:\n        return False\n    if isinstance(val, str):\n        if not val.strip():\n            return False\n    return True\ndef to_text(val) -> str:  # noqa",
        "detail": "felicity.utils.helpers",
        "documentation": {}
    },
    {
        "label": "to_text",
        "kind": 2,
        "importPath": "felicity.utils.helpers",
        "description": "felicity.utils.helpers",
        "peekOfCode": "def to_text(val) -> str:  # noqa\n    return str(val)\ndef get_from_nested(obj: dict, path: str):\n    \"\"\"\n    Traversed a json/dict object tree and returns the required value if exists\n    :param obj: dict object to be traversed\n    :param path: the paths to find the required value\n    :return: Its return the required value\n    \"\"\"\n    if not obj:",
        "detail": "felicity.utils.helpers",
        "documentation": {}
    },
    {
        "label": "get_from_nested",
        "kind": 2,
        "importPath": "felicity.utils.helpers",
        "description": "felicity.utils.helpers",
        "peekOfCode": "def get_from_nested(obj: dict, path: str):\n    \"\"\"\n    Traversed a json/dict object tree and returns the required value if exists\n    :param obj: dict object to be traversed\n    :param path: the paths to find the required value\n    :return: Its return the required value\n    \"\"\"\n    if not obj:\n        return \"\"\n    keys = path.split(\".\")",
        "detail": "felicity.utils.helpers",
        "documentation": {}
    },
    {
        "label": "delete_from_nested",
        "kind": 2,
        "importPath": "felicity.utils.helpers",
        "description": "felicity.utils.helpers",
        "peekOfCode": "def delete_from_nested(obj: dict, path: str):\n    \"\"\"\n    Traverses a json/dict object tree and deletes the required value if exists\n    :param obj: dict object to be traversed\n    :param path: the paths to find the required value\n    :return: None\n    \"\"\"\n    if not obj:\n        return\n    if not path:",
        "detail": "felicity.utils.helpers",
        "documentation": {}
    },
    {
        "label": "strtobool",
        "kind": 2,
        "importPath": "felicity.utils.helpers",
        "description": "felicity.utils.helpers",
        "peekOfCode": "def strtobool(val):\n    \"\"\"Convert a string representation of truth to true (1) or false (0).\n    True values are 'y', 'yes', 't', 'true', 'on', and '1'; false values\n    are 'n', 'no', 'f', 'false', 'off', and '0'.  Raises ValueError if\n    'val' is anything else.\n    \"\"\"\n    val = val.lower()\n    if val in (\"y\", \"yes\", \"t\", \"true\", \"on\", \"1\"):\n        return True\n    elif val in (\"n\", \"no\", \"f\", \"false\", \"off\", \"0\"):",
        "detail": "felicity.utils.helpers",
        "documentation": {}
    },
    {
        "label": "clean_paths",
        "kind": 2,
        "importPath": "felicity.utils.helpers",
        "description": "felicity.utils.helpers",
        "peekOfCode": "def clean_paths(obj: dict) -> dict:\n    paths = [\n        \"profiles.analyses.profiles\",\n        \"analyses.profiles.analyses\",\n        \"analysis_results.analysis.profiles\",\n    ]\n    for _path in paths:\n        obj = delete_from_nested(obj, _path)\n    return obj\ndef remove_circular_refs(ob, _seen=None):",
        "detail": "felicity.utils.helpers",
        "documentation": {}
    },
    {
        "label": "remove_circular_refs",
        "kind": 2,
        "importPath": "felicity.utils.helpers",
        "description": "felicity.utils.helpers",
        "peekOfCode": "def remove_circular_refs(ob, _seen=None):\n    if _seen is None:\n        _seen = set()\n    if id(ob) in _seen:\n        return None\n    _seen.add(id(ob))\n    res = ob\n    if isinstance(ob, dict):\n        res = {\n            remove_circular_refs(key, _seen): remove_circular_refs(value, _seen)",
        "detail": "felicity.utils.helpers",
        "documentation": {}
    },
    {
        "label": "load_schema_from_path",
        "kind": 2,
        "importPath": "felicity.utils.loader",
        "description": "felicity.utils.loader",
        "peekOfCode": "def load_schema_from_path(path: Union[str, os.PathLike]) -> str:\n    if os.path.isdir(path):\n        schema_list = [read_graphql_file(f) for f in sorted(walk_graphql_files(path))]\n        return \"\\n\".join(schema_list)\n    return read_graphql_file(os.path.abspath(path))\ndef walk_graphql_files(path: Union[str, os.PathLike]) -> Generator[str, None, None]:\n    extensions = (\".graphql\", \".graphqls\", \".gql\")\n    for dirpath, _, files in os.walk(str(path)):\n        for name in files:\n            if name.lower().endswith(extensions):",
        "detail": "felicity.utils.loader",
        "documentation": {}
    },
    {
        "label": "walk_graphql_files",
        "kind": 2,
        "importPath": "felicity.utils.loader",
        "description": "felicity.utils.loader",
        "peekOfCode": "def walk_graphql_files(path: Union[str, os.PathLike]) -> Generator[str, None, None]:\n    extensions = (\".graphql\", \".graphqls\", \".gql\")\n    for dirpath, _, files in os.walk(str(path)):\n        for name in files:\n            if name.lower().endswith(extensions):\n                yield os.path.join(dirpath, name)\ndef read_graphql_file(path: Union[str, os.PathLike]) -> str:\n    with open(path, \"r\", encoding=\"utf-8\") as graphql_file:\n        schema = graphql_file.read()\n    try:",
        "detail": "felicity.utils.loader",
        "documentation": {}
    },
    {
        "label": "read_graphql_file",
        "kind": 2,
        "importPath": "felicity.utils.loader",
        "description": "felicity.utils.loader",
        "peekOfCode": "def read_graphql_file(path: Union[str, os.PathLike]) -> str:\n    with open(path, \"r\", encoding=\"utf-8\") as graphql_file:\n        schema = graphql_file.read()\n    try:\n        parse(schema)\n    except GraphQLSyntaxError as e:\n        raise Exception(path, str(e)) from e\n    return schema\ndef json_from_file(filename: str) -> dict:\n    with open(f\"{filename}.json\") as json_file:",
        "detail": "felicity.utils.loader",
        "documentation": {}
    },
    {
        "label": "json_from_file",
        "kind": 2,
        "importPath": "felicity.utils.loader",
        "description": "felicity.utils.loader",
        "peekOfCode": "def json_from_file(filename: str) -> dict:\n    with open(f\"{filename}.json\") as json_file:\n        data = json.load(json_file)\n    return data",
        "detail": "felicity.utils.loader",
        "documentation": {}
    },
    {
        "label": "FelicityVersion",
        "kind": 6,
        "importPath": "felicity.version.version",
        "description": "felicity.version.version",
        "peekOfCode": "class FelicityVersion:\n    _version = __version__\n    @classmethod\n    def version(cls):\n        return cls._version\n    @staticmethod\n    def get_updates():\n        \"\"\"get latest release\"\"\"\n        return {}\n    @staticmethod",
        "detail": "felicity.version.version",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "felicity.version.version",
        "description": "felicity.version.version",
        "peekOfCode": "__version__ = '0.1.0'\nclass FelicityVersion:\n    _version = __version__\n    @classmethod\n    def version(cls):\n        return cls._version\n    @staticmethod\n    def get_updates():\n        \"\"\"get latest release\"\"\"\n        return {}",
        "detail": "felicity.version.version",
        "documentation": {}
    },
    {
        "label": "description",
        "kind": 5,
        "importPath": "felicity.main",
        "description": "felicity.main",
        "peekOfCode": "description = \"\"\"\nFelicity LIMS API helps you do awesome stuff. 🚀\nYou will be able to:\n...\n\"\"\"\napp_configs = {\"title\": \"Felicity LIMS\", \"description\": description}\nfelicity = factory(app_configs)",
        "detail": "felicity.main",
        "documentation": {}
    },
    {
        "label": "app_configs",
        "kind": 5,
        "importPath": "felicity.main",
        "description": "felicity.main",
        "peekOfCode": "app_configs = {\"title\": \"Felicity LIMS\", \"description\": description}\nfelicity = factory(app_configs)",
        "detail": "felicity.main",
        "documentation": {}
    },
    {
        "label": "felicity",
        "kind": 5,
        "importPath": "felicity.main",
        "description": "felicity.main",
        "peekOfCode": "felicity = factory(app_configs)",
        "detail": "felicity.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "felicity.prestart",
        "description": "felicity.prestart",
        "peekOfCode": "def main() -> None:\n    logger.info(\"Initializing database service\")\n    check_db_conn_status()\n    logger.info(\"Database service finished initializing\")\nif __name__ == \"__main__\":\n    main()",
        "detail": "felicity.prestart",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.prestart",
        "description": "felicity.prestart",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef main() -> None:\n    logger.info(\"Initializing database service\")\n    check_db_conn_status()\n    logger.info(\"Database service finished initializing\")\nif __name__ == \"__main__\":\n    main()",
        "detail": "felicity.prestart",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "felicity.tests_prestart",
        "description": "felicity.tests_prestart",
        "peekOfCode": "def main() -> None:\n    logger.info(\"Initializing database service\")\n    check_db_conn_status()\n    logger.info(\"Database service finished initializing\")\nif __name__ == \"__main__\":\n    main()",
        "detail": "felicity.tests_prestart",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.tests_prestart",
        "description": "felicity.tests_prestart",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef main() -> None:\n    logger.info(\"Initializing database service\")\n    check_db_conn_status()\n    logger.info(\"Database service finished initializing\")\nif __name__ == \"__main__\":\n    main()",
        "detail": "felicity.tests_prestart",
        "documentation": {}
    },
    {
        "label": "test_celery",
        "kind": 2,
        "importPath": "felicity.worker",
        "description": "felicity.worker",
        "peekOfCode": "def test_celery(word: str) -> str:\n    return f\"test task return {word}\"",
        "detail": "felicity.worker",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "felicity.worker_prestart",
        "description": "felicity.worker_prestart",
        "peekOfCode": "def main() -> None:\n    logger.info(\"Initializing database service\")\n    check_db_conn_status()\n    logger.info(\"Database service finished initializing\")\nif __name__ == \"__main__\":\n    main()",
        "detail": "felicity.worker_prestart",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "felicity.worker_prestart",
        "description": "felicity.worker_prestart",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef main() -> None:\n    logger.info(\"Initializing database service\")\n    check_db_conn_status()\n    logger.info(\"Database service finished initializing\")\nif __name__ == \"__main__\":\n    main()",
        "detail": "felicity.worker_prestart",
        "documentation": {}
    },
    {
        "label": "himmelblau",
        "kind": 2,
        "importPath": "node_modules..pnpm.@antv+g2plot@2.4.31.node_modules.fmin.test",
        "description": "node_modules..pnpm.@antv+g2plot@2.4.31.node_modules.fmin.test",
        "peekOfCode": "def himmelblau(x, y):\n    return (x * x + y - 11) * ( x * x + y - 11) + (x + y * y - 7) * (x + y * y - 7)\ndef beale(x, y):\n    return math.pow(1.5 - x + x*y, 2) + math.pow(2.25 - x + x*y*y, 2) + math.pow(2.625 - x + x*y*y*y, 2);\ndef main():\n    if True:\n        initial = [-3.670609291875735,3.8585484651848674]\n        solution = scipy.optimize.fmin(lambda x: beale(x[0], x[1]),\n                                       initial, retall=True)\n        print \"loss\", beale(solution[0][0], solution[0][1])",
        "detail": "node_modules..pnpm.@antv+g2plot@2.4.31.node_modules.fmin.test",
        "documentation": {}
    },
    {
        "label": "beale",
        "kind": 2,
        "importPath": "node_modules..pnpm.@antv+g2plot@2.4.31.node_modules.fmin.test",
        "description": "node_modules..pnpm.@antv+g2plot@2.4.31.node_modules.fmin.test",
        "peekOfCode": "def beale(x, y):\n    return math.pow(1.5 - x + x*y, 2) + math.pow(2.25 - x + x*y*y, 2) + math.pow(2.625 - x + x*y*y*y, 2);\ndef main():\n    if True:\n        initial = [-3.670609291875735,3.8585484651848674]\n        solution = scipy.optimize.fmin(lambda x: beale(x[0], x[1]),\n                                       initial, retall=True)\n        print \"loss\", beale(solution[0][0], solution[0][1])\n    elif False:\n        def banana(x, y):",
        "detail": "node_modules..pnpm.@antv+g2plot@2.4.31.node_modules.fmin.test",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "node_modules..pnpm.@antv+g2plot@2.4.31.node_modules.fmin.test",
        "description": "node_modules..pnpm.@antv+g2plot@2.4.31.node_modules.fmin.test",
        "peekOfCode": "def main():\n    if True:\n        initial = [-3.670609291875735,3.8585484651848674]\n        solution = scipy.optimize.fmin(lambda x: beale(x[0], x[1]),\n                                       initial, retall=True)\n        print \"loss\", beale(solution[0][0], solution[0][1])\n    elif False:\n        def banana(x, y):\n            return (1 - x) * (1 - x) + 100 * (y - x * x) * ( y - x * x)\n        initial = [-1.675793744623661,-1.945310341194272]",
        "detail": "node_modules..pnpm.@antv+g2plot@2.4.31.node_modules.fmin.test",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.flatted",
        "description": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.flatted",
        "description": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.flatted",
        "description": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.flatted",
        "description": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "node_modules..pnpm.flat-cache@3.2.0.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.flatted",
        "description": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.flatted",
        "description": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.flatted",
        "description": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.flatted",
        "description": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "node_modules..pnpm.flatted@3.2.9.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "himmelblau",
        "kind": 2,
        "importPath": "node_modules..pnpm.fmin@0.0.2.node_modules.fmin.test",
        "description": "node_modules..pnpm.fmin@0.0.2.node_modules.fmin.test",
        "peekOfCode": "def himmelblau(x, y):\n    return (x * x + y - 11) * ( x * x + y - 11) + (x + y * y - 7) * (x + y * y - 7)\ndef beale(x, y):\n    return math.pow(1.5 - x + x*y, 2) + math.pow(2.25 - x + x*y*y, 2) + math.pow(2.625 - x + x*y*y*y, 2);\ndef main():\n    if True:\n        initial = [-3.670609291875735,3.8585484651848674]\n        solution = scipy.optimize.fmin(lambda x: beale(x[0], x[1]),\n                                       initial, retall=True)\n        print \"loss\", beale(solution[0][0], solution[0][1])",
        "detail": "node_modules..pnpm.fmin@0.0.2.node_modules.fmin.test",
        "documentation": {}
    },
    {
        "label": "beale",
        "kind": 2,
        "importPath": "node_modules..pnpm.fmin@0.0.2.node_modules.fmin.test",
        "description": "node_modules..pnpm.fmin@0.0.2.node_modules.fmin.test",
        "peekOfCode": "def beale(x, y):\n    return math.pow(1.5 - x + x*y, 2) + math.pow(2.25 - x + x*y*y, 2) + math.pow(2.625 - x + x*y*y*y, 2);\ndef main():\n    if True:\n        initial = [-3.670609291875735,3.8585484651848674]\n        solution = scipy.optimize.fmin(lambda x: beale(x[0], x[1]),\n                                       initial, retall=True)\n        print \"loss\", beale(solution[0][0], solution[0][1])\n    elif False:\n        def banana(x, y):",
        "detail": "node_modules..pnpm.fmin@0.0.2.node_modules.fmin.test",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "node_modules..pnpm.fmin@0.0.2.node_modules.fmin.test",
        "description": "node_modules..pnpm.fmin@0.0.2.node_modules.fmin.test",
        "peekOfCode": "def main():\n    if True:\n        initial = [-3.670609291875735,3.8585484651848674]\n        solution = scipy.optimize.fmin(lambda x: beale(x[0], x[1]),\n                                       initial, retall=True)\n        print \"loss\", beale(solution[0][0], solution[0][1])\n    elif False:\n        def banana(x, y):\n            return (1 - x) * (1 - x) + 100 * (y - x * x) * ( y - x * x)\n        initial = [-1.675793744623661,-1.945310341194272]",
        "detail": "node_modules..pnpm.fmin@0.0.2.node_modules.fmin.test",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "node_modules..pnpm.node_modules.flatted.python.flatted",
        "description": "node_modules..pnpm.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "node_modules..pnpm.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "node_modules..pnpm.node_modules.flatted.python.flatted",
        "description": "node_modules..pnpm.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "node_modules..pnpm.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "node_modules..pnpm.node_modules.flatted.python.flatted",
        "description": "node_modules..pnpm.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "node_modules..pnpm.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "node_modules..pnpm.node_modules.flatted.python.flatted",
        "description": "node_modules..pnpm.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "node_modules..pnpm.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "node_modules..pnpm.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "node_modules..pnpm.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "node_modules..pnpm.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "node_modules..pnpm.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "node_modules..pnpm.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "node_modules..pnpm.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "node_modules..pnpm.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "node_modules..pnpm.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "node_modules..pnpm.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "node_modules..pnpm.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "node_modules..pnpm.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "node_modules..pnpm.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "node_modules..pnpm.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "node_modules..pnpm.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "node_modules..pnpm.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "node_modules..pnpm.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "node_modules..pnpm.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "node_modules..pnpm.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "node_modules..pnpm.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "node_modules..pnpm.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "node_modules..pnpm.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "node_modules..pnpm.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "node_modules..pnpm.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "node_modules..pnpm.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "node_modules..pnpm.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "node_modules..pnpm.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "node_modules..pnpm.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "node_modules..pnpm.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "node_modules..pnpm.node_modules.flatted.python.test",
        "description": "node_modules..pnpm.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "node_modules..pnpm.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "himmelblau",
        "kind": 2,
        "importPath": "node_modules..pnpm.node_modules.fmin.test",
        "description": "node_modules..pnpm.node_modules.fmin.test",
        "peekOfCode": "def himmelblau(x, y):\n    return (x * x + y - 11) * ( x * x + y - 11) + (x + y * y - 7) * (x + y * y - 7)\ndef beale(x, y):\n    return math.pow(1.5 - x + x*y, 2) + math.pow(2.25 - x + x*y*y, 2) + math.pow(2.625 - x + x*y*y*y, 2);\ndef main():\n    if True:\n        initial = [-3.670609291875735,3.8585484651848674]\n        solution = scipy.optimize.fmin(lambda x: beale(x[0], x[1]),\n                                       initial, retall=True)\n        print \"loss\", beale(solution[0][0], solution[0][1])",
        "detail": "node_modules..pnpm.node_modules.fmin.test",
        "documentation": {}
    },
    {
        "label": "beale",
        "kind": 2,
        "importPath": "node_modules..pnpm.node_modules.fmin.test",
        "description": "node_modules..pnpm.node_modules.fmin.test",
        "peekOfCode": "def beale(x, y):\n    return math.pow(1.5 - x + x*y, 2) + math.pow(2.25 - x + x*y*y, 2) + math.pow(2.625 - x + x*y*y*y, 2);\ndef main():\n    if True:\n        initial = [-3.670609291875735,3.8585484651848674]\n        solution = scipy.optimize.fmin(lambda x: beale(x[0], x[1]),\n                                       initial, retall=True)\n        print \"loss\", beale(solution[0][0], solution[0][1])\n    elif False:\n        def banana(x, y):",
        "detail": "node_modules..pnpm.node_modules.fmin.test",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "node_modules..pnpm.node_modules.fmin.test",
        "description": "node_modules..pnpm.node_modules.fmin.test",
        "peekOfCode": "def main():\n    if True:\n        initial = [-3.670609291875735,3.8585484651848674]\n        solution = scipy.optimize.fmin(lambda x: beale(x[0], x[1]),\n                                       initial, retall=True)\n        print \"loss\", beale(solution[0][0], solution[0][1])\n    elif False:\n        def banana(x, y):\n            return (1 - x) * (1 - x) + 100 * (y - x * x) * ( y - x * x)\n        initial = [-1.675793744623661,-1.945310341194272]",
        "detail": "node_modules..pnpm.node_modules.fmin.test",
        "documentation": {}
    }
]