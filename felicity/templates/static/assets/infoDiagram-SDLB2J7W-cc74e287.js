import{_ as a,l as o,L as p,k as s,M as m}from"./UmoEditor-894ec9ac.js";import{p as n}from"./mermaid-parser.core-d837cad6.js";import"./index-03a7f0eb.js";import"./string-6dabfbe0.js";import"./merge-2849153f.js";import"./_isIterateeCall-6b47236c.js";import"./isArray-513c67aa.js";import"./document.mutations-3bf537a7.js";import"./ArrowLeftIcon-d0161c60.js";import"./_baseForOwn-656fabb0.js";import"./_basePickBy-b83124ee.js";import"./_baseUniq-164d8f1a.js";import"./toFinite-27d2562d.js";import"./_baseSet-32e3b41c.js";import"./isString-588a66cc.js";import"./clone-e28103f1.js";var g={parse:a(async r=>{const t=await n("info",r);o.debug(t)},"parse")},v={version:m.version},d=a(()=>v.version,"getVersion"),c={getVersion:d},l=a((r,t,i)=>{o.debug(`rendering info diagram
`+r);const e=p(t);s(e,100,400,!0),e.append("g").append("text").attr("x",100).attr("y",40).attr("class","version").attr("font-size",32).style("text-anchor","middle").text(`v${i}`)},"draw"),f={draw:l},I={parser:g,db:c,renderer:f};export{I as diagram};
