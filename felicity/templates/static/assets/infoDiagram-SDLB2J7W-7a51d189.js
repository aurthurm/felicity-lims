import{_ as a,l as o,L as p,k as s,M as m}from"./UmoEditor-439f7d0d.js";import{p as n}from"./mermaid-parser.core-eac0260b.js";import"./index-d30fd8e2.js";import"./string-6dabfbe0.js";import"./merge-7f5b15d7.js";import"./_isIterateeCall-a4fbb5d5.js";import"./isArray-513c67aa.js";import"./document.mutations-060e3e00.js";import"./ArrowLeftIcon-4157afcf.js";import"./_baseForOwn-f8b6c6a4.js";import"./_basePickBy-59ff9dd7.js";import"./_baseUniq-5061d313.js";import"./toFinite-76798218.js";import"./_baseSet-fa2fd3bf.js";import"./isString-1cf7a4aa.js";import"./clone-5de9f70c.js";var g={parse:a(async r=>{const t=await n("info",r);o.debug(t)},"parse")},v={version:m.version},d=a(()=>v.version,"getVersion"),c={getVersion:d},l=a((r,t,i)=>{o.debug(`rendering info diagram
`+r);const e=p(t);s(e,100,400,!0),e.append("g").append("text").attr("x",100).attr("y",40).attr("class","version").attr("font-size",32).style("text-anchor","middle").text(`v${i}`)},"draw"),f={draw:l},I={parser:g,db:c,renderer:f};export{I as diagram};
