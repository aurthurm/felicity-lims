import{I as o,Q as n}from"./index-68ba4247.js";import{U as u,c as a}from"./_queries-6796a35a.js";const{withClientQuery:i}=o(),p=n("user",{state:()=>({users:[],usersPageInfo:void 0,usersTotalCount:0,fetchingUsers:!1,groups:[],fetchingGroups:!1,permissions:[]}),getters:{getUsers:s=>s.users,getSamplePageInfo:s=>s.usersPageInfo,getGroups:s=>s.groups,getPermissions:s=>s.permissions},actions:{async fetchUsers(s){this.fetchingUsers=!0,await i(u,s,"userAll").then(e=>{this.fetchingUsers=!1,this.users=e.items?.filter(t=>t.email!="system_daemon@system.daemon")??[],this.usersTotalCount=e.totalCount,this.usersPageInfo=e.pageInfo}).catch(e=>{this.fetchingUsers=!1})},addUser(s){this.users?.unshift(s)},updateUser(s){const e=this.users?.findIndex(t=>t.uid===s?.uid);e&&e>-1&&(this.users[e]=s)},async fetchGroupsAndPermissions(){this.fetchingGroups=!0,await i(a,{},void 0).then(s=>{this.fetchingGroups=!1,this.groups=s.groupAll,this.permissions=s.permissionAll}).catch(s=>this.fetchingGroups=!1)},addGroup(s){this.groups?.unshift(s)},updateGroup(s){const e=this.groups?.findIndex(t=>t.uid===s?.uid);e>-1&&(this.groups[e]=s)},updateGroupsAndPermissions(s){let e=s?.group;const t=this.groups?.findIndex(r=>r.uid===e?.uid);t>-1&&(e.permissions=e?.permissions||[],this.groups[t]=e)},getRoles(){const s=new Map;for(const e of this.groups)s.set(e.name,e.name);return s},addUserAuth(s){},updateUserAuth(s){}}});export{p as u};
