[
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "UnicodeText",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "event",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "inspect",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "LargeBinary",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "inspect",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "LargeBinary",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "LargeBinary",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "LargeBinary",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "declared_attr",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "declared_attr",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "class_mapper",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "backref",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "class_mapper",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract.entity",
        "description": "felicity.apps.abstract.entity",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.entity",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract.entity",
        "description": "felicity.apps.abstract.entity",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.entity",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract.entity",
        "description": "felicity.apps.abstract.entity",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.entity",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract.entity",
        "description": "felicity.apps.abstract.entity",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.entity",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract.entity",
        "description": "felicity.apps.abstract.entity",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.entity",
        "documentation": {}
    },
    {
        "label": "AuditHistoryMixin",
        "importPath": "felicity.apps.auditlog.mixin",
        "description": "felicity.apps.auditlog.mixin",
        "isExtraImport": true,
        "detail": "felicity.apps.auditlog.mixin",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NoReturn",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NoReturn",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ForwardRef",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncAttrs",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "ReprMixin",
        "importPath": "sqlalchemy_mixins",
        "description": "sqlalchemy_mixins",
        "isExtraImport": true,
        "detail": "sqlalchemy_mixins",
        "documentation": {}
    },
    {
        "label": "SerializeMixin",
        "importPath": "sqlalchemy_mixins",
        "description": "sqlalchemy_mixins",
        "isExtraImport": true,
        "detail": "sqlalchemy_mixins",
        "documentation": {}
    },
    {
        "label": "format_datetime",
        "importPath": "felicity.core.dtz",
        "description": "felicity.core.dtz",
        "isExtraImport": true,
        "detail": "felicity.core.dtz",
        "documentation": {}
    },
    {
        "label": "format_datetime",
        "importPath": "felicity.core.dtz",
        "description": "felicity.core.dtz",
        "isExtraImport": true,
        "detail": "felicity.core.dtz",
        "documentation": {}
    },
    {
        "label": "datetime_math",
        "importPath": "felicity.core.dtz",
        "description": "felicity.core.dtz",
        "isExtraImport": true,
        "detail": "felicity.core.dtz",
        "documentation": {}
    },
    {
        "label": "format_datetime",
        "importPath": "felicity.core.dtz",
        "description": "felicity.core.dtz",
        "isExtraImport": true,
        "detail": "felicity.core.dtz",
        "documentation": {}
    },
    {
        "label": "get_time_now",
        "importPath": "felicity.core.dtz",
        "description": "felicity.core.dtz",
        "isExtraImport": true,
        "detail": "felicity.core.dtz",
        "documentation": {}
    },
    {
        "label": "get_time_now",
        "importPath": "felicity.core.dtz",
        "description": "felicity.core.dtz",
        "isExtraImport": true,
        "detail": "felicity.core.dtz",
        "documentation": {}
    },
    {
        "label": "format_datetime",
        "importPath": "felicity.core.dtz",
        "description": "felicity.core.dtz",
        "isExtraImport": true,
        "detail": "felicity.core.dtz",
        "documentation": {}
    },
    {
        "label": "get_flake_uid",
        "importPath": "felicity.core.uid_gen",
        "description": "felicity.core.uid_gen",
        "isExtraImport": true,
        "detail": "felicity.core.uid_gen",
        "documentation": {}
    },
    {
        "label": "BaseNestedSets",
        "importPath": "felicity.libs.sqlalchemy_mptt",
        "description": "felicity.libs.sqlalchemy_mptt",
        "isExtraImport": true,
        "detail": "felicity.libs.sqlalchemy_mptt",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "bindparam",
        "importPath": "sqlalchemy.sql.expression",
        "description": "sqlalchemy.sql.expression",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.expression",
        "documentation": {}
    },
    {
        "label": "marshaller",
        "importPath": "felicity.apps.common.utils.serializer",
        "description": "felicity.apps.common.utils.serializer",
        "isExtraImport": true,
        "detail": "felicity.apps.common.utils.serializer",
        "documentation": {}
    },
    {
        "label": "marshaller",
        "importPath": "felicity.apps.common.utils.serializer",
        "description": "felicity.apps.common.utils.serializer",
        "isExtraImport": true,
        "detail": "felicity.apps.common.utils.serializer",
        "documentation": {}
    },
    {
        "label": "marshaller",
        "importPath": "felicity.apps.common.utils.serializer",
        "description": "felicity.apps.common.utils.serializer",
        "isExtraImport": true,
        "detail": "felicity.apps.common.utils.serializer",
        "documentation": {}
    },
    {
        "label": "marshaller",
        "importPath": "felicity.apps.common.utils.serializer",
        "description": "felicity.apps.common.utils.serializer",
        "isExtraImport": true,
        "detail": "felicity.apps.common.utils.serializer",
        "documentation": {}
    },
    {
        "label": "marshaller",
        "importPath": "felicity.apps.common.utils.serializer",
        "description": "felicity.apps.common.utils.serializer",
        "isExtraImport": true,
        "detail": "felicity.apps.common.utils.serializer",
        "documentation": {}
    },
    {
        "label": "marshaller",
        "importPath": "felicity.apps.common.utils.serializer",
        "description": "felicity.apps.common.utils.serializer",
        "isExtraImport": true,
        "detail": "felicity.apps.common.utils.serializer",
        "documentation": {}
    },
    {
        "label": "marshaller",
        "importPath": "felicity.apps.common.utils.serializer",
        "description": "felicity.apps.common.utils.serializer",
        "isExtraImport": true,
        "detail": "felicity.apps.common.utils.serializer",
        "documentation": {}
    },
    {
        "label": "marshaller",
        "importPath": "felicity.apps.common.utils.serializer",
        "description": "felicity.apps.common.utils.serializer",
        "isExtraImport": true,
        "detail": "felicity.apps.common.utils.serializer",
        "documentation": {}
    },
    {
        "label": "marshaller",
        "importPath": "felicity.apps.common.utils.serializer",
        "description": "felicity.apps.common.utils.serializer",
        "isExtraImport": true,
        "detail": "felicity.apps.common.utils.serializer",
        "documentation": {}
    },
    {
        "label": "marshaller",
        "importPath": "felicity.apps.common.utils.serializer",
        "description": "felicity.apps.common.utils.serializer",
        "isExtraImport": true,
        "detail": "felicity.apps.common.utils.serializer",
        "documentation": {}
    },
    {
        "label": "marshaller",
        "importPath": "felicity.apps.common.utils.serializer",
        "description": "felicity.apps.common.utils.serializer",
        "isExtraImport": true,
        "detail": "felicity.apps.common.utils.serializer",
        "documentation": {}
    },
    {
        "label": "marshaller",
        "importPath": "felicity.apps.common.utils.serializer",
        "description": "felicity.apps.common.utils.serializer",
        "isExtraImport": true,
        "detail": "felicity.apps.common.utils.serializer",
        "documentation": {}
    },
    {
        "label": "marshaller",
        "importPath": "felicity.apps.common.utils.serializer",
        "description": "felicity.apps.common.utils.serializer",
        "isExtraImport": true,
        "detail": "felicity.apps.common.utils.serializer",
        "documentation": {}
    },
    {
        "label": "marshaller",
        "importPath": "felicity.apps.common.utils.serializer",
        "description": "felicity.apps.common.utils.serializer",
        "isExtraImport": true,
        "detail": "felicity.apps.common.utils.serializer",
        "documentation": {}
    },
    {
        "label": "marshaller",
        "importPath": "felicity.apps.common.utils.serializer",
        "description": "felicity.apps.common.utils.serializer",
        "isExtraImport": true,
        "detail": "felicity.apps.common.utils.serializer",
        "documentation": {}
    },
    {
        "label": "EdgeNode",
        "importPath": "felicity.database.paging",
        "description": "felicity.database.paging",
        "isExtraImport": true,
        "detail": "felicity.database.paging",
        "documentation": {}
    },
    {
        "label": "PageCursor",
        "importPath": "felicity.database.paging",
        "description": "felicity.database.paging",
        "isExtraImport": true,
        "detail": "felicity.database.paging",
        "documentation": {}
    },
    {
        "label": "PageInfo",
        "importPath": "felicity.database.paging",
        "description": "felicity.database.paging",
        "isExtraImport": true,
        "detail": "felicity.database.paging",
        "documentation": {}
    },
    {
        "label": "PageCursor",
        "importPath": "felicity.database.paging",
        "description": "felicity.database.paging",
        "isExtraImport": true,
        "detail": "felicity.database.paging",
        "documentation": {}
    },
    {
        "label": "PageCursor",
        "importPath": "felicity.database.paging",
        "description": "felicity.database.paging",
        "isExtraImport": true,
        "detail": "felicity.database.paging",
        "documentation": {}
    },
    {
        "label": "QueryBuilder",
        "importPath": "felicity.database.queryset",
        "description": "felicity.database.queryset",
        "isExtraImport": true,
        "detail": "felicity.database.queryset",
        "documentation": {}
    },
    {
        "label": "settable_attributes",
        "importPath": "felicity.database.queryset",
        "description": "felicity.database.queryset",
        "isExtraImport": true,
        "detail": "felicity.database.queryset",
        "documentation": {}
    },
    {
        "label": "smart_query",
        "importPath": "felicity.database.queryset",
        "description": "felicity.database.queryset",
        "isExtraImport": true,
        "detail": "felicity.database.queryset",
        "documentation": {}
    },
    {
        "label": "async_session",
        "importPath": "felicity.database.session",
        "description": "felicity.database.session",
        "isExtraImport": true,
        "detail": "felicity.database.session",
        "documentation": {}
    },
    {
        "label": "async_session",
        "importPath": "felicity.database.session",
        "description": "felicity.database.session",
        "isExtraImport": true,
        "detail": "felicity.database.session",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract.repository",
        "description": "felicity.apps.abstract.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.repository",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract.repository",
        "description": "felicity.apps.abstract.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.repository",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract.repository",
        "description": "felicity.apps.abstract.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.repository",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract.repository",
        "description": "felicity.apps.abstract.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.repository",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract.repository",
        "description": "felicity.apps.abstract.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.repository",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract.repository",
        "description": "felicity.apps.abstract.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.repository",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract.repository",
        "description": "felicity.apps.abstract.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.repository",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract.repository",
        "description": "felicity.apps.abstract.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.repository",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract.repository",
        "description": "felicity.apps.abstract.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.repository",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract.repository",
        "description": "felicity.apps.abstract.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.repository",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract.repository",
        "description": "felicity.apps.abstract.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.repository",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract.repository",
        "description": "felicity.apps.abstract.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.repository",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract.repository",
        "description": "felicity.apps.abstract.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.repository",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract.repository",
        "description": "felicity.apps.abstract.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.repository",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract.repository",
        "description": "felicity.apps.abstract.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.repository",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract.repository",
        "description": "felicity.apps.abstract.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.repository",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract.repository",
        "description": "felicity.apps.abstract.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.repository",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract.repository",
        "description": "felicity.apps.abstract.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.repository",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract.repository",
        "description": "felicity.apps.abstract.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.repository",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract.repository",
        "description": "felicity.apps.abstract.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.repository",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseMPTT",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseMPTT",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseMPTT",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "importPath": "felicity.apps.abstract",
        "description": "felicity.apps.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract",
        "documentation": {}
    },
    {
        "label": "QCLevel",
        "importPath": "felicity.apps.analysis.entities.qc",
        "description": "felicity.apps.analysis.entities.qc",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.qc",
        "documentation": {}
    },
    {
        "label": "QCSet",
        "importPath": "felicity.apps.analysis.entities.qc",
        "description": "felicity.apps.analysis.entities.qc",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.qc",
        "documentation": {}
    },
    {
        "label": "QCLevel",
        "importPath": "felicity.apps.analysis.entities.qc",
        "description": "felicity.apps.analysis.entities.qc",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.qc",
        "documentation": {}
    },
    {
        "label": "QCReference",
        "importPath": "felicity.apps.analysis.entities.qc",
        "description": "felicity.apps.analysis.entities.qc",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.qc",
        "documentation": {}
    },
    {
        "label": "QCSet",
        "importPath": "felicity.apps.analysis.entities.qc",
        "description": "felicity.apps.analysis.entities.qc",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.qc",
        "documentation": {}
    },
    {
        "label": "QCTemplate",
        "importPath": "felicity.apps.analysis.entities.qc",
        "description": "felicity.apps.analysis.entities.qc",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.qc",
        "documentation": {}
    },
    {
        "label": "QCLevel",
        "importPath": "felicity.apps.analysis.entities.qc",
        "description": "felicity.apps.analysis.entities.qc",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.qc",
        "documentation": {}
    },
    {
        "label": "QCSet",
        "importPath": "felicity.apps.analysis.entities.qc",
        "description": "felicity.apps.analysis.entities.qc",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.qc",
        "documentation": {}
    },
    {
        "label": "QCTemplate",
        "importPath": "felicity.apps.analysis.entities.qc",
        "description": "felicity.apps.analysis.entities.qc",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.qc",
        "documentation": {}
    },
    {
        "label": "QCTemplate",
        "importPath": "felicity.apps.analysis.entities.qc",
        "description": "felicity.apps.analysis.entities.qc",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.qc",
        "documentation": {}
    },
    {
        "label": "ResultType",
        "importPath": "felicity.apps.analysis.enum",
        "description": "felicity.apps.analysis.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.enum",
        "documentation": {}
    },
    {
        "label": "SampleState",
        "importPath": "felicity.apps.analysis.enum",
        "description": "felicity.apps.analysis.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.enum",
        "documentation": {}
    },
    {
        "label": "ResultState",
        "importPath": "felicity.apps.analysis.enum",
        "description": "felicity.apps.analysis.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.enum",
        "documentation": {}
    },
    {
        "label": "SampleState",
        "importPath": "felicity.apps.analysis.enum",
        "description": "felicity.apps.analysis.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.enum",
        "documentation": {}
    },
    {
        "label": "ResultState",
        "importPath": "felicity.apps.analysis.enum",
        "description": "felicity.apps.analysis.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.enum",
        "documentation": {}
    },
    {
        "label": "SampleState",
        "importPath": "felicity.apps.analysis.enum",
        "description": "felicity.apps.analysis.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.enum",
        "documentation": {}
    },
    {
        "label": "States",
        "importPath": "felicity.apps.analysis.enum",
        "description": "felicity.apps.analysis.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.enum",
        "documentation": {}
    },
    {
        "label": "States",
        "importPath": "felicity.apps.analysis.enum",
        "description": "felicity.apps.analysis.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.enum",
        "documentation": {}
    },
    {
        "label": "ResultState",
        "importPath": "felicity.apps.analysis.enum",
        "description": "felicity.apps.analysis.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.enum",
        "documentation": {}
    },
    {
        "label": "SampleState",
        "importPath": "felicity.apps.analysis.enum",
        "description": "felicity.apps.analysis.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.enum",
        "documentation": {}
    },
    {
        "label": "SampleState",
        "importPath": "felicity.apps.analysis.enum",
        "description": "felicity.apps.analysis.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.enum",
        "documentation": {}
    },
    {
        "label": "SampleState",
        "importPath": "felicity.apps.analysis.enum",
        "description": "felicity.apps.analysis.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.enum",
        "documentation": {}
    },
    {
        "label": "SampleState",
        "importPath": "felicity.apps.analysis.enum",
        "description": "felicity.apps.analysis.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.enum",
        "documentation": {}
    },
    {
        "label": "ResultState",
        "importPath": "felicity.apps.analysis.enum",
        "description": "felicity.apps.analysis.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.enum",
        "documentation": {}
    },
    {
        "label": "ResultState",
        "importPath": "felicity.apps.analysis.enum",
        "description": "felicity.apps.analysis.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.enum",
        "documentation": {}
    },
    {
        "label": "SampleState",
        "importPath": "felicity.apps.analysis.enum",
        "description": "felicity.apps.analysis.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.enum",
        "documentation": {}
    },
    {
        "label": "ResultState",
        "importPath": "felicity.apps.analysis.enum",
        "description": "felicity.apps.analysis.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.enum",
        "documentation": {}
    },
    {
        "label": "ResultState",
        "importPath": "felicity.apps.analysis.enum",
        "description": "felicity.apps.analysis.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.enum",
        "documentation": {}
    },
    {
        "label": "SampleState",
        "importPath": "felicity.apps.analysis.enum",
        "description": "felicity.apps.analysis.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.enum",
        "documentation": {}
    },
    {
        "label": "ResultState",
        "importPath": "felicity.apps.analysis.enum",
        "description": "felicity.apps.analysis.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.enum",
        "documentation": {}
    },
    {
        "label": "entities",
        "importPath": "felicity.apps.client",
        "description": "felicity.apps.client",
        "isExtraImport": true,
        "detail": "felicity.apps.client",
        "documentation": {}
    },
    {
        "label": "entities",
        "importPath": "felicity.apps.patient",
        "description": "felicity.apps.patient",
        "isExtraImport": true,
        "detail": "felicity.apps.patient",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.patient",
        "description": "felicity.apps.patient",
        "isExtraImport": true,
        "detail": "felicity.apps.patient",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "UserPreference",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "UserPreference",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.entities",
        "description": "felicity.apps.user.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.user.entities",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "felicity.apps.setup.entities.setup",
        "description": "felicity.apps.setup.entities.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities.setup",
        "documentation": {}
    },
    {
        "label": "Laboratory",
        "importPath": "felicity.apps.setup.entities.setup",
        "description": "felicity.apps.setup.entities.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities.setup",
        "documentation": {}
    },
    {
        "label": "LaboratorySetting",
        "importPath": "felicity.apps.setup.entities.setup",
        "description": "felicity.apps.setup.entities.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities.setup",
        "documentation": {}
    },
    {
        "label": "Laboratory",
        "importPath": "felicity.apps.setup.entities.setup",
        "description": "felicity.apps.setup.entities.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities.setup",
        "documentation": {}
    },
    {
        "label": "LaboratorySetting",
        "importPath": "felicity.apps.setup.entities.setup",
        "description": "felicity.apps.setup.entities.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities.setup",
        "documentation": {}
    },
    {
        "label": "Laboratory",
        "importPath": "felicity.apps.setup.entities.setup",
        "description": "felicity.apps.setup.entities.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities.setup",
        "documentation": {}
    },
    {
        "label": "LaboratorySetting",
        "importPath": "felicity.apps.setup.entities.setup",
        "description": "felicity.apps.setup.entities.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities.setup",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "felicity.apps.setup.entities.setup",
        "description": "felicity.apps.setup.entities.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities.setup",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "felicity.apps.setup.entities.setup",
        "description": "felicity.apps.setup.entities.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities.setup",
        "documentation": {}
    },
    {
        "label": "Laboratory",
        "importPath": "felicity.apps.setup.entities.setup",
        "description": "felicity.apps.setup.entities.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities.setup",
        "documentation": {}
    },
    {
        "label": "LaboratorySetting",
        "importPath": "felicity.apps.setup.entities.setup",
        "description": "felicity.apps.setup.entities.setup",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities.setup",
        "documentation": {}
    },
    {
        "label": "Analysis",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCategory",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCoding",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactor",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimit",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisInterim",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRequest",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecification",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisTemplate",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertainty",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "CodingStandard",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "ProfileCoding",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "RejectionReason",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "ResultOption",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "SampleType",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "SampleTypeCoding",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "analysis_profile",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "QCSet",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "SampleType",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRequest",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Analysis",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "sample_analysis",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.entities.analysis",
        "description": "felicity.apps.analysis.entities.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "importPath": "felicity.apps.analysis.entities.results",
        "description": "felicity.apps.analysis.entities.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.results",
        "documentation": {}
    },
    {
        "label": "ResultMutation",
        "importPath": "felicity.apps.analysis.entities.results",
        "description": "felicity.apps.analysis.entities.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.results",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "importPath": "felicity.apps.analysis.entities.results",
        "description": "felicity.apps.analysis.entities.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.results",
        "documentation": {}
    },
    {
        "label": "ResultMutation",
        "importPath": "felicity.apps.analysis.entities.results",
        "description": "felicity.apps.analysis.entities.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.results",
        "documentation": {}
    },
    {
        "label": "result_verification",
        "importPath": "felicity.apps.analysis.entities.results",
        "description": "felicity.apps.analysis.entities.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.results",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "importPath": "felicity.apps.analysis.entities.results",
        "description": "felicity.apps.analysis.entities.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.results",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "importPath": "felicity.apps.analysis.entities.results",
        "description": "felicity.apps.analysis.entities.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.results",
        "documentation": {}
    },
    {
        "label": "result_verification",
        "importPath": "felicity.apps.analysis.entities.results",
        "description": "felicity.apps.analysis.entities.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.results",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "importPath": "felicity.apps.analysis.entities.results",
        "description": "felicity.apps.analysis.entities.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.results",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "importPath": "felicity.apps.analysis.entities.results",
        "description": "felicity.apps.analysis.entities.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities.results",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "importPath": "felicity.apps.abstract.service",
        "description": "felicity.apps.abstract.service",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.service",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryRepository",
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCodingRepository",
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactorRepository",
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimitRepository",
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisInterimRepository",
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRepository",
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestRepository",
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecificationRepository",
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisTemplateRepository",
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertaintyRepository",
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "CodingStandardRepository",
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "ProfileCodingRepository",
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "ProfileRepository",
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "RejectionReasonRepository",
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "ResultOptionRepository",
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "SampleRepository",
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "SampleTypeCodingRepository",
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "SampleTypeRepository",
        "importPath": "felicity.apps.analysis.repository.analysis",
        "description": "felicity.apps.analysis.repository.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "Analysis",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCategory",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryUpdate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCoding",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCodingCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCodingUpdate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactor",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactorCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactorUpdate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimit",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimitCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimitUpdate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisInterim",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisInterimCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisInterimUpdate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisRequest",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestUpdate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecification",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecificationCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecificationUpdate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisTemplate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisTemplateCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisTemplateUpdate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertainty",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertaintyCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertaintyUpdate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisUpdate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "CodingStandard",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "CodingStandardCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "CodingStandardUpdate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileCoding",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileCodingCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileCodingUpdate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileUpdate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "RejectionReason",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "RejectionReasonCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "RejectionReasonUpdate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ResultOption",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ResultOptionCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ResultOptionUpdate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "Sample",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleType",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeCoding",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeCodingCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeCodingUpdate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeUpdate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleUpdate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCLevelCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCLevelUpdate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCSetCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCSetUpdate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCTemplateCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCTemplateUpdate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultUpdate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisBasic",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleInDB",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "Analysis",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleType",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultUpdate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleBaseInDB",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisBaseInDB",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCLevelInDB",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCSetCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleCreate",
        "importPath": "felicity.apps.analysis.schemas",
        "description": "felicity.apps.analysis.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultService",
        "importPath": "felicity.apps.analysis.services.result",
        "description": "felicity.apps.analysis.services.result",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.services.result",
        "documentation": {}
    },
    {
        "label": "AnalysisResultService",
        "importPath": "felicity.apps.analysis.services.result",
        "description": "felicity.apps.analysis.services.result",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.services.result",
        "documentation": {}
    },
    {
        "label": "ResultMutationService",
        "importPath": "felicity.apps.analysis.services.result",
        "description": "felicity.apps.analysis.services.result",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.services.result",
        "documentation": {}
    },
    {
        "label": "AnalysisResultService",
        "importPath": "felicity.apps.analysis.services.result",
        "description": "felicity.apps.analysis.services.result",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.services.result",
        "documentation": {}
    },
    {
        "label": "AnalysisResultService",
        "importPath": "felicity.apps.analysis.services.result",
        "description": "felicity.apps.analysis.services.result",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.services.result",
        "documentation": {}
    },
    {
        "label": "AnalysisResultService",
        "importPath": "felicity.apps.analysis.services.result",
        "description": "felicity.apps.analysis.services.result",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.services.result",
        "documentation": {}
    },
    {
        "label": "AnalysisResultService",
        "importPath": "felicity.apps.analysis.services.result",
        "description": "felicity.apps.analysis.services.result",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.services.result",
        "documentation": {}
    },
    {
        "label": "AnalysisResultService",
        "importPath": "felicity.apps.analysis.services.result",
        "description": "felicity.apps.analysis.services.result",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.services.result",
        "documentation": {}
    },
    {
        "label": "IdSequenceService",
        "importPath": "felicity.apps.idsequencer.service",
        "description": "felicity.apps.idsequencer.service",
        "isExtraImport": true,
        "detail": "felicity.apps.idsequencer.service",
        "documentation": {}
    },
    {
        "label": "IdSequenceService",
        "importPath": "felicity.apps.idsequencer.service",
        "description": "felicity.apps.idsequencer.service",
        "isExtraImport": true,
        "detail": "felicity.apps.idsequencer.service",
        "documentation": {}
    },
    {
        "label": "IdSequenceService",
        "importPath": "felicity.apps.idsequencer.service",
        "description": "felicity.apps.idsequencer.service",
        "isExtraImport": true,
        "detail": "felicity.apps.idsequencer.service",
        "documentation": {}
    },
    {
        "label": "IdSequenceService",
        "importPath": "felicity.apps.idsequencer.service",
        "description": "felicity.apps.idsequencer.service",
        "isExtraImport": true,
        "detail": "felicity.apps.idsequencer.service",
        "documentation": {}
    },
    {
        "label": "IdSequenceService",
        "importPath": "felicity.apps.idsequencer.service",
        "description": "felicity.apps.idsequencer.service",
        "isExtraImport": true,
        "detail": "felicity.apps.idsequencer.service",
        "documentation": {}
    },
    {
        "label": "IdSequenceService",
        "importPath": "felicity.apps.idsequencer.service",
        "description": "felicity.apps.idsequencer.service",
        "isExtraImport": true,
        "detail": "felicity.apps.idsequencer.service",
        "documentation": {}
    },
    {
        "label": "sequencer",
        "importPath": "felicity.apps.idsequencer.utils",
        "description": "felicity.apps.idsequencer.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.idsequencer.utils",
        "documentation": {}
    },
    {
        "label": "sequence_alpha",
        "importPath": "felicity.apps.idsequencer.utils",
        "description": "felicity.apps.idsequencer.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.idsequencer.utils",
        "documentation": {}
    },
    {
        "label": "sequencer",
        "importPath": "felicity.apps.idsequencer.utils",
        "description": "felicity.apps.idsequencer.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.idsequencer.utils",
        "documentation": {}
    },
    {
        "label": "ActivityStreamService",
        "importPath": "felicity.apps.notification.services",
        "description": "felicity.apps.notification.services",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.services",
        "documentation": {}
    },
    {
        "label": "ActivityStreamService",
        "importPath": "felicity.apps.notification.services",
        "description": "felicity.apps.notification.services",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.services",
        "documentation": {}
    },
    {
        "label": "NotificationService",
        "importPath": "felicity.apps.notification.services",
        "description": "felicity.apps.notification.services",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.services",
        "documentation": {}
    },
    {
        "label": "ActivityStreamService",
        "importPath": "felicity.apps.notification.services",
        "description": "felicity.apps.notification.services",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.services",
        "documentation": {}
    },
    {
        "label": "ActivityStreamService",
        "importPath": "felicity.apps.notification.services",
        "description": "felicity.apps.notification.services",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.services",
        "documentation": {}
    },
    {
        "label": "NotificationService",
        "importPath": "felicity.apps.notification.services",
        "description": "felicity.apps.notification.services",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.services",
        "documentation": {}
    },
    {
        "label": "ActivityStreamService",
        "importPath": "felicity.apps.notification.services",
        "description": "felicity.apps.notification.services",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.services",
        "documentation": {}
    },
    {
        "label": "NotificationService",
        "importPath": "felicity.apps.notification.services",
        "description": "felicity.apps.notification.services",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.services",
        "documentation": {}
    },
    {
        "label": "ActivityStreamService",
        "importPath": "felicity.apps.notification.services",
        "description": "felicity.apps.notification.services",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.services",
        "documentation": {}
    },
    {
        "label": "ActivityStreamService",
        "importPath": "felicity.apps.notification.services",
        "description": "felicity.apps.notification.services",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.services",
        "documentation": {}
    },
    {
        "label": "ActivityStreamService",
        "importPath": "felicity.apps.notification.services",
        "description": "felicity.apps.notification.services",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.services",
        "documentation": {}
    },
    {
        "label": "QCLevelRepository",
        "importPath": "felicity.apps.analysis.repository.quality_control",
        "description": "felicity.apps.analysis.repository.quality_control",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.repository.quality_control",
        "documentation": {}
    },
    {
        "label": "QCSetRepository",
        "importPath": "felicity.apps.analysis.repository.quality_control",
        "description": "felicity.apps.analysis.repository.quality_control",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.repository.quality_control",
        "documentation": {}
    },
    {
        "label": "QCTemplateRepository",
        "importPath": "felicity.apps.analysis.repository.quality_control",
        "description": "felicity.apps.analysis.repository.quality_control",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.repository.quality_control",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "felicity.apps.analysis.repository.quality_control",
        "description": "felicity.apps.analysis.repository.quality_control",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.repository.quality_control",
        "documentation": {}
    },
    {
        "label": "AnalysisResultRepository",
        "importPath": "felicity.apps.analysis.repository.results",
        "description": "felicity.apps.analysis.repository.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.repository.results",
        "documentation": {}
    },
    {
        "label": "ResultMutationRepository",
        "importPath": "felicity.apps.analysis.repository.results",
        "description": "felicity.apps.analysis.repository.results",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.repository.results",
        "documentation": {}
    },
    {
        "label": "Dummy",
        "importPath": "felicity.apps.common.schemas.dummy",
        "description": "felicity.apps.common.schemas.dummy",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas.dummy",
        "documentation": {}
    },
    {
        "label": "Dummy",
        "importPath": "felicity.apps.common.schemas.dummy",
        "description": "felicity.apps.common.schemas.dummy",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas.dummy",
        "documentation": {}
    },
    {
        "label": "Dummy",
        "importPath": "felicity.apps.common.schemas.dummy",
        "description": "felicity.apps.common.schemas.dummy",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas.dummy",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "StrEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "auto",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "StrEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "auto",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "StrEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "auto",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "StrEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "auto",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "StrEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "auto",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "StrEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "auto",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "StrEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "auto",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "StrEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "StrEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "auto",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "StrEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "StrEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "auto",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "BaseAuditModel",
        "importPath": "felicity.apps.common.schemas",
        "description": "felicity.apps.common.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "felicity.apps.common.schemas",
        "description": "felicity.apps.common.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas",
        "documentation": {}
    },
    {
        "label": "BaseAuditModel",
        "importPath": "felicity.apps.common.schemas",
        "description": "felicity.apps.common.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas",
        "documentation": {}
    },
    {
        "label": "BaseAuditModel",
        "importPath": "felicity.apps.common.schemas",
        "description": "felicity.apps.common.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas",
        "documentation": {}
    },
    {
        "label": "BaseAuditModel",
        "importPath": "felicity.apps.common.schemas",
        "description": "felicity.apps.common.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas",
        "documentation": {}
    },
    {
        "label": "BaseAuditModel",
        "importPath": "felicity.apps.common.schemas",
        "description": "felicity.apps.common.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas",
        "documentation": {}
    },
    {
        "label": "BaseAuditModel",
        "importPath": "felicity.apps.common.schemas",
        "description": "felicity.apps.common.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas",
        "documentation": {}
    },
    {
        "label": "BaseAuditModel",
        "importPath": "felicity.apps.common.schemas",
        "description": "felicity.apps.common.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas",
        "documentation": {}
    },
    {
        "label": "BaseAuditModel",
        "importPath": "felicity.apps.common.schemas",
        "description": "felicity.apps.common.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas",
        "documentation": {}
    },
    {
        "label": "BaseAuditModel",
        "importPath": "felicity.apps.common.schemas",
        "description": "felicity.apps.common.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas",
        "documentation": {}
    },
    {
        "label": "BaseAuditModel",
        "importPath": "felicity.apps.common.schemas",
        "description": "felicity.apps.common.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "felicity.apps.common.schemas",
        "description": "felicity.apps.common.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.common.schemas",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Unit",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "ManufacturerInDB",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "SupplierInDB",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Country",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "CountryCreate",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "CountryUpdate",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "DepartmentCreate",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "DepartmentUpdate",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "District",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "DistrictCreate",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "DistrictUpdate",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Laboratory",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryCreate",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratorySetting",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratorySettingCreate",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratorySettingUpdate",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryUpdate",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Manufacturer",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "ManufacturerCreate",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "ManufacturerUpdate",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Province",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "ProvinceCreate",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "ProvinceUpdate",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Supplier",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "SupplierCreate",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "SupplierUpdate",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "Unit",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "UnitCreate",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "UnitUpdate",
        "importPath": "felicity.apps.setup.schemas",
        "description": "felicity.apps.setup.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.schemas",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.analysis",
        "description": "felicity.apps.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis",
        "documentation": {}
    },
    {
        "label": "JobState",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobAction",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobCategory",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobPriority",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobState",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobState",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobAction",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobCategory",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobState",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobAction",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobCategory",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobPriority",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobState",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobState",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobAction",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobCategory",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobPriority",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobState",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobAction",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobCategory",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobPriority",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobState",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobAction",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobCategory",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobPriority",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobState",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobState",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobAction",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobCategory",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobPriority",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobState",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobState",
        "importPath": "felicity.apps.job.enum",
        "description": "felicity.apps.job.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.job.enum",
        "documentation": {}
    },
    {
        "label": "JobService",
        "importPath": "felicity.apps.job.services",
        "description": "felicity.apps.job.services",
        "isExtraImport": true,
        "detail": "felicity.apps.job.services",
        "documentation": {}
    },
    {
        "label": "JobService",
        "importPath": "felicity.apps.job.services",
        "description": "felicity.apps.job.services",
        "isExtraImport": true,
        "detail": "felicity.apps.job.services",
        "documentation": {}
    },
    {
        "label": "JobService",
        "importPath": "felicity.apps.job.services",
        "description": "felicity.apps.job.services",
        "isExtraImport": true,
        "detail": "felicity.apps.job.services",
        "documentation": {}
    },
    {
        "label": "JobService",
        "importPath": "felicity.apps.job.services",
        "description": "felicity.apps.job.services",
        "isExtraImport": true,
        "detail": "felicity.apps.job.services",
        "documentation": {}
    },
    {
        "label": "JobService",
        "importPath": "felicity.apps.job.services",
        "description": "felicity.apps.job.services",
        "isExtraImport": true,
        "detail": "felicity.apps.job.services",
        "documentation": {}
    },
    {
        "label": "JobService",
        "importPath": "felicity.apps.job.services",
        "description": "felicity.apps.job.services",
        "isExtraImport": true,
        "detail": "felicity.apps.job.services",
        "documentation": {}
    },
    {
        "label": "JobService",
        "importPath": "felicity.apps.job.services",
        "description": "felicity.apps.job.services",
        "isExtraImport": true,
        "detail": "felicity.apps.job.services",
        "documentation": {}
    },
    {
        "label": "JobService",
        "importPath": "felicity.apps.job.services",
        "description": "felicity.apps.job.services",
        "isExtraImport": true,
        "detail": "felicity.apps.job.services",
        "documentation": {}
    },
    {
        "label": "JobService",
        "importPath": "felicity.apps.job.services",
        "description": "felicity.apps.job.services",
        "isExtraImport": true,
        "detail": "felicity.apps.job.services",
        "documentation": {}
    },
    {
        "label": "JobService",
        "importPath": "felicity.apps.job.services",
        "description": "felicity.apps.job.services",
        "isExtraImport": true,
        "detail": "felicity.apps.job.services",
        "documentation": {}
    },
    {
        "label": "JobService",
        "importPath": "felicity.apps.job.services",
        "description": "felicity.apps.job.services",
        "isExtraImport": true,
        "detail": "felicity.apps.job.services",
        "documentation": {}
    },
    {
        "label": "UserService",
        "importPath": "felicity.apps.user.services",
        "description": "felicity.apps.user.services",
        "isExtraImport": true,
        "detail": "felicity.apps.user.services",
        "documentation": {}
    },
    {
        "label": "UserService",
        "importPath": "felicity.apps.user.services",
        "description": "felicity.apps.user.services",
        "isExtraImport": true,
        "detail": "felicity.apps.user.services",
        "documentation": {}
    },
    {
        "label": "UserService",
        "importPath": "felicity.apps.user.services",
        "description": "felicity.apps.user.services",
        "isExtraImport": true,
        "detail": "felicity.apps.user.services",
        "documentation": {}
    },
    {
        "label": "UserService",
        "importPath": "felicity.apps.user.services",
        "description": "felicity.apps.user.services",
        "isExtraImport": true,
        "detail": "felicity.apps.user.services",
        "documentation": {}
    },
    {
        "label": "UserService",
        "importPath": "felicity.apps.user.services",
        "description": "felicity.apps.user.services",
        "isExtraImport": true,
        "detail": "felicity.apps.user.services",
        "documentation": {}
    },
    {
        "label": "GroupService",
        "importPath": "felicity.apps.user.services",
        "description": "felicity.apps.user.services",
        "isExtraImport": true,
        "detail": "felicity.apps.user.services",
        "documentation": {}
    },
    {
        "label": "UserService",
        "importPath": "felicity.apps.user.services",
        "description": "felicity.apps.user.services",
        "isExtraImport": true,
        "detail": "felicity.apps.user.services",
        "documentation": {}
    },
    {
        "label": "AnalysisService",
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "ProfileService",
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "SampleService",
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "SampleTypeService",
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "SampleService",
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestService",
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "SampleService",
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestService",
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "SampleService",
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestService",
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisService",
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "SampleService",
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "SampleTypeService",
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "SampleService",
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "SampleService",
        "importPath": "felicity.apps.analysis.services.analysis",
        "description": "felicity.apps.analysis.services.analysis",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "DiscountType",
        "importPath": "felicity.apps.billing.enum",
        "description": "felicity.apps.billing.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.enum",
        "documentation": {}
    },
    {
        "label": "DiscountValueType",
        "importPath": "felicity.apps.billing.enum",
        "description": "felicity.apps.billing.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.enum",
        "documentation": {}
    },
    {
        "label": "DiscountType",
        "importPath": "felicity.apps.billing.enum",
        "description": "felicity.apps.billing.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.enum",
        "documentation": {}
    },
    {
        "label": "DiscountValueType",
        "importPath": "felicity.apps.billing.enum",
        "description": "felicity.apps.billing.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.enum",
        "documentation": {}
    },
    {
        "label": "TransactionKind",
        "importPath": "felicity.apps.billing.enum",
        "description": "felicity.apps.billing.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.enum",
        "documentation": {}
    },
    {
        "label": "DiscountType",
        "importPath": "felicity.apps.billing.enum",
        "description": "felicity.apps.billing.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.enum",
        "documentation": {}
    },
    {
        "label": "DiscountValueType",
        "importPath": "felicity.apps.billing.enum",
        "description": "felicity.apps.billing.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.enum",
        "documentation": {}
    },
    {
        "label": "TransactionKind",
        "importPath": "felicity.apps.billing.enum",
        "description": "felicity.apps.billing.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.enum",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscountCreate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisPriceCreate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileDiscountCreate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "ProfilePriceCreate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscountCreate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscountUpdate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisPriceCreate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisPriceUpdate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileDiscountCreate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileDiscountUpdate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "ProfilePriceCreate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "ProfilePriceUpdate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillCreate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillInvoiceCreate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillInvoiceUpdate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillTransactionCreate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillTransactionUpdate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillUpdate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherCodeCreate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherCodeUpdate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherCreate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherCustomerCreate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherCustomerUpdate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherUpdate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillCreate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillTransactionCreate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillTransactionUpdate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillUpdate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillInvoiceCreate",
        "importPath": "felicity.apps.billing.schemas",
        "description": "felicity.apps.billing.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscountService",
        "importPath": "felicity.apps.billing.services",
        "description": "felicity.apps.billing.services",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.services",
        "documentation": {}
    },
    {
        "label": "AnalysisPriceService",
        "importPath": "felicity.apps.billing.services",
        "description": "felicity.apps.billing.services",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.services",
        "documentation": {}
    },
    {
        "label": "ProfileDiscountService",
        "importPath": "felicity.apps.billing.services",
        "description": "felicity.apps.billing.services",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.services",
        "documentation": {}
    },
    {
        "label": "ProfilePriceService",
        "importPath": "felicity.apps.billing.services",
        "description": "felicity.apps.billing.services",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.services",
        "documentation": {}
    },
    {
        "label": "JobCreate",
        "importPath": "felicity.apps.job.schemas",
        "description": "felicity.apps.job.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.job.schemas",
        "documentation": {}
    },
    {
        "label": "JobCreate",
        "importPath": "felicity.apps.job.schemas",
        "description": "felicity.apps.job.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.job.schemas",
        "documentation": {}
    },
    {
        "label": "JobCreate",
        "importPath": "felicity.apps.job.schemas",
        "description": "felicity.apps.job.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.job.schemas",
        "documentation": {}
    },
    {
        "label": "JobCreate",
        "importPath": "felicity.apps.job.schemas",
        "description": "felicity.apps.job.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.job.schemas",
        "documentation": {}
    },
    {
        "label": "JobCreate",
        "importPath": "felicity.apps.job.schemas",
        "description": "felicity.apps.job.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.job.schemas",
        "documentation": {}
    },
    {
        "label": "JobUpdate",
        "importPath": "felicity.apps.job.schemas",
        "description": "felicity.apps.job.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.job.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexEngineService",
        "importPath": "felicity.apps.reflex.services",
        "description": "felicity.apps.reflex.services",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.services",
        "documentation": {}
    },
    {
        "label": "ReflexEngineService",
        "importPath": "felicity.apps.reflex.services",
        "description": "felicity.apps.reflex.services",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.services",
        "documentation": {}
    },
    {
        "label": "ShippedSampleService",
        "importPath": "felicity.apps.shipment.services",
        "description": "felicity.apps.shipment.services",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.services",
        "documentation": {}
    },
    {
        "label": "ShipmentService",
        "importPath": "felicity.apps.shipment.services",
        "description": "felicity.apps.shipment.services",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.services",
        "documentation": {}
    },
    {
        "label": "ShippedSampleService",
        "importPath": "felicity.apps.shipment.services",
        "description": "felicity.apps.shipment.services",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.services",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratoryService",
        "importPath": "felicity.apps.shipment.services",
        "description": "felicity.apps.shipment.services",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.services",
        "documentation": {}
    },
    {
        "label": "ShipmentService",
        "importPath": "felicity.apps.shipment.services",
        "description": "felicity.apps.shipment.services",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.services",
        "documentation": {}
    },
    {
        "label": "ShipmentService",
        "importPath": "felicity.apps.shipment.services",
        "description": "felicity.apps.shipment.services",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.services",
        "documentation": {}
    },
    {
        "label": "ShippedSampleService",
        "importPath": "felicity.apps.shipment.services",
        "description": "felicity.apps.shipment.services",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.services",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratoryService",
        "importPath": "felicity.apps.shipment.services",
        "description": "felicity.apps.shipment.services",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.services",
        "documentation": {}
    },
    {
        "label": "ShipmentService",
        "importPath": "felicity.apps.shipment.services",
        "description": "felicity.apps.shipment.services",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.services",
        "documentation": {}
    },
    {
        "label": "ShipmentService",
        "importPath": "felicity.apps.shipment.services",
        "description": "felicity.apps.shipment.services",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.services",
        "documentation": {}
    },
    {
        "label": "ShippedSampleService",
        "importPath": "felicity.apps.shipment.services",
        "description": "felicity.apps.shipment.services",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.services",
        "documentation": {}
    },
    {
        "label": "ShipmentService",
        "importPath": "felicity.apps.shipment.services",
        "description": "felicity.apps.shipment.services",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.services",
        "documentation": {}
    },
    {
        "label": "ShippedSampleService",
        "importPath": "felicity.apps.shipment.services",
        "description": "felicity.apps.shipment.services",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.services",
        "documentation": {}
    },
    {
        "label": "ShipmentService",
        "importPath": "felicity.apps.shipment.services",
        "description": "felicity.apps.shipment.services",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.services",
        "documentation": {}
    },
    {
        "label": "ShippedSampleService",
        "importPath": "felicity.apps.shipment.services",
        "description": "felicity.apps.shipment.services",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.services",
        "documentation": {}
    },
    {
        "label": "WorkSheetService",
        "importPath": "felicity.apps.worksheet.services",
        "description": "felicity.apps.worksheet.services",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.services",
        "documentation": {}
    },
    {
        "label": "WorkSheetService",
        "importPath": "felicity.apps.worksheet.services",
        "description": "felicity.apps.worksheet.services",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.services",
        "documentation": {}
    },
    {
        "label": "WorkSheetService",
        "importPath": "felicity.apps.worksheet.services",
        "description": "felicity.apps.worksheet.services",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.services",
        "documentation": {}
    },
    {
        "label": "has_value_or_is_truthy",
        "importPath": "felicity.utils",
        "description": "felicity.utils",
        "isExtraImport": true,
        "detail": "felicity.utils",
        "documentation": {}
    },
    {
        "label": "remove_circular_refs",
        "importPath": "felicity.utils",
        "description": "felicity.utils",
        "isExtraImport": true,
        "detail": "felicity.utils",
        "documentation": {}
    },
    {
        "label": "get_from_nested",
        "importPath": "felicity.utils",
        "description": "felicity.utils",
        "isExtraImport": true,
        "detail": "felicity.utils",
        "documentation": {}
    },
    {
        "label": "parser",
        "importPath": "dateutil",
        "description": "dateutil",
        "isExtraImport": true,
        "detail": "dateutil",
        "documentation": {}
    },
    {
        "label": "parser",
        "importPath": "dateutil",
        "description": "dateutil",
        "isExtraImport": true,
        "detail": "dateutil",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "ReportMeta",
        "importPath": "felicity.apps.analytics.entities",
        "description": "felicity.apps.analytics.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.analytics.entities",
        "documentation": {}
    },
    {
        "label": "ReportState",
        "importPath": "felicity.apps.analytics.enum",
        "description": "felicity.apps.analytics.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.analytics.enum",
        "documentation": {}
    },
    {
        "label": "ReportTypes",
        "importPath": "felicity.apps.analytics.enum",
        "description": "felicity.apps.analytics.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.analytics.enum",
        "documentation": {}
    },
    {
        "label": "ReportState",
        "importPath": "felicity.apps.analytics.enum",
        "description": "felicity.apps.analytics.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.analytics.enum",
        "documentation": {}
    },
    {
        "label": "ReportState",
        "importPath": "felicity.apps.analytics.enum",
        "description": "felicity.apps.analytics.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.analytics.enum",
        "documentation": {}
    },
    {
        "label": "UserBasic",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "GroupCreate",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "GroupUpdate",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "PermissionCreate",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "PermissionUpdate",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "UserPreferenceCreate",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "UserPreferenceUpdate",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "UserUpdate",
        "importPath": "felicity.apps.user.schemas",
        "description": "felicity.apps.user.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.user.schemas",
        "documentation": {}
    },
    {
        "label": "ReportMetaRepository",
        "importPath": "felicity.apps.analytics.repository",
        "description": "felicity.apps.analytics.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.analytics.repository",
        "documentation": {}
    },
    {
        "label": "ReportMeta",
        "importPath": "felicity.apps.analytics.schemas",
        "description": "felicity.apps.analytics.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analytics.schemas",
        "documentation": {}
    },
    {
        "label": "ReportMetaCreate",
        "importPath": "felicity.apps.analytics.schemas",
        "description": "felicity.apps.analytics.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analytics.schemas",
        "documentation": {}
    },
    {
        "label": "ReportMetaUpdate",
        "importPath": "felicity.apps.analytics.schemas",
        "description": "felicity.apps.analytics.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.analytics.schemas",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "EntityAnalyticsInit",
        "importPath": "felicity.apps.analytics",
        "description": "felicity.apps.analytics",
        "isExtraImport": true,
        "detail": "felicity.apps.analytics",
        "documentation": {}
    },
    {
        "label": "ReportMetaService",
        "importPath": "felicity.apps.analytics.services",
        "description": "felicity.apps.analytics.services",
        "isExtraImport": true,
        "detail": "felicity.apps.analytics.services",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "get_history",
        "importPath": "sqlalchemy.orm.attributes",
        "description": "sqlalchemy.orm.attributes",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm.attributes",
        "documentation": {}
    },
    {
        "label": "get_history",
        "importPath": "sqlalchemy.orm.attributes",
        "description": "sqlalchemy.orm.attributes",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm.attributes",
        "documentation": {}
    },
    {
        "label": "AuditLog",
        "importPath": "felicity.apps.auditlog.entities",
        "description": "felicity.apps.auditlog.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.auditlog.entities",
        "documentation": {}
    },
    {
        "label": "AuditLog",
        "importPath": "felicity.apps.auditlog.entities",
        "description": "felicity.apps.auditlog.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.auditlog.entities",
        "documentation": {}
    },
    {
        "label": "AuditLog",
        "importPath": "felicity.apps.auditlog.entities",
        "description": "felicity.apps.auditlog.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.auditlog.entities",
        "documentation": {}
    },
    {
        "label": "AuditLog",
        "importPath": "felicity.apps.auditlog.entities",
        "description": "felicity.apps.auditlog.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.auditlog.entities",
        "documentation": {}
    },
    {
        "label": "AuditLogRepository",
        "importPath": "felicity.apps.auditlog.repositories",
        "description": "felicity.apps.auditlog.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.auditlog.repositories",
        "documentation": {}
    },
    {
        "label": "JSONB",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "JSONB",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "insert",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "JSONB",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "JSONB",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "JSONB",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "JSONB",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "JSONB",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscount",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "AnalysisPrice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "ProfileDiscount",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "ProfilePrice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBill",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBillInvoice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBillTransaction",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "Voucher",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "VoucherCode",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "VoucherCustomer",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscount",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "AnalysisPrice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "ProfileDiscount",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "ProfilePrice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBill",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBillInvoice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBillTransaction",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "Voucher",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "VoucherCode",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "VoucherCustomer",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscount",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "AnalysisPrice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "ProfileDiscount",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "ProfilePrice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBill",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBillTransaction",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "Voucher",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "VoucherCode",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "VoucherCustomer",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "test_bill_item",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "AnalysisPrice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "ProfilePrice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBill",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBillInvoice",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBillTransaction",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "test_bill_item",
        "importPath": "felicity.apps.billing.entities",
        "description": "felicity.apps.billing.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.entities",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscountRepository",
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "AnalysisPriceRepository",
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "ProfileDiscountRepository",
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "ProfilePriceRepository",
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "TestBillInvoiceRepository",
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "TestBillRepository",
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "TestBillTransactionRepository",
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "VoucherCodeRepository",
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "VoucherCustomerRepository",
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "VoucherRepository",
        "importPath": "felicity.apps.billing.repositories",
        "description": "felicity.apps.billing.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.repositories",
        "documentation": {}
    },
    {
        "label": "IdSequence",
        "importPath": "felicity.apps.idsequencer.entities",
        "description": "felicity.apps.idsequencer.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.idsequencer.entities",
        "documentation": {}
    },
    {
        "label": "IdSequence",
        "importPath": "felicity.apps.idsequencer.entities",
        "description": "felicity.apps.idsequencer.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.idsequencer.entities",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.apps.analysis.entities",
        "description": "felicity.apps.analysis.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities",
        "documentation": {}
    },
    {
        "label": "analysis",
        "importPath": "felicity.apps.analysis.entities",
        "description": "felicity.apps.analysis.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities",
        "documentation": {}
    },
    {
        "label": "qc",
        "importPath": "felicity.apps.analysis.entities",
        "description": "felicity.apps.analysis.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.entities",
        "documentation": {}
    },
    {
        "label": "CustomerAlreadyUsedVoucherException",
        "importPath": "felicity.apps.billing.exceptions",
        "description": "felicity.apps.billing.exceptions",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.exceptions",
        "documentation": {}
    },
    {
        "label": "InactiveTestBillException",
        "importPath": "felicity.apps.billing.exceptions",
        "description": "felicity.apps.billing.exceptions",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.exceptions",
        "documentation": {}
    },
    {
        "label": "InactiveVoucherCodeException",
        "importPath": "felicity.apps.billing.exceptions",
        "description": "felicity.apps.billing.exceptions",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidVoucherCodeException",
        "importPath": "felicity.apps.billing.exceptions",
        "description": "felicity.apps.billing.exceptions",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.exceptions",
        "documentation": {}
    },
    {
        "label": "VoucherCodeLimitExceededException",
        "importPath": "felicity.apps.billing.exceptions",
        "description": "felicity.apps.billing.exceptions",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.exceptions",
        "documentation": {}
    },
    {
        "label": "VoucherLimitExceededException",
        "importPath": "felicity.apps.billing.exceptions",
        "description": "felicity.apps.billing.exceptions",
        "isExtraImport": true,
        "detail": "felicity.apps.billing.exceptions",
        "documentation": {}
    },
    {
        "label": "impress_invoice",
        "importPath": "felicity.apps.impress.invoicing.utils",
        "description": "felicity.apps.impress.invoicing.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.invoicing.utils",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "District",
        "importPath": "felicity.apps.setup.entities",
        "description": "felicity.apps.setup.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities",
        "documentation": {}
    },
    {
        "label": "Province",
        "importPath": "felicity.apps.setup.entities",
        "description": "felicity.apps.setup.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities",
        "documentation": {}
    },
    {
        "label": "Country",
        "importPath": "felicity.apps.setup.entities",
        "description": "felicity.apps.setup.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities",
        "documentation": {}
    },
    {
        "label": "District",
        "importPath": "felicity.apps.setup.entities",
        "description": "felicity.apps.setup.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities",
        "documentation": {}
    },
    {
        "label": "Province",
        "importPath": "felicity.apps.setup.entities",
        "description": "felicity.apps.setup.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities",
        "documentation": {}
    },
    {
        "label": "Department",
        "importPath": "felicity.apps.setup.entities",
        "description": "felicity.apps.setup.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities",
        "documentation": {}
    },
    {
        "label": "Laboratory",
        "importPath": "felicity.apps.setup.entities",
        "description": "felicity.apps.setup.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities",
        "documentation": {}
    },
    {
        "label": "LaboratorySetting",
        "importPath": "felicity.apps.setup.entities",
        "description": "felicity.apps.setup.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities",
        "documentation": {}
    },
    {
        "label": "Manufacturer",
        "importPath": "felicity.apps.setup.entities",
        "description": "felicity.apps.setup.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities",
        "documentation": {}
    },
    {
        "label": "Supplier",
        "importPath": "felicity.apps.setup.entities",
        "description": "felicity.apps.setup.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities",
        "documentation": {}
    },
    {
        "label": "Unit",
        "importPath": "felicity.apps.setup.entities",
        "description": "felicity.apps.setup.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.entities",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "felicity.apps.user.abstract",
        "description": "felicity.apps.user.abstract",
        "isExtraImport": true,
        "detail": "felicity.apps.user.abstract",
        "documentation": {}
    },
    {
        "label": "UserType",
        "importPath": "felicity.apps.user.enum",
        "description": "felicity.apps.user.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.user.enum",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "felicity.apps.client.entities",
        "description": "felicity.apps.client.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.client.entities",
        "documentation": {}
    },
    {
        "label": "ClientContact",
        "importPath": "felicity.apps.client.entities",
        "description": "felicity.apps.client.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.client.entities",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "felicity.apps.client.entities",
        "description": "felicity.apps.client.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.client.entities",
        "documentation": {}
    },
    {
        "label": "ClientContact",
        "importPath": "felicity.apps.client.entities",
        "description": "felicity.apps.client.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.client.entities",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "felicity.apps.client.entities",
        "description": "felicity.apps.client.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.client.entities",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "felicity.apps.client.entities",
        "description": "felicity.apps.client.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.client.entities",
        "documentation": {}
    },
    {
        "label": "ClientContactRepository",
        "importPath": "felicity.apps.client.repositories",
        "description": "felicity.apps.client.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.client.repositories",
        "documentation": {}
    },
    {
        "label": "ClientRepository",
        "importPath": "felicity.apps.client.repositories",
        "description": "felicity.apps.client.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.client.repositories",
        "documentation": {}
    },
    {
        "label": "ClientContactCreate",
        "importPath": "felicity.apps.client.schemas",
        "description": "felicity.apps.client.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientContactUpdate",
        "importPath": "felicity.apps.client.schemas",
        "description": "felicity.apps.client.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientCreate",
        "importPath": "felicity.apps.client.schemas",
        "description": "felicity.apps.client.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientUpdate",
        "importPath": "felicity.apps.client.schemas",
        "description": "felicity.apps.client.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.client.schemas",
        "documentation": {}
    },
    {
        "label": "enum",
        "importPath": "felicity.apps.common.hooks",
        "description": "felicity.apps.common.hooks",
        "isExtraImport": true,
        "detail": "felicity.apps.common.hooks",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "asyncio",
        "description": "asyncio",
        "isExtraImport": true,
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "ErrorLog",
        "importPath": "felicity.apps.errlog.entities",
        "description": "felicity.apps.errlog.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.errlog.entities",
        "documentation": {}
    },
    {
        "label": "ErrorLog",
        "importPath": "felicity.apps.errlog.entities",
        "description": "felicity.apps.errlog.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.errlog.entities",
        "documentation": {}
    },
    {
        "label": "ErrorLogRepository",
        "importPath": "felicity.apps.errlog.repositories",
        "description": "felicity.apps.errlog.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.errlog.repositories",
        "documentation": {}
    },
    {
        "label": "ErrorLogCreate",
        "importPath": "felicity.apps.errlog.schemas",
        "description": "felicity.apps.errlog.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.errlog.schemas",
        "documentation": {}
    },
    {
        "label": "ErrorLogUpdate",
        "importPath": "felicity.apps.errlog.schemas",
        "description": "felicity.apps.errlog.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.errlog.schemas",
        "documentation": {}
    },
    {
        "label": "SequenceGenerateError",
        "importPath": "felicity.apps.idsequencer.exception",
        "description": "felicity.apps.idsequencer.exception",
        "isExtraImport": true,
        "detail": "felicity.apps.idsequencer.exception",
        "documentation": {}
    },
    {
        "label": "IncompleDataError",
        "importPath": "felicity.apps.idsequencer.exception",
        "description": "felicity.apps.idsequencer.exception",
        "isExtraImport": true,
        "detail": "felicity.apps.idsequencer.exception",
        "documentation": {}
    },
    {
        "label": "IdSequenceRepository",
        "importPath": "felicity.apps.idsequencer.repository",
        "description": "felicity.apps.idsequencer.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.idsequencer.repository",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "NamedTemporaryFile",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "NamedTemporaryFile",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "Code128",
        "importPath": "barcode",
        "description": "barcode",
        "isExtraImport": true,
        "detail": "barcode",
        "documentation": {}
    },
    {
        "label": "Code128",
        "importPath": "barcode",
        "description": "barcode",
        "isExtraImport": true,
        "detail": "barcode",
        "documentation": {}
    },
    {
        "label": "Barcode",
        "importPath": "barcode.base",
        "description": "barcode.base",
        "isExtraImport": true,
        "detail": "barcode.base",
        "documentation": {}
    },
    {
        "label": "ImageWriter",
        "importPath": "barcode.writer",
        "description": "barcode.writer",
        "isExtraImport": true,
        "detail": "barcode.writer",
        "documentation": {}
    },
    {
        "label": "ImageWriter",
        "importPath": "barcode.writer",
        "description": "barcode.writer",
        "isExtraImport": true,
        "detail": "barcode.writer",
        "documentation": {}
    },
    {
        "label": "FPDF",
        "importPath": "fpdf",
        "description": "fpdf",
        "isExtraImport": true,
        "detail": "fpdf",
        "documentation": {}
    },
    {
        "label": "FPDF",
        "importPath": "fpdf",
        "description": "fpdf",
        "isExtraImport": true,
        "detail": "fpdf",
        "documentation": {}
    },
    {
        "label": "FPDF",
        "importPath": "fpdf",
        "description": "fpdf",
        "isExtraImport": true,
        "detail": "fpdf",
        "documentation": {}
    },
    {
        "label": "FPDF",
        "importPath": "fpdf",
        "description": "fpdf",
        "isExtraImport": true,
        "detail": "fpdf",
        "documentation": {}
    },
    {
        "label": "BarCode",
        "importPath": "felicity.apps.impress.barcode.schema",
        "description": "felicity.apps.impress.barcode.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.barcode.schema",
        "documentation": {}
    },
    {
        "label": "BarCode",
        "importPath": "felicity.apps.impress.barcode.schema",
        "description": "felicity.apps.impress.barcode.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.barcode.schema",
        "documentation": {}
    },
    {
        "label": "FelicityBarCoder",
        "importPath": "felicity.apps.impress.barcode.engine",
        "description": "felicity.apps.impress.barcode.engine",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.barcode.engine",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "isExtraImport": true,
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "isExtraImport": true,
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "isExtraImport": true,
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "isExtraImport": true,
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "felicity.core.config",
        "description": "felicity.core.config",
        "isExtraImport": true,
        "detail": "felicity.core.config",
        "documentation": {}
    },
    {
        "label": "get_from_nested",
        "importPath": "felicity.utils.helpers",
        "description": "felicity.utils.helpers",
        "isExtraImport": true,
        "detail": "felicity.utils.helpers",
        "documentation": {}
    },
    {
        "label": "get_from_nested",
        "importPath": "felicity.utils.helpers",
        "description": "felicity.utils.helpers",
        "isExtraImport": true,
        "detail": "felicity.utils.helpers",
        "documentation": {}
    },
    {
        "label": "strtobool",
        "importPath": "felicity.utils.helpers",
        "description": "felicity.utils.helpers",
        "isExtraImport": true,
        "detail": "felicity.utils.helpers",
        "documentation": {}
    },
    {
        "label": "FelicityInvoice",
        "importPath": "felicity.apps.impress.invoicing.engine",
        "description": "felicity.apps.impress.invoicing.engine",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.invoicing.engine",
        "documentation": {}
    },
    {
        "label": "get_laboratory_setting",
        "importPath": "felicity.apps.setup.caches",
        "description": "felicity.apps.setup.caches",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.caches",
        "documentation": {}
    },
    {
        "label": "get_laboratory",
        "importPath": "felicity.apps.setup.caches",
        "description": "felicity.apps.setup.caches",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.caches",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "felicity.apps.impress.sample",
        "description": "felicity.apps.impress.sample",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.sample",
        "documentation": {}
    },
    {
        "label": "entities",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.job",
        "description": "felicity.apps.job",
        "isExtraImport": true,
        "detail": "felicity.apps.job",
        "documentation": {}
    },
    {
        "label": "entities",
        "importPath": "felicity.apps.user",
        "description": "felicity.apps.user",
        "isExtraImport": true,
        "detail": "felicity.apps.user",
        "documentation": {}
    },
    {
        "label": "ReportImpress",
        "importPath": "felicity.apps.impress.entities",
        "description": "felicity.apps.impress.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.entities",
        "documentation": {}
    },
    {
        "label": "ReportImpress",
        "importPath": "felicity.apps.impress.entities",
        "description": "felicity.apps.impress.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.entities",
        "documentation": {}
    },
    {
        "label": "ReportImpress",
        "importPath": "felicity.apps.impress.entities",
        "description": "felicity.apps.impress.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.entities",
        "documentation": {}
    },
    {
        "label": "FelicityImpress",
        "importPath": "felicity.apps.impress.sample.engine",
        "description": "felicity.apps.impress.sample.engine",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.sample.engine",
        "documentation": {}
    },
    {
        "label": "FelicityImpress",
        "importPath": "felicity.apps.impress.sample.engine",
        "description": "felicity.apps.impress.sample.engine",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.sample.engine",
        "documentation": {}
    },
    {
        "label": "ReportImpressCreate",
        "importPath": "felicity.apps.impress.sample.schemas",
        "description": "felicity.apps.impress.sample.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.sample.schemas",
        "documentation": {}
    },
    {
        "label": "ReportImpressCreate",
        "importPath": "felicity.apps.impress.sample.schemas",
        "description": "felicity.apps.impress.sample.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.sample.schemas",
        "documentation": {}
    },
    {
        "label": "ReportImpressUpdate",
        "importPath": "felicity.apps.impress.sample.schemas",
        "description": "felicity.apps.impress.sample.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.sample.schemas",
        "documentation": {}
    },
    {
        "label": "ManifetReport",
        "importPath": "felicity.apps.impress.shipment.engine",
        "description": "felicity.apps.impress.shipment.engine",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.shipment.engine",
        "documentation": {}
    },
    {
        "label": "ShipmentUpdate",
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShipmentCreate",
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShipmentCreate",
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratoryCreate",
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratoryUpdate",
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShipmentCreate",
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShipmentUpdate",
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShippedSampleCreate",
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShippedSampleUpdate",
        "importPath": "felicity.apps.shipment.schemas",
        "description": "felicity.apps.shipment.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.schemas",
        "documentation": {}
    },
    {
        "label": "PdfWriter",
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "isExtraImport": true,
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "ReportImpressRepository",
        "importPath": "felicity.apps.impress.repository",
        "description": "felicity.apps.impress.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.repository",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificate",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "Instrument",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibration",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetence",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "InstrumentType",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrument",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "Method",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificate",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "Instrument",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibration",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetence",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "InstrumentType",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrument",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "Method",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "Instrument",
        "importPath": "felicity.apps.instrument.entities",
        "description": "felicity.apps.instrument.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.entities",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificateRepository",
        "importPath": "felicity.apps.instrument.repository",
        "description": "felicity.apps.instrument.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.repository",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibrationRepository",
        "importPath": "felicity.apps.instrument.repository",
        "description": "felicity.apps.instrument.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.repository",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetenceRepository",
        "importPath": "felicity.apps.instrument.repository",
        "description": "felicity.apps.instrument.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.repository",
        "documentation": {}
    },
    {
        "label": "InstrumentRepository",
        "importPath": "felicity.apps.instrument.repository",
        "description": "felicity.apps.instrument.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.repository",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeRepository",
        "importPath": "felicity.apps.instrument.repository",
        "description": "felicity.apps.instrument.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.repository",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentRepository",
        "importPath": "felicity.apps.instrument.repository",
        "description": "felicity.apps.instrument.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.repository",
        "documentation": {}
    },
    {
        "label": "MethodRepository",
        "importPath": "felicity.apps.instrument.repository",
        "description": "felicity.apps.instrument.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.repository",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificateCreate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificateUpdate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibrationCreate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibrationUpdate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetenceCreate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetenceUpdate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCreate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeCreate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeUpdate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentUpdate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentCreate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentUpdate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "MethodCreate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "MethodUpdate",
        "importPath": "felicity.apps.instrument.schemas",
        "description": "felicity.apps.instrument.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.instrument.schemas",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "importPath": "felicity.apps.abstract.audit",
        "description": "felicity.apps.abstract.audit",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.audit",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "importPath": "felicity.apps.abstract.audit",
        "description": "felicity.apps.abstract.audit",
        "isExtraImport": true,
        "detail": "felicity.apps.abstract.audit",
        "documentation": {}
    },
    {
        "label": "Hazard",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockAdjustment",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockCategory",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockItem",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockItemVariant",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockLot",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockOrder",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockOrderProduct",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockProductInventory",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockReceipt",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockUnit",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "Hazard",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockAdjustment",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockCategory",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockItem",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockItemVariant",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockLot",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockOrder",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockOrderProduct",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockProductInventory",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockReceipt",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockUnit",
        "importPath": "felicity.apps.inventory.entities",
        "description": "felicity.apps.inventory.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.entities",
        "documentation": {}
    },
    {
        "label": "HazardRepository",
        "importPath": "felicity.apps.inventory.repository",
        "description": "felicity.apps.inventory.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockAdjustmentRepository",
        "importPath": "felicity.apps.inventory.repository",
        "description": "felicity.apps.inventory.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockCategoryRepository",
        "importPath": "felicity.apps.inventory.repository",
        "description": "felicity.apps.inventory.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockItemRepository",
        "importPath": "felicity.apps.inventory.repository",
        "description": "felicity.apps.inventory.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockItemVariantRepository",
        "importPath": "felicity.apps.inventory.repository",
        "description": "felicity.apps.inventory.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockLotRepository",
        "importPath": "felicity.apps.inventory.repository",
        "description": "felicity.apps.inventory.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockOrderProductRepository",
        "importPath": "felicity.apps.inventory.repository",
        "description": "felicity.apps.inventory.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockOrderRepository",
        "importPath": "felicity.apps.inventory.repository",
        "description": "felicity.apps.inventory.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockProductInventoryRepository",
        "importPath": "felicity.apps.inventory.repository",
        "description": "felicity.apps.inventory.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockReceiptRepository",
        "importPath": "felicity.apps.inventory.repository",
        "description": "felicity.apps.inventory.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockUnitRepository",
        "importPath": "felicity.apps.inventory.repository",
        "description": "felicity.apps.inventory.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.repository",
        "documentation": {}
    },
    {
        "label": "HazardCreate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "HazardUpdate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockAdjustmentCreate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockAdjustmentUpdate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockCategoryCreate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockCategoryUpdate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockItemCreate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockItemUpdate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockItemVariantCreate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockItemVariantUpdate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockLotCreate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockLotUpdate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockOrderCreate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockOrderProductCreate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockOrderProductUpdate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockOrderUpdate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockProductInventoryCreate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockProductInventoryUpdate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockReceiptCreate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockReceiptUpdate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockUnitCreate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockUnitUpdate",
        "importPath": "felicity.apps.inventory.schemas",
        "description": "felicity.apps.inventory.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.inventory.schemas",
        "documentation": {}
    },
    {
        "label": "FhirCreateService",
        "importPath": "felicity.apps.iol.fhir.services.create",
        "description": "felicity.apps.iol.fhir.services.create",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.services.create",
        "documentation": {}
    },
    {
        "label": "FhirReadService",
        "importPath": "felicity.apps.iol.fhir.services.read",
        "description": "felicity.apps.iol.fhir.services.read",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.services.read",
        "documentation": {}
    },
    {
        "label": "post_data",
        "importPath": "felicity.apps.iol.relay",
        "description": "felicity.apps.iol.relay",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.relay",
        "documentation": {}
    },
    {
        "label": "post_data",
        "importPath": "felicity.apps.iol.relay",
        "description": "felicity.apps.iol.relay",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.relay",
        "documentation": {}
    },
    {
        "label": "post_data",
        "importPath": "felicity.apps.iol.relay",
        "description": "felicity.apps.iol.relay",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.relay",
        "documentation": {}
    },
    {
        "label": "ShipmentState",
        "importPath": "felicity.apps.shipment.enum",
        "description": "felicity.apps.shipment.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.enum",
        "documentation": {}
    },
    {
        "label": "ShipmentState",
        "importPath": "felicity.apps.shipment.enum",
        "description": "felicity.apps.shipment.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.enum",
        "documentation": {}
    },
    {
        "label": "ShipmentState",
        "importPath": "felicity.apps.shipment.enum",
        "description": "felicity.apps.shipment.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.enum",
        "documentation": {}
    },
    {
        "label": "ShipmentState",
        "importPath": "felicity.apps.shipment.enum",
        "description": "felicity.apps.shipment.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.enum",
        "documentation": {}
    },
    {
        "label": "ShipmentState",
        "importPath": "felicity.apps.shipment.enum",
        "description": "felicity.apps.shipment.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.enum",
        "documentation": {}
    },
    {
        "label": "ShipmentState",
        "importPath": "felicity.apps.shipment.enum",
        "description": "felicity.apps.shipment.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.enum",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "BundleResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "DiagnosticReportResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "PatientResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Reference",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "ServiceRequestResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "BundleResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "DiagnosticReportResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Identifier",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "PatientResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Reference",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "ServiceRequestResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "SpecimenResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "BundleResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "DiagnosticReportResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "PatientResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Reference",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "ServiceRequestResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "BundleResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "DiagnosticReportResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Identifier",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "PatientResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Reference",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "ServiceRequestResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "SpecimenResource",
        "importPath": "felicity.apps.iol.fhir.schema",
        "description": "felicity.apps.iol.fhir.schema",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "PatientService",
        "importPath": "felicity.apps.patient.services",
        "description": "felicity.apps.patient.services",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.services",
        "documentation": {}
    },
    {
        "label": "PatientService",
        "importPath": "felicity.apps.patient.services",
        "description": "felicity.apps.patient.services",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.services",
        "documentation": {}
    },
    {
        "label": "PatientService",
        "importPath": "felicity.apps.patient.services",
        "description": "felicity.apps.patient.services",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.services",
        "documentation": {}
    },
    {
        "label": "LaboratoryService",
        "importPath": "felicity.apps.setup.services",
        "description": "felicity.apps.setup.services",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.services",
        "documentation": {}
    },
    {
        "label": "LaboratoryService",
        "importPath": "felicity.apps.setup.services",
        "description": "felicity.apps.setup.services",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.services",
        "documentation": {}
    },
    {
        "label": "DepartmentService",
        "importPath": "felicity.apps.setup.services",
        "description": "felicity.apps.setup.services",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.services",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "get_last_verificator",
        "importPath": "felicity.apps.analysis.utils",
        "description": "felicity.apps.analysis.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.utils",
        "documentation": {}
    },
    {
        "label": "get_qc_sample_type",
        "importPath": "felicity.apps.analysis.utils",
        "description": "felicity.apps.analysis.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.utils",
        "documentation": {}
    },
    {
        "label": "Shipment",
        "importPath": "felicity.apps.shipment.entities",
        "description": "felicity.apps.shipment.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.entities",
        "documentation": {}
    },
    {
        "label": "ShippedSample",
        "importPath": "felicity.apps.shipment.entities",
        "description": "felicity.apps.shipment.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.entities",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratory",
        "importPath": "felicity.apps.shipment.entities",
        "description": "felicity.apps.shipment.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.entities",
        "documentation": {}
    },
    {
        "label": "Shipment",
        "importPath": "felicity.apps.shipment.entities",
        "description": "felicity.apps.shipment.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.entities",
        "documentation": {}
    },
    {
        "label": "ShippedSample",
        "importPath": "felicity.apps.shipment.entities",
        "description": "felicity.apps.shipment.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.entities",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratory",
        "importPath": "felicity.apps.shipment.entities",
        "description": "felicity.apps.shipment.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.entities",
        "documentation": {}
    },
    {
        "label": "Shipment",
        "importPath": "felicity.apps.shipment.entities",
        "description": "felicity.apps.shipment.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.entities",
        "documentation": {}
    },
    {
        "label": "ShippedSample",
        "importPath": "felicity.apps.shipment.entities",
        "description": "felicity.apps.shipment.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.entities",
        "documentation": {}
    },
    {
        "label": "httpx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "httpx",
        "description": "httpx",
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "felicity.apps.job.entities",
        "description": "felicity.apps.job.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.job.entities",
        "documentation": {}
    },
    {
        "label": "Job",
        "importPath": "felicity.apps.job.entities",
        "description": "felicity.apps.job.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.job.entities",
        "documentation": {}
    },
    {
        "label": "AsyncIOScheduler",
        "importPath": "apscheduler.schedulers.asyncio",
        "description": "apscheduler.schedulers.asyncio",
        "isExtraImport": true,
        "detail": "apscheduler.schedulers.asyncio",
        "documentation": {}
    },
    {
        "label": "IntervalTrigger",
        "importPath": "apscheduler.triggers.interval",
        "description": "apscheduler.triggers.interval",
        "isExtraImport": true,
        "detail": "apscheduler.triggers.interval",
        "documentation": {}
    },
    {
        "label": "submit_results",
        "importPath": "felicity.apps.analysis.tasks",
        "description": "felicity.apps.analysis.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.tasks",
        "documentation": {}
    },
    {
        "label": "verify_results",
        "importPath": "felicity.apps.analysis.tasks",
        "description": "felicity.apps.analysis.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.tasks",
        "documentation": {}
    },
    {
        "label": "generate_report",
        "importPath": "felicity.apps.analytics.tasks",
        "description": "felicity.apps.analytics.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.analytics.tasks",
        "documentation": {}
    },
    {
        "label": "impress_results",
        "importPath": "felicity.apps.impress.sample.tasks",
        "description": "felicity.apps.impress.sample.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.sample.tasks",
        "documentation": {}
    },
    {
        "label": "prepare_for_impress",
        "importPath": "felicity.apps.impress.sample.tasks",
        "description": "felicity.apps.impress.sample.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.sample.tasks",
        "documentation": {}
    },
    {
        "label": "dispatch_shipment",
        "importPath": "felicity.apps.shipment.tasks",
        "description": "felicity.apps.shipment.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.tasks",
        "documentation": {}
    },
    {
        "label": "populate_shipment_manually",
        "importPath": "felicity.apps.shipment.tasks",
        "description": "felicity.apps.shipment.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.tasks",
        "documentation": {}
    },
    {
        "label": "process_shipped_report",
        "importPath": "felicity.apps.shipment.tasks",
        "description": "felicity.apps.shipment.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.tasks",
        "documentation": {}
    },
    {
        "label": "return_shipped_report",
        "importPath": "felicity.apps.shipment.tasks",
        "description": "felicity.apps.shipment.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.tasks",
        "documentation": {}
    },
    {
        "label": "shipment_receive",
        "importPath": "felicity.apps.shipment.tasks",
        "description": "felicity.apps.shipment.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.tasks",
        "documentation": {}
    },
    {
        "label": "populate_worksheet_plate",
        "importPath": "felicity.apps.worksheet.tasks",
        "description": "felicity.apps.worksheet.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.tasks",
        "documentation": {}
    },
    {
        "label": "populate_worksheet_plate_manually",
        "importPath": "felicity.apps.worksheet.tasks",
        "description": "felicity.apps.worksheet.tasks",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.tasks",
        "documentation": {}
    },
    {
        "label": "JobRepository",
        "importPath": "felicity.apps.job.repository",
        "description": "felicity.apps.job.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.job.repository",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "felicity.apps.messaging.entities",
        "description": "felicity.apps.messaging.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.messaging.entities",
        "documentation": {}
    },
    {
        "label": "MessageThread",
        "importPath": "felicity.apps.messaging.entities",
        "description": "felicity.apps.messaging.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.messaging.entities",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "felicity.apps.messaging.entities",
        "description": "felicity.apps.messaging.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.messaging.entities",
        "documentation": {}
    },
    {
        "label": "MessageThread",
        "importPath": "felicity.apps.messaging.entities",
        "description": "felicity.apps.messaging.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.messaging.entities",
        "documentation": {}
    },
    {
        "label": "MessageRepository",
        "importPath": "felicity.apps.messaging.repository",
        "description": "felicity.apps.messaging.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.messaging.repository",
        "documentation": {}
    },
    {
        "label": "MessageThreadRepository",
        "importPath": "felicity.apps.messaging.repository",
        "description": "felicity.apps.messaging.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.messaging.repository",
        "documentation": {}
    },
    {
        "label": "MessageCreate",
        "importPath": "felicity.apps.messaging.schemas",
        "description": "felicity.apps.messaging.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.messaging.schemas",
        "documentation": {}
    },
    {
        "label": "MessageThreadCreate",
        "importPath": "felicity.apps.messaging.schemas",
        "description": "felicity.apps.messaging.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.messaging.schemas",
        "documentation": {}
    },
    {
        "label": "MessageThreadUpdate",
        "importPath": "felicity.apps.messaging.schemas",
        "description": "felicity.apps.messaging.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.messaging.schemas",
        "documentation": {}
    },
    {
        "label": "MessageUpdate",
        "importPath": "felicity.apps.messaging.schemas",
        "description": "felicity.apps.messaging.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.messaging.schemas",
        "documentation": {}
    },
    {
        "label": "Notice",
        "importPath": "felicity.apps.noticeboard.entities",
        "description": "felicity.apps.noticeboard.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.noticeboard.entities",
        "documentation": {}
    },
    {
        "label": "Notice",
        "importPath": "felicity.apps.noticeboard.entities",
        "description": "felicity.apps.noticeboard.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.noticeboard.entities",
        "documentation": {}
    },
    {
        "label": "NoticeRepository",
        "importPath": "felicity.apps.noticeboard.repository",
        "description": "felicity.apps.noticeboard.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.noticeboard.repository",
        "documentation": {}
    },
    {
        "label": "NoticeCreate",
        "importPath": "felicity.apps.noticeboard.schemas",
        "description": "felicity.apps.noticeboard.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.noticeboard.schemas",
        "documentation": {}
    },
    {
        "label": "NoticeUpdate",
        "importPath": "felicity.apps.noticeboard.schemas",
        "description": "felicity.apps.noticeboard.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.noticeboard.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityFeed",
        "importPath": "felicity.apps.notification.entities",
        "description": "felicity.apps.notification.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.entities",
        "documentation": {}
    },
    {
        "label": "ActivityStream",
        "importPath": "felicity.apps.notification.entities",
        "description": "felicity.apps.notification.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.entities",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "felicity.apps.notification.entities",
        "description": "felicity.apps.notification.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.entities",
        "documentation": {}
    },
    {
        "label": "ActivityFeed",
        "importPath": "felicity.apps.notification.entities",
        "description": "felicity.apps.notification.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.entities",
        "documentation": {}
    },
    {
        "label": "ActivityStream",
        "importPath": "felicity.apps.notification.entities",
        "description": "felicity.apps.notification.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.entities",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "felicity.apps.notification.entities",
        "description": "felicity.apps.notification.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.entities",
        "documentation": {}
    },
    {
        "label": "broadcast",
        "importPath": "felicity.apps.common.channel",
        "description": "felicity.apps.common.channel",
        "isExtraImport": true,
        "detail": "felicity.apps.common.channel",
        "documentation": {}
    },
    {
        "label": "NotificationChannel",
        "importPath": "felicity.apps.notification.enum",
        "description": "felicity.apps.notification.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.enum",
        "documentation": {}
    },
    {
        "label": "ActivityFeedRepository",
        "importPath": "felicity.apps.notification.repository",
        "description": "felicity.apps.notification.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.repository",
        "documentation": {}
    },
    {
        "label": "ActivityStreamRepository",
        "importPath": "felicity.apps.notification.repository",
        "description": "felicity.apps.notification.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.repository",
        "documentation": {}
    },
    {
        "label": "NotificationRepository",
        "importPath": "felicity.apps.notification.repository",
        "description": "felicity.apps.notification.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.repository",
        "documentation": {}
    },
    {
        "label": "ActivityFeedCreate",
        "importPath": "felicity.apps.notification.schemas",
        "description": "felicity.apps.notification.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityFeedUpdate",
        "importPath": "felicity.apps.notification.schemas",
        "description": "felicity.apps.notification.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityStreamCreate",
        "importPath": "felicity.apps.notification.schemas",
        "description": "felicity.apps.notification.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityStreamUpdate",
        "importPath": "felicity.apps.notification.schemas",
        "description": "felicity.apps.notification.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.schemas",
        "documentation": {}
    },
    {
        "label": "NotificationCreate",
        "importPath": "felicity.apps.notification.schemas",
        "description": "felicity.apps.notification.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.schemas",
        "documentation": {}
    },
    {
        "label": "NotificationUpdate",
        "importPath": "felicity.apps.notification.schemas",
        "description": "felicity.apps.notification.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.notification.schemas",
        "documentation": {}
    },
    {
        "label": "IdSequence",
        "importPath": "felicity.apps.common.entities",
        "description": "felicity.apps.common.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.common.entities",
        "documentation": {}
    },
    {
        "label": "Identification",
        "importPath": "felicity.apps.patient.entities",
        "description": "felicity.apps.patient.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.entities",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "felicity.apps.patient.entities",
        "description": "felicity.apps.patient.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.entities",
        "documentation": {}
    },
    {
        "label": "PatientIdentification",
        "importPath": "felicity.apps.patient.entities",
        "description": "felicity.apps.patient.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.entities",
        "documentation": {}
    },
    {
        "label": "Identification",
        "importPath": "felicity.apps.patient.entities",
        "description": "felicity.apps.patient.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.entities",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "felicity.apps.patient.entities",
        "description": "felicity.apps.patient.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.entities",
        "documentation": {}
    },
    {
        "label": "PatientIdentification",
        "importPath": "felicity.apps.patient.entities",
        "description": "felicity.apps.patient.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.entities",
        "documentation": {}
    },
    {
        "label": "IdentificationRepository",
        "importPath": "felicity.apps.patient.repository",
        "description": "felicity.apps.patient.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.repository",
        "documentation": {}
    },
    {
        "label": "PatientIdentificationRepository",
        "importPath": "felicity.apps.patient.repository",
        "description": "felicity.apps.patient.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.repository",
        "documentation": {}
    },
    {
        "label": "PatientRepository",
        "importPath": "felicity.apps.patient.repository",
        "description": "felicity.apps.patient.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.repository",
        "documentation": {}
    },
    {
        "label": "IdentificationCreate",
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "IdentificationUpdate",
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientCreate",
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientIdentificationCreate",
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientIdentificationUpdate",
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientUpdate",
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientCreate",
        "importPath": "felicity.apps.patient.schemas",
        "description": "felicity.apps.patient.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.patient.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexAction",
        "importPath": "felicity.apps.reflex.entities",
        "description": "felicity.apps.reflex.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.entities",
        "documentation": {}
    },
    {
        "label": "ReflexBrain",
        "importPath": "felicity.apps.reflex.entities",
        "description": "felicity.apps.reflex.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.entities",
        "documentation": {}
    },
    {
        "label": "ReflexBrainAddition",
        "importPath": "felicity.apps.reflex.entities",
        "description": "felicity.apps.reflex.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.entities",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCriteria",
        "importPath": "felicity.apps.reflex.entities",
        "description": "felicity.apps.reflex.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.entities",
        "documentation": {}
    },
    {
        "label": "ReflexBrainFinal",
        "importPath": "felicity.apps.reflex.entities",
        "description": "felicity.apps.reflex.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.entities",
        "documentation": {}
    },
    {
        "label": "ReflexRule",
        "importPath": "felicity.apps.reflex.entities",
        "description": "felicity.apps.reflex.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.entities",
        "documentation": {}
    },
    {
        "label": "ReflexActionRepository",
        "importPath": "felicity.apps.reflex.repository",
        "description": "felicity.apps.reflex.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.repository",
        "documentation": {}
    },
    {
        "label": "ReflexBrainAdditionRepository",
        "importPath": "felicity.apps.reflex.repository",
        "description": "felicity.apps.reflex.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.repository",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCriteriaRepository",
        "importPath": "felicity.apps.reflex.repository",
        "description": "felicity.apps.reflex.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.repository",
        "documentation": {}
    },
    {
        "label": "ReflexBrainFinalRepository",
        "importPath": "felicity.apps.reflex.repository",
        "description": "felicity.apps.reflex.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.repository",
        "documentation": {}
    },
    {
        "label": "ReflexBrainRepository",
        "importPath": "felicity.apps.reflex.repository",
        "description": "felicity.apps.reflex.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.repository",
        "documentation": {}
    },
    {
        "label": "ReflexRuleRepository",
        "importPath": "felicity.apps.reflex.repository",
        "description": "felicity.apps.reflex.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.repository",
        "documentation": {}
    },
    {
        "label": "ReflexAction",
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexActionCreate",
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexActionUpdate",
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrain",
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainAddition",
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainAdditionCreate",
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainAdditionUpdate",
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCreate",
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCriteria",
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCriteriaCreate",
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCriteriaUpdate",
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainFinal",
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainFinalCreate",
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainFinalUpdate",
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainUpdate",
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexRule",
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexRuleCreate",
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexRuleUpdate",
        "importPath": "felicity.apps.reflex.schemas",
        "description": "felicity.apps.reflex.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.reflex.schemas",
        "documentation": {}
    },
    {
        "label": "AsyncLRU",
        "importPath": "cache",
        "description": "cache",
        "isExtraImport": true,
        "detail": "cache",
        "documentation": {}
    },
    {
        "label": "CountryRepository",
        "importPath": "felicity.apps.setup.repositories",
        "description": "felicity.apps.setup.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.repositories",
        "documentation": {}
    },
    {
        "label": "DepartmentRepository",
        "importPath": "felicity.apps.setup.repositories",
        "description": "felicity.apps.setup.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.repositories",
        "documentation": {}
    },
    {
        "label": "DistrictRepository",
        "importPath": "felicity.apps.setup.repositories",
        "description": "felicity.apps.setup.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.repositories",
        "documentation": {}
    },
    {
        "label": "LaboratoryRepository",
        "importPath": "felicity.apps.setup.repositories",
        "description": "felicity.apps.setup.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.repositories",
        "documentation": {}
    },
    {
        "label": "LaboratorySettingRepository",
        "importPath": "felicity.apps.setup.repositories",
        "description": "felicity.apps.setup.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.repositories",
        "documentation": {}
    },
    {
        "label": "ManufacturerRepository",
        "importPath": "felicity.apps.setup.repositories",
        "description": "felicity.apps.setup.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.repositories",
        "documentation": {}
    },
    {
        "label": "ProvinceRepository",
        "importPath": "felicity.apps.setup.repositories",
        "description": "felicity.apps.setup.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.repositories",
        "documentation": {}
    },
    {
        "label": "SupplierRepository",
        "importPath": "felicity.apps.setup.repositories",
        "description": "felicity.apps.setup.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.repositories",
        "documentation": {}
    },
    {
        "label": "UnitRepository",
        "importPath": "felicity.apps.setup.repositories",
        "description": "felicity.apps.setup.repositories",
        "isExtraImport": true,
        "detail": "felicity.apps.setup.repositories",
        "documentation": {}
    },
    {
        "label": "enum",
        "importPath": "felicity.apps.shipment",
        "description": "felicity.apps.shipment",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "felicity.apps.shipment",
        "description": "felicity.apps.shipment",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratoryRepository",
        "importPath": "felicity.apps.shipment.repository",
        "description": "felicity.apps.shipment.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.repository",
        "documentation": {}
    },
    {
        "label": "ShipmentRepository",
        "importPath": "felicity.apps.shipment.repository",
        "description": "felicity.apps.shipment.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.repository",
        "documentation": {}
    },
    {
        "label": "ShippedSampleRepository",
        "importPath": "felicity.apps.shipment.repository",
        "description": "felicity.apps.shipment.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.repository",
        "documentation": {}
    },
    {
        "label": "get_diagnostic_report_resource",
        "importPath": "felicity.apps.iol.fhir.utils",
        "description": "felicity.apps.iol.fhir.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.utils",
        "documentation": {}
    },
    {
        "label": "get_shipment_bundle_resource",
        "importPath": "felicity.apps.iol.fhir.utils",
        "description": "felicity.apps.iol.fhir.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.utils",
        "documentation": {}
    },
    {
        "label": "get_shipment_bundle_resource",
        "importPath": "felicity.apps.iol.fhir.utils",
        "description": "felicity.apps.iol.fhir.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.iol.fhir.utils",
        "documentation": {}
    },
    {
        "label": "shipment_assign",
        "importPath": "felicity.apps.shipment.utils",
        "description": "felicity.apps.shipment.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.utils",
        "documentation": {}
    },
    {
        "label": "shipment_receive",
        "importPath": "felicity.apps.shipment.utils",
        "description": "felicity.apps.shipment.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.utils",
        "documentation": {}
    },
    {
        "label": "shipment_reset_assigned_count",
        "importPath": "felicity.apps.shipment.utils",
        "description": "felicity.apps.shipment.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.utils",
        "documentation": {}
    },
    {
        "label": "shipment_result_update",
        "importPath": "felicity.apps.shipment.utils",
        "description": "felicity.apps.shipment.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.shipment.utils",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "ClientService",
        "importPath": "felicity.apps.client.services",
        "description": "felicity.apps.client.services",
        "isExtraImport": true,
        "detail": "felicity.apps.client.services",
        "documentation": {}
    },
    {
        "label": "gen_pdf_manifest",
        "importPath": "felicity.apps.impress.shipment.utils",
        "description": "felicity.apps.impress.shipment.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.impress.shipment.utils",
        "documentation": {}
    },
    {
        "label": "StorageContainer",
        "importPath": "felicity.apps.storage.entities",
        "description": "felicity.apps.storage.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.entities",
        "documentation": {}
    },
    {
        "label": "StorageLocation",
        "importPath": "felicity.apps.storage.entities",
        "description": "felicity.apps.storage.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.entities",
        "documentation": {}
    },
    {
        "label": "StorageSection",
        "importPath": "felicity.apps.storage.entities",
        "description": "felicity.apps.storage.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.entities",
        "documentation": {}
    },
    {
        "label": "StoreRoom",
        "importPath": "felicity.apps.storage.entities",
        "description": "felicity.apps.storage.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.entities",
        "documentation": {}
    },
    {
        "label": "StorageContainer",
        "importPath": "felicity.apps.storage.entities",
        "description": "felicity.apps.storage.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.entities",
        "documentation": {}
    },
    {
        "label": "StorageLocation",
        "importPath": "felicity.apps.storage.entities",
        "description": "felicity.apps.storage.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.entities",
        "documentation": {}
    },
    {
        "label": "StorageSection",
        "importPath": "felicity.apps.storage.entities",
        "description": "felicity.apps.storage.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.entities",
        "documentation": {}
    },
    {
        "label": "StoreRoom",
        "importPath": "felicity.apps.storage.entities",
        "description": "felicity.apps.storage.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.entities",
        "documentation": {}
    },
    {
        "label": "StorageContainerRepository",
        "importPath": "felicity.apps.storage.repository",
        "description": "felicity.apps.storage.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.repository",
        "documentation": {}
    },
    {
        "label": "StorageLocationRepository",
        "importPath": "felicity.apps.storage.repository",
        "description": "felicity.apps.storage.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.repository",
        "documentation": {}
    },
    {
        "label": "StorageSectionRepository",
        "importPath": "felicity.apps.storage.repository",
        "description": "felicity.apps.storage.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.repository",
        "documentation": {}
    },
    {
        "label": "StoreRoomRepository",
        "importPath": "felicity.apps.storage.repository",
        "description": "felicity.apps.storage.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.repository",
        "documentation": {}
    },
    {
        "label": "StorageContainerCreate",
        "importPath": "felicity.apps.storage.schemas",
        "description": "felicity.apps.storage.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageContainerUpdate",
        "importPath": "felicity.apps.storage.schemas",
        "description": "felicity.apps.storage.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageLocationCreate",
        "importPath": "felicity.apps.storage.schemas",
        "description": "felicity.apps.storage.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageLocationUpdate",
        "importPath": "felicity.apps.storage.schemas",
        "description": "felicity.apps.storage.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageSectionCreate",
        "importPath": "felicity.apps.storage.schemas",
        "description": "felicity.apps.storage.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageSectionUpdate",
        "importPath": "felicity.apps.storage.schemas",
        "description": "felicity.apps.storage.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StoreRoomCreate",
        "importPath": "felicity.apps.storage.schemas",
        "description": "felicity.apps.storage.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.schemas",
        "documentation": {}
    },
    {
        "label": "StoreRoomUpdate",
        "importPath": "felicity.apps.storage.schemas",
        "description": "felicity.apps.storage.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.storage.schemas",
        "documentation": {}
    },
    {
        "label": "subscribe",
        "importPath": "felicity.core.events",
        "description": "felicity.core.events",
        "isExtraImport": true,
        "detail": "felicity.core.events",
        "documentation": {}
    },
    {
        "label": "send_new_account_email",
        "importPath": "felicity.utils.email.email",
        "description": "felicity.utils.email.email",
        "isExtraImport": true,
        "detail": "felicity.utils.email.email",
        "documentation": {}
    },
    {
        "label": "send_reset_password_email",
        "importPath": "felicity.utils.email.email",
        "description": "felicity.utils.email.email",
        "isExtraImport": true,
        "detail": "felicity.utils.email.email",
        "documentation": {}
    },
    {
        "label": "is_valid_email",
        "importPath": "felicity.apps.common.utils",
        "description": "felicity.apps.common.utils",
        "isExtraImport": true,
        "detail": "felicity.apps.common.utils",
        "documentation": {}
    },
    {
        "label": "GroupRepository",
        "importPath": "felicity.apps.user.repository",
        "description": "felicity.apps.user.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.user.repository",
        "documentation": {}
    },
    {
        "label": "PermissionRepository",
        "importPath": "felicity.apps.user.repository",
        "description": "felicity.apps.user.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.user.repository",
        "documentation": {}
    },
    {
        "label": "UserPreferenceRepository",
        "importPath": "felicity.apps.user.repository",
        "description": "felicity.apps.user.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.user.repository",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "felicity.apps.user.repository",
        "description": "felicity.apps.user.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.user.repository",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "importPath": "felicity.core.security",
        "description": "felicity.core.security",
        "isExtraImport": true,
        "detail": "felicity.core.security",
        "documentation": {}
    },
    {
        "label": "password_check",
        "importPath": "felicity.core.security",
        "description": "felicity.core.security",
        "isExtraImport": true,
        "detail": "felicity.core.security",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "felicity.core.security",
        "description": "felicity.core.security",
        "isExtraImport": true,
        "detail": "felicity.core.security",
        "documentation": {}
    },
    {
        "label": "WorkSheet",
        "importPath": "felicity.apps.worksheet.entities",
        "description": "felicity.apps.worksheet.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.entities",
        "documentation": {}
    },
    {
        "label": "WorkSheetTemplate",
        "importPath": "felicity.apps.worksheet.entities",
        "description": "felicity.apps.worksheet.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.entities",
        "documentation": {}
    },
    {
        "label": "WorkSheet",
        "importPath": "felicity.apps.worksheet.entities",
        "description": "felicity.apps.worksheet.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.entities",
        "documentation": {}
    },
    {
        "label": "WorkSheet",
        "importPath": "felicity.apps.worksheet.entities",
        "description": "felicity.apps.worksheet.entities",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.entities",
        "documentation": {}
    },
    {
        "label": "WorkSheetState",
        "importPath": "felicity.apps.worksheet.enum",
        "description": "felicity.apps.worksheet.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.enum",
        "documentation": {}
    },
    {
        "label": "WorkSheetState",
        "importPath": "felicity.apps.worksheet.enum",
        "description": "felicity.apps.worksheet.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.enum",
        "documentation": {}
    },
    {
        "label": "WorkSheetState",
        "importPath": "felicity.apps.worksheet.enum",
        "description": "felicity.apps.worksheet.enum",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.enum",
        "documentation": {}
    },
    {
        "label": "WorkSheetRepository",
        "importPath": "felicity.apps.worksheet.repository",
        "description": "felicity.apps.worksheet.repository",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.repository",
        "documentation": {}
    },
    {
        "label": "WorkSheet",
        "importPath": "felicity.apps.worksheet.schemas",
        "description": "felicity.apps.worksheet.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WorkSheetCreate",
        "importPath": "felicity.apps.worksheet.schemas",
        "description": "felicity.apps.worksheet.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WorkSheetUpdate",
        "importPath": "felicity.apps.worksheet.schemas",
        "description": "felicity.apps.worksheet.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WSTemplate",
        "importPath": "felicity.apps.worksheet.schemas",
        "description": "felicity.apps.worksheet.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WSTemplateCreate",
        "importPath": "felicity.apps.worksheet.schemas",
        "description": "felicity.apps.worksheet.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WSTemplateUpdate",
        "importPath": "felicity.apps.worksheet.schemas",
        "description": "felicity.apps.worksheet.schemas",
        "isExtraImport": true,
        "detail": "felicity.apps.worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "felicity.api.gql.analysis.types",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "felicity.api.gql.analysis.types",
        "description": "felicity.api.gql.analysis.types",
        "detail": "felicity.api.gql.analysis.types",
        "documentation": {}
    },
    {
        "label": "QCSetService",
        "importPath": "felicity.apps.analysis.services.quality_control",
        "description": "felicity.apps.analysis.services.quality_control",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.services.quality_control",
        "documentation": {}
    },
    {
        "label": "QCTemplateService",
        "importPath": "felicity.apps.analysis.services.quality_control",
        "description": "felicity.apps.analysis.services.quality_control",
        "isExtraImport": true,
        "detail": "felicity.apps.analysis.services.quality_control",
        "documentation": {}
    },
    {
        "label": "init_user_events",
        "importPath": "felicity.apps.user.events",
        "description": "felicity.apps.user.events",
        "isExtraImport": true,
        "detail": "felicity.apps.user.events",
        "documentation": {}
    },
    {
        "label": "TrailMixin",
        "kind": 6,
        "importPath": "abstract.audit",
        "description": "abstract.audit",
        "peekOfCode": "class TrailMixin(object):\n    @declared_attr\n    def created_at(self):\n        return Column(DateTime, default=datetime.now)\n    @declared_attr\n    def created_by_uid(self):\n        return Column(String, ForeignKey(\"user.uid\"), nullable=True)\n    @declared_attr\n    def created_by(self):\n        return relationship(\"User\", foreign_keys=[self.created_by_uid], lazy=\"selectin\")",
        "detail": "abstract.audit",
        "documentation": {}
    },
    {
        "label": "AuditUser",
        "kind": 6,
        "importPath": "abstract.audit",
        "description": "abstract.audit",
        "peekOfCode": "class AuditUser(BaseEntity, TrailMixin):\n    \"\"\"Track Actioners: creator and updater\"\"\"\n    __abstract__ = True\nclass AuditHistory(AuditUser, AuditHistoryMixin):\n    \"\"\"Track Model History -> Audit Log\"\"\"\n    __abstract__ = True",
        "detail": "abstract.audit",
        "documentation": {}
    },
    {
        "label": "AuditHistory",
        "kind": 6,
        "importPath": "abstract.audit",
        "description": "abstract.audit",
        "peekOfCode": "class AuditHistory(AuditUser, AuditHistoryMixin):\n    \"\"\"Track Model History -> Audit Log\"\"\"\n    __abstract__ = True",
        "detail": "abstract.audit",
        "documentation": {}
    },
    {
        "label": "BaseEntity",
        "kind": 6,
        "importPath": "abstract.entity",
        "description": "abstract.entity",
        "peekOfCode": "class BaseEntity(DeclarativeBase, ReprMixin, SerializeMixin, AsyncAttrs):\n    __repr__ = ReprMixin.__repr__\n    __name__: str\n    __abstract__ = True\n    __mapper_args__ = {\"eager_defaults\": True}\n    uid = Column(\n        String,\n        primary_key=True,\n        index=True,\n        nullable=False,",
        "detail": "abstract.entity",
        "documentation": {}
    },
    {
        "label": "BaseMPTT",
        "kind": 6,
        "importPath": "abstract.mptt",
        "description": "abstract.mptt",
        "peekOfCode": "class BaseMPTT(BaseNestedSets):\n    abstract = True\n    @classmethod\n    def get_pk_name(cls):\n        \"\"\"override get_pk_name to use uid instead of id\"\"\"\n        return getattr(cls, \"sqlalchemy_mptt_pk_name\", \"uid\")",
        "detail": "abstract.mptt",
        "documentation": {}
    },
    {
        "label": "BaseRepository",
        "kind": 6,
        "importPath": "abstract.repository",
        "description": "abstract.repository",
        "peekOfCode": "class BaseRepository(Generic[M]):\n    async_session = async_session\n    model: M = None\n    def __init__(self, model: M) -> None:\n        self.model = model\n        self.queryset = QueryBuilder(model=self.model)\n    @staticmethod\n    def fill(m: M, **kwargs):\n        for name in kwargs.keys():\n            if name in settable_attributes(m):",
        "detail": "abstract.repository",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": "abstract.repository",
        "description": "abstract.repository",
        "peekOfCode": "M = TypeVar(\"M\", bound=DeclarativeBase)\nclass BaseRepository(Generic[M]):\n    async_session = async_session\n    model: M = None\n    def __init__(self, model: M) -> None:\n        self.model = model\n        self.queryset = QueryBuilder(model=self.model)\n    @staticmethod\n    def fill(m: M, **kwargs):\n        for name in kwargs.keys():",
        "detail": "abstract.repository",
        "documentation": {}
    },
    {
        "label": "BaseService",
        "kind": 6,
        "importPath": "abstract.service",
        "description": "abstract.service",
        "peekOfCode": "class BaseService(Generic[E, C, U]):\n    def __init__(self, repository) -> None:\n        self.repository: BaseRepository = repository()\n    async def paging_filter(\n        self,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,\n        filters: list[dict] | dict = None,\n        sort_by: list[str] | None = None,",
        "detail": "abstract.service",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 5,
        "importPath": "abstract.service",
        "description": "abstract.service",
        "peekOfCode": "E = TypeVar(\"E\", bound=DeclarativeBase)\nC = TypeVar(\"C\", bound=BaseModel)\nU = TypeVar(\"U\", bound=BaseModel)\nclass BaseService(Generic[E, C, U]):\n    def __init__(self, repository) -> None:\n        self.repository: BaseRepository = repository()\n    async def paging_filter(\n        self,\n        page_size: int | None = None,\n        after_cursor: str | None = None,",
        "detail": "abstract.service",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 5,
        "importPath": "abstract.service",
        "description": "abstract.service",
        "peekOfCode": "C = TypeVar(\"C\", bound=BaseModel)\nU = TypeVar(\"U\", bound=BaseModel)\nclass BaseService(Generic[E, C, U]):\n    def __init__(self, repository) -> None:\n        self.repository: BaseRepository = repository()\n    async def paging_filter(\n        self,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,",
        "detail": "abstract.service",
        "documentation": {}
    },
    {
        "label": "U",
        "kind": 5,
        "importPath": "abstract.service",
        "description": "abstract.service",
        "peekOfCode": "U = TypeVar(\"U\", bound=BaseModel)\nclass BaseService(Generic[E, C, U]):\n    def __init__(self, repository) -> None:\n        self.repository: BaseRepository = repository()\n    async def paging_filter(\n        self,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,\n        filters: list[dict] | dict = None,",
        "detail": "abstract.service",
        "documentation": {}
    },
    {
        "label": "CodingStandard",
        "kind": 6,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "class CodingStandard(AuditUser):\n    \"\"\"conding standars e.g LOINC\"\"\"\n    __tablename__ = \"coding_standard\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\nclass SampleType(AuditUser):\n    \"\"\"SampleType\"\"\"\n    __tablename__ = \"sample_type\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "SampleType",
        "kind": 6,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "class SampleType(AuditUser):\n    \"\"\"SampleType\"\"\"\n    __tablename__ = \"sample_type\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    active = Column(Boolean(), default=False)\n    internal_use = Column(Boolean(), default=False)  # e.g QC Sample\n    abbr = Column(String, nullable=False)\nclass SampleTypeCoding(AuditUser):\n    \"\"\"SampleTypeCoding\"\"\"",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "SampleTypeCoding",
        "kind": 6,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "class SampleTypeCoding(AuditUser):\n    \"\"\"SampleTypeCoding\"\"\"\n    __tablename__ = \"sampe_type_coding\"\n    sample_type_uid = Column(String, ForeignKey(\"sample_type.uid\"), nullable=False)\n    sample_type = relationship(\"SampleType\", lazy=\"selectin\")\n    coding_standard_uid = Column(\n        String, ForeignKey(\"coding_standard.uid\"), nullable=True\n    )\n    coding_standard = relationship(\"CodingStandard\", lazy=\"selectin\")\n    name = Column(String, nullable=True)",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCategory",
        "kind": 6,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "class AnalysisCategory(AuditUser):\n    \"\"\"Categorise Analysis\"\"\"\n    __tablename__ = \"analysis_category\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    department_uid = Column(String, ForeignKey(\"department.uid\"), nullable=True)\n    department = relationship(\"Department\", lazy=\"selectin\")\n    active = Column(Boolean(), default=False)\nclass Profile(AuditUser):\n    \"\"\"Grouped Analysis e.g FBC, U&E's, MCS ...\"\"\"",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Profile",
        "kind": 6,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "class Profile(AuditUser):\n    \"\"\"Grouped Analysis e.g FBC, U&E's, MCS ...\"\"\"\n    __tablename__ = \"profile\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    keyword = Column(String, nullable=True, unique=True)\n    tat_length_minutes = Column(Integer, nullable=True)\n    active = Column(Boolean(), default=False)\n    analyses = relationship(\n        \"Analysis\",",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "ProfileCoding",
        "kind": 6,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "class ProfileCoding(AuditUser):\n    \"\"\"ProfileCoding\"\"\"\n    __tablename__ = \"profile_coding\"\n    profile_uid = Column(String, ForeignKey(\"profile.uid\"), nullable=True)\n    profile = relationship(\"Profile\", lazy=\"selectin\")\n    coding_standard_uid = Column(\n        String, ForeignKey(\"coding_standard.uid\"), nullable=True\n    )\n    coding_standard = relationship(\"CodingStandard\", lazy=\"selectin\")\n    name = Column(String, nullable=True)",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisTemplate",
        "kind": 6,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "class AnalysisTemplate(AuditUser):\n    \"\"\"Template for adding Analysis extras\"\"\"\n    __tablename__ = \"analysis_template\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    analyses = relationship(\n        \"Analysis\",\n        secondary=analysis_analysis_template,\n        lazy=\"selectin\",\n    )",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Analysis",
        "kind": 6,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "class Analysis(AuditUser):\n    \"\"\"Analysis Test/Service\"\"\"\n    __tablename__ = \"analysis\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    keyword = Column(String, nullable=False, unique=True)\n    # default unit: can be overridden by specification unit\n    unit_uid = Column(String, ForeignKey(\"unit.uid\"), nullable=True)\n    unit = relationship(\"Unit\", lazy=\"selectin\")\n    profiles = relationship(",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCoding",
        "kind": 6,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "class AnalysisCoding(AuditUser):\n    \"\"\"AnalysisCoding\"\"\"\n    __tablename__ = \"analysis_coding\"\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    analysis = relationship(\"Analysis\", lazy=\"selectin\")\n    coding_standard_uid = Column(\n        String, ForeignKey(\"coding_standard.uid\"), nullable=True\n    )\n    coding_standard = relationship(\"CodingStandard\", lazy=\"selectin\")\n    name = Column(String, nullable=True)",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisInterim",
        "kind": 6,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "class AnalysisInterim(AuditUser):\n    \"\"\"Analysis Interim Result Field\"\"\"\n    __tablename__ = \"analysis_interim\"\n    key = Column(Integer, nullable=False)\n    value = Column(String, nullable=False)\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    instrument_uid = Column(String, ForeignKey(\"instrument.uid\"), nullable=True)\n    instrument = relationship(\"Instrument\")\nclass AnalysisCorrectionFactor(AuditUser):\n    \"\"\"Analysis Correction Factor\"\"\"",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactor",
        "kind": 6,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "class AnalysisCorrectionFactor(AuditUser):\n    \"\"\"Analysis Correction Factor\"\"\"\n    __tablename__ = \"analysis_correction_factor\"\n    factor = Column(Float, nullable=False)\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    instrument_uid = Column(String, ForeignKey(\"instrument.uid\"), nullable=True)\n    method_uid = Column(String, ForeignKey(\"method.uid\"), nullable=True)\nclass AnalysisDetectionLimit(AuditUser):\n    \"\"\"Analysis Detection Limit\"\"\"\n    __tablename__ = \"analysis_detection_limit\"",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimit",
        "kind": 6,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "class AnalysisDetectionLimit(AuditUser):\n    \"\"\"Analysis Detection Limit\"\"\"\n    __tablename__ = \"analysis_detection_limit\"\n    lower_limit = Column(Float, nullable=False)\n    upper_limit = Column(Float, nullable=False)\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    instrument_uid = Column(String, ForeignKey(\"instrument.uid\"), nullable=True)\n    method_uid = Column(String, ForeignKey(\"method.uid\"), nullable=True)\nclass AnalysisUncertainty(AuditUser):\n    \"\"\"Analysis Measurement Uncertainty",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertainty",
        "kind": 6,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "class AnalysisUncertainty(AuditUser):\n    \"\"\"Analysis Measurement Uncertainty\n    If value is within the range min.max then result becomes a range (result +/- value)\n    \"\"\"\n    __tablename__ = \"analysis_uncertainty\"\n    min = Column(Float, nullable=False)\n    max = Column(Float, nullable=False)\n    value = Column(Float, nullable=False)\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    instrument_uid = Column(String, ForeignKey(\"instrument.uid\"), nullable=True)",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecification",
        "kind": 6,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "class AnalysisSpecification(AuditUser):\n    \"\"\"Analysis Specification Ranges\"\"\"\n    __tablename__ = \"analysis_specification\"\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    unit_uid = Column(String, ForeignKey(\"unit.uid\"), nullable=True)\n    unit = relationship(\"Unit\", lazy=\"selectin\")\n    # Normal Range\n    min = Column(Float, nullable=True)\n    max = Column(Float, nullable=True)\n    # Below Normal Range: Raise Alarm",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "ResultOption",
        "kind": 6,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "class ResultOption(AuditUser):\n    \"\"\"Result Choices\"\"\"\n    __tablename__ = \"result_options\"\n    option_key = Column(Integer, nullable=False)\n    value = Column(String, nullable=False)\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"))\n    sample_types = relationship(\n        SampleType, secondary=result_option_sample_type, lazy=\"selectin\"\n    )\nclass AnalysisRequest(AuditUser):",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRequest",
        "kind": 6,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "class AnalysisRequest(AuditUser):\n    \"\"\"AnalysisRequest a.k.a Laboratory Request\"\"\"\n    __tablename__ = \"analysis_request\"\n    patient_uid = Column(String, ForeignKey(\"patient.uid\"))\n    patient = relationship(\n        pt_entities.Patient, backref=\"analysis_requests\", lazy=\"selectin\"\n    )\n    client_uid = Column(String, ForeignKey(\"client.uid\"))\n    client = relationship(\n        ct_entities.Client, backref=\"analysis_requests\", lazy=\"selectin\"",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "RejectionReason",
        "kind": 6,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "class RejectionReason(AuditUser):\n    \"\"\"Rejection Reason\"\"\"\n    __tablename__ = \"rejection_reason\"\n    reason = Column(String, nullable=False)\nclass Sample(AuditHistory, BaseMPTT):\n    \"\"\"Sample\"\"\"\n    __tablename__ = \"sample\"\n    analysis_request_uid = Column(\n        String, ForeignKey(\"analysis_request.uid\"), nullable=True\n    )",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "Sample",
        "kind": 6,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "class Sample(AuditHistory, BaseMPTT):\n    \"\"\"Sample\"\"\"\n    __tablename__ = \"sample\"\n    analysis_request_uid = Column(\n        String, ForeignKey(\"analysis_request.uid\"), nullable=True\n    )\n    analysis_request = relationship(\n        \"AnalysisRequest\", back_populates=\"samples\", lazy=\"selectin\"\n    )\n    sample_type_uid = Column(String, ForeignKey(\"sample_type.uid\"), nullable=False)",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CodingStandard(AuditUser):\n    \"\"\"conding standars e.g LOINC\"\"\"\n    __tablename__ = \"coding_standard\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\nclass SampleType(AuditUser):\n    \"\"\"SampleType\"\"\"\n    __tablename__ = \"sample_type\"\n    name = Column(String, nullable=False)",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "profile_sample_type",
        "kind": 5,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "profile_sample_type = Table(\n    \"profile_sample_type\",\n    BaseEntity.metadata,\n    Column(\"sample_type_uid\", ForeignKey(\"sample_type.uid\"), primary_key=True),\n    Column(\"profile_uid\", ForeignKey(\"profile.uid\"), primary_key=True),\n)\n\"\"\"\nMany to Many Link between Analysis and SampleType\n\"\"\"\nanalysis_sample_type = Table(",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "analysis_sample_type",
        "kind": 5,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "analysis_sample_type = Table(\n    \"analysis_sample_type\",\n    BaseEntity.metadata,\n    Column(\"sample_type_uid\", ForeignKey(\"sample_type.uid\"), primary_key=True),\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n)\n\"\"\"\n Many to Many Link between Analysis and Profile\n    Offers multi-profiles flexibility per analysis\n    A rare scenario worth supporting :)",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "analysis_profile",
        "kind": 5,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "analysis_profile = Table(\n    \"analysis_profile\",\n    BaseEntity.metadata,\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n    Column(\"profile_uid\", ForeignKey(\"profile.uid\"), primary_key=True),\n)\nclass AnalysisCategory(AuditUser):\n    \"\"\"Categorise Analysis\"\"\"\n    __tablename__ = \"analysis_category\"\n    name = Column(String, nullable=False)",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "analysis_analysis_template",
        "kind": 5,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "analysis_analysis_template = Table(\n    \"analysis_analysis_template\",\n    BaseEntity.metadata,\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n    Column(\n        \"analysis_template_uid\", ForeignKey(\"analysis_template.uid\"), primary_key=True\n    ),\n)\nclass AnalysisTemplate(AuditUser):\n    \"\"\"Template for adding Analysis extras\"\"\"",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "analysis_method",
        "kind": 5,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "analysis_method = Table(\n    \"analysis_method\",\n    BaseEntity.metadata,\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n    Column(\"method_uid\", ForeignKey(\"method.uid\"), primary_key=True),\n)\n\"\"\"\n Many to Many Link between Analyses and Intruments\n\"\"\"\nanalysis_instrument = Table(",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "analysis_instrument",
        "kind": 5,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "analysis_instrument = Table(\n    \"analysis_instrument\",\n    BaseEntity.metadata,\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n    Column(\"instrument_uid\", ForeignKey(\"instrument.uid\"), primary_key=True),\n)\nclass Analysis(AuditUser):\n    \"\"\"Analysis Test/Service\"\"\"\n    __tablename__ = \"analysis\"\n    name = Column(String, nullable=False)",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "result_option_sample_type",
        "kind": 5,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "result_option_sample_type = Table(\n    \"result_option_sample_type\",\n    BaseEntity.metadata,\n    Column(\"result_option_uid\", ForeignKey(\"result_options.uid\"), primary_key=True),\n    Column(\"sample_type_uid\", ForeignKey(\"sample_type.uid\"), primary_key=True),\n)\nclass ResultOption(AuditUser):\n    \"\"\"Result Choices\"\"\"\n    __tablename__ = \"result_options\"\n    option_key = Column(Integer, nullable=False)",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "sample_profile",
        "kind": 5,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "sample_profile = Table(\n    \"sample_profile\",\n    BaseEntity.metadata,\n    Column(\"sample_uid\", ForeignKey(\"sample.uid\"), primary_key=True),\n    Column(\"profile_uid\", ForeignKey(\"profile.uid\"), primary_key=True),\n)\n\"\"\"\nMany to Many Link between Sample and Analysis\n\"\"\"\nsample_analysis = Table(",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "sample_analysis",
        "kind": 5,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "sample_analysis = Table(\n    \"sample_analysis\",\n    BaseEntity.metadata,\n    Column(\"sample_uid\", ForeignKey(\"sample.uid\"), primary_key=True),\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n)\n\"\"\"\nMany to Many Link between Sample and Rejection Reason\n\"\"\"\nsample_rejection_reason = Table(",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "sample_rejection_reason",
        "kind": 5,
        "importPath": "analysis.entities.analysis",
        "description": "analysis.entities.analysis",
        "peekOfCode": "sample_rejection_reason = Table(\n    \"sample_rejection_reason\",\n    BaseEntity.metadata,\n    Column(\"sample_uid\", ForeignKey(\"sample.uid\"), primary_key=True),\n    Column(\n        \"rejection_reason_uid\", ForeignKey(\"rejection_reason.uid\"), primary_key=True\n    ),\n)\nclass RejectionReason(AuditUser):\n    \"\"\"Rejection Reason\"\"\"",
        "detail": "analysis.entities.analysis",
        "documentation": {}
    },
    {
        "label": "QCSet",
        "kind": 6,
        "importPath": "analysis.entities.qc",
        "description": "analysis.entities.qc",
        "peekOfCode": "class QCSet(AuditUser):\n    \"\"\"A Set/Group of QC Samples that are run together.\n    - e.g a Viral Load Rack the QCLevels are a set i.e Negative Control, Low Pos Control, High Pos Control\n    \"\"\"\n    __tablename__ = \"qc_set\"\n    name = Column(String, nullable=False)\n    note = Column(String, nullable=True)\n    status = Column(String, nullable=False, default=SampleState.RECEIVED)\n    samples = relationship(\"Sample\", back_populates=\"qc_set\", lazy=\"selectin\")\n\"\"\"",
        "detail": "analysis.entities.qc",
        "documentation": {}
    },
    {
        "label": "QCReference",
        "kind": 6,
        "importPath": "analysis.entities.qc",
        "description": "analysis.entities.qc",
        "peekOfCode": "class QCReference(AuditUser):\n    \"\"\"QC Sample Reference Material    :: Not Implemented Yet\n    - can have multi analytes/Profile\n    - states: Active (in-use - there must be only 1 active per analysis)\n              InActive awaiting activation\n              Depleted\n    \"\"\"\n    __tablename__ = \"qc_reference\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)",
        "detail": "analysis.entities.qc",
        "documentation": {}
    },
    {
        "label": "QCLevel",
        "kind": 6,
        "importPath": "analysis.entities.qc",
        "description": "analysis.entities.qc",
        "peekOfCode": "class QCLevel(AuditUser):\n    \"\"\"Sample Level /category\n    - None - normal sample\n    - Negative Control\n    - EID PositiveControl\n    - HIV Low Positive Control\n    - HIV High Positive Control\n    \"\"\"\n    __tablename__ = \"qc_level\"\n    level = Column(String, nullable=False)",
        "detail": "analysis.entities.qc",
        "documentation": {}
    },
    {
        "label": "QCTemplate",
        "kind": 6,
        "importPath": "analysis.entities.qc",
        "description": "analysis.entities.qc",
        "peekOfCode": "class QCTemplate(AuditUser):\n    \"\"\"QC Level Grouping e.g:\n    Roche Viral Load CQ:\n        - Neg Control\n        - Low Pos Control\n        - High Pos Control\n    Malaria Slide QC:\n        - Negative Control\n        - Positive COntrol\n    \"\"\"",
        "detail": "analysis.entities.qc",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "analysis.entities.qc",
        "description": "analysis.entities.qc",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass QCSet(AuditUser):\n    \"\"\"A Set/Group of QC Samples that are run together.\n    - e.g a Viral Load Rack the QCLevels are a set i.e Negative Control, Low Pos Control, High Pos Control\n    \"\"\"\n    __tablename__ = \"qc_set\"\n    name = Column(String, nullable=False)\n    note = Column(String, nullable=True)\n    status = Column(String, nullable=False, default=SampleState.RECEIVED)\n    samples = relationship(\"Sample\", back_populates=\"qc_set\", lazy=\"selectin\")",
        "detail": "analysis.entities.qc",
        "documentation": {}
    },
    {
        "label": "qc_reference_analysis",
        "kind": 5,
        "importPath": "analysis.entities.qc",
        "description": "analysis.entities.qc",
        "peekOfCode": "qc_reference_analysis = Table(\n    \"qc_reference_analysis\",\n    BaseEntity.metadata,\n    Column(\"qc_reference_uid\", ForeignKey(\"qc_reference.uid\"), primary_key=True),\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n)\nclass QCReference(AuditUser):\n    \"\"\"QC Sample Reference Material    :: Not Implemented Yet\n    - can have multi analytes/Profile\n    - states: Active (in-use - there must be only 1 active per analysis)",
        "detail": "analysis.entities.qc",
        "documentation": {}
    },
    {
        "label": "qc_template_department",
        "kind": 5,
        "importPath": "analysis.entities.qc",
        "description": "analysis.entities.qc",
        "peekOfCode": "qc_template_department = Table(\n    \"qc_template_department\",\n    BaseEntity.metadata,\n    Column(\"department_uid\", ForeignKey(\"department.uid\"), primary_key=True),\n    Column(\"qc_template_uid\", ForeignKey(\"qc_template.uid\"), primary_key=True),\n)\n\"\"\"\nMany to Many Link between QCTemplate and  QCLevel\n\"\"\"\nqc_template_qc_level = Table(",
        "detail": "analysis.entities.qc",
        "documentation": {}
    },
    {
        "label": "qc_template_qc_level",
        "kind": 5,
        "importPath": "analysis.entities.qc",
        "description": "analysis.entities.qc",
        "peekOfCode": "qc_template_qc_level = Table(\n    \"qc_template_qc_level\",\n    BaseEntity.metadata,\n    Column(\"qc_level_uid\", ForeignKey(\"qc_level.uid\"), primary_key=True),\n    Column(\"qc_template_uid\", ForeignKey(\"qc_template.uid\"), primary_key=True),\n)\nclass QCTemplate(AuditUser):\n    \"\"\"QC Level Grouping e.g:\n    Roche Viral Load CQ:\n        - Neg Control",
        "detail": "analysis.entities.qc",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "kind": 6,
        "importPath": "analysis.entities.results",
        "description": "analysis.entities.results",
        "peekOfCode": "class AnalysisResult(AuditHistory, BaseMPTT):\n    \"\"\"Test/Analysis Result\n    Number of analysis results per sample will be directly proportional to\n    the number of linked sample_analyses at minimum :)\n    \"\"\"\n    __tablename__ = \"analysis_result\"\n    sample_uid = Column(String, ForeignKey(\"sample.uid\"), nullable=False)\n    sample = relationship(\"Sample\", back_populates=\"analysis_results\", lazy=\"selectin\")\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=False)\n    analysis = relationship(\"Analysis\", backref=\"analysis_results\", lazy=\"selectin\")",
        "detail": "analysis.entities.results",
        "documentation": {}
    },
    {
        "label": "ResultMutation",
        "kind": 6,
        "importPath": "analysis.entities.results",
        "description": "analysis.entities.results",
        "peekOfCode": "class ResultMutation(AuditUser):\n    \"\"\"Result Mutations tracker\"\"\"\n    __tablename__ = \"result_mutation\"\n    result_uid = Column(String, ForeignKey(\"analysis_result.uid\"), nullable=False)\n    before = Column(String, nullable=False)\n    after = Column(String, nullable=False)\n    mutation = Column(String, nullable=False)\n    date = Column(DateTime, nullable=True)",
        "detail": "analysis.entities.results",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "analysis.entities.results",
        "description": "analysis.entities.results",
        "peekOfCode": "logger = logging.getLogger(__name__)\n\"\"\"\n Many to Many Link between AnalysisResult and User\n\"\"\"\nresult_verification = Table(\n    \"result_verification\",\n    BaseEntity.metadata,\n    Column(\"result_uid\", ForeignKey(\"analysis_result.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)",
        "detail": "analysis.entities.results",
        "documentation": {}
    },
    {
        "label": "result_verification",
        "kind": 5,
        "importPath": "analysis.entities.results",
        "description": "analysis.entities.results",
        "peekOfCode": "result_verification = Table(\n    \"result_verification\",\n    BaseEntity.metadata,\n    Column(\"result_uid\", ForeignKey(\"analysis_result.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\nclass AnalysisResult(AuditHistory, BaseMPTT):\n    \"\"\"Test/Analysis Result\n    Number of analysis results per sample will be directly proportional to\n    the number of linked sample_analyses at minimum :)",
        "detail": "analysis.entities.results",
        "documentation": {}
    },
    {
        "label": "CodingStandardRepository",
        "kind": 6,
        "importPath": "analysis.repository.analysis",
        "description": "analysis.repository.analysis",
        "peekOfCode": "class CodingStandardRepository(BaseRepository[CodingStandard]):\n    def __init__(self) -> None:\n        super().__init__(CodingStandard)\nclass SampleTypeRepository(BaseRepository[SampleType]):\n    def __init__(self) -> None:\n        super().__init__(SampleType)\nclass SampleTypeCodingRepository(BaseRepository[SampleTypeCoding]):\n    def __init__(self) -> None:\n        super().__init__(SampleTypeCoding)\nclass ProfileRepository(BaseRepository[Profile]):",
        "detail": "analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "SampleTypeRepository",
        "kind": 6,
        "importPath": "analysis.repository.analysis",
        "description": "analysis.repository.analysis",
        "peekOfCode": "class SampleTypeRepository(BaseRepository[SampleType]):\n    def __init__(self) -> None:\n        super().__init__(SampleType)\nclass SampleTypeCodingRepository(BaseRepository[SampleTypeCoding]):\n    def __init__(self) -> None:\n        super().__init__(SampleTypeCoding)\nclass ProfileRepository(BaseRepository[Profile]):\n    def __init__(self) -> None:\n        super().__init__(Profile)\nclass AnalysisTemplateRepository(BaseRepository[AnalysisTemplate]):",
        "detail": "analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "SampleTypeCodingRepository",
        "kind": 6,
        "importPath": "analysis.repository.analysis",
        "description": "analysis.repository.analysis",
        "peekOfCode": "class SampleTypeCodingRepository(BaseRepository[SampleTypeCoding]):\n    def __init__(self) -> None:\n        super().__init__(SampleTypeCoding)\nclass ProfileRepository(BaseRepository[Profile]):\n    def __init__(self) -> None:\n        super().__init__(Profile)\nclass AnalysisTemplateRepository(BaseRepository[AnalysisTemplate]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisTemplate)\nclass AnalysisCategoryRepository(BaseRepository[AnalysisCategory]):",
        "detail": "analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "ProfileRepository",
        "kind": 6,
        "importPath": "analysis.repository.analysis",
        "description": "analysis.repository.analysis",
        "peekOfCode": "class ProfileRepository(BaseRepository[Profile]):\n    def __init__(self) -> None:\n        super().__init__(Profile)\nclass AnalysisTemplateRepository(BaseRepository[AnalysisTemplate]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisTemplate)\nclass AnalysisCategoryRepository(BaseRepository[AnalysisCategory]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisCategory)\nclass ProfileCodingRepository(BaseRepository[ProfileCoding]):",
        "detail": "analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisTemplateRepository",
        "kind": 6,
        "importPath": "analysis.repository.analysis",
        "description": "analysis.repository.analysis",
        "peekOfCode": "class AnalysisTemplateRepository(BaseRepository[AnalysisTemplate]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisTemplate)\nclass AnalysisCategoryRepository(BaseRepository[AnalysisCategory]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisCategory)\nclass ProfileCodingRepository(BaseRepository[ProfileCoding]):\n    def __init__(self) -> None:\n        super().__init__(ProfileCoding)\nclass AnalysisRepository(BaseRepository[Analysis]):",
        "detail": "analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryRepository",
        "kind": 6,
        "importPath": "analysis.repository.analysis",
        "description": "analysis.repository.analysis",
        "peekOfCode": "class AnalysisCategoryRepository(BaseRepository[AnalysisCategory]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisCategory)\nclass ProfileCodingRepository(BaseRepository[ProfileCoding]):\n    def __init__(self) -> None:\n        super().__init__(ProfileCoding)\nclass AnalysisRepository(BaseRepository[Analysis]):\n    def __init__(self) -> None:\n        super().__init__(Analysis)\nclass AnalysisCodingRepository(BaseRepository[AnalysisCoding]):",
        "detail": "analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "ProfileCodingRepository",
        "kind": 6,
        "importPath": "analysis.repository.analysis",
        "description": "analysis.repository.analysis",
        "peekOfCode": "class ProfileCodingRepository(BaseRepository[ProfileCoding]):\n    def __init__(self) -> None:\n        super().__init__(ProfileCoding)\nclass AnalysisRepository(BaseRepository[Analysis]):\n    def __init__(self) -> None:\n        super().__init__(Analysis)\nclass AnalysisCodingRepository(BaseRepository[AnalysisCoding]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisCoding)\nclass AnalysisInterimRepository(BaseRepository[AnalysisInterim]):",
        "detail": "analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRepository",
        "kind": 6,
        "importPath": "analysis.repository.analysis",
        "description": "analysis.repository.analysis",
        "peekOfCode": "class AnalysisRepository(BaseRepository[Analysis]):\n    def __init__(self) -> None:\n        super().__init__(Analysis)\nclass AnalysisCodingRepository(BaseRepository[AnalysisCoding]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisCoding)\nclass AnalysisInterimRepository(BaseRepository[AnalysisInterim]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisInterim)\nclass AnalysisCorrectionFactorRepository(BaseRepository[AnalysisCorrectionFactor]):",
        "detail": "analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCodingRepository",
        "kind": 6,
        "importPath": "analysis.repository.analysis",
        "description": "analysis.repository.analysis",
        "peekOfCode": "class AnalysisCodingRepository(BaseRepository[AnalysisCoding]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisCoding)\nclass AnalysisInterimRepository(BaseRepository[AnalysisInterim]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisInterim)\nclass AnalysisCorrectionFactorRepository(BaseRepository[AnalysisCorrectionFactor]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisCorrectionFactor)\nclass AnalysisDetectionLimitRepository(BaseRepository[AnalysisDetectionLimit]):",
        "detail": "analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisInterimRepository",
        "kind": 6,
        "importPath": "analysis.repository.analysis",
        "description": "analysis.repository.analysis",
        "peekOfCode": "class AnalysisInterimRepository(BaseRepository[AnalysisInterim]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisInterim)\nclass AnalysisCorrectionFactorRepository(BaseRepository[AnalysisCorrectionFactor]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisCorrectionFactor)\nclass AnalysisDetectionLimitRepository(BaseRepository[AnalysisDetectionLimit]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisDetectionLimit)\nclass AnalysisUncertaintyRepository(BaseRepository[AnalysisUncertainty]):",
        "detail": "analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactorRepository",
        "kind": 6,
        "importPath": "analysis.repository.analysis",
        "description": "analysis.repository.analysis",
        "peekOfCode": "class AnalysisCorrectionFactorRepository(BaseRepository[AnalysisCorrectionFactor]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisCorrectionFactor)\nclass AnalysisDetectionLimitRepository(BaseRepository[AnalysisDetectionLimit]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisDetectionLimit)\nclass AnalysisUncertaintyRepository(BaseRepository[AnalysisUncertainty]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisUncertainty)\nclass AnalysisSpecificationRepository(BaseRepository[AnalysisSpecification]):",
        "detail": "analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimitRepository",
        "kind": 6,
        "importPath": "analysis.repository.analysis",
        "description": "analysis.repository.analysis",
        "peekOfCode": "class AnalysisDetectionLimitRepository(BaseRepository[AnalysisDetectionLimit]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisDetectionLimit)\nclass AnalysisUncertaintyRepository(BaseRepository[AnalysisUncertainty]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisUncertainty)\nclass AnalysisSpecificationRepository(BaseRepository[AnalysisSpecification]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisSpecification)\nclass ResultOptionRepository(BaseRepository[ResultOption]):",
        "detail": "analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertaintyRepository",
        "kind": 6,
        "importPath": "analysis.repository.analysis",
        "description": "analysis.repository.analysis",
        "peekOfCode": "class AnalysisUncertaintyRepository(BaseRepository[AnalysisUncertainty]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisUncertainty)\nclass AnalysisSpecificationRepository(BaseRepository[AnalysisSpecification]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisSpecification)\nclass ResultOptionRepository(BaseRepository[ResultOption]):\n    def __init__(self) -> None:\n        super().__init__(ResultOption)\nclass AnalysisRequestRepository(BaseRepository[AnalysisRequest]):",
        "detail": "analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecificationRepository",
        "kind": 6,
        "importPath": "analysis.repository.analysis",
        "description": "analysis.repository.analysis",
        "peekOfCode": "class AnalysisSpecificationRepository(BaseRepository[AnalysisSpecification]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisSpecification)\nclass ResultOptionRepository(BaseRepository[ResultOption]):\n    def __init__(self) -> None:\n        super().__init__(ResultOption)\nclass AnalysisRequestRepository(BaseRepository[AnalysisRequest]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisRequest)\nclass RejectionReasonRepository(BaseRepository[RejectionReason]):",
        "detail": "analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "ResultOptionRepository",
        "kind": 6,
        "importPath": "analysis.repository.analysis",
        "description": "analysis.repository.analysis",
        "peekOfCode": "class ResultOptionRepository(BaseRepository[ResultOption]):\n    def __init__(self) -> None:\n        super().__init__(ResultOption)\nclass AnalysisRequestRepository(BaseRepository[AnalysisRequest]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisRequest)\nclass RejectionReasonRepository(BaseRepository[RejectionReason]):\n    def __init__(self) -> None:\n        super().__init__(RejectionReason)\nclass SampleRepository(BaseRepository[Sample]):",
        "detail": "analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestRepository",
        "kind": 6,
        "importPath": "analysis.repository.analysis",
        "description": "analysis.repository.analysis",
        "peekOfCode": "class AnalysisRequestRepository(BaseRepository[AnalysisRequest]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisRequest)\nclass RejectionReasonRepository(BaseRepository[RejectionReason]):\n    def __init__(self) -> None:\n        super().__init__(RejectionReason)\nclass SampleRepository(BaseRepository[Sample]):\n    def __init__(self) -> None:\n        super().__init__(Sample)\n    async def search(self, status: str, text: str, client_uid: str) -> list[Sample]:",
        "detail": "analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "RejectionReasonRepository",
        "kind": 6,
        "importPath": "analysis.repository.analysis",
        "description": "analysis.repository.analysis",
        "peekOfCode": "class RejectionReasonRepository(BaseRepository[RejectionReason]):\n    def __init__(self) -> None:\n        super().__init__(RejectionReason)\nclass SampleRepository(BaseRepository[Sample]):\n    def __init__(self) -> None:\n        super().__init__(Sample)\n    async def search(self, status: str, text: str, client_uid: str) -> list[Sample]:\n        \"\"\"No pagination\"\"\"\n        filters = []\n        _or_text_ = {}",
        "detail": "analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "SampleRepository",
        "kind": 6,
        "importPath": "analysis.repository.analysis",
        "description": "analysis.repository.analysis",
        "peekOfCode": "class SampleRepository(BaseRepository[Sample]):\n    def __init__(self) -> None:\n        super().__init__(Sample)\n    async def search(self, status: str, text: str, client_uid: str) -> list[Sample]:\n        \"\"\"No pagination\"\"\"\n        filters = []\n        _or_text_ = {}\n        if text:\n            arg_list = [\n                \"sample_id__ilike\",",
        "detail": "analysis.repository.analysis",
        "documentation": {}
    },
    {
        "label": "QCSetRepository",
        "kind": 6,
        "importPath": "analysis.repository.quality_control",
        "description": "analysis.repository.quality_control",
        "peekOfCode": "class QCSetRepository(BaseRepository[QCSet]):\n    def __init__(self) -> None:\n        super().__init__(QCSet)\nclass QCReferenceRepository(BaseRepository[QCReference]):\n    def __init__(self) -> None:\n        super().__init__(QCReference)\nclass QCLevelRepository(BaseRepository[QCLevel]):\n    def __init__(self) -> None:\n        super().__init__(QCLevel)\nclass QCTemplateRepository(BaseRepository[QCTemplate]):",
        "detail": "analysis.repository.quality_control",
        "documentation": {}
    },
    {
        "label": "QCReferenceRepository",
        "kind": 6,
        "importPath": "analysis.repository.quality_control",
        "description": "analysis.repository.quality_control",
        "peekOfCode": "class QCReferenceRepository(BaseRepository[QCReference]):\n    def __init__(self) -> None:\n        super().__init__(QCReference)\nclass QCLevelRepository(BaseRepository[QCLevel]):\n    def __init__(self) -> None:\n        super().__init__(QCLevel)\nclass QCTemplateRepository(BaseRepository[QCTemplate]):\n    def __init__(self) -> None:\n        super().__init__(QCTemplate)",
        "detail": "analysis.repository.quality_control",
        "documentation": {}
    },
    {
        "label": "QCLevelRepository",
        "kind": 6,
        "importPath": "analysis.repository.quality_control",
        "description": "analysis.repository.quality_control",
        "peekOfCode": "class QCLevelRepository(BaseRepository[QCLevel]):\n    def __init__(self) -> None:\n        super().__init__(QCLevel)\nclass QCTemplateRepository(BaseRepository[QCTemplate]):\n    def __init__(self) -> None:\n        super().__init__(QCTemplate)",
        "detail": "analysis.repository.quality_control",
        "documentation": {}
    },
    {
        "label": "QCTemplateRepository",
        "kind": 6,
        "importPath": "analysis.repository.quality_control",
        "description": "analysis.repository.quality_control",
        "peekOfCode": "class QCTemplateRepository(BaseRepository[QCTemplate]):\n    def __init__(self) -> None:\n        super().__init__(QCTemplate)",
        "detail": "analysis.repository.quality_control",
        "documentation": {}
    },
    {
        "label": "ResultMutationRepository",
        "kind": 6,
        "importPath": "analysis.repository.results",
        "description": "analysis.repository.results",
        "peekOfCode": "class ResultMutationRepository(BaseRepository[ResultMutation]):\n    def __init__(self) -> None:\n        super().__init__(ResultMutation)\nclass AnalysisResultRepository(BaseRepository[AnalysisResult]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisResult)",
        "detail": "analysis.repository.results",
        "documentation": {}
    },
    {
        "label": "AnalysisResultRepository",
        "kind": 6,
        "importPath": "analysis.repository.results",
        "description": "analysis.repository.results",
        "peekOfCode": "class AnalysisResultRepository(BaseRepository[AnalysisResult]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisResult)",
        "detail": "analysis.repository.results",
        "documentation": {}
    },
    {
        "label": "CodingStandardService",
        "kind": 6,
        "importPath": "analysis.services.analysis",
        "description": "analysis.services.analysis",
        "peekOfCode": "class CodingStandardService(\n    BaseService[CodingStandard, CodingStandardCreate, CodingStandardUpdate]\n):\n    def __init__(self):\n        super().__init__(CodingStandardRepository)\nclass SampleTypeService(BaseService[SampleType, SampleTypeCreate, SampleTypeUpdate]):\n    def __init__(self):\n        super().__init__(SampleTypeRepository)\nclass SampleTypeCodingService(\n    BaseService[SampleTypeCoding, SampleTypeCodingCreate, SampleTypeCodingUpdate]",
        "detail": "analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "SampleTypeService",
        "kind": 6,
        "importPath": "analysis.services.analysis",
        "description": "analysis.services.analysis",
        "peekOfCode": "class SampleTypeService(BaseService[SampleType, SampleTypeCreate, SampleTypeUpdate]):\n    def __init__(self):\n        super().__init__(SampleTypeRepository)\nclass SampleTypeCodingService(\n    BaseService[SampleTypeCoding, SampleTypeCodingCreate, SampleTypeCodingUpdate]\n):\n    def __init__(self):\n        super().__init__(SampleTypeCodingRepository)\nclass AnalysisCategoryService(\n    BaseService[AnalysisCategory, AnalysisCategoryCreate, AnalysisCategoryUpdate]",
        "detail": "analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "SampleTypeCodingService",
        "kind": 6,
        "importPath": "analysis.services.analysis",
        "description": "analysis.services.analysis",
        "peekOfCode": "class SampleTypeCodingService(\n    BaseService[SampleTypeCoding, SampleTypeCodingCreate, SampleTypeCodingUpdate]\n):\n    def __init__(self):\n        super().__init__(SampleTypeCodingRepository)\nclass AnalysisCategoryService(\n    BaseService[AnalysisCategory, AnalysisCategoryCreate, AnalysisCategoryUpdate]\n):\n    def __init__(self):\n        super().__init__(AnalysisCategoryRepository)",
        "detail": "analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryService",
        "kind": 6,
        "importPath": "analysis.services.analysis",
        "description": "analysis.services.analysis",
        "peekOfCode": "class AnalysisCategoryService(\n    BaseService[AnalysisCategory, AnalysisCategoryCreate, AnalysisCategoryUpdate]\n):\n    def __init__(self):\n        super().__init__(AnalysisCategoryRepository)\nclass ProfileService(BaseService[Profile, ProfileCreate, ProfileUpdate]):\n    def __init__(self):\n        super().__init__(ProfileRepository)\n    async def update_tat(self, profile: Profile) -> Profile:\n        tats = []",
        "detail": "analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "ProfileService",
        "kind": 6,
        "importPath": "analysis.services.analysis",
        "description": "analysis.services.analysis",
        "peekOfCode": "class ProfileService(BaseService[Profile, ProfileCreate, ProfileUpdate]):\n    def __init__(self):\n        super().__init__(ProfileRepository)\n    async def update_tat(self, profile: Profile) -> Profile:\n        tats = []\n        tat = None\n        for anal in profile.analyses:\n            tats.append(anal.tat_length_minutes)\n        if len(tats) > 0:\n            tat = sorted(tats, reverse=False)[0]",
        "detail": "analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisTemplateService",
        "kind": 6,
        "importPath": "analysis.services.analysis",
        "description": "analysis.services.analysis",
        "peekOfCode": "class AnalysisTemplateService(\n    BaseService[AnalysisTemplate, AnalysisTemplateCreate, AnalysisTemplateUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(AnalysisTemplateRepository)\nclass ProfileCodingService(\n    BaseService[ProfileCoding, ProfileCodingCreate, ProfileCodingUpdate]\n):\n    def __int__(self):\n        super().__init__(ProfileCodingRepository)",
        "detail": "analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "ProfileCodingService",
        "kind": 6,
        "importPath": "analysis.services.analysis",
        "description": "analysis.services.analysis",
        "peekOfCode": "class ProfileCodingService(\n    BaseService[ProfileCoding, ProfileCodingCreate, ProfileCodingUpdate]\n):\n    def __int__(self):\n        super().__init__(ProfileCodingRepository)\nclass AnalysisService(BaseService[Analysis, AnalysisCreate, AnalysisUpdate]):\n    def __init__(self):\n        super().__init__(AnalysisRepository)\nclass AnalysisCodingService(\n    BaseService[AnalysisCoding, AnalysisCodingCreate, AnalysisCodingUpdate]",
        "detail": "analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisService",
        "kind": 6,
        "importPath": "analysis.services.analysis",
        "description": "analysis.services.analysis",
        "peekOfCode": "class AnalysisService(BaseService[Analysis, AnalysisCreate, AnalysisUpdate]):\n    def __init__(self):\n        super().__init__(AnalysisRepository)\nclass AnalysisCodingService(\n    BaseService[AnalysisCoding, AnalysisCodingCreate, AnalysisCodingUpdate]\n):\n    def __init__(self):\n        super().__init__(AnalysisCodingRepository)\nclass AnalysisInterimService(\n    BaseService[AnalysisInterim, AnalysisInterimCreate, AnalysisInterimUpdate]",
        "detail": "analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCodingService",
        "kind": 6,
        "importPath": "analysis.services.analysis",
        "description": "analysis.services.analysis",
        "peekOfCode": "class AnalysisCodingService(\n    BaseService[AnalysisCoding, AnalysisCodingCreate, AnalysisCodingUpdate]\n):\n    def __init__(self):\n        super().__init__(AnalysisCodingRepository)\nclass AnalysisInterimService(\n    BaseService[AnalysisInterim, AnalysisInterimCreate, AnalysisInterimUpdate]\n):\n    def __init__(self):\n        super().__init__(AnalysisInterimRepository)",
        "detail": "analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisInterimService",
        "kind": 6,
        "importPath": "analysis.services.analysis",
        "description": "analysis.services.analysis",
        "peekOfCode": "class AnalysisInterimService(\n    BaseService[AnalysisInterim, AnalysisInterimCreate, AnalysisInterimUpdate]\n):\n    def __init__(self):\n        super().__init__(AnalysisInterimRepository)\nclass AnalysisCorrectionFactorService(\n    BaseService[\n        AnalysisCorrectionFactor,\n        AnalysisCorrectionFactorCreate,\n        AnalysisCorrectionFactorUpdate,",
        "detail": "analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactorService",
        "kind": 6,
        "importPath": "analysis.services.analysis",
        "description": "analysis.services.analysis",
        "peekOfCode": "class AnalysisCorrectionFactorService(\n    BaseService[\n        AnalysisCorrectionFactor,\n        AnalysisCorrectionFactorCreate,\n        AnalysisCorrectionFactorUpdate,\n    ]\n):\n    def __init__(self):\n        super().__init__(AnalysisCorrectionFactorRepository)\nclass AnalysisDetectionLimitService(",
        "detail": "analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimitService",
        "kind": 6,
        "importPath": "analysis.services.analysis",
        "description": "analysis.services.analysis",
        "peekOfCode": "class AnalysisDetectionLimitService(\n    BaseService[\n        AnalysisDetectionLimit,\n        AnalysisDetectionLimitCreate,\n        AnalysisDetectionLimitUpdate,\n    ]\n):\n    def __init__(self):\n        super().__init__(AnalysisDetectionLimitRepository)\nclass AnalysisUncertaintyService(",
        "detail": "analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertaintyService",
        "kind": 6,
        "importPath": "analysis.services.analysis",
        "description": "analysis.services.analysis",
        "peekOfCode": "class AnalysisUncertaintyService(\n    BaseService[\n        AnalysisUncertainty, AnalysisUncertaintyCreate, AnalysisUncertaintyUpdate\n    ]\n):\n    def __init__(self):\n        super().__init__(AnalysisUncertaintyRepository)\nclass AnalysisSpecificationService(\n    BaseService[\n        AnalysisSpecification, AnalysisSpecificationCreate, AnalysisSpecificationUpdate",
        "detail": "analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecificationService",
        "kind": 6,
        "importPath": "analysis.services.analysis",
        "description": "analysis.services.analysis",
        "peekOfCode": "class AnalysisSpecificationService(\n    BaseService[\n        AnalysisSpecification, AnalysisSpecificationCreate, AnalysisSpecificationUpdate\n    ]\n):\n    def __init__(self):\n        super().__init__(AnalysisSpecificationRepository)\nclass ResultOptionService(\n    BaseService[ResultOption, ResultOptionCreate, ResultOptionUpdate]\n):",
        "detail": "analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "ResultOptionService",
        "kind": 6,
        "importPath": "analysis.services.analysis",
        "description": "analysis.services.analysis",
        "peekOfCode": "class ResultOptionService(\n    BaseService[ResultOption, ResultOptionCreate, ResultOptionUpdate]\n):\n    def __init__(self):\n        super().__init__(ResultOptionRepository)\nclass AnalysisRequestService(\n    BaseService[AnalysisRequest, AnalysisRequestCreate, AnalysisRequestUpdate]\n):\n    id_sequence_service = IdSequenceService()\n    def __init__(self):",
        "detail": "analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestService",
        "kind": 6,
        "importPath": "analysis.services.analysis",
        "description": "analysis.services.analysis",
        "peekOfCode": "class AnalysisRequestService(\n    BaseService[AnalysisRequest, AnalysisRequestCreate, AnalysisRequestUpdate]\n):\n    id_sequence_service = IdSequenceService()\n    def __init__(self):\n        super().__init__(AnalysisRequestRepository)\n    @classmethod\n    async def create(cls, obj_in: dict | AnalysisRequestCreate, related: list[str] = None):\n        data = cls._import(obj_in)\n        data[\"request_id\"] = (await cls.id_sequence_service.get_next_number(\"AR\"))[1]",
        "detail": "analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "RejectionReasonService",
        "kind": 6,
        "importPath": "analysis.services.analysis",
        "description": "analysis.services.analysis",
        "peekOfCode": "class RejectionReasonService(\n    BaseService[RejectionReason, RejectionReasonCreate, RejectionReasonUpdate]\n):\n    def __init__(self):\n        super().__init__(RejectionReasonRepository)\nclass SampleService(BaseService[Sample, SampleCreate, SampleUpdate]):\n    def __init__(self):\n        self.analysis_result_service = AnalysisResultService()\n        self.streamer_service = ActivityStreamService()\n        self.id_sequencer_service = IdSequenceService()",
        "detail": "analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "SampleService",
        "kind": 6,
        "importPath": "analysis.services.analysis",
        "description": "analysis.services.analysis",
        "peekOfCode": "class SampleService(BaseService[Sample, SampleCreate, SampleUpdate]):\n    def __init__(self):\n        self.analysis_result_service = AnalysisResultService()\n        self.streamer_service = ActivityStreamService()\n        self.id_sequencer_service = IdSequenceService()\n        super().__init__(SampleRepository)\n    @staticmethod\n    def copy_include_keys() -> list[str]:\n        \"\"\"Keys to include when duplicating Sample\"\"\"\n        return [",
        "detail": "analysis.services.analysis",
        "documentation": {}
    },
    {
        "label": "QCSetService",
        "kind": 6,
        "importPath": "analysis.services.quality_control",
        "description": "analysis.services.quality_control",
        "peekOfCode": "class QCSetService(BaseService[QCSet, QCSetCreate, QCSetUpdate]):\n    def __init__(self):\n        super().__init__(QCSetRepository)\nclass QCLevelService(BaseService[QCLevel, QCLevelCreate, QCLevelUpdate]):\n    def __init__(self):\n        super().__init__(QCLevelRepository)\nclass QCTemplateService(BaseService[QCTemplate, QCTemplateCreate, QCTemplateUpdate]):\n    def __init__(self):\n        super().__init__(QCTemplateRepository)",
        "detail": "analysis.services.quality_control",
        "documentation": {}
    },
    {
        "label": "QCLevelService",
        "kind": 6,
        "importPath": "analysis.services.quality_control",
        "description": "analysis.services.quality_control",
        "peekOfCode": "class QCLevelService(BaseService[QCLevel, QCLevelCreate, QCLevelUpdate]):\n    def __init__(self):\n        super().__init__(QCLevelRepository)\nclass QCTemplateService(BaseService[QCTemplate, QCTemplateCreate, QCTemplateUpdate]):\n    def __init__(self):\n        super().__init__(QCTemplateRepository)",
        "detail": "analysis.services.quality_control",
        "documentation": {}
    },
    {
        "label": "QCTemplateService",
        "kind": 6,
        "importPath": "analysis.services.quality_control",
        "description": "analysis.services.quality_control",
        "peekOfCode": "class QCTemplateService(BaseService[QCTemplate, QCTemplateCreate, QCTemplateUpdate]):\n    def __init__(self):\n        super().__init__(QCTemplateRepository)",
        "detail": "analysis.services.quality_control",
        "documentation": {}
    },
    {
        "label": "AnalysisResultService",
        "kind": 6,
        "importPath": "analysis.services.result",
        "description": "analysis.services.result",
        "peekOfCode": "class AnalysisResultService(\n    BaseService[AnalysisResult, AnalysisResultCreate, AnalysisResultUpdate]\n):\n    def __init__(self):\n        self.streamer_service = ActivityStreamService()\n        super().__init__(AnalysisResultRepository)\n    async def verifications(self, uid: str) -> tuple[\n        Annotated[int, \"Total number required verifications\"],\n        Annotated[int, \"current number of verifications\"],\n    ]:",
        "detail": "analysis.services.result",
        "documentation": {}
    },
    {
        "label": "ResultMutationService",
        "kind": 6,
        "importPath": "analysis.services.result",
        "description": "analysis.services.result",
        "peekOfCode": "class ResultMutationService(BaseService[ResultMutation, Dummy, Dummy]):\n    def __init__(self):\n        super().__init__(ResultMutationRepository)",
        "detail": "analysis.services.result",
        "documentation": {}
    },
    {
        "label": "AnalysisResultWorkFlowException",
        "kind": 6,
        "importPath": "analysis.workflow.analysis_result",
        "description": "analysis.workflow.analysis_result",
        "peekOfCode": "class AnalysisResultWorkFlowException(Exception): ...\nclass AnalysisResultWorkFlow:\n    \"\"\"AnalysisResultWorkFlow\n    Defines a set of guards that allow or prevent actions taken on AnalysisResult\n    \"\"\"\n    def __init__(self): ...\n    @classmethod\n    async def retest(cls, uid, retested_by, action=\"verify\"):\n        analysis_result = await AnalysisResult.get(uid=uid)\n        await cls._guard_retest(analysis_result)",
        "detail": "analysis.workflow.analysis_result",
        "documentation": {}
    },
    {
        "label": "AnalysisResultWorkFlow",
        "kind": 6,
        "importPath": "analysis.workflow.analysis_result",
        "description": "analysis.workflow.analysis_result",
        "peekOfCode": "class AnalysisResultWorkFlow:\n    \"\"\"AnalysisResultWorkFlow\n    Defines a set of guards that allow or prevent actions taken on AnalysisResult\n    \"\"\"\n    def __init__(self): ...\n    @classmethod\n    async def retest(cls, uid, retested_by, action=\"verify\"):\n        analysis_result = await AnalysisResult.get(uid=uid)\n        await cls._guard_retest(analysis_result)\n        await analysis_result.retest_result(retested_by, action)",
        "detail": "analysis.workflow.analysis_result",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "analysis.workflow.analysis_result",
        "description": "analysis.workflow.analysis_result",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass AnalysisResultWorkFlowException(Exception): ...\nclass AnalysisResultWorkFlow:\n    \"\"\"AnalysisResultWorkFlow\n    Defines a set of guards that allow or prevent actions taken on AnalysisResult\n    \"\"\"\n    def __init__(self): ...\n    @classmethod\n    async def retest(cls, uid, retested_by, action=\"verify\"):\n        analysis_result = await AnalysisResult.get(uid=uid)",
        "detail": "analysis.workflow.analysis_result",
        "documentation": {}
    },
    {
        "label": "CQSetWorkFlowException",
        "kind": 6,
        "importPath": "analysis.workflow.qcset",
        "description": "analysis.workflow.qcset",
        "peekOfCode": "class CQSetWorkFlowException(Exception): ...\nclass CQSetWorkFlow:\n    \"\"\"CQSetWorkFlow\n    Defines a set of guards that allow or prevent actions taken on Quality Control Sets\n        methods:\n            cancel: cancels a quality control set iff all quality control samples are cancelled\n                params:\n                    uid: quality control set uid\n            submit: submits a quality control set iff all quality control samples are submits\n                params:",
        "detail": "analysis.workflow.qcset",
        "documentation": {}
    },
    {
        "label": "CQSetWorkFlow",
        "kind": 6,
        "importPath": "analysis.workflow.qcset",
        "description": "analysis.workflow.qcset",
        "peekOfCode": "class CQSetWorkFlow:\n    \"\"\"CQSetWorkFlow\n    Defines a set of guards that allow or prevent actions taken on Quality Control Sets\n        methods:\n            cancel: cancels a quality control set iff all quality control samples are cancelled\n                params:\n                    uid: quality control set uid\n            submit: submits a quality control set iff all quality control samples are submits\n                params:\n                    uid: quality control set uid",
        "detail": "analysis.workflow.qcset",
        "documentation": {}
    },
    {
        "label": "SampleWorkFlowException",
        "kind": 6,
        "importPath": "analysis.workflow.sample",
        "description": "analysis.workflow.sample",
        "peekOfCode": "class SampleWorkFlowException(Exception): ...\nclass SampleWorkFlow:\n    \"\"\"SampleWorkFlow\n    Defines a set of guards that allow or prevent actions taken on Samples\n    \"\"\"\n    def __init__(self): ...\n    @classmethod\n    async def receive(cls, uid):\n        sample = await Sample.get(uid=uid)\n        await cls._guard_receive(sample)",
        "detail": "analysis.workflow.sample",
        "documentation": {}
    },
    {
        "label": "SampleWorkFlow",
        "kind": 6,
        "importPath": "analysis.workflow.sample",
        "description": "analysis.workflow.sample",
        "peekOfCode": "class SampleWorkFlow:\n    \"\"\"SampleWorkFlow\n    Defines a set of guards that allow or prevent actions taken on Samples\n    \"\"\"\n    def __init__(self): ...\n    @classmethod\n    async def receive(cls, uid):\n        sample = await Sample.get(uid=uid)\n        await cls._guard_receive(sample)\n        await sample.change_status(SampleState.RECEIVED)",
        "detail": "analysis.workflow.sample",
        "documentation": {}
    },
    {
        "label": "SampleState",
        "kind": 6,
        "importPath": "analysis.enum",
        "description": "analysis.enum",
        "peekOfCode": "class SampleState(StrEnum):\n    SCHEDULED = auto()  # scheduled for collection\n    EXPECTED = auto()  # not yet received in the laboratory\n    RECEIVED = auto()  # received in the laboratory and ready for processing\n    AWAITING = auto()  # pending approval\n    APPROVED = auto()  # authorised for release\n    PUBLISHING = auto()  # printed samples, ready for dispatch\n    PUBLISHED = auto()  # printed samples, ready for dispatch\n    INVALIDATED = auto()  # approval condemnation\n    CANCELLED = auto()  # no longer required <in other words deleted>",
        "detail": "analysis.enum",
        "documentation": {}
    },
    {
        "label": "ResultState",
        "kind": 6,
        "importPath": "analysis.enum",
        "description": "analysis.enum",
        "peekOfCode": "class ResultState(StrEnum):\n    PENDING = auto()  # analytes that are pending results\n    SUBMITTING = auto()\n    RESULTED = (\n        auto()\n    )  # analytes that have results but not approved yet. 'to_be_verified' / 'un-authorised'\n    RETRACTED = auto()  # analytes with erroneous results for correction\n    CANCELLED = auto()  # analytes that are no longer required <in other words deleted>\n    APPROVING = auto()\n    APPROVED = auto()  # analytes that are authorised/approved",
        "detail": "analysis.enum",
        "documentation": {}
    },
    {
        "label": "SamplePriority",
        "kind": 6,
        "importPath": "analysis.enum",
        "description": "analysis.enum",
        "peekOfCode": "class SamplePriority(IntEnum):\n    NORMAL = 0\n    MEDIUM = 1\n    HIGH = 2\nclass ResultType(StrEnum):\n    NUMERIC = auto()  # strict numeric\n    SHORT_TEXT = auto()  # short text and numeric\n    LONG_TEXT = auto()  # strictly long text",
        "detail": "analysis.enum",
        "documentation": {}
    },
    {
        "label": "ResultType",
        "kind": 6,
        "importPath": "analysis.enum",
        "description": "analysis.enum",
        "peekOfCode": "class ResultType(StrEnum):\n    NUMERIC = auto()  # strict numeric\n    SHORT_TEXT = auto()  # short text and numeric\n    LONG_TEXT = auto()  # strictly long text",
        "detail": "analysis.enum",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "analysis.permissions",
        "description": "analysis.permissions",
        "peekOfCode": "logger = logging.getLogger(__name__)\nif TYPE_CHECKING:\n    from ..user.entities import User\nasync def check_sample_verification(\n    samples: List[Union[str, Sample]], verifier: \"User\"\n) -> tuple[list[Sample] | None, list[Sample] | None, str, str]:\n    \"\"\"\n    splits samples into allowed and restricted samples.\n    allowed samples are those that the user is allowed to verify.\n    if restricted samples are found, the user will be provided with extra messages and suggestions",
        "detail": "analysis.permissions",
        "documentation": {}
    },
    {
        "label": "CodingStandardBase",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class CodingStandardBase(BaseAuditModel):\n    name: str | None\n    description: str | None\nclass CodingStandardBaseInDB(CodingStandardBase):\n    uid: str | None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass CodingStandardCreate(CodingStandardBase):\n    pass\n# Properties to receive via API on update",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "CodingStandardBaseInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class CodingStandardBaseInDB(CodingStandardBase):\n    uid: str | None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass CodingStandardCreate(CodingStandardBase):\n    pass\n# Properties to receive via API on update\nclass CodingStandardUpdate(CodingStandardBase):\n    pass\n# Properties to return via API",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "CodingStandardCreate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class CodingStandardCreate(CodingStandardBase):\n    pass\n# Properties to receive via API on update\nclass CodingStandardUpdate(CodingStandardBase):\n    pass\n# Properties to return via API\nclass CodingStandard(CodingStandardBaseInDB):\n    pass\n# Properties stored in DB\nclass CodingStandardInDB(CodingStandardBaseInDB):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "CodingStandardUpdate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class CodingStandardUpdate(CodingStandardBase):\n    pass\n# Properties to return via API\nclass CodingStandard(CodingStandardBaseInDB):\n    pass\n# Properties stored in DB\nclass CodingStandardInDB(CodingStandardBaseInDB):\n    pass\n#\n# SampleType Schemas",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "CodingStandard",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class CodingStandard(CodingStandardBaseInDB):\n    pass\n# Properties stored in DB\nclass CodingStandardInDB(CodingStandardBaseInDB):\n    pass\n#\n# SampleType Schemas\n#\n# Shared properties\nclass SampleTypeBase(BaseAuditModel):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "CodingStandardInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class CodingStandardInDB(CodingStandardBaseInDB):\n    pass\n#\n# SampleType Schemas\n#\n# Shared properties\nclass SampleTypeBase(BaseAuditModel):\n    name: str | None = None\n    description: str | None = None\n    abbr: str | None = None",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeBase",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class SampleTypeBase(BaseAuditModel):\n    name: str | None = None\n    description: str | None = None\n    abbr: str | None = None\n    internal_use: bool | None = False\n    active: bool | None = True\nclass SampleTypeBaseInDB(SampleTypeBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeBaseInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class SampleTypeBaseInDB(SampleTypeBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass SampleTypeCreate(SampleTypeBase):\n    pass\n# Properties to receive via API on update\nclass SampleTypeUpdate(SampleTypeBase):\n    pass\n# Properties to return via API",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeCreate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class SampleTypeCreate(SampleTypeBase):\n    pass\n# Properties to receive via API on update\nclass SampleTypeUpdate(SampleTypeBase):\n    pass\n# Properties to return via API\nclass SampleType(SampleTypeBaseInDB):\n    pass\n# Properties stored in DB\nclass SampleTypeInDB(SampleTypeBaseInDB):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeUpdate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class SampleTypeUpdate(SampleTypeBase):\n    pass\n# Properties to return via API\nclass SampleType(SampleTypeBaseInDB):\n    pass\n# Properties stored in DB\nclass SampleTypeInDB(SampleTypeBaseInDB):\n    pass\n#\n# SampleTypeCoding Schemas",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleType",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class SampleType(SampleTypeBaseInDB):\n    pass\n# Properties stored in DB\nclass SampleTypeInDB(SampleTypeBaseInDB):\n    pass\n#\n# SampleTypeCoding Schemas\n#\nclass SampleTypeCodingBase(BaseAuditModel):\n    sample_type_uid: str | None",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class SampleTypeInDB(SampleTypeBaseInDB):\n    pass\n#\n# SampleTypeCoding Schemas\n#\nclass SampleTypeCodingBase(BaseAuditModel):\n    sample_type_uid: str | None\n    sample_type: SampleType | None\n    coding_standard_uid: str\n    coding_standard: CodingStandard | None",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeCodingBase",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class SampleTypeCodingBase(BaseAuditModel):\n    sample_type_uid: str | None\n    sample_type: SampleType | None\n    coding_standard_uid: str\n    coding_standard: CodingStandard | None\n    code: str | None\n    name: str | None\n    description: str | None\nclass SampleTypeCodingBaseInDB(SampleTypeCodingBase):\n    uid: str | None",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeCodingBaseInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class SampleTypeCodingBaseInDB(SampleTypeCodingBase):\n    uid: str | None\nmodel_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass SampleTypeCodingCreate(SampleTypeCodingBase):\n    pass\n# Properties to receive via API on update\nclass SampleTypeCodingUpdate(SampleTypeCodingBase):\n    pass\n# Properties to return via API",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeCodingCreate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class SampleTypeCodingCreate(SampleTypeCodingBase):\n    pass\n# Properties to receive via API on update\nclass SampleTypeCodingUpdate(SampleTypeCodingBase):\n    pass\n# Properties to return via API\nclass SampleTypeCoding(SampleTypeCodingBaseInDB):\n    pass\n# Properties stored in DB\nclass SampleTypeCodingInDB(SampleTypeCodingBaseInDB):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeCodingUpdate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class SampleTypeCodingUpdate(SampleTypeCodingBase):\n    pass\n# Properties to return via API\nclass SampleTypeCoding(SampleTypeCodingBaseInDB):\n    pass\n# Properties stored in DB\nclass SampleTypeCodingInDB(SampleTypeCodingBaseInDB):\n    pass\n#\n# Profile Schemas",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeCoding",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class SampleTypeCoding(SampleTypeCodingBaseInDB):\n    pass\n# Properties stored in DB\nclass SampleTypeCodingInDB(SampleTypeCodingBaseInDB):\n    pass\n#\n# Profile Schemas\n#\n# Shared properties\nclass ProfileBase(BaseAuditModel):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleTypeCodingInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class SampleTypeCodingInDB(SampleTypeCodingBaseInDB):\n    pass\n#\n# Profile Schemas\n#\n# Shared properties\nclass ProfileBase(BaseAuditModel):\n    name: str | None\n    analyses: list[\"Analysis\"] | None = None\n    sample_types: list[SampleType] | None = None",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileBase",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class ProfileBase(BaseAuditModel):\n    name: str | None\n    analyses: list[\"Analysis\"] | None = None\n    sample_types: list[SampleType] | None = None\n    description: str | None = None\n    department_uid: str | None = None\n    keyword: str | None = None\n    tat_length_minutes: int | None = None\n    active: bool | None = True\nclass ProfileBaseInDB(ProfileBase):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileBaseInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class ProfileBaseInDB(ProfileBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ProfileCreate(ProfileBase):\n    pass\n# Properties to receive via API on update\nclass ProfileUpdate(ProfileBase):\n    pass\n# Properties to return via API",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileCreate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class ProfileCreate(ProfileBase):\n    pass\n# Properties to receive via API on update\nclass ProfileUpdate(ProfileBase):\n    pass\n# Properties to return via API\nclass Profile(ProfileBaseInDB):\n    pass\n# Properties stored in DB\nclass ProfileInDB(ProfileBaseInDB):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileUpdate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class ProfileUpdate(ProfileBase):\n    pass\n# Properties to return via API\nclass Profile(ProfileBaseInDB):\n    pass\n# Properties stored in DB\nclass ProfileInDB(ProfileBaseInDB):\n    pass\n#\n# AnalysisTemplate Schemas",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "Profile",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class Profile(ProfileBaseInDB):\n    pass\n# Properties stored in DB\nclass ProfileInDB(ProfileBaseInDB):\n    pass\n#\n# AnalysisTemplate Schemas\n#\n# Shared properties\nclass AnalysisTemplateBase(BaseAuditModel):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class ProfileInDB(ProfileBaseInDB):\n    pass\n#\n# AnalysisTemplate Schemas\n#\n# Shared properties\nclass AnalysisTemplateBase(BaseAuditModel):\n    name: str | None\n    analyses: list[\"Analysis\"] | None = None\n    description: str | None = None",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisTemplateBase",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisTemplateBase(BaseAuditModel):\n    name: str | None\n    analyses: list[\"Analysis\"] | None = None\n    description: str | None = None\n    department_uid: str | None = None\nclass AnalysisTemplateBaseInDB(AnalysisTemplateBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisTemplateCreate(AnalysisTemplateBase):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisTemplateBaseInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisTemplateBaseInDB(AnalysisTemplateBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisTemplateCreate(AnalysisTemplateBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisTemplateUpdate(AnalysisTemplateBase):\n    pass\n# Properties to return via API",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisTemplateCreate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisTemplateCreate(AnalysisTemplateBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisTemplateUpdate(AnalysisTemplateBase):\n    pass\n# Properties to return via API\nclass AnalysisTemplate(AnalysisTemplateBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisTemplateInDB(AnalysisTemplateBaseInDB):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisTemplateUpdate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisTemplateUpdate(AnalysisTemplateBase):\n    pass\n# Properties to return via API\nclass AnalysisTemplate(AnalysisTemplateBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisTemplateInDB(AnalysisTemplateBaseInDB):\n    pass\n#\n# ProfileCoding Schemas",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisTemplate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisTemplate(AnalysisTemplateBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisTemplateInDB(AnalysisTemplateBaseInDB):\n    pass\n#\n# ProfileCoding Schemas\n#\nclass ProfileCodingBase(BaseAuditModel):\n    \"\"\"SampleTypeMapping\"\"\"",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisTemplateInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisTemplateInDB(AnalysisTemplateBaseInDB):\n    pass\n#\n# ProfileCoding Schemas\n#\nclass ProfileCodingBase(BaseAuditModel):\n    \"\"\"SampleTypeMapping\"\"\"\n    profile_uid: str | None\n    profile: Profile | None = None\n    coding_standard_uid: str | None = None",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileCodingBase",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class ProfileCodingBase(BaseAuditModel):\n    \"\"\"SampleTypeMapping\"\"\"\n    profile_uid: str | None\n    profile: Profile | None = None\n    coding_standard_uid: str | None = None\n    coding_standard: CodingStandard | None = None\n    code: str | None\n    name: str | None\n    description: str | None\nclass ProfileCodingBaseInDB(ProfileCodingBase):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileCodingBaseInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class ProfileCodingBaseInDB(ProfileCodingBase):\n    uid: str | None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ProfileCodingCreate(ProfileCodingBase):\n    profile_uid: str\n    coding_standard_uid: str\n# Properties to receive via API on update\nclass ProfileCodingUpdate(ProfileCodingBase):\n    pass",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileCodingCreate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class ProfileCodingCreate(ProfileCodingBase):\n    profile_uid: str\n    coding_standard_uid: str\n# Properties to receive via API on update\nclass ProfileCodingUpdate(ProfileCodingBase):\n    pass\n# Properties to return via API\nclass ProfileCoding(ProfileCodingBaseInDB):\n    pass\n# Properties stored in DB",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileCodingUpdate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class ProfileCodingUpdate(ProfileCodingBase):\n    pass\n# Properties to return via API\nclass ProfileCoding(ProfileCodingBaseInDB):\n    pass\n# Properties stored in DB\nclass ProfileCodingInDB(ProfileCodingBaseInDB):\n    pass\n# AnalysisCategory Schemas\n#",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileCoding",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class ProfileCoding(ProfileCodingBaseInDB):\n    pass\n# Properties stored in DB\nclass ProfileCodingInDB(ProfileCodingBaseInDB):\n    pass\n# AnalysisCategory Schemas\n#\n# Shared properties\nclass AnalysisCategoryBase(BaseAuditModel):\n    name: str | None = None",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileCodingInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class ProfileCodingInDB(ProfileCodingBaseInDB):\n    pass\n# AnalysisCategory Schemas\n#\n# Shared properties\nclass AnalysisCategoryBase(BaseAuditModel):\n    name: str | None = None\n    description: str | None = None\n    department_uid: str | None = None\n    active: bool | None = True",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryBase",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisCategoryBase(BaseAuditModel):\n    name: str | None = None\n    description: str | None = None\n    department_uid: str | None = None\n    active: bool | None = True\nclass AnalysisCategoryBaseInDB(AnalysisCategoryBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisCategoryCreate(AnalysisCategoryBase):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryBaseInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisCategoryBaseInDB(AnalysisCategoryBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisCategoryCreate(AnalysisCategoryBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisCategoryUpdate(AnalysisCategoryBase):\n    pass\n# Properties to return via API",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryCreate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisCategoryCreate(AnalysisCategoryBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisCategoryUpdate(AnalysisCategoryBase):\n    pass\n# Properties to return via API\nclass AnalysisCategory(AnalysisCategoryBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisCategoryInDB(AnalysisCategoryBaseInDB):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryUpdate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisCategoryUpdate(AnalysisCategoryBase):\n    pass\n# Properties to return via API\nclass AnalysisCategory(AnalysisCategoryBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisCategoryInDB(AnalysisCategoryBaseInDB):\n    pass\n#\n# Analysis Schemas",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCategory",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisCategory(AnalysisCategoryBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisCategoryInDB(AnalysisCategoryBaseInDB):\n    pass\n#\n# Analysis Schemas\n#\nclass AnalysisBasicBase(BaseModel):\n    name: str | None = None",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisCategoryInDB(AnalysisCategoryBaseInDB):\n    pass\n#\n# Analysis Schemas\n#\nclass AnalysisBasicBase(BaseModel):\n    name: str | None = None\n    keyword: str | None = None\n# Shared properties\nclass AnalysisBase(BaseAuditModel):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisBasicBase",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisBasicBase(BaseModel):\n    name: str | None = None\n    keyword: str | None = None\n# Shared properties\nclass AnalysisBase(BaseAuditModel):\n    name: str | None = None\n    description: str | None = None\n    keyword: str | None = None\n    profiles: list[Profile] | None = None\n    sample_types: list[SampleType] | None = None",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisBase",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisBase(BaseAuditModel):\n    name: str | None = None\n    description: str | None = None\n    keyword: str | None = None\n    profiles: list[Profile] | None = None\n    sample_types: list[SampleType] | None = None\n    tat_length_minutes: int | None = None\n    unit_uid: str | None = None\n    category_uid: str | None = None\n    sort_key: int | None = 0",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisBasic",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisBasic(AnalysisBasicBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass AnalysisBaseInDB(AnalysisBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisCreate(AnalysisBase):\n    pass\n# Properties to receive via API on update",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisBaseInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisBaseInDB(AnalysisBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisCreate(AnalysisBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisUpdate(AnalysisBase):\n    pass\n# Properties to return via API",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCreate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisCreate(AnalysisBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisUpdate(AnalysisBase):\n    pass\n# Properties to return via API\nclass Analysis(AnalysisBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisInDB(AnalysisBaseInDB):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisUpdate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisUpdate(AnalysisBase):\n    pass\n# Properties to return via API\nclass Analysis(AnalysisBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisInDB(AnalysisBaseInDB):\n    pass\nclass AnalysisCodingBase(BaseAuditModel):\n    \"\"\"SampleTypeMapping\"\"\"",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "Analysis",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class Analysis(AnalysisBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisInDB(AnalysisBaseInDB):\n    pass\nclass AnalysisCodingBase(BaseAuditModel):\n    \"\"\"SampleTypeMapping\"\"\"\n    analysis_uid: str | None = None\n    analysis: Analysis | None = None\n    coding_standard_uid: str | None = None",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisInDB(AnalysisBaseInDB):\n    pass\nclass AnalysisCodingBase(BaseAuditModel):\n    \"\"\"SampleTypeMapping\"\"\"\n    analysis_uid: str | None = None\n    analysis: Analysis | None = None\n    coding_standard_uid: str | None = None\n    coding_standard: CodingStandard | None = None\n    code: str | None\n    name: str | None",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCodingBase",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisCodingBase(BaseAuditModel):\n    \"\"\"SampleTypeMapping\"\"\"\n    analysis_uid: str | None = None\n    analysis: Analysis | None = None\n    coding_standard_uid: str | None = None\n    coding_standard: CodingStandard | None = None\n    code: str | None\n    name: str | None\n    description: str | None\nclass AnalysisCodingBaseInDB(AnalysisCodingBase):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCodingBaseInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisCodingBaseInDB(AnalysisCodingBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisCodingCreate(AnalysisCodingBase):\n    analysis_uid: str\n    coding_standard_uid: str\n# Properties to receive via API on update\nclass AnalysisCodingUpdate(AnalysisCodingBase):\n    pass",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCodingCreate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisCodingCreate(AnalysisCodingBase):\n    analysis_uid: str\n    coding_standard_uid: str\n# Properties to receive via API on update\nclass AnalysisCodingUpdate(AnalysisCodingBase):\n    pass\n# Properties to return via API\nclass AnalysisCoding(AnalysisCodingBaseInDB):\n    pass\n# Properties stored in DB",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCodingUpdate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisCodingUpdate(AnalysisCodingBase):\n    pass\n# Properties to return via API\nclass AnalysisCoding(AnalysisCodingBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisCodingInDB(AnalysisCodingBaseInDB):\n    pass\n#\n# AnalysisInterim Schemas",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCoding",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisCoding(AnalysisCodingBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisCodingInDB(AnalysisCodingBaseInDB):\n    pass\n#\n# AnalysisInterim Schemas\n#\n# Shared properties\nclass AnalysisInterimBase(BaseAuditModel):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCodingInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisCodingInDB(AnalysisCodingBaseInDB):\n    pass\n#\n# AnalysisInterim Schemas\n#\n# Shared properties\nclass AnalysisInterimBase(BaseAuditModel):\n    key: int\n    value: str\n    analysis_uid: str",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisInterimBase",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisInterimBase(BaseAuditModel):\n    key: int\n    value: str\n    analysis_uid: str\n    instrument_uid: str\nclass AnalysisInterimInDB(AnalysisInterimBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisInterimCreate(AnalysisInterimBase):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisInterimInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisInterimInDB(AnalysisInterimBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisInterimCreate(AnalysisInterimBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisInterimUpdate(AnalysisInterimBase):\n    pass\n# Properties to return via API",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisInterimCreate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisInterimCreate(AnalysisInterimBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisInterimUpdate(AnalysisInterimBase):\n    pass\n# Properties to return via API\nclass AnalysisInterim(AnalysisInterimInDB):\n    pass\n# Properties stored in DB\nclass AnalysisInterimInDB(AnalysisInterimInDB):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisInterimUpdate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisInterimUpdate(AnalysisInterimBase):\n    pass\n# Properties to return via API\nclass AnalysisInterim(AnalysisInterimInDB):\n    pass\n# Properties stored in DB\nclass AnalysisInterimInDB(AnalysisInterimInDB):\n    pass\n#\n# AnalysisCorrectionFactor Schemas",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisInterim",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisInterim(AnalysisInterimInDB):\n    pass\n# Properties stored in DB\nclass AnalysisInterimInDB(AnalysisInterimInDB):\n    pass\n#\n# AnalysisCorrectionFactor Schemas\n#\n# Shared properties\nclass AnalysisCorrectionFactorBase(BaseAuditModel):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisInterimInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisInterimInDB(AnalysisInterimInDB):\n    pass\n#\n# AnalysisCorrectionFactor Schemas\n#\n# Shared properties\nclass AnalysisCorrectionFactorBase(BaseAuditModel):\n    factor: float\n    analysis_uid: str\n    instrument_uid: str",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactorBase",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisCorrectionFactorBase(BaseAuditModel):\n    factor: float\n    analysis_uid: str\n    instrument_uid: str\n    method_uid: str\nclass AnalysisCorrectionFactorBaseInDB(AnalysisCorrectionFactorBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisCorrectionFactorCreate(AnalysisCorrectionFactorBase):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactorBaseInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisCorrectionFactorBaseInDB(AnalysisCorrectionFactorBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisCorrectionFactorCreate(AnalysisCorrectionFactorBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisCorrectionFactorUpdate(AnalysisCorrectionFactorBase):\n    pass\n# Properties to return via API",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactorCreate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisCorrectionFactorCreate(AnalysisCorrectionFactorBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisCorrectionFactorUpdate(AnalysisCorrectionFactorBase):\n    pass\n# Properties to return via API\nclass AnalysisCorrectionFactor(AnalysisCorrectionFactorBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisCorrectionFactorInDB(AnalysisCorrectionFactorBaseInDB):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactorUpdate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisCorrectionFactorUpdate(AnalysisCorrectionFactorBase):\n    pass\n# Properties to return via API\nclass AnalysisCorrectionFactor(AnalysisCorrectionFactorBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisCorrectionFactorInDB(AnalysisCorrectionFactorBaseInDB):\n    pass\n#\n# AnalysisDetectionLimit Schemas",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactor",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisCorrectionFactor(AnalysisCorrectionFactorBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisCorrectionFactorInDB(AnalysisCorrectionFactorBaseInDB):\n    pass\n#\n# AnalysisDetectionLimit Schemas\n#\n# Shared properties\nclass AnalysisDetectionLimitBase(BaseAuditModel):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCorrectionFactorInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisCorrectionFactorInDB(AnalysisCorrectionFactorBaseInDB):\n    pass\n#\n# AnalysisDetectionLimit Schemas\n#\n# Shared properties\nclass AnalysisDetectionLimitBase(BaseAuditModel):\n    lower_limit: int\n    upper_limit: int\n    analysis_uid: str",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimitBase",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisDetectionLimitBase(BaseAuditModel):\n    lower_limit: int\n    upper_limit: int\n    analysis_uid: str\n    instrument_uid: str\n    method_uid: str\nclass AnalysisDetectionLimitBaseInDB(AnalysisDetectionLimitBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimitBaseInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisDetectionLimitBaseInDB(AnalysisDetectionLimitBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisDetectionLimitCreate(AnalysisDetectionLimitBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisDetectionLimitUpdate(AnalysisDetectionLimitBase):\n    pass\n# Properties to return via API",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimitCreate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisDetectionLimitCreate(AnalysisDetectionLimitBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisDetectionLimitUpdate(AnalysisDetectionLimitBase):\n    pass\n# Properties to return via API\nclass AnalysisDetectionLimit(AnalysisDetectionLimitBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisDetectionLimitInDB(AnalysisDetectionLimitBaseInDB):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimitUpdate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisDetectionLimitUpdate(AnalysisDetectionLimitBase):\n    pass\n# Properties to return via API\nclass AnalysisDetectionLimit(AnalysisDetectionLimitBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisDetectionLimitInDB(AnalysisDetectionLimitBaseInDB):\n    pass\n#\n# AnalysisUncertainty Schemas",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimit",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisDetectionLimit(AnalysisDetectionLimitBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisDetectionLimitInDB(AnalysisDetectionLimitBaseInDB):\n    pass\n#\n# AnalysisUncertainty Schemas\n#\n# Shared properties\nclass AnalysisUncertaintyBase(BaseAuditModel):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDetectionLimitInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisDetectionLimitInDB(AnalysisDetectionLimitBaseInDB):\n    pass\n#\n# AnalysisUncertainty Schemas\n#\n# Shared properties\nclass AnalysisUncertaintyBase(BaseAuditModel):\n    min: float\n    max: float\n    value: float",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertaintyBase",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisUncertaintyBase(BaseAuditModel):\n    min: float\n    max: float\n    value: float\n    analysis_uid: str\n    instrument_uid: str\n    method_uid: str\nclass AnalysisUncertaintyBaseInDB(AnalysisUncertaintyBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertaintyBaseInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisUncertaintyBaseInDB(AnalysisUncertaintyBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisUncertaintyCreate(AnalysisUncertaintyBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisUncertaintyUpdate(AnalysisUncertaintyBase):\n    pass\n# Properties to return via API",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertaintyCreate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisUncertaintyCreate(AnalysisUncertaintyBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisUncertaintyUpdate(AnalysisUncertaintyBase):\n    pass\n# Properties to return via API\nclass AnalysisUncertainty(AnalysisUncertaintyBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisUncertaintyInDB(AnalysisUncertaintyBaseInDB):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertaintyUpdate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisUncertaintyUpdate(AnalysisUncertaintyBase):\n    pass\n# Properties to return via API\nclass AnalysisUncertainty(AnalysisUncertaintyBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisUncertaintyInDB(AnalysisUncertaintyBaseInDB):\n    pass\n#\n# AnalysisSpecification Schemas",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertainty",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisUncertainty(AnalysisUncertaintyBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisUncertaintyInDB(AnalysisUncertaintyBaseInDB):\n    pass\n#\n# AnalysisSpecification Schemas\n#\n# Shared properties\nclass AnalysisSpecificationBase(BaseAuditModel):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisUncertaintyInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisUncertaintyInDB(AnalysisUncertaintyBaseInDB):\n    pass\n#\n# AnalysisSpecification Schemas\n#\n# Shared properties\nclass AnalysisSpecificationBase(BaseAuditModel):\n    analysis_uid: str\n    min: float | None = None\n    max: float | None = None",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecificationBase",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisSpecificationBase(BaseAuditModel):\n    analysis_uid: str\n    min: float | None = None\n    max: float | None = None\n    min_warn: float | None = None\n    max_warn: float | None = None\n    min_report: str | None = None\n    max_report: str | None = None\n    warn_values: str | None = None\n    warn_report: str | None = None",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecificationBaseInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisSpecificationBaseInDB(AnalysisSpecificationBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisSpecificationCreate(AnalysisSpecificationBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisSpecificationUpdate(AnalysisSpecificationBase):\n    pass\n# Properties to return via API",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecificationCreate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisSpecificationCreate(AnalysisSpecificationBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisSpecificationUpdate(AnalysisSpecificationBase):\n    pass\n# Properties to return via API\nclass AnalysisSpecification(AnalysisSpecificationBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisSpecificationInDB(AnalysisSpecificationBaseInDB):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecificationUpdate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisSpecificationUpdate(AnalysisSpecificationBase):\n    pass\n# Properties to return via API\nclass AnalysisSpecification(AnalysisSpecificationBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisSpecificationInDB(AnalysisSpecificationBaseInDB):\n    pass\n#\n# Result Option Schemas",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecification",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisSpecification(AnalysisSpecificationBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisSpecificationInDB(AnalysisSpecificationBaseInDB):\n    pass\n#\n# Result Option Schemas\n#\n# Shared properties\nclass ResultOptionBase(BaseAuditModel):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisSpecificationInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisSpecificationInDB(AnalysisSpecificationBaseInDB):\n    pass\n#\n# Result Option Schemas\n#\n# Shared properties\nclass ResultOptionBase(BaseAuditModel):\n    option_key: int | None = None\n    value: str | None = None\n    analysis_uid: str | None = None",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ResultOptionBase",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class ResultOptionBase(BaseAuditModel):\n    option_key: int | None = None\n    value: str | None = None\n    analysis_uid: str | None = None\nclass ResultOptionBaseInDB(ResultOptionBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ResultOptionCreate(ResultOptionBase):\n    pass",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ResultOptionBaseInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class ResultOptionBaseInDB(ResultOptionBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ResultOptionCreate(ResultOptionBase):\n    pass\n# Properties to receive via API on update\nclass ResultOptionUpdate(ResultOptionBase):\n    pass\n# Properties to return via API",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ResultOptionCreate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class ResultOptionCreate(ResultOptionBase):\n    pass\n# Properties to receive via API on update\nclass ResultOptionUpdate(ResultOptionBase):\n    pass\n# Properties to return via API\nclass ResultOption(ResultOptionBaseInDB):\n    pass\n# Properties stored in DB\nclass ResultOptionInDB(ResultOptionBaseInDB):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ResultOptionUpdate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class ResultOptionUpdate(ResultOptionBase):\n    pass\n# Properties to return via API\nclass ResultOption(ResultOptionBaseInDB):\n    pass\n# Properties stored in DB\nclass ResultOptionInDB(ResultOptionBaseInDB):\n    pass\n#\n# AnalysisRequest Schemas",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ResultOption",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class ResultOption(ResultOptionBaseInDB):\n    pass\n# Properties stored in DB\nclass ResultOptionInDB(ResultOptionBaseInDB):\n    pass\n#\n# AnalysisRequest Schemas\n#\n# Shared properties\nclass AnalysisRequestBase(BaseAuditModel):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "ResultOptionInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class ResultOptionInDB(ResultOptionBaseInDB):\n    pass\n#\n# AnalysisRequest Schemas\n#\n# Shared properties\nclass AnalysisRequestBase(BaseAuditModel):\n    patient_uid: str | None = None\n    client_uid: str | None = None\n    request_id: str | None = None",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestBase",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisRequestBase(BaseAuditModel):\n    patient_uid: str | None = None\n    client_uid: str | None = None\n    request_id: str | None = None\n    client_request_id: str | None = None\n    internal_use: bool | None = False\nclass AnalysisRequestBaseInDB(AnalysisRequestBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestBaseInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisRequestBaseInDB(AnalysisRequestBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisRequestCreate(AnalysisRequestBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisRequestUpdate(AnalysisRequestBase):\n    pass\n# Properties to return via API",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestCreate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisRequestCreate(AnalysisRequestBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisRequestUpdate(AnalysisRequestBase):\n    pass\n# Properties to return via API\nclass AnalysisRequest(AnalysisRequestBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisRequestInDB(AnalysisRequestBaseInDB):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestUpdate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisRequestUpdate(AnalysisRequestBase):\n    pass\n# Properties to return via API\nclass AnalysisRequest(AnalysisRequestBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisRequestInDB(AnalysisRequestBaseInDB):\n    pass\n#\n# Sample Schemas",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisRequest",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisRequest(AnalysisRequestBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisRequestInDB(AnalysisRequestBaseInDB):\n    pass\n#\n# Sample Schemas\n#\n# Shared properties\nclass SampleBase(BaseAuditModel):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisRequestInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisRequestInDB(AnalysisRequestBaseInDB):\n    pass\n#\n# Sample Schemas\n#\n# Shared properties\nclass SampleBase(BaseAuditModel):\n    analysis_request_uid: str | None = None\n    sample_type_uid: str | None = None\n    profiles: Optional[List[Profile]] = []",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleBase",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class SampleBase(BaseAuditModel):\n    analysis_request_uid: str | None = None\n    sample_type_uid: str | None = None\n    profiles: Optional[List[Profile]] = []\n    analyses: Optional[List[Analysis]] = []\n    sample_id: str | None = None\n    priority: int | None = 0\n    invalidated_by_uid: str | None = None\n    date_invalidated: datetime | None = None\n    internal_use: bool | None = False",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleBaseInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class SampleBaseInDB(SampleBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass SampleCreate(SampleBase):\n    pass\n# Properties to receive via API on update\nclass SampleUpdate(SampleBase):\n    pass\n# Properties to return via API",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleCreate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class SampleCreate(SampleBase):\n    pass\n# Properties to receive via API on update\nclass SampleUpdate(SampleBase):\n    pass\n# Properties to return via API\nclass Sample(SampleBaseInDB):\n    pass\n# Properties stored in DB\nclass SampleInDB(SampleBaseInDB):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleUpdate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class SampleUpdate(SampleBase):\n    pass\n# Properties to return via API\nclass Sample(SampleBaseInDB):\n    pass\n# Properties stored in DB\nclass SampleInDB(SampleBaseInDB):\n    pass\n#\n# Rejection Reason Schemas",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "Sample",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class Sample(SampleBaseInDB):\n    pass\n# Properties stored in DB\nclass SampleInDB(SampleBaseInDB):\n    pass\n#\n# Rejection Reason Schemas\n#\n# Shared properties\nclass RejectionReasonBase(BaseAuditModel):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "SampleInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class SampleInDB(SampleBaseInDB):\n    pass\n#\n# Rejection Reason Schemas\n#\n# Shared properties\nclass RejectionReasonBase(BaseAuditModel):\n    reason: str | None = None\nclass RejectionReasonBaseInDB(RejectionReasonBase):\n    uid: str | None = None",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "RejectionReasonBase",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class RejectionReasonBase(BaseAuditModel):\n    reason: str | None = None\nclass RejectionReasonBaseInDB(RejectionReasonBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass RejectionReasonCreate(RejectionReasonBase):\n    pass\n# Properties to receive via API on update\nclass RejectionReasonUpdate(RejectionReasonBase):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "RejectionReasonBaseInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class RejectionReasonBaseInDB(RejectionReasonBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass RejectionReasonCreate(RejectionReasonBase):\n    pass\n# Properties to receive via API on update\nclass RejectionReasonUpdate(RejectionReasonBase):\n    pass\n# Properties to return via API",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "RejectionReasonCreate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class RejectionReasonCreate(RejectionReasonBase):\n    pass\n# Properties to receive via API on update\nclass RejectionReasonUpdate(RejectionReasonBase):\n    pass\n# Properties to return via API\nclass RejectionReason(RejectionReasonBaseInDB):\n    pass\n# Properties stored in DB\nclass RejectionReasonInDB(RejectionReasonBaseInDB):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "RejectionReasonUpdate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class RejectionReasonUpdate(RejectionReasonBase):\n    pass\n# Properties to return via API\nclass RejectionReason(RejectionReasonBaseInDB):\n    pass\n# Properties stored in DB\nclass RejectionReasonInDB(RejectionReasonBaseInDB):\n    pass\n#\n# AnalysisResultBase Schemas",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "RejectionReason",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class RejectionReason(RejectionReasonBaseInDB):\n    pass\n# Properties stored in DB\nclass RejectionReasonInDB(RejectionReasonBaseInDB):\n    pass\n#\n# AnalysisResultBase Schemas\n#\n# Shared properties\nclass AnalysisResultBase(BaseAuditModel):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "RejectionReasonInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class RejectionReasonInDB(RejectionReasonBaseInDB):\n    pass\n#\n# AnalysisResultBase Schemas\n#\n# Shared properties\nclass AnalysisResultBase(BaseAuditModel):\n    analysis_uid: str | None = None\n    parent_id: str | None = None\n    sample_uid: str | None = None",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultBase",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisResultBase(BaseAuditModel):\n    analysis_uid: str | None = None\n    parent_id: str | None = None\n    sample_uid: str | None = None\n    instrument_uid: str | None = None\n    method_uid: str | None = None\n    result: str | None = None\n    analyst_uid: str | None = None\n    submitted_by_uid: str | None = None\n    date_submitted: datetime | None = None",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultBaseInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisResultBaseInDB(AnalysisResultBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisResultCreate(AnalysisResultBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisResultUpdate(AnalysisResultBase):\n    pass\n# Properties to return via API",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultCreate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisResultCreate(AnalysisResultBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisResultUpdate(AnalysisResultBase):\n    pass\n# Properties to return via API\nclass AnalysisResult(AnalysisResultBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisResultInDB(AnalysisResultBaseInDB):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultUpdate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisResultUpdate(AnalysisResultBase):\n    pass\n# Properties to return via API\nclass AnalysisResult(AnalysisResultBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisResultInDB(AnalysisResultBaseInDB):\n    pass\n#\n# QCSet Schemas",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResult",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisResult(AnalysisResultBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisResultInDB(AnalysisResultBaseInDB):\n    pass\n#\n# QCSet Schemas\n#\n# Shared properties\nclass QCSetBase(BaseAuditModel):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisResultInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class AnalysisResultInDB(AnalysisResultBaseInDB):\n    pass\n#\n# QCSet Schemas\n#\n# Shared properties\nclass QCSetBase(BaseAuditModel):\n    name: str | None = None\n    note: str | None = None\nclass QCSetBaseInDB(QCSetBase):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCSetBase",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class QCSetBase(BaseAuditModel):\n    name: str | None = None\n    note: str | None = None\nclass QCSetBaseInDB(QCSetBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass QCSetCreate(QCSetBase):\n    pass\n# Properties to receive via API on update",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCSetBaseInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class QCSetBaseInDB(QCSetBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass QCSetCreate(QCSetBase):\n    pass\n# Properties to receive via API on update\nclass QCSetUpdate(QCSetBase):\n    pass\n# Properties to return via API",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCSetCreate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class QCSetCreate(QCSetBase):\n    pass\n# Properties to receive via API on update\nclass QCSetUpdate(QCSetBase):\n    pass\n# Properties to return via API\nclass QCSet(QCSetBaseInDB):\n    pass\n# Properties stored in DB\nclass QCSetInDB(QCSetBaseInDB):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCSetUpdate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class QCSetUpdate(QCSetBase):\n    pass\n# Properties to return via API\nclass QCSet(QCSetBaseInDB):\n    pass\n# Properties stored in DB\nclass QCSetInDB(QCSetBaseInDB):\n    pass\n#\n# QCLevel Schemas",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCSet",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class QCSet(QCSetBaseInDB):\n    pass\n# Properties stored in DB\nclass QCSetInDB(QCSetBaseInDB):\n    pass\n#\n# QCLevel Schemas\n#\n# Shared properties\nclass QCLevelBase(BaseAuditModel):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCSetInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class QCSetInDB(QCSetBaseInDB):\n    pass\n#\n# QCLevel Schemas\n#\n# Shared properties\nclass QCLevelBase(BaseAuditModel):\n    level: str | None = None\nclass QCLevelBaseInDB(QCLevelBase):\n    uid: str | None = None",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCLevelBase",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class QCLevelBase(BaseAuditModel):\n    level: str | None = None\nclass QCLevelBaseInDB(QCLevelBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass QCLevelCreate(QCLevelBase):\n    pass\n# Properties to receive via API on update\nclass QCLevelUpdate(QCLevelBase):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCLevelBaseInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class QCLevelBaseInDB(QCLevelBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass QCLevelCreate(QCLevelBase):\n    pass\n# Properties to receive via API on update\nclass QCLevelUpdate(QCLevelBase):\n    pass\n# Properties to return via API",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCLevelCreate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class QCLevelCreate(QCLevelBase):\n    pass\n# Properties to receive via API on update\nclass QCLevelUpdate(QCLevelBase):\n    pass\n# Properties to return via API\nclass QCLevel(QCLevelBaseInDB):\n    pass\n# Properties stored in DB\nclass QCLevelInDB(QCLevelBaseInDB):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCLevelUpdate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class QCLevelUpdate(QCLevelBase):\n    pass\n# Properties to return via API\nclass QCLevel(QCLevelBaseInDB):\n    pass\n# Properties stored in DB\nclass QCLevelInDB(QCLevelBaseInDB):\n    pass\n#\n# QCTemplate Schemas",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCLevel",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class QCLevel(QCLevelBaseInDB):\n    pass\n# Properties stored in DB\nclass QCLevelInDB(QCLevelBaseInDB):\n    pass\n#\n# QCTemplate Schemas\n#\n# Shared properties\nclass QCTemplateBase(BaseAuditModel):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCLevelInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class QCLevelInDB(QCLevelBaseInDB):\n    pass\n#\n# QCTemplate Schemas\n#\n# Shared properties\nclass QCTemplateBase(BaseAuditModel):\n    name: str | None = None\n    description: str | None = None\n    departments: Optional[List[Department]] = []",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCTemplateBase",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class QCTemplateBase(BaseAuditModel):\n    name: str | None = None\n    description: str | None = None\n    departments: Optional[List[Department]] = []\n    qc_levels: Optional[List[QCLevel]] = []\nclass QCTemplateBaseInDB(QCTemplateBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass QCTemplateCreate(QCTemplateBase):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCTemplateBaseInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class QCTemplateBaseInDB(QCTemplateBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass QCTemplateCreate(QCTemplateBase):\n    pass\n# Properties to receive via API on update\nclass QCTemplateUpdate(QCTemplateBase):\n    pass\n# Properties to return via API",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCTemplateCreate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class QCTemplateCreate(QCTemplateBase):\n    pass\n# Properties to receive via API on update\nclass QCTemplateUpdate(QCTemplateBase):\n    pass\n# Properties to return via API\nclass QCTemplate(QCTemplateBaseInDB):\n    pass\n# Properties stored in DB\nclass QCTemplateInDB(QCTemplateBaseInDB):",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCTemplateUpdate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class QCTemplateUpdate(QCTemplateBase):\n    pass\n# Properties to return via API\nclass QCTemplate(QCTemplateBaseInDB):\n    pass\n# Properties stored in DB\nclass QCTemplateInDB(QCTemplateBaseInDB):\n    pass",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCTemplate",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class QCTemplate(QCTemplateBaseInDB):\n    pass\n# Properties stored in DB\nclass QCTemplateInDB(QCTemplateBaseInDB):\n    pass",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "QCTemplateInDB",
        "kind": 6,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "class QCTemplateInDB(QCTemplateBaseInDB):\n    pass",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "model_config",
        "kind": 5,
        "importPath": "analysis.schemas",
        "description": "analysis.schemas",
        "peekOfCode": "model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass SampleTypeCodingCreate(SampleTypeCodingBase):\n    pass\n# Properties to receive via API on update\nclass SampleTypeCodingUpdate(SampleTypeCodingBase):\n    pass\n# Properties to return via API\nclass SampleTypeCoding(SampleTypeCodingBaseInDB):\n    pass",
        "detail": "analysis.schemas",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "analysis.tasks",
        "description": "analysis.tasks",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def submit_results(job_uid: str) -> NoReturn:\n    job_service = JobService()\n    user_service = UserService()\n    notification_service = NotificationService()\n    logger.info(f\"starting job result submit {job_uid} ....\")\n    job = await job_service.get(uid=job_uid)\n    if not job:\n        return\n    if not job.status == JobState.PENDING:",
        "detail": "analysis.tasks",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "analysis.utils",
        "description": "analysis.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\nQC_SAMPLE = {\"name\": \"QC Sample\", \"description\": \"QC Sample\", \"abbr\": \"QCS\"}\nasync def get_qc_sample_type() -> SampleType:\n    st_service = SampleTypeService()\n    st = await st_service.get(name=QC_SAMPLE.get(\"name\"))\n    if not st:\n        st_in = schemas.SampleTypeCreate(**QC_SAMPLE)\n        st = await st_service.create(st_in)\n    return st\nasync def get_last_verificator(result_uid: str) -> User | None:",
        "detail": "analysis.utils",
        "documentation": {}
    },
    {
        "label": "QC_SAMPLE",
        "kind": 5,
        "importPath": "analysis.utils",
        "description": "analysis.utils",
        "peekOfCode": "QC_SAMPLE = {\"name\": \"QC Sample\", \"description\": \"QC Sample\", \"abbr\": \"QCS\"}\nasync def get_qc_sample_type() -> SampleType:\n    st_service = SampleTypeService()\n    st = await st_service.get(name=QC_SAMPLE.get(\"name\"))\n    if not st:\n        st_in = schemas.SampleTypeCreate(**QC_SAMPLE)\n        st = await st_service.create(st_in)\n    return st\nasync def get_last_verificator(result_uid: str) -> User | None:\n    ar_service = AnalysisResultService()",
        "detail": "analysis.utils",
        "documentation": {}
    },
    {
        "label": "EntityAnalyticsInit",
        "kind": 6,
        "importPath": "analytics.sources.generic",
        "description": "analytics.sources.generic",
        "peekOfCode": "class EntityAnalyticsInit(Generic[ModelType]):\n    def __init__(self, model: Type[ModelType]):\n        self.model = model\n        self.table = model.__tablename__\n        self.alias = model.__tablename__ + \"_tbl\"\n    async def get_line_listing(\n        self,\n        period_start: str,\n        period_end: str,\n        sample_states: list[str],",
        "detail": "analytics.sources.generic",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "analytics.sources.generic",
        "description": "analytics.sources.generic",
        "peekOfCode": "logger = logging.getLogger(__name__)\nModelType = TypeVar(\"ModelType\", bound=BaseEntity)\nclass EntityAnalyticsInit(Generic[ModelType]):\n    def __init__(self, model: Type[ModelType]):\n        self.model = model\n        self.table = model.__tablename__\n        self.alias = model.__tablename__ + \"_tbl\"\n    async def get_line_listing(\n        self,\n        period_start: str,",
        "detail": "analytics.sources.generic",
        "documentation": {}
    },
    {
        "label": "ModelType",
        "kind": 5,
        "importPath": "analytics.sources.generic",
        "description": "analytics.sources.generic",
        "peekOfCode": "ModelType = TypeVar(\"ModelType\", bound=BaseEntity)\nclass EntityAnalyticsInit(Generic[ModelType]):\n    def __init__(self, model: Type[ModelType]):\n        self.model = model\n        self.table = model.__tablename__\n        self.alias = model.__tablename__ + \"_tbl\"\n    async def get_line_listing(\n        self,\n        period_start: str,\n        period_end: str,",
        "detail": "analytics.sources.generic",
        "documentation": {}
    },
    {
        "label": "ReportMeta",
        "kind": 6,
        "importPath": "analytics.entities",
        "description": "analytics.entities",
        "peekOfCode": "class ReportMeta(AuditUser):\n    \"\"\"Generated Reports Metadata\"\"\"\n    __tablename__ = \"report_meta\"\n    report_type = Column(String)\n    analyses = relationship(\"Analysis\", secondary=analysis_reports, lazy=\"selectin\")\n    period_start = Column(DateTime)\n    period_end = Column(DateTime)\n    date_column = Column(String)\n    location = Column(String, nullable=True)\n    temp = Column(String, nullable=True)",
        "detail": "analytics.entities",
        "documentation": {}
    },
    {
        "label": "analysis_reports",
        "kind": 5,
        "importPath": "analytics.entities",
        "description": "analytics.entities",
        "peekOfCode": "analysis_reports = Table(\n    \"analysis_reports\",\n    AuditUser.metadata,\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n    Column(\"report_uid\", ForeignKey(\"report_meta.uid\"), primary_key=True),\n)\nclass ReportMeta(AuditUser):\n    \"\"\"Generated Reports Metadata\"\"\"\n    __tablename__ = \"report_meta\"\n    report_type = Column(String)",
        "detail": "analytics.entities",
        "documentation": {}
    },
    {
        "label": "ReportTypes",
        "kind": 6,
        "importPath": "analytics.enum",
        "description": "analytics.enum",
        "peekOfCode": "class ReportTypes(StrEnum):\n    LINE_LISTING = auto()\nclass ReportState(StrEnum):\n    PENDING = auto()\n    FAILED = auto()\n    READY = auto()",
        "detail": "analytics.enum",
        "documentation": {}
    },
    {
        "label": "ReportState",
        "kind": 6,
        "importPath": "analytics.enum",
        "description": "analytics.enum",
        "peekOfCode": "class ReportState(StrEnum):\n    PENDING = auto()\n    FAILED = auto()\n    READY = auto()",
        "detail": "analytics.enum",
        "documentation": {}
    },
    {
        "label": "ReportMetaRepository",
        "kind": 6,
        "importPath": "analytics.repository",
        "description": "analytics.repository",
        "peekOfCode": "class ReportMetaRepository(BaseRepository[ReportMeta]):\n    def __init__(self) -> None:\n        super().__init__(ReportMeta)\nclass SampleAnalyticsRepository(BaseRepository[Sample]):\n    def __init__(self):\n        self.table = Sample.__tablename__\n        self.alias = Sample.__tablename__ + \"_tbl\"\n        super().__init__(Sample)\n    async def get_line_listing(\n        self,",
        "detail": "analytics.repository",
        "documentation": {}
    },
    {
        "label": "SampleAnalyticsRepository",
        "kind": 6,
        "importPath": "analytics.repository",
        "description": "analytics.repository",
        "peekOfCode": "class SampleAnalyticsRepository(BaseRepository[Sample]):\n    def __init__(self):\n        self.table = Sample.__tablename__\n        self.alias = Sample.__tablename__ + \"_tbl\"\n        super().__init__(Sample)\n    async def get_line_listing(\n        self,\n        period_start: str,\n        period_end: str,\n        sample_states: list[str],",
        "detail": "analytics.repository",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "analytics.repository",
        "description": "analytics.repository",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ReportMetaRepository(BaseRepository[ReportMeta]):\n    def __init__(self) -> None:\n        super().__init__(ReportMeta)\nclass SampleAnalyticsRepository(BaseRepository[Sample]):\n    def __init__(self):\n        self.table = Sample.__tablename__\n        self.alias = Sample.__tablename__ + \"_tbl\"\n        super().__init__(Sample)\n    async def get_line_listing(",
        "detail": "analytics.repository",
        "documentation": {}
    },
    {
        "label": "ReportMetaBase",
        "kind": 6,
        "importPath": "analytics.schemas",
        "description": "analytics.schemas",
        "peekOfCode": "class ReportMetaBase(BaseModel):\n    period_start: datetime\n    period_end: datetime\n    date_column: str\n    sample_states: str | None = None\n    report_type: str = ReportTypes.LINE_LISTING\n    status: str | None = ReportState.PENDING\n    analyses: list[AnalysisBasic] | None = None\n    created_at: datetime | None = None\n    created_by_uid: str | None = None",
        "detail": "analytics.schemas",
        "documentation": {}
    },
    {
        "label": "ReportMeta",
        "kind": 6,
        "importPath": "analytics.schemas",
        "description": "analytics.schemas",
        "peekOfCode": "class ReportMeta(ReportMetaBase):\n    uid: str | None = None\n    location: str | None = None\nmodel_config = ConfigDict(from_attributes=True)\nclass ReportMetaCreate(ReportMetaBase):\n    temp: str\n    created_by_uid: str\n    updated_by_uid: str\nclass ReportMetaUpdate(ReportMetaBase):\n    pass",
        "detail": "analytics.schemas",
        "documentation": {}
    },
    {
        "label": "ReportMetaCreate",
        "kind": 6,
        "importPath": "analytics.schemas",
        "description": "analytics.schemas",
        "peekOfCode": "class ReportMetaCreate(ReportMetaBase):\n    temp: str\n    created_by_uid: str\n    updated_by_uid: str\nclass ReportMetaUpdate(ReportMetaBase):\n    pass\nclass ReportMetaDeleted(BaseModel):\n    uid: str\n    message: str\nclass ReportRequest(BaseModel):",
        "detail": "analytics.schemas",
        "documentation": {}
    },
    {
        "label": "ReportMetaUpdate",
        "kind": 6,
        "importPath": "analytics.schemas",
        "description": "analytics.schemas",
        "peekOfCode": "class ReportMetaUpdate(ReportMetaBase):\n    pass\nclass ReportMetaDeleted(BaseModel):\n    uid: str\n    message: str\nclass ReportRequest(BaseModel):\n    report_type: str\n    analyses_uids: list[str]\n    sample_states: list[str]\n    date_column: str",
        "detail": "analytics.schemas",
        "documentation": {}
    },
    {
        "label": "ReportMetaDeleted",
        "kind": 6,
        "importPath": "analytics.schemas",
        "description": "analytics.schemas",
        "peekOfCode": "class ReportMetaDeleted(BaseModel):\n    uid: str\n    message: str\nclass ReportRequest(BaseModel):\n    report_type: str\n    analyses_uids: list[str]\n    sample_states: list[str]\n    date_column: str\n    period_start: datetime\n    period_end: datetime",
        "detail": "analytics.schemas",
        "documentation": {}
    },
    {
        "label": "ReportRequest",
        "kind": 6,
        "importPath": "analytics.schemas",
        "description": "analytics.schemas",
        "peekOfCode": "class ReportRequest(BaseModel):\n    report_type: str\n    analyses_uids: list[str]\n    sample_states: list[str]\n    date_column: str\n    period_start: datetime\n    period_end: datetime",
        "detail": "analytics.schemas",
        "documentation": {}
    },
    {
        "label": "model_config",
        "kind": 5,
        "importPath": "analytics.schemas",
        "description": "analytics.schemas",
        "peekOfCode": "model_config = ConfigDict(from_attributes=True)\nclass ReportMetaCreate(ReportMetaBase):\n    temp: str\n    created_by_uid: str\n    updated_by_uid: str\nclass ReportMetaUpdate(ReportMetaBase):\n    pass\nclass ReportMetaDeleted(BaseModel):\n    uid: str\n    message: str",
        "detail": "analytics.schemas",
        "documentation": {}
    },
    {
        "label": "ReportMetaService",
        "kind": 6,
        "importPath": "analytics.services",
        "description": "analytics.services",
        "peekOfCode": "class ReportMetaService(BaseService[ReportMeta, ReportMetaCreate, ReportMetaUpdate]):\n    def __init__(self):\n        super().__init__(ReportMetaRepository)\n    async def set_final(self, uid: str, status: str, location: str | None = None):\n        report = await self.get(uid=uid)\n        if report.status != ReportState.READY:\n            report.location = location\n            report.status = status\n            report.temp = None\n            await super().update(report, marshaller(report))",
        "detail": "analytics.services",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "analytics.tasks",
        "description": "analytics.tasks",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def generate_report(job_uid: str) -> bool:\n    job_service = JobService()\n    report_meta_service = ReportMetaService()\n    notification_service = NotificationService()\n    activity_stream_service = ActivityStreamService()\n    job = await job_service.get(uid=job_uid)\n    report = await report_meta_service.get(uid=job.job_id)\n    if report.status != ReportState.PENDING:\n        await job.change_status(new_status=JobState.FAILED)",
        "detail": "analytics.tasks",
        "documentation": {}
    },
    {
        "label": "AuditLog",
        "kind": 6,
        "importPath": "auditlog.entities",
        "description": "auditlog.entities",
        "peekOfCode": "class AuditLog(BaseEntity):\n    \"\"\"Model an audit log of user actions\"\"\"\n    __tablename__ = \"audit_log\"\n    user_id = Column(String, doc=\"The ID of the user who made the change\")\n    target_type = Column(\n        String(100), nullable=False, doc=\"The table name of the altered object\"\n    )\n    target_id = Column(String, doc=\"The ID of the altered object\")\n    action = Column(Integer, doc=\"Create (1), update (2), or delete (3)\")\n    state_before = Column(",
        "detail": "auditlog.entities",
        "documentation": {}
    },
    {
        "label": "AuditHistoryMixin",
        "kind": 6,
        "importPath": "auditlog.mixin",
        "description": "auditlog.mixin",
        "peekOfCode": "class AuditHistoryMixin:\n    \"\"\"Allow a model to be automatically audited\"\"\"\n    @staticmethod\n    def create_audit(connection, object_type, object_id, action, **kwargs):\n        audit = AuditLog(\n            object_type,\n            object_id,\n            action,\n            kwargs.get(\"state_before\"),\n            kwargs.get(\"state_after\"),",
        "detail": "auditlog.mixin",
        "documentation": {}
    },
    {
        "label": "custom_serial",
        "kind": 2,
        "importPath": "auditlog.mixin",
        "description": "auditlog.mixin",
        "peekOfCode": "def custom_serial(o):\n    if isinstance(o, (datetime.date, datetime.datetime)):\n        return o.isoformat()\n    raise TypeError(\"Type %s not serializable\" % type(o))\nclass AuditHistoryMixin:\n    \"\"\"Allow a model to be automatically audited\"\"\"\n    @staticmethod\n    def create_audit(connection, object_type, object_id, action, **kwargs):\n        audit = AuditLog(\n            object_type,",
        "detail": "auditlog.mixin",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "auditlog.mixin",
        "description": "auditlog.mixin",
        "peekOfCode": "logger = logging.getLogger(__name__)\nACTION_CREATE = 1\nACTION_UPDATE = 2\nACTION_DELETE = 3\n# Only audit the events in this list\nPLEASE_AUDIT = [ACTION_UPDATE]\ndef custom_serial(o):\n    if isinstance(o, (datetime.date, datetime.datetime)):\n        return o.isoformat()\n    raise TypeError(\"Type %s not serializable\" % type(o))",
        "detail": "auditlog.mixin",
        "documentation": {}
    },
    {
        "label": "ACTION_CREATE",
        "kind": 5,
        "importPath": "auditlog.mixin",
        "description": "auditlog.mixin",
        "peekOfCode": "ACTION_CREATE = 1\nACTION_UPDATE = 2\nACTION_DELETE = 3\n# Only audit the events in this list\nPLEASE_AUDIT = [ACTION_UPDATE]\ndef custom_serial(o):\n    if isinstance(o, (datetime.date, datetime.datetime)):\n        return o.isoformat()\n    raise TypeError(\"Type %s not serializable\" % type(o))\nclass AuditHistoryMixin:",
        "detail": "auditlog.mixin",
        "documentation": {}
    },
    {
        "label": "ACTION_UPDATE",
        "kind": 5,
        "importPath": "auditlog.mixin",
        "description": "auditlog.mixin",
        "peekOfCode": "ACTION_UPDATE = 2\nACTION_DELETE = 3\n# Only audit the events in this list\nPLEASE_AUDIT = [ACTION_UPDATE]\ndef custom_serial(o):\n    if isinstance(o, (datetime.date, datetime.datetime)):\n        return o.isoformat()\n    raise TypeError(\"Type %s not serializable\" % type(o))\nclass AuditHistoryMixin:\n    \"\"\"Allow a model to be automatically audited\"\"\"",
        "detail": "auditlog.mixin",
        "documentation": {}
    },
    {
        "label": "ACTION_DELETE",
        "kind": 5,
        "importPath": "auditlog.mixin",
        "description": "auditlog.mixin",
        "peekOfCode": "ACTION_DELETE = 3\n# Only audit the events in this list\nPLEASE_AUDIT = [ACTION_UPDATE]\ndef custom_serial(o):\n    if isinstance(o, (datetime.date, datetime.datetime)):\n        return o.isoformat()\n    raise TypeError(\"Type %s not serializable\" % type(o))\nclass AuditHistoryMixin:\n    \"\"\"Allow a model to be automatically audited\"\"\"\n    @staticmethod",
        "detail": "auditlog.mixin",
        "documentation": {}
    },
    {
        "label": "PLEASE_AUDIT",
        "kind": 5,
        "importPath": "auditlog.mixin",
        "description": "auditlog.mixin",
        "peekOfCode": "PLEASE_AUDIT = [ACTION_UPDATE]\ndef custom_serial(o):\n    if isinstance(o, (datetime.date, datetime.datetime)):\n        return o.isoformat()\n    raise TypeError(\"Type %s not serializable\" % type(o))\nclass AuditHistoryMixin:\n    \"\"\"Allow a model to be automatically audited\"\"\"\n    @staticmethod\n    def create_audit(connection, object_type, object_id, action, **kwargs):\n        audit = AuditLog(",
        "detail": "auditlog.mixin",
        "documentation": {}
    },
    {
        "label": "AuditLogRepository",
        "kind": 6,
        "importPath": "auditlog.repositories",
        "description": "auditlog.repositories",
        "peekOfCode": "class AuditLogRepository(BaseRepository[AuditLog]):\n    def __init__(self) -> None:\n        super().__init__(AuditLog)",
        "detail": "auditlog.repositories",
        "documentation": {}
    },
    {
        "label": "AuditLogService",
        "kind": 6,
        "importPath": "auditlog.services",
        "description": "auditlog.services",
        "peekOfCode": "class AuditLogService(BaseService[AuditLog, Dummy, Dummy]):\n    def __init__(self) -> None:\n        super().__init__(AuditLogRepository)",
        "detail": "auditlog.services",
        "documentation": {}
    },
    {
        "label": "AnalysisPrice",
        "kind": 6,
        "importPath": "billing.entities",
        "description": "billing.entities",
        "peekOfCode": "class AnalysisPrice(AuditHistory):\n    __tablename__ = \"analysis_price\"\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    analysis = relationship(\"Analysis\", lazy=\"selectin\")\n    is_active = Column(Boolean, nullable=False)\n    amount = Column(Float, nullable=False)\nclass ProfilePrice(AuditHistory):\n    __tablename__ = \"profile_price\"\n    profile_uid = Column(String, ForeignKey(\"profile.uid\"), nullable=True)\n    profile = relationship(\"Profile\", lazy=\"selectin\")",
        "detail": "billing.entities",
        "documentation": {}
    },
    {
        "label": "ProfilePrice",
        "kind": 6,
        "importPath": "billing.entities",
        "description": "billing.entities",
        "peekOfCode": "class ProfilePrice(AuditHistory):\n    __tablename__ = \"profile_price\"\n    profile_uid = Column(String, ForeignKey(\"profile.uid\"), nullable=True)\n    profile = relationship(\"Profile\", lazy=\"selectin\")\n    is_active = Column(Boolean, nullable=False)\n    amount = Column(Float, nullable=False)\nclass AnalysisDiscount(AuditHistory):\n    __tablename__ = \"analysis_discount\"\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=False)\n    analysis = relationship(\"Analysis\", lazy=\"selectin\")",
        "detail": "billing.entities",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscount",
        "kind": 6,
        "importPath": "billing.entities",
        "description": "billing.entities",
        "peekOfCode": "class AnalysisDiscount(AuditHistory):\n    __tablename__ = \"analysis_discount\"\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=False)\n    analysis = relationship(\"Analysis\", lazy=\"selectin\")\n    name = Column(String, nullable=False)\n    discount_type = Column(String, nullable=False, default=DiscountType.VOUCHER)\n    value_type = Column(String, nullable=False, default=DiscountValueType.PERCENTATE)\n    start_date = Column(DateTime, nullable=False, default=datetime.now())\n    end_date = Column(DateTime, nullable=False, default=datetime.now())\n    voucher_uid = Column(String, ForeignKey(\"voucher.uid\"), nullable=True)",
        "detail": "billing.entities",
        "documentation": {}
    },
    {
        "label": "ProfileDiscount",
        "kind": 6,
        "importPath": "billing.entities",
        "description": "billing.entities",
        "peekOfCode": "class ProfileDiscount(AuditHistory):\n    __tablename__ = \"profile_discount\"\n    profile_uid = Column(String, ForeignKey(\"profile.uid\"), nullable=False)\n    profile = relationship(\"Profile\", lazy=\"selectin\")\n    name = Column(String, nullable=False)\n    discount_type = Column(String, nullable=False, default=DiscountType.VOUCHER)\n    value_type = Column(String, nullable=False, default=DiscountValueType.PERCENTATE)\n    start_date = Column(DateTime, nullable=False, default=datetime.now())\n    end_date = Column(DateTime, nullable=False, default=datetime.now())\n    voucher_uid = Column(String, ForeignKey(\"voucher.uid\"), nullable=True)",
        "detail": "billing.entities",
        "documentation": {}
    },
    {
        "label": "Voucher",
        "kind": 6,
        "importPath": "billing.entities",
        "description": "billing.entities",
        "peekOfCode": "class Voucher(AuditHistory):\n    __tablename__ = \"voucher\"\n    name = Column(String, nullable=False, unique=True)\n    # The number of times a voucher can be used.\n    usage_limit = Column(Integer, nullable=False, default=0)\n    # Used count of the voucher.\n    used = Column(Integer, nullable=False, default=0)\n    start_date = Column(DateTime, nullable=False)\n    end_date = Column(DateTime, nullable=False)\n    # Determine if the voucher usage should be limited to one use per customer.",
        "detail": "billing.entities",
        "documentation": {}
    },
    {
        "label": "VoucherCode",
        "kind": 6,
        "importPath": "billing.entities",
        "description": "billing.entities",
        "peekOfCode": "class VoucherCode(AuditHistory):\n    __tablename__ = \"voucher_code\"\n    code = Column(String(20), nullable=False, unique=True)\n    voucher_uid = Column(String, ForeignKey(\"voucher.uid\"), nullable=False)\n    voucher = relationship(\"Voucher\", lazy=\"selectin\")\n    # The number of times a voucher code can be used.\n    usage_limit = Column(Integer, nullable=False, default=0)\n    # Usage count of the voucher code.\n    used = Column(Integer, nullable=False, default=0)\n    is_active = Column(Boolean, nullable=False)",
        "detail": "billing.entities",
        "documentation": {}
    },
    {
        "label": "VoucherCustomer",
        "kind": 6,
        "importPath": "billing.entities",
        "description": "billing.entities",
        "peekOfCode": "class VoucherCustomer(AuditHistory):\n    __tablename__ = \"voucher_customer\"\n    patient_uid = Column(String, ForeignKey(\"patient.uid\"), nullable=False)\n    patient = relationship(\"Patient\", lazy=\"selectin\")\n    voucher_code_uid = Column(String, ForeignKey(\"voucher_code.uid\"), nullable=False)\n    voucher_code = relationship(\"VoucherCode\", lazy=\"selectin\")\n\"\"\"\n Many to Many Link between TestBill and AnalysisRequest\n\"\"\"\ntest_bill_item = Table(",
        "detail": "billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBill",
        "kind": 6,
        "importPath": "billing.entities",
        "description": "billing.entities",
        "peekOfCode": "class TestBill(AuditHistory):\n    __tablename__ = \"test_bill\"\n    bill_id = Column(String, nullable=False)\n    patient_uid = Column(String, ForeignKey(\"patient.uid\"), nullable=True)\n    patient = relationship(\"Patient\", lazy=\"selectin\")\n    client_uid = Column(String, ForeignKey(\"client.uid\"), nullable=True)\n    client = relationship(\"Client\", lazy=\"selectin\")\n    is_active = Column(Boolean, nullable=False)\n    to_confirm = Column(Boolean, nullable=False)\n    partial = Column(Boolean, nullable=False)",
        "detail": "billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBillTransaction",
        "kind": 6,
        "importPath": "billing.entities",
        "description": "billing.entities",
        "peekOfCode": "class TestBillTransaction(AuditHistory):\n    __tablename__ = \"test_bill_transaction\"\n    test_bill_uid = Column(String, ForeignKey(\"test_bill.uid\"), nullable=True)\n    test_bill = relationship(\"TestBill\", lazy=\"selectin\")\n    kind = Column(String, nullable=False, default=TransactionKind.CASH)\n    amount = Column(Float, nullable=False, default=0.0)\n    notes = Column(String, nullable=True)\n    is_success = Column(Boolean, nullable=False, default=False)\n    processed = Column(Boolean, nullable=False, default=False)\n    message = Column(String, nullable=True)",
        "detail": "billing.entities",
        "documentation": {}
    },
    {
        "label": "TestBillInvoice",
        "kind": 6,
        "importPath": "billing.entities",
        "description": "billing.entities",
        "peekOfCode": "class TestBillInvoice(AuditHistory):\n    __tablename__ = \"test_bill_invoice\"\n    test_bill_uid = Column(String, ForeignKey(\"test_bill.uid\"), nullable=True)\n    test_bill = relationship(\"TestBill\", lazy=\"selectin\")\n    json_content: dict = Column(JSONB, nullable=True)\n    pdf_content = Column(LargeBinary, nullable=True)",
        "detail": "billing.entities",
        "documentation": {}
    },
    {
        "label": "test_bill_item",
        "kind": 5,
        "importPath": "billing.entities",
        "description": "billing.entities",
        "peekOfCode": "test_bill_item = Table(\n    \"test_bill_item\",\n    BaseEntity.metadata,\n    Column(\"test_bill_uid\", ForeignKey(\"test_bill.uid\"), primary_key=True),\n    Column(\n        \"analysis_request_uid\", ForeignKey(\"analysis_request.uid\"), primary_key=True\n    ),\n)\nclass TestBill(AuditHistory):\n    __tablename__ = \"test_bill\"",
        "detail": "billing.entities",
        "documentation": {}
    },
    {
        "label": "DiscountType",
        "kind": 6,
        "importPath": "billing.enum",
        "description": "billing.enum",
        "peekOfCode": "class DiscountType(StrEnum):\n    SALE = auto()\n    VOUCHER = auto()\nclass DiscountValueType(StrEnum):\n    PERCENTATE = auto()\n    AMOUNT = auto()\nclass TransactionKind(StrEnum):\n    CASH = auto()\n    MEDICAL_AID = auto()\n    E_PAYMENT = auto()",
        "detail": "billing.enum",
        "documentation": {}
    },
    {
        "label": "DiscountValueType",
        "kind": 6,
        "importPath": "billing.enum",
        "description": "billing.enum",
        "peekOfCode": "class DiscountValueType(StrEnum):\n    PERCENTATE = auto()\n    AMOUNT = auto()\nclass TransactionKind(StrEnum):\n    CASH = auto()\n    MEDICAL_AID = auto()\n    E_PAYMENT = auto()\n    AUTO_DISCOUNT = auto()",
        "detail": "billing.enum",
        "documentation": {}
    },
    {
        "label": "TransactionKind",
        "kind": 6,
        "importPath": "billing.enum",
        "description": "billing.enum",
        "peekOfCode": "class TransactionKind(StrEnum):\n    CASH = auto()\n    MEDICAL_AID = auto()\n    E_PAYMENT = auto()\n    AUTO_DISCOUNT = auto()",
        "detail": "billing.enum",
        "documentation": {}
    },
    {
        "label": "InvalidVoucherCodeException",
        "kind": 6,
        "importPath": "billing.exceptions",
        "description": "billing.exceptions",
        "peekOfCode": "class InvalidVoucherCodeException(Exception):\n    def __init__(self, message=\"Invalid Voucher Code\"):\n        self.message = message\n        super().__init__(self.message)\nclass CustomerAlreadyUsedVoucherException(Exception):\n    def __init__(self, message=\"Customer already used voucher\"):\n        self.message = message\n        super().__init__(self.message)\nclass InactiveTestBillException(Exception):\n    def __init__(self, message=\"Inactive TestBill\"):",
        "detail": "billing.exceptions",
        "documentation": {}
    },
    {
        "label": "CustomerAlreadyUsedVoucherException",
        "kind": 6,
        "importPath": "billing.exceptions",
        "description": "billing.exceptions",
        "peekOfCode": "class CustomerAlreadyUsedVoucherException(Exception):\n    def __init__(self, message=\"Customer already used voucher\"):\n        self.message = message\n        super().__init__(self.message)\nclass InactiveTestBillException(Exception):\n    def __init__(self, message=\"Inactive TestBill\"):\n        self.message = message\n        super().__init__(self.message)\nclass InactiveVoucherCodeException(Exception):\n    def __init__(self, message=\"Inactive Voucher Code\"):",
        "detail": "billing.exceptions",
        "documentation": {}
    },
    {
        "label": "InactiveTestBillException",
        "kind": 6,
        "importPath": "billing.exceptions",
        "description": "billing.exceptions",
        "peekOfCode": "class InactiveTestBillException(Exception):\n    def __init__(self, message=\"Inactive TestBill\"):\n        self.message = message\n        super().__init__(self.message)\nclass InactiveVoucherCodeException(Exception):\n    def __init__(self, message=\"Inactive Voucher Code\"):\n        self.message = message\n        super().__init__(self.message)\nclass VoucherCodeLimitExceededException(Exception):\n    def __init__(self, message=\"Voucher Code Limit exceeded\"):",
        "detail": "billing.exceptions",
        "documentation": {}
    },
    {
        "label": "InactiveVoucherCodeException",
        "kind": 6,
        "importPath": "billing.exceptions",
        "description": "billing.exceptions",
        "peekOfCode": "class InactiveVoucherCodeException(Exception):\n    def __init__(self, message=\"Inactive Voucher Code\"):\n        self.message = message\n        super().__init__(self.message)\nclass VoucherCodeLimitExceededException(Exception):\n    def __init__(self, message=\"Voucher Code Limit exceeded\"):\n        self.message = message\n        super().__init__(self.message)\nclass VoucherLimitExceededException(Exception):\n    def __init__(self, message=\"Voucher Limit exceeded\"):",
        "detail": "billing.exceptions",
        "documentation": {}
    },
    {
        "label": "VoucherCodeLimitExceededException",
        "kind": 6,
        "importPath": "billing.exceptions",
        "description": "billing.exceptions",
        "peekOfCode": "class VoucherCodeLimitExceededException(Exception):\n    def __init__(self, message=\"Voucher Code Limit exceeded\"):\n        self.message = message\n        super().__init__(self.message)\nclass VoucherLimitExceededException(Exception):\n    def __init__(self, message=\"Voucher Limit exceeded\"):\n        self.message = message\n        super().__init__(self.message)",
        "detail": "billing.exceptions",
        "documentation": {}
    },
    {
        "label": "VoucherLimitExceededException",
        "kind": 6,
        "importPath": "billing.exceptions",
        "description": "billing.exceptions",
        "peekOfCode": "class VoucherLimitExceededException(Exception):\n    def __init__(self, message=\"Voucher Limit exceeded\"):\n        self.message = message\n        super().__init__(self.message)",
        "detail": "billing.exceptions",
        "documentation": {}
    },
    {
        "label": "AnalysisPriceRepository",
        "kind": 6,
        "importPath": "billing.repositories",
        "description": "billing.repositories",
        "peekOfCode": "class AnalysisPriceRepository(BaseRepository[AnalysisPrice]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisPrice)\nclass ProfilePriceRepository(BaseRepository[ProfilePrice]):\n    def __init__(self) -> None:\n        super().__init__(ProfilePrice)\nclass AnalysisDiscountRepository(BaseRepository[AnalysisDiscount]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisDiscount)\nclass ProfileDiscountRepository(BaseRepository[ProfileDiscount]):",
        "detail": "billing.repositories",
        "documentation": {}
    },
    {
        "label": "ProfilePriceRepository",
        "kind": 6,
        "importPath": "billing.repositories",
        "description": "billing.repositories",
        "peekOfCode": "class ProfilePriceRepository(BaseRepository[ProfilePrice]):\n    def __init__(self) -> None:\n        super().__init__(ProfilePrice)\nclass AnalysisDiscountRepository(BaseRepository[AnalysisDiscount]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisDiscount)\nclass ProfileDiscountRepository(BaseRepository[ProfileDiscount]):\n    def __init__(self) -> None:\n        super().__init__(ProfileDiscount)\nclass VoucherRepository(BaseRepository[Voucher]):",
        "detail": "billing.repositories",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscountRepository",
        "kind": 6,
        "importPath": "billing.repositories",
        "description": "billing.repositories",
        "peekOfCode": "class AnalysisDiscountRepository(BaseRepository[AnalysisDiscount]):\n    def __init__(self) -> None:\n        super().__init__(AnalysisDiscount)\nclass ProfileDiscountRepository(BaseRepository[ProfileDiscount]):\n    def __init__(self) -> None:\n        super().__init__(ProfileDiscount)\nclass VoucherRepository(BaseRepository[Voucher]):\n    def __init__(self) -> None:\n        super().__init__(Voucher)\nclass VoucherCodeRepository(BaseRepository[VoucherCode]):",
        "detail": "billing.repositories",
        "documentation": {}
    },
    {
        "label": "ProfileDiscountRepository",
        "kind": 6,
        "importPath": "billing.repositories",
        "description": "billing.repositories",
        "peekOfCode": "class ProfileDiscountRepository(BaseRepository[ProfileDiscount]):\n    def __init__(self) -> None:\n        super().__init__(ProfileDiscount)\nclass VoucherRepository(BaseRepository[Voucher]):\n    def __init__(self) -> None:\n        super().__init__(Voucher)\nclass VoucherCodeRepository(BaseRepository[VoucherCode]):\n    def __init__(self) -> None:\n        super().__init__(VoucherCode)\nclass VoucherCustomerRepository(BaseRepository[VoucherCustomer]):",
        "detail": "billing.repositories",
        "documentation": {}
    },
    {
        "label": "VoucherRepository",
        "kind": 6,
        "importPath": "billing.repositories",
        "description": "billing.repositories",
        "peekOfCode": "class VoucherRepository(BaseRepository[Voucher]):\n    def __init__(self) -> None:\n        super().__init__(Voucher)\nclass VoucherCodeRepository(BaseRepository[VoucherCode]):\n    def __init__(self) -> None:\n        super().__init__(VoucherCode)\nclass VoucherCustomerRepository(BaseRepository[VoucherCustomer]):\n    def __init__(self) -> None:\n        super().__init__(VoucherCustomer)\nclass TestBillRepository(BaseRepository[TestBill]):",
        "detail": "billing.repositories",
        "documentation": {}
    },
    {
        "label": "VoucherCodeRepository",
        "kind": 6,
        "importPath": "billing.repositories",
        "description": "billing.repositories",
        "peekOfCode": "class VoucherCodeRepository(BaseRepository[VoucherCode]):\n    def __init__(self) -> None:\n        super().__init__(VoucherCode)\nclass VoucherCustomerRepository(BaseRepository[VoucherCustomer]):\n    def __init__(self) -> None:\n        super().__init__(VoucherCustomer)\nclass TestBillRepository(BaseRepository[TestBill]):\n    def __init__(self) -> None:\n        super().__init__(TestBill)\nclass TestBillTransactionRepository(BaseRepository[TestBillTransaction]):",
        "detail": "billing.repositories",
        "documentation": {}
    },
    {
        "label": "VoucherCustomerRepository",
        "kind": 6,
        "importPath": "billing.repositories",
        "description": "billing.repositories",
        "peekOfCode": "class VoucherCustomerRepository(BaseRepository[VoucherCustomer]):\n    def __init__(self) -> None:\n        super().__init__(VoucherCustomer)\nclass TestBillRepository(BaseRepository[TestBill]):\n    def __init__(self) -> None:\n        super().__init__(TestBill)\nclass TestBillTransactionRepository(BaseRepository[TestBillTransaction]):\n    def __init__(self) -> None:\n        super().__init__(TestBillTransaction)\nclass TestBillInvoiceRepository(BaseRepository[TestBillInvoice]):",
        "detail": "billing.repositories",
        "documentation": {}
    },
    {
        "label": "TestBillRepository",
        "kind": 6,
        "importPath": "billing.repositories",
        "description": "billing.repositories",
        "peekOfCode": "class TestBillRepository(BaseRepository[TestBill]):\n    def __init__(self) -> None:\n        super().__init__(TestBill)\nclass TestBillTransactionRepository(BaseRepository[TestBillTransaction]):\n    def __init__(self) -> None:\n        super().__init__(TestBillTransaction)\nclass TestBillInvoiceRepository(BaseRepository[TestBillInvoice]):\n    def __init__(self) -> None:\n        super().__init__(TestBillInvoice)",
        "detail": "billing.repositories",
        "documentation": {}
    },
    {
        "label": "TestBillTransactionRepository",
        "kind": 6,
        "importPath": "billing.repositories",
        "description": "billing.repositories",
        "peekOfCode": "class TestBillTransactionRepository(BaseRepository[TestBillTransaction]):\n    def __init__(self) -> None:\n        super().__init__(TestBillTransaction)\nclass TestBillInvoiceRepository(BaseRepository[TestBillInvoice]):\n    def __init__(self) -> None:\n        super().__init__(TestBillInvoice)",
        "detail": "billing.repositories",
        "documentation": {}
    },
    {
        "label": "TestBillInvoiceRepository",
        "kind": 6,
        "importPath": "billing.repositories",
        "description": "billing.repositories",
        "peekOfCode": "class TestBillInvoiceRepository(BaseRepository[TestBillInvoice]):\n    def __init__(self) -> None:\n        super().__init__(TestBillInvoice)",
        "detail": "billing.repositories",
        "documentation": {}
    },
    {
        "label": "AnalysisPriceBase",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class AnalysisPriceBase(BaseModel):\n    is_active: bool\n    amount: float\n    analysis_uid: str | None = None\nclass AnalysisPriceBaseInDB(AnalysisPriceBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisPriceCreate(AnalysisPriceBase):\n    pass",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisPriceBaseInDB",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class AnalysisPriceBaseInDB(AnalysisPriceBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisPriceCreate(AnalysisPriceBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisPriceUpdate(AnalysisPriceBase):\n    pass\nclass ProfilePriceBase(BaseModel):",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisPriceCreate",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class AnalysisPriceCreate(AnalysisPriceBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisPriceUpdate(AnalysisPriceBase):\n    pass\nclass ProfilePriceBase(BaseModel):\n    is_active: bool\n    amount: float\n    profile_uid: str | None = None\nclass ProfilePriceBaseInDB(ProfilePriceBase):",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisPriceUpdate",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class AnalysisPriceUpdate(AnalysisPriceBase):\n    pass\nclass ProfilePriceBase(BaseModel):\n    is_active: bool\n    amount: float\n    profile_uid: str | None = None\nclass ProfilePriceBaseInDB(ProfilePriceBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "ProfilePriceBase",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class ProfilePriceBase(BaseModel):\n    is_active: bool\n    amount: float\n    profile_uid: str | None = None\nclass ProfilePriceBaseInDB(ProfilePriceBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ProfilePriceCreate(ProfilePriceBase):\n    pass",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "ProfilePriceBaseInDB",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class ProfilePriceBaseInDB(ProfilePriceBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ProfilePriceCreate(ProfilePriceBase):\n    pass\n# Properties to receive via API on update\nclass ProfilePriceUpdate(ProfilePriceBase):\n    pass\nclass AnalysisDiscountBase(BaseModel):",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "ProfilePriceCreate",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class ProfilePriceCreate(ProfilePriceBase):\n    pass\n# Properties to receive via API on update\nclass ProfilePriceUpdate(ProfilePriceBase):\n    pass\nclass AnalysisDiscountBase(BaseModel):\n    analysis_uid: str\n    name: str\n    discount_type: str\n    value_type: str",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "ProfilePriceUpdate",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class ProfilePriceUpdate(ProfilePriceBase):\n    pass\nclass AnalysisDiscountBase(BaseModel):\n    analysis_uid: str\n    name: str\n    discount_type: str\n    value_type: str\n    start_date: datetime = datetime.now()\n    end_date: datetime = datetime.now()\n    voucher_uid: str | None = None",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscountBase",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class AnalysisDiscountBase(BaseModel):\n    analysis_uid: str\n    name: str\n    discount_type: str\n    value_type: str\n    start_date: datetime = datetime.now()\n    end_date: datetime = datetime.now()\n    voucher_uid: str | None = None\n    value_percent: float | None = None\n    value_amount: float | None = None",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscountBaseInDB",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class AnalysisDiscountBaseInDB(AnalysisDiscountBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass AnalysisDiscountCreate(AnalysisDiscountBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisDiscountUpdate(AnalysisDiscountBase):\n    analysis_uid: str | None = None\n    name: str | None = None",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscountCreate",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class AnalysisDiscountCreate(AnalysisDiscountBase):\n    pass\n# Properties to receive via API on update\nclass AnalysisDiscountUpdate(AnalysisDiscountBase):\n    analysis_uid: str | None = None\n    name: str | None = None\nclass ProfileDiscountBase(BaseModel):\n    profile_uid: str\n    name: str\n    discount_type: str | None = None",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscountUpdate",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class AnalysisDiscountUpdate(AnalysisDiscountBase):\n    analysis_uid: str | None = None\n    name: str | None = None\nclass ProfileDiscountBase(BaseModel):\n    profile_uid: str\n    name: str\n    discount_type: str | None = None\n    value_type: str | None = None\n    start_date: datetime = datetime.now()\n    end_date: datetime = datetime.now()",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileDiscountBase",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class ProfileDiscountBase(BaseModel):\n    profile_uid: str\n    name: str\n    discount_type: str | None = None\n    value_type: str | None = None\n    start_date: datetime = datetime.now()\n    end_date: datetime = datetime.now()\n    voucher_uid: str | None = None\n    value_percent: float | None = None\n    value_amount: float | None = None",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileDiscountBaseInDB",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class ProfileDiscountBaseInDB(ProfileDiscountBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ProfileDiscountCreate(ProfileDiscountBase):\n    pass\n# Properties to receive via API on update\nclass ProfileDiscountUpdate(ProfileDiscountBase):\n    profile_uid: str | None = None\n    name: str | None = None",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileDiscountCreate",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class ProfileDiscountCreate(ProfileDiscountBase):\n    pass\n# Properties to receive via API on update\nclass ProfileDiscountUpdate(ProfileDiscountBase):\n    profile_uid: str | None = None\n    name: str | None = None\nclass VoucherBase(BaseModel):\n    name: str\n    usage_limit: int\n    used: int | None = None",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "ProfileDiscountUpdate",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class ProfileDiscountUpdate(ProfileDiscountBase):\n    profile_uid: str | None = None\n    name: str | None = None\nclass VoucherBase(BaseModel):\n    name: str\n    usage_limit: int\n    used: int | None = None\n    start_date: datetime\n    end_date: datetime\n    once_per_customer: bool",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherBase",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class VoucherBase(BaseModel):\n    name: str\n    usage_limit: int\n    used: int | None = None\n    start_date: datetime\n    end_date: datetime\n    once_per_customer: bool\n    once_per_order: bool\nclass VoucherBaseInDB(VoucherBase):\n    uid: str | None = None",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherBaseInDB",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class VoucherBaseInDB(VoucherBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass VoucherCreate(VoucherBase):\n    pass\n# Properties to receive via API on update\nclass VoucherUpdate(VoucherBase):\n    pass\nclass VoucherCodeBase(BaseModel):",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherCreate",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class VoucherCreate(VoucherBase):\n    pass\n# Properties to receive via API on update\nclass VoucherUpdate(VoucherBase):\n    pass\nclass VoucherCodeBase(BaseModel):\n    code: str\n    voucher_uid: str\n    usage_limit: int\n    used: int | None = None",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherUpdate",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class VoucherUpdate(VoucherBase):\n    pass\nclass VoucherCodeBase(BaseModel):\n    code: str\n    voucher_uid: str\n    usage_limit: int\n    used: int | None = None\n    is_active: bool\nclass VoucherCodeBaseInDB(VoucherCodeBase):\n    uid: str | None = None",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherCodeBase",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class VoucherCodeBase(BaseModel):\n    code: str\n    voucher_uid: str\n    usage_limit: int\n    used: int | None = None\n    is_active: bool\nclass VoucherCodeBaseInDB(VoucherCodeBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherCodeBaseInDB",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class VoucherCodeBaseInDB(VoucherCodeBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass VoucherCodeCreate(VoucherCodeBase):\n    pass\n# Properties to receive via API on update\nclass VoucherCodeUpdate(VoucherCodeBase):\n    pass\nclass VoucherCustomerBase(BaseModel):",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherCodeCreate",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class VoucherCodeCreate(VoucherCodeBase):\n    pass\n# Properties to receive via API on update\nclass VoucherCodeUpdate(VoucherCodeBase):\n    pass\nclass VoucherCustomerBase(BaseModel):\n    patient_uid: str\n    voucher_code_uid: str\nclass VoucherCustomerBaseInDB(VoucherCustomerBase):\n    uid: str | None = None",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherCodeUpdate",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class VoucherCodeUpdate(VoucherCodeBase):\n    pass\nclass VoucherCustomerBase(BaseModel):\n    patient_uid: str\n    voucher_code_uid: str\nclass VoucherCustomerBaseInDB(VoucherCustomerBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass VoucherCustomerCreate(VoucherCustomerBase):",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherCustomerBase",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class VoucherCustomerBase(BaseModel):\n    patient_uid: str\n    voucher_code_uid: str\nclass VoucherCustomerBaseInDB(VoucherCustomerBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass VoucherCustomerCreate(VoucherCustomerBase):\n    pass\n# Properties to receive via API on update",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherCustomerBaseInDB",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class VoucherCustomerBaseInDB(VoucherCustomerBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass VoucherCustomerCreate(VoucherCustomerBase):\n    pass\n# Properties to receive via API on update\nclass VoucherCustomerUpdate(VoucherCustomerBase):\n    pass\nclass TestBillBase(BaseModel):",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherCustomerCreate",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class VoucherCustomerCreate(VoucherCustomerBase):\n    pass\n# Properties to receive via API on update\nclass VoucherCustomerUpdate(VoucherCustomerBase):\n    pass\nclass TestBillBase(BaseModel):\n    bill_id: str | None = None\n    patient_uid: str\n    client_uid: str\n    is_active: bool",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "VoucherCustomerUpdate",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class VoucherCustomerUpdate(VoucherCustomerBase):\n    pass\nclass TestBillBase(BaseModel):\n    bill_id: str | None = None\n    patient_uid: str\n    client_uid: str\n    is_active: bool\n    to_confirm: bool\n    partial: bool = False\n    total_charged: float",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillBase",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class TestBillBase(BaseModel):\n    bill_id: str | None = None\n    patient_uid: str\n    client_uid: str\n    is_active: bool\n    to_confirm: bool\n    partial: bool = False\n    total_charged: float\n    total_paid: float = 0.0\n    json_content: Optional[dict] = {}",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillBaseInDB",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class TestBillBaseInDB(TestBillBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass TestBillCreate(TestBillBase):\n    pass\n# Properties to receive via API on update\nclass TestBillUpdate(TestBillBase):\n    patient_uid: str | None = None\n    client_uid: str | None = None",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillCreate",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class TestBillCreate(TestBillBase):\n    pass\n# Properties to receive via API on update\nclass TestBillUpdate(TestBillBase):\n    patient_uid: str | None = None\n    client_uid: str | None = None\n    total_charged: float | None = None\n    is_active: bool | None = None\n    to_confirm: bool | None = None\nclass TestBillTransactionBase(BaseModel):",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillUpdate",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class TestBillUpdate(TestBillBase):\n    patient_uid: str | None = None\n    client_uid: str | None = None\n    total_charged: float | None = None\n    is_active: bool | None = None\n    to_confirm: bool | None = None\nclass TestBillTransactionBase(BaseModel):\n    test_bill_uid: str\n    kind: str\n    amount: float",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillTransactionBase",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class TestBillTransactionBase(BaseModel):\n    test_bill_uid: str\n    kind: str\n    amount: float\n    is_success: bool = False\n    action_required: bool = False\n    processed: bool = False\n    notes: str\n    message: str | None = \"\"\n    action_message: str | None = \"\"",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillTransactionBaseInDB",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class TestBillTransactionBaseInDB(TestBillTransactionBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass TestBillTransactionCreate(TestBillTransactionBase):\n    pass\n# Properties to receive via API on update\nclass TestBillTransactionUpdate(TestBillTransactionBase):\n    test_bill_uid: str | None = None\n    kind: str | None = None",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillTransactionCreate",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class TestBillTransactionCreate(TestBillTransactionBase):\n    pass\n# Properties to receive via API on update\nclass TestBillTransactionUpdate(TestBillTransactionBase):\n    test_bill_uid: str | None = None\n    kind: str | None = None\n    amount: float | None = None\n    notes: str | None = None\nclass TestBillInvoiceBase(BaseModel):\n    test_bill_uid: str",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillTransactionUpdate",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class TestBillTransactionUpdate(TestBillTransactionBase):\n    test_bill_uid: str | None = None\n    kind: str | None = None\n    amount: float | None = None\n    notes: str | None = None\nclass TestBillInvoiceBase(BaseModel):\n    test_bill_uid: str\n    json_content: Optional[dict] = {}\n    pdf_content: Optional[bytes] = None\nclass TestBillInvoiceBaseInDB(TestBillInvoiceBase):",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillInvoiceBase",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class TestBillInvoiceBase(BaseModel):\n    test_bill_uid: str\n    json_content: Optional[dict] = {}\n    pdf_content: Optional[bytes] = None\nclass TestBillInvoiceBaseInDB(TestBillInvoiceBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass TestBillInvoiceCreate(TestBillInvoiceBase):\n    pass",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillInvoiceBaseInDB",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class TestBillInvoiceBaseInDB(TestBillInvoiceBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass TestBillInvoiceCreate(TestBillInvoiceBase):\n    pass\n# Properties to receive via API on update\nclass TestBillInvoiceUpdate(TestBillInvoiceBase):\n    pass",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillInvoiceCreate",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class TestBillInvoiceCreate(TestBillInvoiceBase):\n    pass\n# Properties to receive via API on update\nclass TestBillInvoiceUpdate(TestBillInvoiceBase):\n    pass",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "TestBillInvoiceUpdate",
        "kind": 6,
        "importPath": "billing.schemas",
        "description": "billing.schemas",
        "peekOfCode": "class TestBillInvoiceUpdate(TestBillInvoiceBase):\n    pass",
        "detail": "billing.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisPriceService",
        "kind": 6,
        "importPath": "billing.services",
        "description": "billing.services",
        "peekOfCode": "class AnalysisPriceService(\n    BaseService[AnalysisPrice, AnalysisPriceCreate, AnalysisPriceUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(AnalysisPriceRepository)\nclass ProfilePriceService(\n    BaseService[ProfilePrice, ProfilePriceCreate, ProfilePriceUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(ProfilePriceRepository)",
        "detail": "billing.services",
        "documentation": {}
    },
    {
        "label": "ProfilePriceService",
        "kind": 6,
        "importPath": "billing.services",
        "description": "billing.services",
        "peekOfCode": "class ProfilePriceService(\n    BaseService[ProfilePrice, ProfilePriceCreate, ProfilePriceUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(ProfilePriceRepository)\nclass AnalysisDiscountService(\n    BaseService[AnalysisDiscount, AnalysisDiscountCreate, AnalysisDiscountUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(AnalysisDiscountRepository)",
        "detail": "billing.services",
        "documentation": {}
    },
    {
        "label": "AnalysisDiscountService",
        "kind": 6,
        "importPath": "billing.services",
        "description": "billing.services",
        "peekOfCode": "class AnalysisDiscountService(\n    BaseService[AnalysisDiscount, AnalysisDiscountCreate, AnalysisDiscountUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(AnalysisDiscountRepository)\nclass ProfileDiscountService(\n    BaseService[ProfileDiscount, ProfileDiscountCreate, ProfileDiscountUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(ProfileDiscountRepository)",
        "detail": "billing.services",
        "documentation": {}
    },
    {
        "label": "ProfileDiscountService",
        "kind": 6,
        "importPath": "billing.services",
        "description": "billing.services",
        "peekOfCode": "class ProfileDiscountService(\n    BaseService[ProfileDiscount, ProfileDiscountCreate, ProfileDiscountUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(ProfileDiscountRepository)\nclass VoucherService(BaseService[Voucher, VoucherCreate, VoucherUpdate]):\n    def __init__(self) -> None:\n        super().__init__(VoucherRepository)\nclass VoucherCodeService(\n    BaseService[VoucherCode, VoucherCodeCreate, VoucherCodeUpdate]",
        "detail": "billing.services",
        "documentation": {}
    },
    {
        "label": "VoucherService",
        "kind": 6,
        "importPath": "billing.services",
        "description": "billing.services",
        "peekOfCode": "class VoucherService(BaseService[Voucher, VoucherCreate, VoucherUpdate]):\n    def __init__(self) -> None:\n        super().__init__(VoucherRepository)\nclass VoucherCodeService(\n    BaseService[VoucherCode, VoucherCodeCreate, VoucherCodeUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(VoucherCodeRepository)\nclass VoucherCustomerService(\n    BaseService[VoucherCustomer, VoucherCustomerCreate, VoucherCustomerUpdate]",
        "detail": "billing.services",
        "documentation": {}
    },
    {
        "label": "VoucherCodeService",
        "kind": 6,
        "importPath": "billing.services",
        "description": "billing.services",
        "peekOfCode": "class VoucherCodeService(\n    BaseService[VoucherCode, VoucherCodeCreate, VoucherCodeUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(VoucherCodeRepository)\nclass VoucherCustomerService(\n    BaseService[VoucherCustomer, VoucherCustomerCreate, VoucherCustomerUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(VoucherCustomerRepository)",
        "detail": "billing.services",
        "documentation": {}
    },
    {
        "label": "VoucherCustomerService",
        "kind": 6,
        "importPath": "billing.services",
        "description": "billing.services",
        "peekOfCode": "class VoucherCustomerService(\n    BaseService[VoucherCustomer, VoucherCustomerCreate, VoucherCustomerUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(VoucherCustomerRepository)\nclass TestBillService(BaseService[TestBill, TestBillCreate, TestBillUpdate]):\n    def __init__(self) -> None:\n        self.id_sequence_servce = IdSequenceService()\n        super().__init__(TestBillRepository)\n    async def create(self, obj_in: dict | TestBillCreate, related: list[str] = None) -> \"TestBill\":",
        "detail": "billing.services",
        "documentation": {}
    },
    {
        "label": "TestBillService",
        "kind": 6,
        "importPath": "billing.services",
        "description": "billing.services",
        "peekOfCode": "class TestBillService(BaseService[TestBill, TestBillCreate, TestBillUpdate]):\n    def __init__(self) -> None:\n        self.id_sequence_servce = IdSequenceService()\n        super().__init__(TestBillRepository)\n    async def create(self, obj_in: dict | TestBillCreate, related: list[str] = None) -> \"TestBill\":\n        data = self._import(obj_in)\n        data[\"bill_id\"] = (\n            await self.id_sequence_servce.get_next_number(prefix=\"X\", generic=True)\n        )[1]\n        return await super().create(data, related)",
        "detail": "billing.services",
        "documentation": {}
    },
    {
        "label": "TestBillTransactionService",
        "kind": 6,
        "importPath": "billing.services",
        "description": "billing.services",
        "peekOfCode": "class TestBillTransactionService(\n    BaseService[\n        TestBillTransaction, TestBillTransactionCreate, TestBillTransactionUpdate\n    ]\n):\n    def __init__(self) -> None:\n        super().__init__(TestBillTransactionRepository)\nclass TestBillInvoiceService(\n    BaseService[TestBillInvoice, TestBillInvoiceCreate, TestBillInvoiceUpdate]\n):",
        "detail": "billing.services",
        "documentation": {}
    },
    {
        "label": "TestBillInvoiceService",
        "kind": 6,
        "importPath": "billing.services",
        "description": "billing.services",
        "peekOfCode": "class TestBillInvoiceService(\n    BaseService[TestBillInvoice, TestBillInvoiceCreate, TestBillInvoiceUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(TestBillInvoiceRepository)",
        "detail": "billing.services",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "billing.utils",
        "description": "billing.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def bill_order(analysis_request: a_entities.AnalysisRequest, auto_bill=False):\n    laboratory = await Laboratory.get_by_setup_name(\"felicity\")\n    lab_settings = await LaboratorySetting.get(laboratory_uid=laboratory.uid)\n    if not lab_settings.allow_billing:\n        logger.info(\"Billing is not allowed\")\n        return\n    # auto_billing ?? or user initiated\n    if auto_bill and not lab_settings.allow_auto_billing:\n        logger.info(\"Auto billing is not allowed\")",
        "detail": "billing.utils",
        "documentation": {}
    },
    {
        "label": "Client",
        "kind": 6,
        "importPath": "client.entities",
        "description": "client.entities",
        "peekOfCode": "class Client(AuditHistory):\n    \"\"\"Client/Facility\"\"\"\n    __tablename__ = \"client\"\n    name = Column(String, nullable=False)\n    code = Column(String, index=True, unique=True, nullable=False)\n    district_uid = Column(String, ForeignKey(\"district.uid\"), nullable=True)\n    district = relationship(District, backref=\"clients\", lazy=\"selectin\")\n    province_uid = Column(String, ForeignKey(\"province.uid\"), nullable=True)\n    province = relationship(Province, backref=\"clients\", lazy=\"selectin\")\n    email = Column(String, nullable=True)",
        "detail": "client.entities",
        "documentation": {}
    },
    {
        "label": "ClientContact",
        "kind": 6,
        "importPath": "client.entities",
        "description": "client.entities",
        "peekOfCode": "class ClientContact(AbstractBaseUser):\n    __tablename__ = \"client_contact\"\n    email_cc = Column(String, nullable=True)\n    consent_sms = Column(Boolean(), default=False)\n    client_uid = Column(String, ForeignKey(\"client.uid\"), nullable=False)\n    client = relationship(\n        Client,\n        backref=backref(\n            \"contacts\",\n            uselist=False,",
        "detail": "client.entities",
        "documentation": {}
    },
    {
        "label": "ClientRepository",
        "kind": 6,
        "importPath": "client.repositories",
        "description": "client.repositories",
        "peekOfCode": "class ClientRepository(BaseRepository[Client]):\n    def __init__(self) -> None:\n        super().__init__(Client)\nclass ClientContactRepository(BaseRepository[ClientContact]):\n    def __init__(self) -> None:\n        super().__init__(ClientContact)",
        "detail": "client.repositories",
        "documentation": {}
    },
    {
        "label": "ClientContactRepository",
        "kind": 6,
        "importPath": "client.repositories",
        "description": "client.repositories",
        "peekOfCode": "class ClientContactRepository(BaseRepository[ClientContact]):\n    def __init__(self) -> None:\n        super().__init__(ClientContact)",
        "detail": "client.repositories",
        "documentation": {}
    },
    {
        "label": "ClientBase",
        "kind": 6,
        "importPath": "client.schemas",
        "description": "client.schemas",
        "peekOfCode": "class ClientBase(BaseModel):\n    name: str | None = None\n    code: str | None = None\n    district_uid: str | None = None\n    email: str | None = None\n    email_cc: str | None = None\n    consent_email: bool | None = None\n    phone_mobile: str | None = None\n    phone_business: str | None = None\n    consent_sms: bool | None = None",
        "detail": "client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientBaseInDB",
        "kind": 6,
        "importPath": "client.schemas",
        "description": "client.schemas",
        "peekOfCode": "class ClientBaseInDB(ClientBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ClientCreate(ClientBase):\n    district_uid: str | None = None\n# Properties to receive via API on update\nclass ClientUpdate(ClientBase):\n    pass\n# Properties to return via API",
        "detail": "client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientCreate",
        "kind": 6,
        "importPath": "client.schemas",
        "description": "client.schemas",
        "peekOfCode": "class ClientCreate(ClientBase):\n    district_uid: str | None = None\n# Properties to receive via API on update\nclass ClientUpdate(ClientBase):\n    pass\n# Properties to return via API\nclass Client(ClientBaseInDB):\n    pass\n# Properties stored in DB\nclass ClientInDB(ClientBaseInDB):",
        "detail": "client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientUpdate",
        "kind": 6,
        "importPath": "client.schemas",
        "description": "client.schemas",
        "peekOfCode": "class ClientUpdate(ClientBase):\n    pass\n# Properties to return via API\nclass Client(ClientBaseInDB):\n    pass\n# Properties stored in DB\nclass ClientInDB(ClientBaseInDB):\n    pass\n#\n# Client Contact Schemas",
        "detail": "client.schemas",
        "documentation": {}
    },
    {
        "label": "Client",
        "kind": 6,
        "importPath": "client.schemas",
        "description": "client.schemas",
        "peekOfCode": "class Client(ClientBaseInDB):\n    pass\n# Properties stored in DB\nclass ClientInDB(ClientBaseInDB):\n    pass\n#\n# Client Contact Schemas\n#\n# Shared properties\nclass ClientContactBase(BaseModel):",
        "detail": "client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientInDB",
        "kind": 6,
        "importPath": "client.schemas",
        "description": "client.schemas",
        "peekOfCode": "class ClientInDB(ClientBaseInDB):\n    pass\n#\n# Client Contact Schemas\n#\n# Shared properties\nclass ClientContactBase(BaseModel):\n    client_uid: str | None = None\n    first_name: str | None = None\n    last_name: str | None = None",
        "detail": "client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientContactBase",
        "kind": 6,
        "importPath": "client.schemas",
        "description": "client.schemas",
        "peekOfCode": "class ClientContactBase(BaseModel):\n    client_uid: str | None = None\n    first_name: str | None = None\n    last_name: str | None = None\n    email: str | None = None\n    email_cc: str | None = None\n    mobile_phone: str | None = None\n    consent_sms: bool | None = False\n    business_phone: str | None = None\n    is_active: bool | None = True",
        "detail": "client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientContactBaseInDB",
        "kind": 6,
        "importPath": "client.schemas",
        "description": "client.schemas",
        "peekOfCode": "class ClientContactBaseInDB(ClientContactBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ClientContactCreate(ClientContactBase):\n    client_uid: str\n# Properties to receive via API on update\nclass ClientContactUpdate(ClientContactBase):\n    pass\n# Properties to return via API",
        "detail": "client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientContactCreate",
        "kind": 6,
        "importPath": "client.schemas",
        "description": "client.schemas",
        "peekOfCode": "class ClientContactCreate(ClientContactBase):\n    client_uid: str\n# Properties to receive via API on update\nclass ClientContactUpdate(ClientContactBase):\n    pass\n# Properties to return via API\nclass ClientContact(ClientContactBaseInDB):\n    pass\n# Properties stored in DB\nclass ClientContactInDB(ClientContactBaseInDB):",
        "detail": "client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientContactUpdate",
        "kind": 6,
        "importPath": "client.schemas",
        "description": "client.schemas",
        "peekOfCode": "class ClientContactUpdate(ClientContactBase):\n    pass\n# Properties to return via API\nclass ClientContact(ClientContactBaseInDB):\n    pass\n# Properties stored in DB\nclass ClientContactInDB(ClientContactBaseInDB):\n    pass",
        "detail": "client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientContact",
        "kind": 6,
        "importPath": "client.schemas",
        "description": "client.schemas",
        "peekOfCode": "class ClientContact(ClientContactBaseInDB):\n    pass\n# Properties stored in DB\nclass ClientContactInDB(ClientContactBaseInDB):\n    pass",
        "detail": "client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientContactInDB",
        "kind": 6,
        "importPath": "client.schemas",
        "description": "client.schemas",
        "peekOfCode": "class ClientContactInDB(ClientContactBaseInDB):\n    pass",
        "detail": "client.schemas",
        "documentation": {}
    },
    {
        "label": "ClientService",
        "kind": 6,
        "importPath": "client.services",
        "description": "client.services",
        "peekOfCode": "class ClientService(BaseService[Client, ClientCreate, ClientUpdate]):\n    def __init__(self):\n        super().__init__(ClientRepository)\n    async def search(self, query: str) -> list[Client]:\n        return await super().search(name=query, code=query)\nclass ClientContactService(\n    BaseService[ClientContact, ClientContactCreate, ClientContactUpdate]\n):\n    def __init__(self):\n        super().__init__(ClientContactRepository)",
        "detail": "client.services",
        "documentation": {}
    },
    {
        "label": "ClientContactService",
        "kind": 6,
        "importPath": "client.services",
        "description": "client.services",
        "peekOfCode": "class ClientContactService(\n    BaseService[ClientContact, ClientContactCreate, ClientContactUpdate]\n):\n    def __init__(self):\n        super().__init__(ClientContactRepository)",
        "detail": "client.services",
        "documentation": {}
    },
    {
        "label": "AuditHook",
        "kind": 6,
        "importPath": "common.hooks.audit",
        "description": "common.hooks.audit",
        "peekOfCode": "class AuditHook:\n    \"\"\"Allow a model to be automatically audited\"\"\"\n    @staticmethod\n    def create_audit(connection, object_type, object_id, action, **kwargs):\n        audit = AuditLog(\n            object_type,\n            object_id,\n            action,\n            kwargs.get(\"state_before\"),\n            kwargs.get(\"state_after\"),",
        "detail": "common.hooks.audit",
        "documentation": {}
    },
    {
        "label": "custom_serial",
        "kind": 2,
        "importPath": "common.hooks.audit",
        "description": "common.hooks.audit",
        "peekOfCode": "def custom_serial(o):\n    if isinstance(o, (datetime.date, datetime.datetime)):\n        return o.isoformat()\n    raise TypeError(\"Type %s not serializable\" % type(o))\nclass AuditHook:\n    \"\"\"Allow a model to be automatically audited\"\"\"\n    @staticmethod\n    def create_audit(connection, object_type, object_id, action, **kwargs):\n        audit = AuditLog(\n            object_type,",
        "detail": "common.hooks.audit",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "common.hooks.audit",
        "description": "common.hooks.audit",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef custom_serial(o):\n    if isinstance(o, (datetime.date, datetime.datetime)):\n        return o.isoformat()\n    raise TypeError(\"Type %s not serializable\" % type(o))\nclass AuditHook:\n    \"\"\"Allow a model to be automatically audited\"\"\"\n    @staticmethod\n    def create_audit(connection, object_type, object_id, action, **kwargs):\n        audit = AuditLog(",
        "detail": "common.hooks.audit",
        "documentation": {}
    },
    {
        "label": "Hook",
        "kind": 6,
        "importPath": "common.hooks.conf",
        "description": "common.hooks.conf",
        "peekOfCode": "class Hook(object):\n    class Event:\n        CREATE = 1\n        UPDATE = 2\n        DELETE = 3\n    def __init__(self):\n        self.events = self.Event()\n        self.PLEASE_AUDIT = [self.Event.UPDATE]\nhooks = Hook()",
        "detail": "common.hooks.conf",
        "documentation": {}
    },
    {
        "label": "hooks",
        "kind": 5,
        "importPath": "common.hooks.conf",
        "description": "common.hooks.conf",
        "peekOfCode": "hooks = Hook()",
        "detail": "common.hooks.conf",
        "documentation": {}
    },
    {
        "label": "BaseAuditModel",
        "kind": 6,
        "importPath": "common.schemas.audit",
        "description": "common.schemas.audit",
        "peekOfCode": "class BaseAuditModel(BaseModel):\n    created_at: datetime | None = None\n    created_by_uid: str | None = None\n    updated_at: datetime | None = None\n    updated_by_uid: str | None = None",
        "detail": "common.schemas.audit",
        "documentation": {}
    },
    {
        "label": "Dummy",
        "kind": 6,
        "importPath": "common.schemas.dummy",
        "description": "common.schemas.dummy",
        "peekOfCode": "class Dummy(BaseModel): ...",
        "detail": "common.schemas.dummy",
        "documentation": {}
    },
    {
        "label": "Msg",
        "kind": 6,
        "importPath": "common.schemas.msg",
        "description": "common.schemas.msg",
        "peekOfCode": "class Msg(BaseModel):\n    msg: str",
        "detail": "common.schemas.msg",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "common.schemas.token",
        "description": "common.schemas.token",
        "peekOfCode": "class Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenPayload(BaseModel):\n    sub: str | None = None",
        "detail": "common.schemas.token",
        "documentation": {}
    },
    {
        "label": "TokenPayload",
        "kind": 6,
        "importPath": "common.schemas.token",
        "description": "common.schemas.token",
        "peekOfCode": "class TokenPayload(BaseModel):\n    sub: str | None = None",
        "detail": "common.schemas.token",
        "documentation": {}
    },
    {
        "label": "marshaller",
        "kind": 2,
        "importPath": "common.utils.serializer",
        "description": "common.utils.serializer",
        "peekOfCode": "def marshaller(\n    obj, path=None, memoize=None, exclude: list[str] = None, depth=2\n) -> dict | str:\n    \"\"\"Notes:\n    1. We use memoization To prevent marshalling the same object again hence speed things up\n    2. We use path tracking To stop marshalling when a path starts to repeat itself or meets a certain path restriction\n    \"\"\"\n    if memoize is None:\n        memoize = {}\n    if path is None:",
        "detail": "common.utils.serializer",
        "documentation": {}
    },
    {
        "label": "BroadcastEvent",
        "kind": 6,
        "importPath": "common.channel",
        "description": "common.channel",
        "peekOfCode": "class BroadcastEvent:\n    channel: str\n    message: Any\n@dataclass\nclass Subscriber:\n    queue: \"Queue[BroadcastEvent]\" = field(default_factory=Queue)\n    async def __aiter__(self) -> AsyncIterator[BroadcastEvent]:\n        while True:\n            item = await self.get()\n            yield item",
        "detail": "common.channel",
        "documentation": {}
    },
    {
        "label": "Subscriber",
        "kind": 6,
        "importPath": "common.channel",
        "description": "common.channel",
        "peekOfCode": "class Subscriber:\n    queue: \"Queue[BroadcastEvent]\" = field(default_factory=Queue)\n    async def __aiter__(self) -> AsyncIterator[BroadcastEvent]:\n        while True:\n            item = await self.get()\n            yield item\n    async def get(self) -> BroadcastEvent:\n        item = await self.queue.get()\n        return item\n@dataclass",
        "detail": "common.channel",
        "documentation": {}
    },
    {
        "label": "Broadcast",
        "kind": 6,
        "importPath": "common.channel",
        "description": "common.channel",
        "peekOfCode": "class Broadcast:\n    subscribers: dict[str, Set[Queue]] = field(default_factory=dict)\n    published: Queue = Queue()\n    @asynccontextmanager\n    async def subscribe(self, channel: str) -> AsyncIterator[Subscriber]:\n        subscriber = Subscriber()\n        subscribers_set = self.subscribers.get(channel, set())\n        subscribers_set.add(subscriber.queue)\n        self.subscribers[channel] = subscribers_set\n        try:",
        "detail": "common.channel",
        "documentation": {}
    },
    {
        "label": "broadcast",
        "kind": 5,
        "importPath": "common.channel",
        "description": "common.channel",
        "peekOfCode": "broadcast = Broadcast()",
        "detail": "common.channel",
        "documentation": {}
    },
    {
        "label": "ErrorLog",
        "kind": 6,
        "importPath": "errlog.entities",
        "description": "errlog.entities",
        "peekOfCode": "class ErrorLog(AuditUser):\n    __tablename__ = \"error_log\"\n    content = Column(JSONB)",
        "detail": "errlog.entities",
        "documentation": {}
    },
    {
        "label": "ErrorLogRepository",
        "kind": 6,
        "importPath": "errlog.repositories",
        "description": "errlog.repositories",
        "peekOfCode": "class ErrorLogRepository(BaseRepository[ErrorLog]):\n    def __init__(self) -> None:\n        super().__init__(ErrorLog)",
        "detail": "errlog.repositories",
        "documentation": {}
    },
    {
        "label": "ErrorLogBase",
        "kind": 6,
        "importPath": "errlog.schemas",
        "description": "errlog.schemas",
        "peekOfCode": "class ErrorLogBase(BaseModel):\n    content: Optional[Any] = None\nclass ErrorLog(ErrorLogBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass ErrorLogCreate(ErrorLogBase):\n    pass\nclass ErrorLogUpdate(ErrorLogBase):\n    pass",
        "detail": "errlog.schemas",
        "documentation": {}
    },
    {
        "label": "ErrorLog",
        "kind": 6,
        "importPath": "errlog.schemas",
        "description": "errlog.schemas",
        "peekOfCode": "class ErrorLog(ErrorLogBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass ErrorLogCreate(ErrorLogBase):\n    pass\nclass ErrorLogUpdate(ErrorLogBase):\n    pass",
        "detail": "errlog.schemas",
        "documentation": {}
    },
    {
        "label": "ErrorLogCreate",
        "kind": 6,
        "importPath": "errlog.schemas",
        "description": "errlog.schemas",
        "peekOfCode": "class ErrorLogCreate(ErrorLogBase):\n    pass\nclass ErrorLogUpdate(ErrorLogBase):\n    pass",
        "detail": "errlog.schemas",
        "documentation": {}
    },
    {
        "label": "ErrorLogUpdate",
        "kind": 6,
        "importPath": "errlog.schemas",
        "description": "errlog.schemas",
        "peekOfCode": "class ErrorLogUpdate(ErrorLogBase):\n    pass",
        "detail": "errlog.schemas",
        "documentation": {}
    },
    {
        "label": "ErrorLogService",
        "kind": 6,
        "importPath": "errlog.services",
        "description": "errlog.services",
        "peekOfCode": "class ErrorLogService(BaseService[ErrorLog, ErrorLogCreate, ErrorLogUpdate]):\n    def __int__(self):\n        super().__init__(ErrorLogRepository)",
        "detail": "errlog.services",
        "documentation": {}
    },
    {
        "label": "Role",
        "kind": 6,
        "importPath": "guards.enum",
        "description": "guards.enum",
        "peekOfCode": "class Role(StrEnum):\n    ADMINISTRATOR = auto()\n    LAB_MANAGER = \"LAB MANAGER\"\n    SCIENTIST = auto()\n    TECHNOLOGIST = auto()\n    LAB_HAND = \"LABORATORY HAND\"\n    GUEST = auto()\n    STORES = auto()\n    ACCOUNTING = auto()\nclass Resource(StrEnum):",
        "detail": "guards.enum",
        "documentation": {}
    },
    {
        "label": "Resource",
        "kind": 6,
        "importPath": "guards.enum",
        "description": "guards.enum",
        "peekOfCode": "class Resource(StrEnum):\n    ANALYTICS = auto()\n    CLIENT = auto()\n    PATIENT = auto()\n    SAMPLE = auto()\n    RESULT = auto()\n    WORKSHEET = auto()\n    PRODUCT = auto()\n    SHIPMENT = auto()\n    STORAGE = auto()",
        "detail": "guards.enum",
        "documentation": {}
    },
    {
        "label": "Access",
        "kind": 6,
        "importPath": "guards.enum",
        "description": "guards.enum",
        "peekOfCode": "class Access(StrEnum):\n    CREATE = auto()\n    READ = auto()\n    UPDATE = auto()\n    DELETE = auto()\n    SUBMIT = auto()\n    VERIFY = auto()\n    CANCEL = auto()\n    INVALIDATE = auto()\n    REJECT = auto()",
        "detail": "guards.enum",
        "documentation": {}
    },
    {
        "label": "IdSequence",
        "kind": 6,
        "importPath": "idsequencer.entities",
        "description": "idsequencer.entities",
        "peekOfCode": "class IdSequence(BaseEntity):\n    __tablename__ = \"id_sequence\"\n    prefix = Column(String, nullable=False, unique=True)\n    number = Column(Integer, nullable=False)\n    updated = Column(DateTime, default=datetime.now, onupdate=datetime.now)",
        "detail": "idsequencer.entities",
        "documentation": {}
    },
    {
        "label": "SequenceGenerateError",
        "kind": 6,
        "importPath": "idsequencer.exception",
        "description": "idsequencer.exception",
        "peekOfCode": "class SequenceGenerateError(Exception): ...\nclass IncompleDataError(Exception): ...",
        "detail": "idsequencer.exception",
        "documentation": {}
    },
    {
        "label": "IncompleDataError",
        "kind": 6,
        "importPath": "idsequencer.exception",
        "description": "idsequencer.exception",
        "peekOfCode": "class IncompleDataError(Exception): ...",
        "detail": "idsequencer.exception",
        "documentation": {}
    },
    {
        "label": "IdSequenceRepository",
        "kind": 6,
        "importPath": "idsequencer.repository",
        "description": "idsequencer.repository",
        "peekOfCode": "class IdSequenceRepository(BaseRepository[IdSequence]):\n    def __init__(self) -> None:\n        super().__init__(IdSequence)\n    async def next_number(self, prefix: str) -> int:\n        insert_stmt = (\n            insert(self.model)\n            .values(prefix=prefix, number=1)\n            .on_conflict_do_update(\n                index_elements=[\"prefix\"],\n                set_=dict(",
        "detail": "idsequencer.repository",
        "documentation": {}
    },
    {
        "label": "SEQUENCE_BEGIN",
        "kind": 5,
        "importPath": "idsequencer.repository",
        "description": "idsequencer.repository",
        "peekOfCode": "SEQUENCE_BEGIN = 5\nSEQUENCE_CUTOFF = 10\nclass IdSequenceRepository(BaseRepository[IdSequence]):\n    def __init__(self) -> None:\n        super().__init__(IdSequence)\n    async def next_number(self, prefix: str) -> int:\n        insert_stmt = (\n            insert(self.model)\n            .values(prefix=prefix, number=1)\n            .on_conflict_do_update(",
        "detail": "idsequencer.repository",
        "documentation": {}
    },
    {
        "label": "SEQUENCE_CUTOFF",
        "kind": 5,
        "importPath": "idsequencer.repository",
        "description": "idsequencer.repository",
        "peekOfCode": "SEQUENCE_CUTOFF = 10\nclass IdSequenceRepository(BaseRepository[IdSequence]):\n    def __init__(self) -> None:\n        super().__init__(IdSequence)\n    async def next_number(self, prefix: str) -> int:\n        insert_stmt = (\n            insert(self.model)\n            .values(prefix=prefix, number=1)\n            .on_conflict_do_update(\n                index_elements=[\"prefix\"],",
        "detail": "idsequencer.repository",
        "documentation": {}
    },
    {
        "label": "IdSequenceService",
        "kind": 6,
        "importPath": "idsequencer.service",
        "description": "idsequencer.service",
        "peekOfCode": "class IdSequenceService(BaseService[IdSequence, Dummy, Dummy]):\n    def __init__(self) -> None:\n        super().__init__(IdSequenceRepository)\n    async def get_next_number(\n        self, prefix: str = None, generic=False\n    ) -> tuple[int, str]:\n        if not prefix:\n            raise IncompleDataError(\"A prefix is required\")\n        prefix_year = str(datetime.now().year)[2:]\n        if generic:",
        "detail": "idsequencer.service",
        "documentation": {}
    },
    {
        "label": "IdSequence",
        "kind": 5,
        "importPath": "idsequencer.service",
        "description": "idsequencer.service",
        "peekOfCode": "IdSequence = TypeVar(\"IdSequence\")\nSEQUENCE_BEGIN = 5\nSEQUENCE_CUTOFF = 10\nclass IdSequenceService(BaseService[IdSequence, Dummy, Dummy]):\n    def __init__(self) -> None:\n        super().__init__(IdSequenceRepository)\n    async def get_next_number(\n        self, prefix: str = None, generic=False\n    ) -> tuple[int, str]:\n        if not prefix:",
        "detail": "idsequencer.service",
        "documentation": {}
    },
    {
        "label": "SEQUENCE_BEGIN",
        "kind": 5,
        "importPath": "idsequencer.service",
        "description": "idsequencer.service",
        "peekOfCode": "SEQUENCE_BEGIN = 5\nSEQUENCE_CUTOFF = 10\nclass IdSequenceService(BaseService[IdSequence, Dummy, Dummy]):\n    def __init__(self) -> None:\n        super().__init__(IdSequenceRepository)\n    async def get_next_number(\n        self, prefix: str = None, generic=False\n    ) -> tuple[int, str]:\n        if not prefix:\n            raise IncompleDataError(\"A prefix is required\")",
        "detail": "idsequencer.service",
        "documentation": {}
    },
    {
        "label": "SEQUENCE_CUTOFF",
        "kind": 5,
        "importPath": "idsequencer.service",
        "description": "idsequencer.service",
        "peekOfCode": "SEQUENCE_CUTOFF = 10\nclass IdSequenceService(BaseService[IdSequence, Dummy, Dummy]):\n    def __init__(self) -> None:\n        super().__init__(IdSequenceRepository)\n    async def get_next_number(\n        self, prefix: str = None, generic=False\n    ) -> tuple[int, str]:\n        if not prefix:\n            raise IncompleDataError(\"A prefix is required\")\n        prefix_year = str(datetime.now().year)[2:]",
        "detail": "idsequencer.service",
        "documentation": {}
    },
    {
        "label": "sequencer",
        "kind": 2,
        "importPath": "idsequencer.utils",
        "description": "idsequencer.utils",
        "peekOfCode": "def sequencer(value, count):\n    \"\"\"Generates a sequence with a specifies set count length\"\"\"\n    return f\"{'0' * (count - len(str(value)))}{value}\"\ndef sequence_alpha(value: str):\n    alphabet = list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    alphas = list(value)\n    total = len(value)\n    index = total - 1\n    while index > -1:\n        alpha = alphas[index]",
        "detail": "idsequencer.utils",
        "documentation": {}
    },
    {
        "label": "sequence_alpha",
        "kind": 2,
        "importPath": "idsequencer.utils",
        "description": "idsequencer.utils",
        "peekOfCode": "def sequence_alpha(value: str):\n    alphabet = list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    alphas = list(value)\n    total = len(value)\n    index = total - 1\n    while index > -1:\n        alpha = alphas[index]\n        if not alpha is alphabet[-1]:\n            alphas[index] = alphabet[alphabet.index(alpha) + 1]\n            reset = index + 1",
        "detail": "idsequencer.utils",
        "documentation": {}
    },
    {
        "label": "FelicityBarCoder",
        "kind": 6,
        "importPath": "impress.barcode.engine",
        "description": "impress.barcode.engine",
        "peekOfCode": "class FelicityBarCoder:\n    def __init__(\n        self, page_width=40.0, page_height=30.0, barcode_width=30, barcode_height=7.5\n    ):\n        assert page_width > barcode_width and page_height > barcode_height\n        self.pdf = FPDF(unit=\"mm\", format=(page_width, page_height))\n        self.pdf.set_auto_page_break(auto=False, margin=0.0)\n        self.margin_left = (self.pdf.w - barcode_width) / 2\n        self.margin_top = 3\n        self.txt_left = self.margin_left  # + 0.5",
        "detail": "impress.barcode.engine",
        "documentation": {}
    },
    {
        "label": "Barcode.default_writer_options[\"write_text\"]",
        "kind": 5,
        "importPath": "impress.barcode.engine",
        "description": "impress.barcode.engine",
        "peekOfCode": "Barcode.default_writer_options[\"write_text\"] = False\nImageWriter.human = \" \"\nclass FelicityBarCoder:\n    def __init__(\n        self, page_width=40.0, page_height=30.0, barcode_width=30, barcode_height=7.5\n    ):\n        assert page_width > barcode_width and page_height > barcode_height\n        self.pdf = FPDF(unit=\"mm\", format=(page_width, page_height))\n        self.pdf.set_auto_page_break(auto=False, margin=0.0)\n        self.margin_left = (self.pdf.w - barcode_width) / 2",
        "detail": "impress.barcode.engine",
        "documentation": {}
    },
    {
        "label": "ImageWriter.human",
        "kind": 5,
        "importPath": "impress.barcode.engine",
        "description": "impress.barcode.engine",
        "peekOfCode": "ImageWriter.human = \" \"\nclass FelicityBarCoder:\n    def __init__(\n        self, page_width=40.0, page_height=30.0, barcode_width=30, barcode_height=7.5\n    ):\n        assert page_width > barcode_width and page_height > barcode_height\n        self.pdf = FPDF(unit=\"mm\", format=(page_width, page_height))\n        self.pdf.set_auto_page_break(auto=False, margin=0.0)\n        self.margin_left = (self.pdf.w - barcode_width) / 2\n        self.margin_top = 3",
        "detail": "impress.barcode.engine",
        "documentation": {}
    },
    {
        "label": "BarCodeMeta",
        "kind": 6,
        "importPath": "impress.barcode.schema",
        "description": "impress.barcode.schema",
        "peekOfCode": "class BarCodeMeta(BaseModel):\n    label: str\n    value: str\nclass BarCode(BaseModel):\n    barcode: str\n    metadata: list[BarCodeMeta]",
        "detail": "impress.barcode.schema",
        "documentation": {}
    },
    {
        "label": "BarCode",
        "kind": 6,
        "importPath": "impress.barcode.schema",
        "description": "impress.barcode.schema",
        "peekOfCode": "class BarCode(BaseModel):\n    barcode: str\n    metadata: list[BarCodeMeta]",
        "detail": "impress.barcode.schema",
        "documentation": {}
    },
    {
        "label": "PDF",
        "kind": 6,
        "importPath": "impress.invoicing.engine",
        "description": "impress.invoicing.engine",
        "peekOfCode": "class PDF(FPDF):\n    def footer(self):\n        # Position cursor at 1.5 cm from bottom:\n        self.set_y(-15)\n        # Setting font: helvetica italic 8\n        self.set_font(\"helvetica\", \"I\", 8)\n        # Printing page number:\n        self.cell(0, 10, f\"Page {self.page_no()}/{{nb}}\", align=\"C\")\nclass FelicityInvoice:\n    def __init__(self):",
        "detail": "impress.invoicing.engine",
        "documentation": {}
    },
    {
        "label": "FelicityInvoice",
        "kind": 6,
        "importPath": "impress.invoicing.engine",
        "description": "impress.invoicing.engine",
        "peekOfCode": "class FelicityInvoice:\n    def __init__(self):\n        self.logo_path = settings.BASE_DIR + \"/assets/logo.png\"\n        self.pdf = PDF(orientation=\"P\", unit=\"mm\", format=\"A4\")\n        self.pdf.set_font(\"helvetica\", \"\", 13.0)\n        self.pdf.set_page_background((255, 255, 255))\n        self.pdf_w = 210\n        self.pdf_h = 297\n        self.margin_top = 20\n        self.margin_left = 10",
        "detail": "impress.invoicing.engine",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "impress.invoicing.engine",
        "description": "impress.invoicing.engine",
        "peekOfCode": "settings = get_settings()\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\nclass PDF(FPDF):\n    def footer(self):\n        # Position cursor at 1.5 cm from bottom:\n        self.set_y(-15)\n        # Setting font: helvetica italic 8\n        self.set_font(\"helvetica\", \"I\", 8)\n        # Printing page number:",
        "detail": "impress.invoicing.engine",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "impress.invoicing.engine",
        "description": "impress.invoicing.engine",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass PDF(FPDF):\n    def footer(self):\n        # Position cursor at 1.5 cm from bottom:\n        self.set_y(-15)\n        # Setting font: helvetica italic 8\n        self.set_font(\"helvetica\", \"I\", 8)\n        # Printing page number:\n        self.cell(0, 10, f\"Page {self.page_no()}/{{nb}}\", align=\"C\")\nclass FelicityInvoice:",
        "detail": "impress.invoicing.engine",
        "documentation": {}
    },
    {
        "label": "PDF",
        "kind": 6,
        "importPath": "impress.sample.engine",
        "description": "impress.sample.engine",
        "peekOfCode": "class PDF(FPDF):\n    def footer(self):\n        # Position cursor at 1.5 cm from bottom:\n        self.set_y(-15)\n        # Setting font: helvetica italic 8\n        self.set_font(\"helvetica\", \"I\", 8)\n        # Printing page number:\n        self.cell(0, 10, f\"Page {self.page_no()}/{{nb}}\", align=\"C\")\nclass FelicityImpress:\n    def __init__(self):",
        "detail": "impress.sample.engine",
        "documentation": {}
    },
    {
        "label": "FelicityImpress",
        "kind": 6,
        "importPath": "impress.sample.engine",
        "description": "impress.sample.engine",
        "peekOfCode": "class FelicityImpress:\n    def __init__(self):\n        self.logo_path = settings.BASE_DIR + \"/assets/logo.png\"\n        self.pdf = PDF(orientation=\"P\", unit=\"mm\", format=\"A4\")\n        self.pdf.set_font(\"Helvetica\")\n        self.pdf.set_page_background((255, 255, 255))\n        self.pdf_w = 210\n        self.pdf_h = 297\n        self.margin_top = 20\n        self.margin_left = 20",
        "detail": "impress.sample.engine",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "impress.sample.engine",
        "description": "impress.sample.engine",
        "peekOfCode": "settings = get_settings()\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\nclass PDF(FPDF):\n    def footer(self):\n        # Position cursor at 1.5 cm from bottom:\n        self.set_y(-15)\n        # Setting font: helvetica italic 8\n        self.set_font(\"helvetica\", \"I\", 8)\n        # Printing page number:",
        "detail": "impress.sample.engine",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "impress.sample.engine",
        "description": "impress.sample.engine",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass PDF(FPDF):\n    def footer(self):\n        # Position cursor at 1.5 cm from bottom:\n        self.set_y(-15)\n        # Setting font: helvetica italic 8\n        self.set_font(\"helvetica\", \"I\", 8)\n        # Printing page number:\n        self.cell(0, 10, f\"Page {self.page_no()}/{{nb}}\", align=\"C\")\nclass FelicityImpress:",
        "detail": "impress.sample.engine",
        "documentation": {}
    },
    {
        "label": "ReportImpressBase",
        "kind": 6,
        "importPath": "impress.sample.schemas",
        "description": "impress.sample.schemas",
        "peekOfCode": "class ReportImpressBase(BaseModel):\n    state: str | None = None\n    sample_uid: str | None = None\n    sample: Optional[SampleInDB] = None\n    json_content: Optional[dict] = {}\n    pdf_content: Optional[bytes] = None\n    email_required: bool | None = False\n    email_sent: bool | None = False\n    sms_required: bool | None = False\n    sms_sent: bool | None = False",
        "detail": "impress.sample.schemas",
        "documentation": {}
    },
    {
        "label": "ReportImpressBaseInDB",
        "kind": 6,
        "importPath": "impress.sample.schemas",
        "description": "impress.sample.schemas",
        "peekOfCode": "class ReportImpressBaseInDB(ReportImpressBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReportImpressCreate(ReportImpressBase):\n    pass\n# Properties to receive via API on update\nclass ReportImpressUpdate(ReportImpressBase):\n    pass",
        "detail": "impress.sample.schemas",
        "documentation": {}
    },
    {
        "label": "ReportImpressCreate",
        "kind": 6,
        "importPath": "impress.sample.schemas",
        "description": "impress.sample.schemas",
        "peekOfCode": "class ReportImpressCreate(ReportImpressBase):\n    pass\n# Properties to receive via API on update\nclass ReportImpressUpdate(ReportImpressBase):\n    pass",
        "detail": "impress.sample.schemas",
        "documentation": {}
    },
    {
        "label": "ReportImpressUpdate",
        "kind": 6,
        "importPath": "impress.sample.schemas",
        "description": "impress.sample.schemas",
        "peekOfCode": "class ReportImpressUpdate(ReportImpressBase):\n    pass",
        "detail": "impress.sample.schemas",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "impress.sample.tasks",
        "description": "impress.sample.tasks",
        "peekOfCode": "settings = get_settings()\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\nasync def impress_results(job_uid: str):\n    logger.info(f\"starting impress job {job_uid} ....\")\n    job = await job_entities.Job.get(uid=job_uid)\n    if not job:\n        return\n    if job.status != JobState.PENDING:\n        return",
        "detail": "impress.sample.tasks",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "impress.sample.tasks",
        "description": "impress.sample.tasks",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def impress_results(job_uid: str):\n    logger.info(f\"starting impress job {job_uid} ....\")\n    job = await job_entities.Job.get(uid=job_uid)\n    if not job:\n        return\n    if job.status != JobState.PENDING:\n        return\n    await job.change_status(new_status=JobState.RUNNING)\n    user = await user_entities.User.get(uid=job.creator_uid)",
        "detail": "impress.sample.tasks",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "impress.sample.utils",
        "description": "impress.sample.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\nexclude = [\n    \"auth\",\n    \"preference\",\n    \"groups\",\n    \"right\",\n    \"left\",\n    \"level\",\n    \"tree_id\",\n    \"parent_id\",",
        "detail": "impress.sample.utils",
        "documentation": {}
    },
    {
        "label": "exclude",
        "kind": 5,
        "importPath": "impress.sample.utils",
        "description": "impress.sample.utils",
        "peekOfCode": "exclude = [\n    \"auth\",\n    \"preference\",\n    \"groups\",\n    \"right\",\n    \"left\",\n    \"level\",\n    \"tree_id\",\n    \"parent_id\",\n    \"parent\",",
        "detail": "impress.sample.utils",
        "documentation": {}
    },
    {
        "label": "PDF",
        "kind": 6,
        "importPath": "impress.shipment.engine",
        "description": "impress.shipment.engine",
        "peekOfCode": "class PDF(FPDF):\n    def header(self):\n        # Rendering logo:\n        # self.image(\"../docs/fpdf2-logo.png\", 10, 8, 33)\n        # Setting font: helvetica bold 15\n        self.set_font(\"helvetica\", \"B\", 15)\n        # Moving cursor to the right:\n        self.cell(1)\n        # Printing title:\n        self.cell(60, 10, \"Felicity Shipment Mannifest\", border=1, align=\"C\")",
        "detail": "impress.shipment.engine",
        "documentation": {}
    },
    {
        "label": "ManifetReport",
        "kind": 6,
        "importPath": "impress.shipment.engine",
        "description": "impress.shipment.engine",
        "peekOfCode": "class ManifetReport:\n    def __init__(self):\n        self.pdf = PDF(orientation=\"P\", unit=\"mm\", format=\"A4\")\n        self.pdf.set_font(\"Helvetica\")\n        self.pdf.set_page_background((255, 255, 255))\n        self.pdf_w = 210\n        self.pdf_h = 297\n        self.margin_top = 20\n        self.margin_left = 10\n        self.y_diff = 5  # space between rows",
        "detail": "impress.shipment.engine",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "impress.shipment.engine",
        "description": "impress.shipment.engine",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass PDF(FPDF):\n    def header(self):\n        # Rendering logo:\n        # self.image(\"../docs/fpdf2-logo.png\", 10, 8, 33)\n        # Setting font: helvetica bold 15\n        self.set_font(\"helvetica\", \"B\", 15)\n        # Moving cursor to the right:\n        self.cell(1)\n        # Printing title:",
        "detail": "impress.shipment.engine",
        "documentation": {}
    },
    {
        "label": "ReportImpress",
        "kind": 6,
        "importPath": "impress.entities",
        "description": "impress.entities",
        "peekOfCode": "class ReportImpress(AuditHistory):\n    __tablename__ = \"report_impress\"\n    state = Column(String)  # preliminary, final, invalidated\n    sample_uid = Column(String, ForeignKey(\"sample.uid\"), nullable=False)\n    sample = relationship(Sample, foreign_keys=[sample_uid], lazy=\"selectin\")\n    json_content: dict = Column(JSONB, nullable=True)\n    pdf_content = Column(LargeBinary, nullable=True)\n    email_required = Column(Boolean(), default=False)\n    email_sent = Column(Boolean(), default=False)\n    sms_required = Column(Boolean(), default=False)",
        "detail": "impress.entities",
        "documentation": {}
    },
    {
        "label": "ReportImpressRepository",
        "kind": 6,
        "importPath": "impress.repository",
        "description": "impress.repository",
        "peekOfCode": "class ReportImpressRepository(BaseRepository[ReportImpress]):\n    def __init__(self) -> None:\n        super().__init__(ReportImpress)",
        "detail": "impress.repository",
        "documentation": {}
    },
    {
        "label": "ReportImpressService",
        "kind": 6,
        "importPath": "impress.services",
        "description": "impress.services",
        "peekOfCode": "class ReportImpressService(\n    BaseService[ReportImpress, ReportImpressCreate, ReportImpressUpdate]\n):\n    def __init__(self):\n        self.sample_service = SampleService()\n        self.activity_stream_service = ActivityStreamService()\n        self.job_service = JobService()\n        self.user_service = UserService()\n        self.notification_service = NotificationService()\n        super().__init__(ReportImpressRepository)",
        "detail": "impress.services",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "impress.services",
        "description": "impress.services",
        "peekOfCode": "settings = get_settings()\nclass ReportImpressService(\n    BaseService[ReportImpress, ReportImpressCreate, ReportImpressUpdate]\n):\n    def __init__(self):\n        self.sample_service = SampleService()\n        self.activity_stream_service = ActivityStreamService()\n        self.job_service = JobService()\n        self.user_service = UserService()\n        self.notification_service = NotificationService()",
        "detail": "impress.services",
        "documentation": {}
    },
    {
        "label": "Method",
        "kind": 6,
        "importPath": "instrument.entities",
        "description": "instrument.entities",
        "peekOfCode": "class Method(AuditUser):\n    \"\"\"Method\n    analytical method\n    \"\"\"\n    __tablename__ = \"method\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)\n    keyword = Column(String, nullable=True)\n    instruments = relationship(\n        \"Instrument\",",
        "detail": "instrument.entities",
        "documentation": {}
    },
    {
        "label": "InstrumentType",
        "kind": 6,
        "importPath": "instrument.entities",
        "description": "instrument.entities",
        "peekOfCode": "class InstrumentType(AuditUser):\n    \"\"\"Instrument Type\"\"\"\n    __tablename__ = \"instrument_type\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\nclass Instrument(AuditUser):\n    \"\"\"Instrument/Analyser\"\"\"\n    __tablename__ = \"instrument\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)",
        "detail": "instrument.entities",
        "documentation": {}
    },
    {
        "label": "Instrument",
        "kind": 6,
        "importPath": "instrument.entities",
        "description": "instrument.entities",
        "peekOfCode": "class Instrument(AuditUser):\n    \"\"\"Instrument/Analyser\"\"\"\n    __tablename__ = \"instrument\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)\n    keyword = Column(String, nullable=True)\n    instrument_type_uid = Column(\n        String, ForeignKey(\"instrument_type.uid\"), nullable=True\n    )\n    instrument_type = relationship(\"InstrumentType\", lazy=\"selectin\")",
        "detail": "instrument.entities",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrument",
        "kind": 6,
        "importPath": "instrument.entities",
        "description": "instrument.entities",
        "peekOfCode": "class LaboratoryInstrument(AuditUser):\n    \"\"\"Laboratory Instrument\"\"\"\n    __tablename__ = \"laboratory_instrument\"\n    instrument_uid = Column(String, ForeignKey(\"instrument.uid\"), nullable=False)\n    instrument = relationship(\"Instrument\", lazy=\"selectin\")\n    lab_name = Column(String, nullable=False)\n    serial_number = Column(String, nullable=False)\n    date_commissioned = Column(DateTime, nullable=True)\n    date_decommissioned = Column(DateTime, nullable=True)\nclass InstrumentCalibration(AuditUser):",
        "detail": "instrument.entities",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibration",
        "kind": 6,
        "importPath": "instrument.entities",
        "description": "instrument.entities",
        "peekOfCode": "class InstrumentCalibration(AuditUser):\n    \"\"\"Laboratory Instrument Calibration Task\n    -   ensures the measurement accuracy of an instrument meets a known standard\n    -   Is it still accurate?\n    \"\"\"\n    __tablename__ = \"instrument_calibration\"\n    laboratory_instrument_uid = Column(\n        String, ForeignKey(\"laboratory_instrument.uid\"), nullable=False\n    )\n    laboratory_instrument = relationship(\"LaboratoryInstrument\", lazy=\"selectin\")",
        "detail": "instrument.entities",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificate",
        "kind": 6,
        "importPath": "instrument.entities",
        "description": "instrument.entities",
        "peekOfCode": "class CalibrationCertificate(AuditUser):\n    \"\"\"Instrument Calibration Certificate\"\"\"\n    __tablename__ = \"calibration_certificate\"\n    laboratory_instrument_uid = Column(\n        String, ForeignKey(\"laboratory_instrument.uid\"), nullable=False\n    )\n    laboratory_instrument = relationship(\"LaboratoryInstrument\", lazy=\"selectin\")\n    certificate_code = Column(String, index=True, unique=True, nullable=False)\n    certificate = Column(LargeBinary, nullable=True)\n    internal = Column(Boolean(), nullable=False)",
        "detail": "instrument.entities",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetence",
        "kind": 6,
        "importPath": "instrument.entities",
        "description": "instrument.entities",
        "peekOfCode": "class InstrumentCompetence(AuditUser):\n    __tablename__ = \"instrument_competence\"\n    instrument_uid = Column(String, ForeignKey(\"instrument.uid\"), nullable=False)\n    instrument = relationship(\"Instrument\", lazy=\"selectin\")\n    description = Column(String, default=\"competent\", nullable=True)\n    user_uid = Column(String, ForeignKey(\"user.uid\"), nullable=False)\n    user = relationship(\n        User, foreign_keys=[user_uid], backref=\"user_uid\", lazy=\"selectin\"\n    )\n    issue_date = Column(DateTime, nullable=False)",
        "detail": "instrument.entities",
        "documentation": {}
    },
    {
        "label": "method_instrument",
        "kind": 5,
        "importPath": "instrument.entities",
        "description": "instrument.entities",
        "peekOfCode": "method_instrument = Table(\n    \"method_instrument\",\n    BaseEntity.metadata,\n    Column(\"method_uid\", ForeignKey(\"method.uid\"), primary_key=True),\n    Column(\"instrument_uid\", ForeignKey(\"instrument.uid\"), primary_key=True),\n)\nclass Method(AuditUser):\n    \"\"\"Method\n    analytical method\n    \"\"\"",
        "detail": "instrument.entities",
        "documentation": {}
    },
    {
        "label": "MethodRepository",
        "kind": 6,
        "importPath": "instrument.repository",
        "description": "instrument.repository",
        "peekOfCode": "class MethodRepository(BaseRepository[Method]):\n    def __init__(self) -> None:\n        super().__init__(Method)\nclass InstrumentRepository(BaseRepository[Instrument]):\n    def __init__(self) -> None:\n        super().__init__(Instrument)\nclass LaboratoryInstrumentRepository(\n    BaseRepository[LaboratoryInstrument],\n):\n    def __init__(",
        "detail": "instrument.repository",
        "documentation": {}
    },
    {
        "label": "InstrumentRepository",
        "kind": 6,
        "importPath": "instrument.repository",
        "description": "instrument.repository",
        "peekOfCode": "class InstrumentRepository(BaseRepository[Instrument]):\n    def __init__(self) -> None:\n        super().__init__(Instrument)\nclass LaboratoryInstrumentRepository(\n    BaseRepository[LaboratoryInstrument],\n):\n    def __init__(\n        self,\n    ):\n        super().__init__(LaboratoryInstrument)",
        "detail": "instrument.repository",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentRepository",
        "kind": 6,
        "importPath": "instrument.repository",
        "description": "instrument.repository",
        "peekOfCode": "class LaboratoryInstrumentRepository(\n    BaseRepository[LaboratoryInstrument],\n):\n    def __init__(\n        self,\n    ):\n        super().__init__(LaboratoryInstrument)\nclass InstrumentTypeRepository(BaseRepository[InstrumentType]):\n    def __init__(self) -> None:\n        super().__init__(InstrumentType)",
        "detail": "instrument.repository",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeRepository",
        "kind": 6,
        "importPath": "instrument.repository",
        "description": "instrument.repository",
        "peekOfCode": "class InstrumentTypeRepository(BaseRepository[InstrumentType]):\n    def __init__(self) -> None:\n        super().__init__(InstrumentType)\nclass InstrumentCalibrationRepository(BaseRepository[InstrumentCalibration]):\n    def __init__(self) -> None:\n        super().__init__(InstrumentCalibration)\nclass CalibrationCertificateRepository(BaseRepository[CalibrationCertificate]):\n    def __init__(self) -> None:\n        super().__init__(CalibrationCertificate)\nclass InstrumentCompetenceRepository(",
        "detail": "instrument.repository",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibrationRepository",
        "kind": 6,
        "importPath": "instrument.repository",
        "description": "instrument.repository",
        "peekOfCode": "class InstrumentCalibrationRepository(BaseRepository[InstrumentCalibration]):\n    def __init__(self) -> None:\n        super().__init__(InstrumentCalibration)\nclass CalibrationCertificateRepository(BaseRepository[CalibrationCertificate]):\n    def __init__(self) -> None:\n        super().__init__(CalibrationCertificate)\nclass InstrumentCompetenceRepository(\n    BaseRepository[InstrumentCompetence],\n):\n    def __init__(",
        "detail": "instrument.repository",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificateRepository",
        "kind": 6,
        "importPath": "instrument.repository",
        "description": "instrument.repository",
        "peekOfCode": "class CalibrationCertificateRepository(BaseRepository[CalibrationCertificate]):\n    def __init__(self) -> None:\n        super().__init__(CalibrationCertificate)\nclass InstrumentCompetenceRepository(\n    BaseRepository[InstrumentCompetence],\n):\n    def __init__(\n        self,\n    ):\n        super().__init__(InstrumentCompetence)",
        "detail": "instrument.repository",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetenceRepository",
        "kind": 6,
        "importPath": "instrument.repository",
        "description": "instrument.repository",
        "peekOfCode": "class InstrumentCompetenceRepository(\n    BaseRepository[InstrumentCompetence],\n):\n    def __init__(\n        self,\n    ):\n        super().__init__(InstrumentCompetence)",
        "detail": "instrument.repository",
        "documentation": {}
    },
    {
        "label": "SEQUENCE_BEGIN",
        "kind": 5,
        "importPath": "instrument.repository",
        "description": "instrument.repository",
        "peekOfCode": "SEQUENCE_BEGIN = 5\nSEQUENCE_CUTOFF = 10\nclass MethodRepository(BaseRepository[Method]):\n    def __init__(self) -> None:\n        super().__init__(Method)\nclass InstrumentRepository(BaseRepository[Instrument]):\n    def __init__(self) -> None:\n        super().__init__(Instrument)\nclass LaboratoryInstrumentRepository(\n    BaseRepository[LaboratoryInstrument],",
        "detail": "instrument.repository",
        "documentation": {}
    },
    {
        "label": "SEQUENCE_CUTOFF",
        "kind": 5,
        "importPath": "instrument.repository",
        "description": "instrument.repository",
        "peekOfCode": "SEQUENCE_CUTOFF = 10\nclass MethodRepository(BaseRepository[Method]):\n    def __init__(self) -> None:\n        super().__init__(Method)\nclass InstrumentRepository(BaseRepository[Instrument]):\n    def __init__(self) -> None:\n        super().__init__(Instrument)\nclass LaboratoryInstrumentRepository(\n    BaseRepository[LaboratoryInstrument],\n):",
        "detail": "instrument.repository",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeBase",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class InstrumentTypeBase(BaseAuditModel):\n    name: str | None = None\n    description: str | None = None\n    active: bool | None = True\nclass InstrumentTypeBaseInDB(InstrumentTypeBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass InstrumentTypeCreate(InstrumentTypeBase):\n    pass",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeBaseInDB",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class InstrumentTypeBaseInDB(InstrumentTypeBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass InstrumentTypeCreate(InstrumentTypeBase):\n    pass\n# Properties to receive via API on update\nclass InstrumentTypeUpdate(InstrumentTypeBase):\n    pass\n# Properties to return via API",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeCreate",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class InstrumentTypeCreate(InstrumentTypeBase):\n    pass\n# Properties to receive via API on update\nclass InstrumentTypeUpdate(InstrumentTypeBase):\n    pass\n# Properties to return via API\nclass InstrumentType(InstrumentTypeBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisCategoryInDB(InstrumentTypeBaseInDB):",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeUpdate",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class InstrumentTypeUpdate(InstrumentTypeBase):\n    pass\n# Properties to return via API\nclass InstrumentType(InstrumentTypeBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisCategoryInDB(InstrumentTypeBaseInDB):\n    pass\n#\n#  Instrument",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentType",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class InstrumentType(InstrumentTypeBaseInDB):\n    pass\n# Properties stored in DB\nclass AnalysisCategoryInDB(InstrumentTypeBaseInDB):\n    pass\n#\n#  Instrument\n#\n# Shared properties\nclass InstrumentBase(BaseModel):",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "AnalysisCategoryInDB",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class AnalysisCategoryInDB(InstrumentTypeBaseInDB):\n    pass\n#\n#  Instrument\n#\n# Shared properties\nclass InstrumentBase(BaseModel):\n    name: str\n    description: str | None = None\n    keyword: str | None = None",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentBase",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class InstrumentBase(BaseModel):\n    name: str\n    description: str | None = None\n    keyword: str | None = None\n    instrument_type_uid: str | None = None\n    instrument_type: InstrumentType | None = None\n    manufacturer_uid: str | None = None\n    manufacturer: ManufacturerInDB | None = None\n    supplier_uid: str | None = None\n    supplier: SupplierInDB | None = None",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCreate",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class InstrumentCreate(InstrumentBase):\n    supplier_uid: str | None = None\n    keyword: str | None = None\n    instrument_type_uid: str | None = None\n    manufacturer_uid: str | None = None\n# Properties to receive via API on update\nclass InstrumentUpdate(InstrumentBase):\n    supplier_uid: str | None = None\nclass InstrumentInDBBase(InstrumentBase):\n    uid: str",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentUpdate",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class InstrumentUpdate(InstrumentBase):\n    supplier_uid: str | None = None\nclass InstrumentInDBBase(InstrumentBase):\n    uid: str\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Instrument(InstrumentInDBBase):\n    pass\n# Additional properties stored in DB\nclass InstrumentInDB(InstrumentInDBBase):",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentInDBBase",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class InstrumentInDBBase(InstrumentBase):\n    uid: str\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Instrument(InstrumentInDBBase):\n    pass\n# Additional properties stored in DB\nclass InstrumentInDB(InstrumentInDBBase):\n    pass\n#",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "Instrument",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class Instrument(InstrumentInDBBase):\n    pass\n# Additional properties stored in DB\nclass InstrumentInDB(InstrumentInDBBase):\n    pass\n#\n# Laboratory Instrument\n#\n# Shared properties\nclass LaboratoryInstrumentBase(BaseModel):",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentInDB",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class InstrumentInDB(InstrumentInDBBase):\n    pass\n#\n# Laboratory Instrument\n#\n# Shared properties\nclass LaboratoryInstrumentBase(BaseModel):\n    instrument_uid: str | None = None\n    instrument: Instrument | None = None\n    lab_name: str | None = None",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentBase",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class LaboratoryInstrumentBase(BaseModel):\n    instrument_uid: str | None = None\n    instrument: Instrument | None = None\n    lab_name: str | None = None\n    serial_number: str | None = None\n    date_commissioned: datetime | None = None\n    date_decommissioned: datetime | None = None\n# Properties to receive via API on creation\nclass LaboratoryInstrumentCreate(LaboratoryInstrumentBase):\n    instrument_uid: str",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentCreate",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class LaboratoryInstrumentCreate(LaboratoryInstrumentBase):\n    instrument_uid: str\n# Properties to receive via API on update\nclass LaboratoryInstrumentUpdate(LaboratoryInstrumentBase):\n    pass\nclass LaboratoryInstrumentInDBBase(LaboratoryInstrumentBase):\n    uid: str\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass LaboratoryInstrument(LaboratoryInstrumentInDBBase):",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentUpdate",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class LaboratoryInstrumentUpdate(LaboratoryInstrumentBase):\n    pass\nclass LaboratoryInstrumentInDBBase(LaboratoryInstrumentBase):\n    uid: str\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass LaboratoryInstrument(LaboratoryInstrumentInDBBase):\n    pass\n# Additional properties stored in DB\nclass LaboratoryInstrumentInDB(LaboratoryInstrumentInDBBase):",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentInDBBase",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class LaboratoryInstrumentInDBBase(LaboratoryInstrumentBase):\n    uid: str\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass LaboratoryInstrument(LaboratoryInstrumentInDBBase):\n    pass\n# Additional properties stored in DB\nclass LaboratoryInstrumentInDB(LaboratoryInstrumentInDBBase):\n    pass\n#",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrument",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class LaboratoryInstrument(LaboratoryInstrumentInDBBase):\n    pass\n# Additional properties stored in DB\nclass LaboratoryInstrumentInDB(LaboratoryInstrumentInDBBase):\n    pass\n#\n#  InstrumentCalibration\n#\n# Shared properties\nclass InstrumentCalibrationBase(BaseModel):",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentInDB",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class LaboratoryInstrumentInDB(LaboratoryInstrumentInDBBase):\n    pass\n#\n#  InstrumentCalibration\n#\n# Shared properties\nclass InstrumentCalibrationBase(BaseModel):\n    laboratory_instrument_uid: str\n    laboratory_instrument: Optional[LaboratoryInstrument] = None\n    calibration_id: str",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibrationBase",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class InstrumentCalibrationBase(BaseModel):\n    laboratory_instrument_uid: str\n    laboratory_instrument: Optional[LaboratoryInstrument] = None\n    calibration_id: str\n    date_reported: datetime\n    report_id: str\n    performed_by: str\n    start_date: datetime\n    end_date: datetime\n    notes_before: str",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibrationCreate",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class InstrumentCalibrationCreate(InstrumentCalibrationBase):\n    pass\n# Properties to receive via API on update\nclass InstrumentCalibrationUpdate(InstrumentCalibrationBase):\n    pass\nclass InstrumentCalibrationInDBBase(InstrumentCalibrationBase):\n    uid: str = None\nmodel_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass InstrumentCalibration(InstrumentCalibrationInDBBase):",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibrationUpdate",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class InstrumentCalibrationUpdate(InstrumentCalibrationBase):\n    pass\nclass InstrumentCalibrationInDBBase(InstrumentCalibrationBase):\n    uid: str = None\nmodel_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass InstrumentCalibration(InstrumentCalibrationInDBBase):\n    pass\n# Additional properties stored in DB\nclass InstrumentCalibrationInDB(InstrumentCalibrationInDBBase):",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibrationInDBBase",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class InstrumentCalibrationInDBBase(InstrumentCalibrationBase):\n    uid: str = None\nmodel_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass InstrumentCalibration(InstrumentCalibrationInDBBase):\n    pass\n# Additional properties stored in DB\nclass InstrumentCalibrationInDB(InstrumentCalibrationInDBBase):\n    pass\n#",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibration",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class InstrumentCalibration(InstrumentCalibrationInDBBase):\n    pass\n# Additional properties stored in DB\nclass InstrumentCalibrationInDB(InstrumentCalibrationInDBBase):\n    pass\n#\n#  CalibrationCertificate\n#\n# Shared properties\nclass CalibrationCertificateBase(BaseModel):",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibrationInDB",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class InstrumentCalibrationInDB(InstrumentCalibrationInDBBase):\n    pass\n#\n#  CalibrationCertificate\n#\n# Shared properties\nclass CalibrationCertificateBase(BaseModel):\n    laboratory_instrument_uid: str\n    laboratory_instrument: Optional[LaboratoryInstrument] = None\n    certificate_code: str",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificateBase",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class CalibrationCertificateBase(BaseModel):\n    laboratory_instrument_uid: str\n    laboratory_instrument: Optional[LaboratoryInstrument] = None\n    certificate_code: str\n    internal: bool = True\n    issuer: str\n    date_issued: datetime\n    valid_from_date: datetime\n    valid_to_date: datetime\n    performed_by: str",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificateCreate",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class CalibrationCertificateCreate(CalibrationCertificateBase):\n    pass\n# Properties to receive via API on update\nclass CalibrationCertificateUpdate(CalibrationCertificateBase):\n    pass\nclass CalibrationCertificateInDBBase(CalibrationCertificateBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass CalibrationCertificate(CalibrationCertificateInDBBase):",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificateUpdate",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class CalibrationCertificateUpdate(CalibrationCertificateBase):\n    pass\nclass CalibrationCertificateInDBBase(CalibrationCertificateBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass CalibrationCertificate(CalibrationCertificateInDBBase):\n    pass\n# Additional properties stored in DB\nclass CalibrationCertificateInDB(CalibrationCertificateInDBBase):",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificateInDBBase",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class CalibrationCertificateInDBBase(CalibrationCertificateBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass CalibrationCertificate(CalibrationCertificateInDBBase):\n    pass\n# Additional properties stored in DB\nclass CalibrationCertificateInDB(CalibrationCertificateInDBBase):\n    pass\n#",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificate",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class CalibrationCertificate(CalibrationCertificateInDBBase):\n    pass\n# Additional properties stored in DB\nclass CalibrationCertificateInDB(CalibrationCertificateInDBBase):\n    pass\n#\n#  InstrumentCompetence\n#\n# Shared properties\nclass InstrumentCompetenceBase(BaseModel):",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificateInDB",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class CalibrationCertificateInDB(CalibrationCertificateInDBBase):\n    pass\n#\n#  InstrumentCompetence\n#\n# Shared properties\nclass InstrumentCompetenceBase(BaseModel):\n    instrument_uid: str\n    instrument: Optional[Instrument] = None\n    description: str",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetenceBase",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class InstrumentCompetenceBase(BaseModel):\n    instrument_uid: str\n    instrument: Optional[Instrument] = None\n    description: str\n    user_uid: str\n    issue_date: datetime\n    expiry_date: datetime\n    internal: bool\n    competence: str\n# Properties to receive via API on creation",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetenceCreate",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class InstrumentCompetenceCreate(InstrumentCompetenceBase):\n    pass\n# Properties to receive via API on update\nclass InstrumentCompetenceUpdate(InstrumentCompetenceBase):\n    pass\nclass InstrumentCompetenceInDBBase(InstrumentCompetenceBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass InstrumentCompetence(InstrumentCompetenceInDBBase):",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetenceUpdate",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class InstrumentCompetenceUpdate(InstrumentCompetenceBase):\n    pass\nclass InstrumentCompetenceInDBBase(InstrumentCompetenceBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass InstrumentCompetence(InstrumentCompetenceInDBBase):\n    pass\n# Additional properties stored in DB\nclass InstrumentCompetenceInDB(InstrumentCompetenceInDBBase):",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetenceInDBBase",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class InstrumentCompetenceInDBBase(InstrumentCompetenceBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass InstrumentCompetence(InstrumentCompetenceInDBBase):\n    pass\n# Additional properties stored in DB\nclass InstrumentCompetenceInDB(InstrumentCompetenceInDBBase):\n    pass\n#",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetence",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class InstrumentCompetence(InstrumentCompetenceInDBBase):\n    pass\n# Additional properties stored in DB\nclass InstrumentCompetenceInDB(InstrumentCompetenceInDBBase):\n    pass\n#\n#  Method\n#\n# Shared properties\nclass MethodBase(BaseModel):",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetenceInDB",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class InstrumentCompetenceInDB(InstrumentCompetenceInDBBase):\n    pass\n#\n#  Method\n#\n# Shared properties\nclass MethodBase(BaseModel):\n    name: str = None\n    description: str = None\n    keyword: str = None",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "MethodBase",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class MethodBase(BaseModel):\n    name: str = None\n    description: str = None\n    keyword: str = None\n    instruments: Optional[List[Instrument]] = []\n# Properties to receive via API on creation\nclass MethodCreate(MethodBase):\n    pass\n# Properties to receive via API on update\nclass MethodUpdate(MethodBase):",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "MethodCreate",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class MethodCreate(MethodBase):\n    pass\n# Properties to receive via API on update\nclass MethodUpdate(MethodBase):\n    pass\nclass MethodInDBBase(MethodBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Method(MethodInDBBase):",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "MethodUpdate",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class MethodUpdate(MethodBase):\n    pass\nclass MethodInDBBase(MethodBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Method(MethodInDBBase):\n    pass\n# Additional properties stored in DB\nclass MethodInDB(MethodInDBBase):",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "MethodInDBBase",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class MethodInDBBase(MethodBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Method(MethodInDBBase):\n    pass\n# Additional properties stored in DB\nclass MethodInDB(MethodInDBBase):\n    pass",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "Method",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class Method(MethodInDBBase):\n    pass\n# Additional properties stored in DB\nclass MethodInDB(MethodInDBBase):\n    pass",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "MethodInDB",
        "kind": 6,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "class MethodInDB(MethodInDBBase):\n    pass",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "model_config",
        "kind": 5,
        "importPath": "instrument.schemas",
        "description": "instrument.schemas",
        "peekOfCode": "model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass InstrumentCalibration(InstrumentCalibrationInDBBase):\n    pass\n# Additional properties stored in DB\nclass InstrumentCalibrationInDB(InstrumentCalibrationInDBBase):\n    pass\n#\n#  CalibrationCertificate\n#",
        "detail": "instrument.schemas",
        "documentation": {}
    },
    {
        "label": "MethodService",
        "kind": 6,
        "importPath": "instrument.services",
        "description": "instrument.services",
        "peekOfCode": "class MethodService(\n    BaseService[Method, MethodCreate, MethodUpdate],\n):\n    def __init__(\n        self,\n    ):\n        super().__init__(MethodRepository)\nclass InstrumentTypeService(\n    BaseService[InstrumentType, InstrumentTypeCreate, InstrumentTypeUpdate],\n):",
        "detail": "instrument.services",
        "documentation": {}
    },
    {
        "label": "InstrumentTypeService",
        "kind": 6,
        "importPath": "instrument.services",
        "description": "instrument.services",
        "peekOfCode": "class InstrumentTypeService(\n    BaseService[InstrumentType, InstrumentTypeCreate, InstrumentTypeUpdate],\n):\n    def __init__(\n        self,\n    ):\n        super().__init__(InstrumentTypeRepository)\nclass InstrumentService(\n    BaseService[Instrument, InstrumentCreate, InstrumentUpdate],\n):",
        "detail": "instrument.services",
        "documentation": {}
    },
    {
        "label": "InstrumentService",
        "kind": 6,
        "importPath": "instrument.services",
        "description": "instrument.services",
        "peekOfCode": "class InstrumentService(\n    BaseService[Instrument, InstrumentCreate, InstrumentUpdate],\n):\n    def __init__(\n        self,\n    ):\n        super().__init__(InstrumentRepository)\nclass LaboratoryInstrumentService(\n    BaseService[\n        LaboratoryInstrument, LaboratoryInstrumentCreate, LaboratoryInstrumentUpdate",
        "detail": "instrument.services",
        "documentation": {}
    },
    {
        "label": "LaboratoryInstrumentService",
        "kind": 6,
        "importPath": "instrument.services",
        "description": "instrument.services",
        "peekOfCode": "class LaboratoryInstrumentService(\n    BaseService[\n        LaboratoryInstrument, LaboratoryInstrumentCreate, LaboratoryInstrumentUpdate\n    ],\n):\n    def __init__(\n        self,\n    ):\n        super().__init__(LaboratoryInstrumentRepository)\nclass InstrumentCalibrationService(",
        "detail": "instrument.services",
        "documentation": {}
    },
    {
        "label": "InstrumentCalibrationService",
        "kind": 6,
        "importPath": "instrument.services",
        "description": "instrument.services",
        "peekOfCode": "class InstrumentCalibrationService(\n    BaseService[\n        InstrumentCalibration, InstrumentCalibrationCreate, InstrumentCalibrationUpdate\n    ],\n):\n    id_service = IdSequenceService()\n    def __init__(\n        self,\n    ):\n        super().__init__(InstrumentCalibrationRepository)",
        "detail": "instrument.services",
        "documentation": {}
    },
    {
        "label": "CalibrationCertificateService",
        "kind": 6,
        "importPath": "instrument.services",
        "description": "instrument.services",
        "peekOfCode": "class CalibrationCertificateService(\n    BaseService[\n        CalibrationCertificate,\n        CalibrationCertificateCreate,\n        CalibrationCertificateUpdate,\n    ],\n):\n    def __init__(\n        self,\n    ):",
        "detail": "instrument.services",
        "documentation": {}
    },
    {
        "label": "InstrumentCompetenceService",
        "kind": 6,
        "importPath": "instrument.services",
        "description": "instrument.services",
        "peekOfCode": "class InstrumentCompetenceService(\n    BaseService[\n        InstrumentCompetence, InstrumentCompetenceCreate, InstrumentCompetenceUpdate\n    ],\n):\n    def __init__(\n        self,\n    ):\n        super().__init__(InstrumentCompetenceRepository)",
        "detail": "instrument.services",
        "documentation": {}
    },
    {
        "label": "StockItem",
        "kind": 6,
        "importPath": "inventory.entities",
        "description": "inventory.entities",
        "peekOfCode": "class StockItem(AuditUser):\n    \"\"\"StockItem Standardization\"\"\"\n    __tablename__ = \"stock_item\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    category_uid = Column(String, ForeignKey(\"stock_category.uid\"), nullable=True)\n    category = relationship(\"StockCategory\", lazy=\"selectin\")\n    hazard_uid = Column(String, ForeignKey(\"hazard.uid\"), nullable=True)\n    hazard = relationship(\"Hazard\", lazy=\"selectin\")\n    minimum_level = Column(Integer, nullable=True)",
        "detail": "inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockItemVariant",
        "kind": 6,
        "importPath": "inventory.entities",
        "description": "inventory.entities",
        "peekOfCode": "class StockItemVariant(AuditUser):\n    \"\"\"StockItem Variant as the StockProduct\"\"\"\n    __tablename__ = \"stock_item_variant\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    stock_item_uid = Column(String, ForeignKey(\"stock_item.uid\"), nullable=True)\n    stock_item = relationship(\"StockItem\", lazy=\"selectin\")\n    minimum_level = Column(Integer, nullable=True)\n    maximum_level = Column(Integer, nullable=True)\nclass StockCategory(AuditUser):",
        "detail": "inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockCategory",
        "kind": 6,
        "importPath": "inventory.entities",
        "description": "inventory.entities",
        "peekOfCode": "class StockCategory(AuditUser):\n    \"\"\"StockCategory\n    Consumable, Reagents, Durables\n    \"\"\"\n    __tablename__ = \"stock_category\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\nclass Hazard(AuditUser):\n    \"\"\"Hazard\"\"\"\n    __tablename__ = \"hazard\"",
        "detail": "inventory.entities",
        "documentation": {}
    },
    {
        "label": "Hazard",
        "kind": 6,
        "importPath": "inventory.entities",
        "description": "inventory.entities",
        "peekOfCode": "class Hazard(AuditUser):\n    \"\"\"Hazard\"\"\"\n    __tablename__ = \"hazard\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\nclass StockUnit(AuditUser):\n    __tablename__ = \"stock_unit\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)\n    synonyms = Column(String, nullable=True)",
        "detail": "inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockUnit",
        "kind": 6,
        "importPath": "inventory.entities",
        "description": "inventory.entities",
        "peekOfCode": "class StockUnit(AuditUser):\n    __tablename__ = \"stock_unit\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)\n    synonyms = Column(String, nullable=True)\nclass StockLot(AuditUser):\n    __tablename__ = \"stock_lot\"\n    product_uid = Column(String, ForeignKey(\"stock_item_variant.uid\"), nullable=True)\n    product = relationship(\"StockItemVariant\", lazy=\"selectin\")\n    lot_number = Column(String, nullable=False)",
        "detail": "inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockLot",
        "kind": 6,
        "importPath": "inventory.entities",
        "description": "inventory.entities",
        "peekOfCode": "class StockLot(AuditUser):\n    __tablename__ = \"stock_lot\"\n    product_uid = Column(String, ForeignKey(\"stock_item_variant.uid\"), nullable=True)\n    product = relationship(\"StockItemVariant\", lazy=\"selectin\")\n    lot_number = Column(String, nullable=False)\n    expiry_date = Column(DateTime, nullable=False)\n    remarks = Column(String, nullable=True)\nclass StockProductInventory(AuditUser):\n    __tablename__ = \"stock_product_inventory\"\n    product_uid = Column(String, ForeignKey(\"stock_item_variant.uid\"), nullable=True)",
        "detail": "inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockProductInventory",
        "kind": 6,
        "importPath": "inventory.entities",
        "description": "inventory.entities",
        "peekOfCode": "class StockProductInventory(AuditUser):\n    __tablename__ = \"stock_product_inventory\"\n    product_uid = Column(String, ForeignKey(\"stock_item_variant.uid\"), nullable=True)\n    product = relationship(\"StockItemVariant\", lazy=\"selectin\")\n    stock_lot_uid = Column(String, ForeignKey(\"stock_lot.uid\"), nullable=True)\n    stock_lot = relationship(\"StockLot\", lazy=\"selectin\")\n    quantity = Column(Integer, nullable=False)\n    remarks = Column(String, nullable=True)\nclass StockOrder(AuditUser):\n    __tablename__ = \"stock_order\"",
        "detail": "inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockOrder",
        "kind": 6,
        "importPath": "inventory.entities",
        "description": "inventory.entities",
        "peekOfCode": "class StockOrder(AuditUser):\n    __tablename__ = \"stock_order\"\n    order_by_uid = Column(String, ForeignKey(\"user.uid\"), nullable=True)\n    order_by = relationship(\"User\", foreign_keys=[order_by_uid], lazy=\"selectin\")\n    department_uid = Column(String, ForeignKey(\"department.uid\"), nullable=True)\n    department = relationship(\"Department\", lazy=\"selectin\")\n    status = Column(String, nullable=False)\n    order_number = Column(String, nullable=False)\n    remarks = Column(String, nullable=True)\n    fulfilled_by_uid = Column(String, ForeignKey(\"user.uid\"), nullable=True)",
        "detail": "inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockOrderProduct",
        "kind": 6,
        "importPath": "inventory.entities",
        "description": "inventory.entities",
        "peekOfCode": "class StockOrderProduct(AuditUser):\n    __tablename__ = \"stock_order_product\"\n    product_uid = Column(String, ForeignKey(\"stock_item_variant.uid\"), nullable=True)\n    product = relationship(\"StockItemVariant\", lazy=\"selectin\")\n    stock_lot_uid = Column(String, ForeignKey(\"stock_lot.uid\"), nullable=True)\n    stock_lot = relationship(\"StockLot\", lazy=\"selectin\")\n    order_uid = Column(String, ForeignKey(\"stock_order.uid\"), nullable=True)\n    order = relationship(\"StockOrder\", lazy=\"selectin\")\n    quantity = Column(Integer, nullable=False)\n    remarks = Column(String, nullable=True)",
        "detail": "inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockReceipt",
        "kind": 6,
        "importPath": "inventory.entities",
        "description": "inventory.entities",
        "peekOfCode": "class StockReceipt(AuditUser):\n    __tablename__ = \"stock_receipt\"\n    product_uid = Column(String, ForeignKey(\"stock_item_variant.uid\"), nullable=False)\n    product = relationship(\"StockItemVariant\", lazy=\"selectin\")\n    stock_lot_uid = Column(String, ForeignKey(\"stock_lot.uid\"), nullable=True)\n    stock_lot = relationship(\"StockLot\", lazy=\"selectin\")\n    unit_price = Column(Float, nullable=True)\n    total_price = Column(Float, nullable=True)\n    supplier_uid = Column(String, ForeignKey(\"supplier.uid\"), nullable=True)\n    supplier = relationship(\"Supplier\", lazy=\"selectin\")",
        "detail": "inventory.entities",
        "documentation": {}
    },
    {
        "label": "StockAdjustment",
        "kind": 6,
        "importPath": "inventory.entities",
        "description": "inventory.entities",
        "peekOfCode": "class StockAdjustment(AuditUser):\n    __tablename__ = \"stock_adjustment\"\n    product_uid = Column(String, ForeignKey(\"stock_item_variant.uid\"), nullable=True)\n    product = relationship(\"StockItemVariant\", lazy=\"selectin\")\n    stock_lot_uid = Column(String, ForeignKey(\"stock_lot.uid\"), nullable=True)\n    stock_lot = relationship(\"StockLot\", lazy=\"selectin\")\n    adjustment_type = Column(String, nullable=False)\n    adjust = Column(Integer, nullable=False)\n    adjustment_date = Column(DateTime, nullable=False)\n    remarks = Column(String, nullable=False)",
        "detail": "inventory.entities",
        "documentation": {}
    },
    {
        "label": "AdjustType",
        "kind": 6,
        "importPath": "inventory.enum",
        "description": "inventory.enum",
        "peekOfCode": "class AdjustType(StrEnum):\n    #  Adding\n    PURCHASE = auto()\n    PUSHED = auto()\n    TRANSFER_IN = auto()\n    # subtracting\n    ISSUE = auto()\n    TRANSFER_OUT = auto()\n    DAMAGED = auto()\n    EXPIRED = auto()",
        "detail": "inventory.enum",
        "documentation": {}
    },
    {
        "label": "OrderState",
        "kind": 6,
        "importPath": "inventory.enum",
        "description": "inventory.enum",
        "peekOfCode": "class OrderState(StrEnum):\n    PREPARATION = auto()\n    SUBMITTED = auto()  # for approval\n    PENDING = auto()  # approved and pending issue\n    PROCESSED = auto()  # issued\n    DECLINED = auto()",
        "detail": "inventory.enum",
        "documentation": {}
    },
    {
        "label": "StockItemRepository",
        "kind": 6,
        "importPath": "inventory.repository",
        "description": "inventory.repository",
        "peekOfCode": "class StockItemRepository(BaseRepository[StockItem]):\n    def __init__(self) -> None:\n        super().__init__(StockItem)\nclass StockItemVariantRepository(BaseRepository[StockItemVariant]):\n    def __init__(self) -> None:\n        super().__init__(StockItemVariant)\nclass StockCategoryRepository(BaseRepository[StockCategory]):\n    def __init__(self) -> None:\n        super().__init__(StockCategory)\nclass HazardRepository(BaseRepository[Hazard]):",
        "detail": "inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockItemVariantRepository",
        "kind": 6,
        "importPath": "inventory.repository",
        "description": "inventory.repository",
        "peekOfCode": "class StockItemVariantRepository(BaseRepository[StockItemVariant]):\n    def __init__(self) -> None:\n        super().__init__(StockItemVariant)\nclass StockCategoryRepository(BaseRepository[StockCategory]):\n    def __init__(self) -> None:\n        super().__init__(StockCategory)\nclass HazardRepository(BaseRepository[Hazard]):\n    def __init__(self) -> None:\n        super().__init__(Hazard)\nclass StockUnitRepository(BaseRepository[StockUnit]):",
        "detail": "inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockCategoryRepository",
        "kind": 6,
        "importPath": "inventory.repository",
        "description": "inventory.repository",
        "peekOfCode": "class StockCategoryRepository(BaseRepository[StockCategory]):\n    def __init__(self) -> None:\n        super().__init__(StockCategory)\nclass HazardRepository(BaseRepository[Hazard]):\n    def __init__(self) -> None:\n        super().__init__(Hazard)\nclass StockUnitRepository(BaseRepository[StockUnit]):\n    def __init__(self) -> None:\n        super().__init__(StockUnit)\nclass StockLotRepository(BaseRepository[StockLot]):",
        "detail": "inventory.repository",
        "documentation": {}
    },
    {
        "label": "HazardRepository",
        "kind": 6,
        "importPath": "inventory.repository",
        "description": "inventory.repository",
        "peekOfCode": "class HazardRepository(BaseRepository[Hazard]):\n    def __init__(self) -> None:\n        super().__init__(Hazard)\nclass StockUnitRepository(BaseRepository[StockUnit]):\n    def __init__(self) -> None:\n        super().__init__(StockUnit)\nclass StockLotRepository(BaseRepository[StockLot]):\n    def __init__(self) -> None:\n        super().__init__(StockLot)\nclass StockProductInventoryRepository(BaseRepository[StockProductInventory]):",
        "detail": "inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockUnitRepository",
        "kind": 6,
        "importPath": "inventory.repository",
        "description": "inventory.repository",
        "peekOfCode": "class StockUnitRepository(BaseRepository[StockUnit]):\n    def __init__(self) -> None:\n        super().__init__(StockUnit)\nclass StockLotRepository(BaseRepository[StockLot]):\n    def __init__(self) -> None:\n        super().__init__(StockLot)\nclass StockProductInventoryRepository(BaseRepository[StockProductInventory]):\n    def __init__(self) -> None:\n        super().__init__(StockProductInventory)\nclass StockOrderRepository(BaseRepository[StockOrder]):",
        "detail": "inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockLotRepository",
        "kind": 6,
        "importPath": "inventory.repository",
        "description": "inventory.repository",
        "peekOfCode": "class StockLotRepository(BaseRepository[StockLot]):\n    def __init__(self) -> None:\n        super().__init__(StockLot)\nclass StockProductInventoryRepository(BaseRepository[StockProductInventory]):\n    def __init__(self) -> None:\n        super().__init__(StockProductInventory)\nclass StockOrderRepository(BaseRepository[StockOrder]):\n    def __init__(self) -> None:\n        super().__init__(StockOrder)\nclass StockOrderProductRepository(BaseRepository[StockOrderProduct]):",
        "detail": "inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockProductInventoryRepository",
        "kind": 6,
        "importPath": "inventory.repository",
        "description": "inventory.repository",
        "peekOfCode": "class StockProductInventoryRepository(BaseRepository[StockProductInventory]):\n    def __init__(self) -> None:\n        super().__init__(StockProductInventory)\nclass StockOrderRepository(BaseRepository[StockOrder]):\n    def __init__(self) -> None:\n        super().__init__(StockOrder)\nclass StockOrderProductRepository(BaseRepository[StockOrderProduct]):\n    def __init__(self) -> None:\n        super().__init__(StockOrderProduct)\nclass StockReceiptRepository(BaseRepository[StockReceipt]):",
        "detail": "inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockOrderRepository",
        "kind": 6,
        "importPath": "inventory.repository",
        "description": "inventory.repository",
        "peekOfCode": "class StockOrderRepository(BaseRepository[StockOrder]):\n    def __init__(self) -> None:\n        super().__init__(StockOrder)\nclass StockOrderProductRepository(BaseRepository[StockOrderProduct]):\n    def __init__(self) -> None:\n        super().__init__(StockOrderProduct)\nclass StockReceiptRepository(BaseRepository[StockReceipt]):\n    def __init__(self) -> None:\n        super().__init__(StockReceipt)\nclass StockAdjustmentRepository(BaseRepository[StockAdjustment]):",
        "detail": "inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockOrderProductRepository",
        "kind": 6,
        "importPath": "inventory.repository",
        "description": "inventory.repository",
        "peekOfCode": "class StockOrderProductRepository(BaseRepository[StockOrderProduct]):\n    def __init__(self) -> None:\n        super().__init__(StockOrderProduct)\nclass StockReceiptRepository(BaseRepository[StockReceipt]):\n    def __init__(self) -> None:\n        super().__init__(StockReceipt)\nclass StockAdjustmentRepository(BaseRepository[StockAdjustment]):\n    def __init__(self) -> None:\n        super().__init__(StockAdjustment)",
        "detail": "inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockReceiptRepository",
        "kind": 6,
        "importPath": "inventory.repository",
        "description": "inventory.repository",
        "peekOfCode": "class StockReceiptRepository(BaseRepository[StockReceipt]):\n    def __init__(self) -> None:\n        super().__init__(StockReceipt)\nclass StockAdjustmentRepository(BaseRepository[StockAdjustment]):\n    def __init__(self) -> None:\n        super().__init__(StockAdjustment)",
        "detail": "inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockAdjustmentRepository",
        "kind": 6,
        "importPath": "inventory.repository",
        "description": "inventory.repository",
        "peekOfCode": "class StockAdjustmentRepository(BaseRepository[StockAdjustment]):\n    def __init__(self) -> None:\n        super().__init__(StockAdjustment)",
        "detail": "inventory.repository",
        "documentation": {}
    },
    {
        "label": "StockItemBase",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockItemBase(BaseAuditModel):\n    \"\"\"StockItem Standardization\"\"\"\n    name: str | None = None\n    description: str | None = None\n    department_uid: str | None = None\n    department: Optional[Department] = None\n    category_uid: str | None = None\n    hazard_uid: str | None = None\n    minimum_level: int | None = None\n    maximum_level: int | None = None",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockItem",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockItem(StockItemBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockItemCreate(StockItemBase):\n    pass\nclass StockItemUpdate(StockItemBase):\n    pass\n#\n# StockItemVariant Schemas\n#",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockItemCreate",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockItemCreate(StockItemBase):\n    pass\nclass StockItemUpdate(StockItemBase):\n    pass\n#\n# StockItemVariant Schemas\n#\nclass StockItemVariantBase(BaseAuditModel):\n    \"\"\"StockItemVariant Standardization\"\"\"\n    name: str | None = None",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockItemUpdate",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockItemUpdate(StockItemBase):\n    pass\n#\n# StockItemVariant Schemas\n#\nclass StockItemVariantBase(BaseAuditModel):\n    \"\"\"StockItemVariant Standardization\"\"\"\n    name: str | None = None\n    description: str | None = None\n    stock_item_uid: str | None = None",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockItemVariantBase",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockItemVariantBase(BaseAuditModel):\n    \"\"\"StockItemVariant Standardization\"\"\"\n    name: str | None = None\n    description: str | None = None\n    stock_item_uid: str | None = None\n    stock_item: Optional[StockItem] = None\n    minimum_level: int | None = None\n    maximum_level: int | None = None\nclass StockItemVariant(StockItemVariantBase):\n    uid: str | None = None",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockItemVariant",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockItemVariant(StockItemVariantBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockItemVariantCreate(StockItemVariantBase):\n    pass\nclass StockItemVariantUpdate(StockItemVariantBase):\n    pass\n#\n# StockCategory Schemas\n#",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockItemVariantCreate",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockItemVariantCreate(StockItemVariantBase):\n    pass\nclass StockItemVariantUpdate(StockItemVariantBase):\n    pass\n#\n# StockCategory Schemas\n#\nclass StockCategoryBase(BaseAuditModel):\n    \"\"\"StockCategory\n    Consumable, Reagents, Durables",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockItemVariantUpdate",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockItemVariantUpdate(StockItemVariantBase):\n    pass\n#\n# StockCategory Schemas\n#\nclass StockCategoryBase(BaseAuditModel):\n    \"\"\"StockCategory\n    Consumable, Reagents, Durables\n    \"\"\"\n    name: str | None = None",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockCategoryBase",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockCategoryBase(BaseAuditModel):\n    \"\"\"StockCategory\n    Consumable, Reagents, Durables\n    \"\"\"\n    name: str | None = None\n    description: str | None = None\nclass StockCategory(StockCategoryBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockCategoryCreate(StockCategoryBase):",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockCategory",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockCategory(StockCategoryBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockCategoryCreate(StockCategoryBase):\n    pass\nclass StockCategoryUpdate(StockCategoryBase):\n    pass\n#\n# Hazard Schemas\n#",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockCategoryCreate",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockCategoryCreate(StockCategoryBase):\n    pass\nclass StockCategoryUpdate(StockCategoryBase):\n    pass\n#\n# Hazard Schemas\n#\nclass HazardBase(BaseAuditModel):\n    \"\"\"Hazard\"\"\"\n    name: str | None = None",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockCategoryUpdate",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockCategoryUpdate(StockCategoryBase):\n    pass\n#\n# Hazard Schemas\n#\nclass HazardBase(BaseAuditModel):\n    \"\"\"Hazard\"\"\"\n    name: str | None = None\n    description: str | None = None\nclass Hazard(HazardBase):",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "HazardBase",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class HazardBase(BaseAuditModel):\n    \"\"\"Hazard\"\"\"\n    name: str | None = None\n    description: str | None = None\nclass Hazard(HazardBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass HazardCreate(HazardBase):\n    pass\nclass HazardUpdate(HazardBase):",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "Hazard",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class Hazard(HazardBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass HazardCreate(HazardBase):\n    pass\nclass HazardUpdate(HazardBase):\n    pass\n#\n# StockUnit Schemas\n#",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "HazardCreate",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class HazardCreate(HazardBase):\n    pass\nclass HazardUpdate(HazardBase):\n    pass\n#\n# StockUnit Schemas\n#\nclass StockUnitBase(BaseAuditModel):\n    name: str | None = None\n    description: str | None = None",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "HazardUpdate",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class HazardUpdate(HazardBase):\n    pass\n#\n# StockUnit Schemas\n#\nclass StockUnitBase(BaseAuditModel):\n    name: str | None = None\n    description: str | None = None\n    synonyms: str | None = None\nclass StockUnit(StockUnitBase):",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockUnitBase",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockUnitBase(BaseAuditModel):\n    name: str | None = None\n    description: str | None = None\n    synonyms: str | None = None\nclass StockUnit(StockUnitBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockUnitCreate(StockUnitBase):\n    pass\nclass StockUnitUpdate(StockUnitBase):",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockUnit",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockUnit(StockUnitBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockUnitCreate(StockUnitBase):\n    pass\nclass StockUnitUpdate(StockUnitBase):\n    pass\n#\n# StockLot Schemas\n#",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockUnitCreate",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockUnitCreate(StockUnitBase):\n    pass\nclass StockUnitUpdate(StockUnitBase):\n    pass\n#\n# StockLot Schemas\n#\nclass StockLotBase(BaseAuditModel):\n    product_uid: str | None = None\n    lot_number: str | None = None",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockUnitUpdate",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockUnitUpdate(StockUnitBase):\n    pass\n#\n# StockLot Schemas\n#\nclass StockLotBase(BaseAuditModel):\n    product_uid: str | None = None\n    lot_number: str | None = None\n    expiry_date: Optional[datetime] = None\n    remarks: str | None = None",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockLotBase",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockLotBase(BaseAuditModel):\n    product_uid: str | None = None\n    lot_number: str | None = None\n    expiry_date: Optional[datetime] = None\n    remarks: str | None = None\nclass StockLot(StockLotBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockLotCreate(StockLotBase):\n    pass",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockLot",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockLot(StockLotBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockLotCreate(StockLotBase):\n    pass\nclass StockLotUpdate(StockLotBase):\n    pass\n#\n# StockProductInventory Schemas\n#",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockLotCreate",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockLotCreate(StockLotBase):\n    pass\nclass StockLotUpdate(StockLotBase):\n    pass\n#\n# StockProductInventory Schemas\n#\nclass StockProductInventoryBase(BaseAuditModel):\n    product_uid: str | None = None\n    stock_lot_uid: str | None = None",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockLotUpdate",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockLotUpdate(StockLotBase):\n    pass\n#\n# StockProductInventory Schemas\n#\nclass StockProductInventoryBase(BaseAuditModel):\n    product_uid: str | None = None\n    stock_lot_uid: str | None = None\n    quantity: int = None\n    remarks: str | None = None",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockProductInventoryBase",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockProductInventoryBase(BaseAuditModel):\n    product_uid: str | None = None\n    stock_lot_uid: str | None = None\n    quantity: int = None\n    remarks: str | None = None\nclass StockProductInventory(StockProductInventoryBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockProductInventoryCreate(StockProductInventoryBase):\n    pass",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockProductInventory",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockProductInventory(StockProductInventoryBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockProductInventoryCreate(StockProductInventoryBase):\n    pass\nclass StockProductInventoryUpdate(StockProductInventoryBase):\n    pass\n#\n# StockReceipt Schemas\n#",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockProductInventoryCreate",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockProductInventoryCreate(StockProductInventoryBase):\n    pass\nclass StockProductInventoryUpdate(StockProductInventoryBase):\n    pass\n#\n# StockReceipt Schemas\n#\nclass StockReceiptBase(BaseAuditModel):\n    product_uid: str | None = None\n    stock_lot_uid: str | None = None",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockProductInventoryUpdate",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockProductInventoryUpdate(StockProductInventoryBase):\n    pass\n#\n# StockReceipt Schemas\n#\nclass StockReceiptBase(BaseAuditModel):\n    product_uid: str | None = None\n    stock_lot_uid: str | None = None\n    unit_price: float | None = None\n    total_price: float | None = None",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockReceiptBase",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockReceiptBase(BaseAuditModel):\n    product_uid: str | None = None\n    stock_lot_uid: str | None = None\n    unit_price: float | None = None\n    total_price: float | None = None\n    supplier_uid: str | None = None\n    unit_uid: str | None = None\n    singles_received: int | None = None\n    packages_received: int | None = None\n    package_factor: int | None = None",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockReceipt",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockReceipt(StockReceiptBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockReceiptCreate(StockReceiptBase):\n    pass\nclass StockReceiptUpdate(StockReceiptBase):\n    pass\n#\n# StockOrder Schemas\n#",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockReceiptCreate",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockReceiptCreate(StockReceiptBase):\n    pass\nclass StockReceiptUpdate(StockReceiptBase):\n    pass\n#\n# StockOrder Schemas\n#\nclass StockOrderBase(BaseAuditModel):\n    order_by_uid: str | None = None\n    order_by: Optional[User] = None",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockReceiptUpdate",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockReceiptUpdate(StockReceiptBase):\n    pass\n#\n# StockOrder Schemas\n#\nclass StockOrderBase(BaseAuditModel):\n    order_by_uid: str | None = None\n    order_by: Optional[User] = None\n    department_uid: str | None = None\n    department: Optional[Department] = None",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockOrderBase",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockOrderBase(BaseAuditModel):\n    order_by_uid: str | None = None\n    order_by: Optional[User] = None\n    department_uid: str | None = None\n    department: Optional[Department] = None\n    status: str | None = None\n    order_number: str | None = None\n    remarks: str | None = None\n    fulfilled_by_uid: str | None = None\n    fulfilled_by: Optional[User] = None",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockOrder",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockOrder(StockOrderBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockOrderCreate(StockOrderBase):\n    pass\nclass StockOrderUpdate(StockOrderBase):\n    pass\n#\n# StockOrderProduct Schemas\n#",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockOrderCreate",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockOrderCreate(StockOrderBase):\n    pass\nclass StockOrderUpdate(StockOrderBase):\n    pass\n#\n# StockOrderProduct Schemas\n#\nclass StockOrderProductBase(BaseAuditModel):\n    product_uid: str | None = None\n    product: Optional[StockItemVariant] = None",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockOrderUpdate",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockOrderUpdate(StockOrderBase):\n    pass\n#\n# StockOrderProduct Schemas\n#\nclass StockOrderProductBase(BaseAuditModel):\n    product_uid: str | None = None\n    product: Optional[StockItemVariant] = None\n    stock_lot_uid: str | None = None\n    order_uid: str | None = None",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockOrderProductBase",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockOrderProductBase(BaseAuditModel):\n    product_uid: str | None = None\n    product: Optional[StockItemVariant] = None\n    stock_lot_uid: str | None = None\n    order_uid: str | None = None\n    order: Optional[StockOrder] = None\n    quantity: int | None = None\n    remarks: str | None = None\nclass StockOrderProduct(StockOrderProductBase):\n    uid: str | None = None",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockOrderProduct",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockOrderProduct(StockOrderProductBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockOrderProductCreate(StockOrderProductBase):\n    pass\nclass StockOrderProductUpdate(StockOrderProductBase):\n    pass\n#\n# StockAdjustment Schemas\n#",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockOrderProductCreate",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockOrderProductCreate(StockOrderProductBase):\n    pass\nclass StockOrderProductUpdate(StockOrderProductBase):\n    pass\n#\n# StockAdjustment Schemas\n#\nclass StockAdjustmentBase(BaseAuditModel):\n    product_uid: str | None = None\n    product: Optional[StockItemVariant] = None",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockOrderProductUpdate",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockOrderProductUpdate(StockOrderProductBase):\n    pass\n#\n# StockAdjustment Schemas\n#\nclass StockAdjustmentBase(BaseAuditModel):\n    product_uid: str | None = None\n    product: Optional[StockItemVariant] = None\n    stock_lot_uid: str | None = None\n    adjustment_type: str | None = None",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockAdjustmentBase",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockAdjustmentBase(BaseAuditModel):\n    product_uid: str | None = None\n    product: Optional[StockItemVariant] = None\n    stock_lot_uid: str | None = None\n    adjustment_type: str | None = None\n    adjust: int | None = None\n    adjustment_date: datetime | None = None\n    remarks: str | None = None\n    adjustment_by_uid: str | None = None\n    adjustment_by: Optional[User] = None",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockAdjustment",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockAdjustment(StockAdjustmentBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass StockAdjustmentCreate(StockAdjustmentBase):\n    pass\nclass StockAdjustmentUpdate(StockAdjustmentBase):\n    pass",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockAdjustmentCreate",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockAdjustmentCreate(StockAdjustmentBase):\n    pass\nclass StockAdjustmentUpdate(StockAdjustmentBase):\n    pass",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockAdjustmentUpdate",
        "kind": 6,
        "importPath": "inventory.schemas",
        "description": "inventory.schemas",
        "peekOfCode": "class StockAdjustmentUpdate(StockAdjustmentBase):\n    pass",
        "detail": "inventory.schemas",
        "documentation": {}
    },
    {
        "label": "StockItemService",
        "kind": 6,
        "importPath": "inventory.services",
        "description": "inventory.services",
        "peekOfCode": "class StockItemService(BaseService[StockItem, StockItemCreate, StockItemUpdate]):\n    def __init__(self) -> None:\n        super().__init__(StockItemRepository)\n    async def paginate_with_cursors(\n        self,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,\n        text: str | None = None,\n        sort_by: list[str] | None = None,",
        "detail": "inventory.services",
        "documentation": {}
    },
    {
        "label": "StockItemVariantService",
        "kind": 6,
        "importPath": "inventory.services",
        "description": "inventory.services",
        "peekOfCode": "class StockItemVariantService(\n    BaseService[StockItemVariant, StockItemVariantCreate, StockItemVariantUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(StockItemVariantRepository)\nclass StockCategoryService(\n    BaseService[StockCategory, StockCategoryCreate, StockCategoryUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(StockCategoryRepository)",
        "detail": "inventory.services",
        "documentation": {}
    },
    {
        "label": "StockCategoryService",
        "kind": 6,
        "importPath": "inventory.services",
        "description": "inventory.services",
        "peekOfCode": "class StockCategoryService(\n    BaseService[StockCategory, StockCategoryCreate, StockCategoryUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(StockCategoryRepository)\nclass HazardService(BaseService[Hazard, HazardCreate, HazardUpdate]):\n    def __init__(self) -> None:\n        super().__init__(HazardRepository)\nclass StockUnitService(BaseService[StockUnit, StockUnitCreate, StockUnitUpdate]):\n    def __init__(self) -> None:",
        "detail": "inventory.services",
        "documentation": {}
    },
    {
        "label": "HazardService",
        "kind": 6,
        "importPath": "inventory.services",
        "description": "inventory.services",
        "peekOfCode": "class HazardService(BaseService[Hazard, HazardCreate, HazardUpdate]):\n    def __init__(self) -> None:\n        super().__init__(HazardRepository)\nclass StockUnitService(BaseService[StockUnit, StockUnitCreate, StockUnitUpdate]):\n    def __init__(self) -> None:\n        super().__init__(StockUnitRepository)\nclass StockLotService(BaseService[StockLot, StockLotCreate, StockLotUpdate]):\n    def __init__(self) -> None:\n        super().__init__(StockLotRepository)\nclass StockProductInventoryService(",
        "detail": "inventory.services",
        "documentation": {}
    },
    {
        "label": "StockUnitService",
        "kind": 6,
        "importPath": "inventory.services",
        "description": "inventory.services",
        "peekOfCode": "class StockUnitService(BaseService[StockUnit, StockUnitCreate, StockUnitUpdate]):\n    def __init__(self) -> None:\n        super().__init__(StockUnitRepository)\nclass StockLotService(BaseService[StockLot, StockLotCreate, StockLotUpdate]):\n    def __init__(self) -> None:\n        super().__init__(StockLotRepository)\nclass StockProductInventoryService(\n    BaseService[\n        StockProductInventory, StockProductInventoryCreate, StockProductInventoryUpdate\n    ]",
        "detail": "inventory.services",
        "documentation": {}
    },
    {
        "label": "StockLotService",
        "kind": 6,
        "importPath": "inventory.services",
        "description": "inventory.services",
        "peekOfCode": "class StockLotService(BaseService[StockLot, StockLotCreate, StockLotUpdate]):\n    def __init__(self) -> None:\n        super().__init__(StockLotRepository)\nclass StockProductInventoryService(\n    BaseService[\n        StockProductInventory, StockProductInventoryCreate, StockProductInventoryUpdate\n    ]\n):\n    def __init__(self) -> None:\n        super().__init__(StockProductInventoryRepository)",
        "detail": "inventory.services",
        "documentation": {}
    },
    {
        "label": "StockProductInventoryService",
        "kind": 6,
        "importPath": "inventory.services",
        "description": "inventory.services",
        "peekOfCode": "class StockProductInventoryService(\n    BaseService[\n        StockProductInventory, StockProductInventoryCreate, StockProductInventoryUpdate\n    ]\n):\n    def __init__(self) -> None:\n        super().__init__(StockProductInventoryRepository)\nclass StockOrderService(BaseService[StockOrder, StockOrderCreate, StockOrderUpdate]):\n    def __init__(self) -> None:\n        super().__init__(StockOrderRepository)",
        "detail": "inventory.services",
        "documentation": {}
    },
    {
        "label": "StockOrderService",
        "kind": 6,
        "importPath": "inventory.services",
        "description": "inventory.services",
        "peekOfCode": "class StockOrderService(BaseService[StockOrder, StockOrderCreate, StockOrderUpdate]):\n    def __init__(self) -> None:\n        super().__init__(StockOrderRepository)\n    async def paginate_with_cursors(\n        self,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,\n        text: str | None = None,\n        status: None = None,",
        "detail": "inventory.services",
        "documentation": {}
    },
    {
        "label": "StockOrderProductService",
        "kind": 6,
        "importPath": "inventory.services",
        "description": "inventory.services",
        "peekOfCode": "class StockOrderProductService(\n    BaseService[StockOrderProduct, StockOrderProductCreate, StockOrderProductUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(StockOrderProductRepository)\nclass StockReceiptService(\n    BaseService[StockReceipt, StockReceiptCreate, StockReceiptUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(StockReceiptRepository)",
        "detail": "inventory.services",
        "documentation": {}
    },
    {
        "label": "StockReceiptService",
        "kind": 6,
        "importPath": "inventory.services",
        "description": "inventory.services",
        "peekOfCode": "class StockReceiptService(\n    BaseService[StockReceipt, StockReceiptCreate, StockReceiptUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(StockReceiptRepository)\nclass StockAdjustmentService(\n    BaseService[StockAdjustment, StockAdjustmentCreate, StockAdjustmentUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(StockAdjustmentRepository)",
        "detail": "inventory.services",
        "documentation": {}
    },
    {
        "label": "StockAdjustmentService",
        "kind": 6,
        "importPath": "inventory.services",
        "description": "inventory.services",
        "peekOfCode": "class StockAdjustmentService(\n    BaseService[StockAdjustment, StockAdjustmentCreate, StockAdjustmentUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(StockAdjustmentRepository)\n    async def paginate_with_cursors(\n        self,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,",
        "detail": "inventory.services",
        "documentation": {}
    },
    {
        "label": "IOLService",
        "kind": 6,
        "importPath": "iol.fhir.services.action",
        "description": "iol.fhir.services.action",
        "peekOfCode": "class IOLService:\n    def __init__(self):\n        self.fhir_read_service = FhirReadService()\n        self.fhir_create_service = FhirCreateService()\n        self.user_service = UserService()\n        self.job_service = JobService()\n        self.shipment_service = ShipmentService()\n        self.activity_stream_service = ActivityStreamService()\n        self.shipped_sample_service = ShippedSampleService()\n    async def send(self, shipment_uid: str, user_uid: str):",
        "detail": "iol.fhir.services.action",
        "documentation": {}
    },
    {
        "label": "FhirCreateService",
        "kind": 6,
        "importPath": "iol.fhir.services.create",
        "description": "iol.fhir.services.create",
        "peekOfCode": "class FhirCreateService:\n    def __init__(self):\n        self.shipment_service = ShipmentService()\n        self.referral_laboratory_service = ReferralLaboratoryService()\n        self.job_service = JobService()\n    async def create_resource(\n        self,\n        resource_type: str,\n        resource_data: (\n            BundleResource",
        "detail": "iol.fhir.services.create",
        "documentation": {}
    },
    {
        "label": "FhirReadService",
        "kind": 6,
        "importPath": "iol.fhir.services.read",
        "description": "iol.fhir.services.read",
        "peekOfCode": "class FhirReadService:\n    def __init__(self):\n        self.analysis_request_service = AnalysisRequestService()\n        self.sample_service = SampleService()\n        self.analysis_result_service = AnalysisResultService()\n        self.shipped_sample_service = ShippedSampleService()\n        self.patient_service = PatientService()\n        self.shipment_service = ShipmentService()\n        self.laboratory_service = LaboratoryService()\n    @staticmethod",
        "detail": "iol.fhir.services.read",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "iol.fhir.utils.create",
        "description": "iol.fhir.utils.create",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def create_resource(\n    resource_type: str,\n    resource_data: (\n        BundleResource\n        | PatientResource\n        | ServiceRequestResource\n        | DiagnosticReportResource\n    ),\n    request: Request,",
        "detail": "iol.fhir.utils.create",
        "documentation": {}
    },
    {
        "label": "one_of_else",
        "kind": 2,
        "importPath": "iol.fhir.utils.read",
        "description": "iol.fhir.utils.read",
        "peekOfCode": "def one_of_else(of: list, one: str, default=None):\n    return one if one in of else default\nasync def get_diagnostic_report_resource(\n    service_request_uid: str, obs_uids=None, for_referral=False\n) -> DiagnosticReportResource | None:\n    sample_service = SampleService()\n    analysis_request_service = AnalysisRequestService()\n    if obs_uids is None:\n        obs_uids = []\n    ar, sample = await asyncio.gather(",
        "detail": "iol.fhir.utils.read",
        "documentation": {}
    },
    {
        "label": "FhirTask",
        "kind": 6,
        "importPath": "iol.fhir.entities",
        "description": "iol.fhir.entities",
        "peekOfCode": "class FhirTask(AuditUser):\n    incoming = Column(Boolean, default=True)\n    data = Column(JSONB)\n    status = Column(String)",
        "detail": "iol.fhir.entities",
        "documentation": {}
    },
    {
        "label": "BaseResource",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class BaseResource:\n    \"\"\"All resources base: https://www.hl7.org/fhir/resource.html\"\"\"\n    id: str\n    meta: None = None\n    extension: None = None\nclass Coding(BaseModel):\n    #  Identity of the terminology system\n    system: str | None = None\n    # Version of the system - if relevant\n    version: str | None = None",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Coding",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class Coding(BaseModel):\n    #  Identity of the terminology system\n    system: str | None = None\n    # Version of the system - if relevant\n    version: str | None = None\n    # Symbol in syntax defined by the system\n    code: str | None = None\n    # Representation defined by the system\n    display: str | None = None\n    # If this coding was chosen directly by the user",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "CodeableConcept",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class CodeableConcept(BaseModel):\n    # Code defined by a terminology system\n    coding: List[Coding] | None = None\n    # Plain text representation of the concept\n    text: str | None = None\nclass Period(BaseModel):\n    # C? Starting time with inclusive boundary\n    start: str | None = None\n    # C? End time with inclusive boundary, if not ongoing\n    end: str | None = None",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Period",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class Period(BaseModel):\n    # C? Starting time with inclusive boundary\n    start: str | None = None\n    # C? End time with inclusive boundary, if not ongoing\n    end: str | None = None\nReference = ForwardRef(\"Identifier\")\nclass Reference(BaseModel):\n    # C? Literal reference, Relative, internal or absolute URL\n    reference: str | None = None\n    # Type the reference refers to (e.g. \"Patient\")",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Reference",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class Reference(BaseModel):\n    # C? Literal reference, Relative, internal or absolute URL\n    reference: str | None = None\n    # Type the reference refers to (e.g. \"Patient\")\n    type: str | None = None\n    # Logical reference, when literal reference is not known\n    identifier: Optional[\"Identifier\"] = None\n    # Text alternative for the resource\n    display: str | None = None\nclass Identifier(BaseModel):",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Identifier",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class Identifier(BaseModel):\n    # usual | official | temp | secondary | old(If known)\n    use: str | None = None\n    # Description of identifier\n    type: CodeableConcept | None = None\n    # The namespace for the identifier value\n    system: str | None = None\n    # The value that is unique\n    value: str | None = None\n    # time period when id is / was valid for use",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "HumanName",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class HumanName(BaseModel):\n    # usual | official | temp | nickname | anonymous | old | maiden\n    use: str | None = None\n    # Text representation of the full name\n    text: str | None = None\n    # Family name (often called 'Surname')\n    family: str | None = None\n    # Given names (not always 'first'). Includes middle names\n    given: list[str] | None = None\n    # Parts that come before the name",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "ContactPoint",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class ContactPoint(BaseModel):\n    # C? phone | fax | email | pager | url | sms | other\n    system: str | None = None\n    # The actual contact point details\n    value: str | None = None\n    # home | work | temp | old | mobile - purpose of this contact point\n    use: str | None = None\n    # Specify preferred order of use (1 = highest)\n    rank: int | None = None\n    # Time period when the contact point was/is in use",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Address",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class Address(BaseModel):\n    # home | work | temp | old | billing - purpose of this address\n    use: str | None = None\n    # postal | physical | both\n    type: str | None = None\n    # Text representation of the address\n    text: str | None = None\n    # Street name, number, direction & P.O. Box etc.\n    line: str | None = None\n    # Name of city, town etc.",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Annotation",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class Annotation(BaseModel):\n    # Reference(Organization|Patient|Practitioner|RelatedPerson)\n    authorReference: Reference | None = None\n    authorString: str | None = None\n    # When the annotation was made\n    time: str | None = None\n    # R!  The annotation  - text content (as markdown)\n    text: str | None = None\nclass Quantity(BaseModel):\n    # Numerical value (with implicit precision)",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Quantity",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class Quantity(BaseModel):\n    # Numerical value (with implicit precision)\n    value: float | None = None\n    # < | <= | >= | > - how to understand the value\n    comparator: str | None = None\n    # Unit representation\n    unit: str | None = None\n    # C? System that defines coded unit form\n    system: str | None = None\n    code: str | None = None",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Range",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class Range(BaseModel):\n    # Low limit\n    low: Quantity | None = None\n    # High limit\n    high: Quantity | None = None\nclass ReferenceRange(BaseModel):\n    # C? Low Range, if relevant Quantity(SimpleQuantity)\n    low: Quantity | None = None\n    # C? High Range, if relevant Quantity(SimpleQuantity)\n    high: Quantity | None = None",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "ReferenceRange",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class ReferenceRange(BaseModel):\n    # C? Low Range, if relevant Quantity(SimpleQuantity)\n    low: Quantity | None = None\n    # C? High Range, if relevant Quantity(SimpleQuantity)\n    high: Quantity | None = None\n    # Reference range qualifier\n    type: CodeableConcept | None = None\n    # Reference range population\n    appliesTo: List[CodeableConcept] | None = None\n    # Applicable age range, if relevant",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Ratio",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class Ratio(BaseModel):\n    # Numerator value\n    numerator: Quantity | None = None\n    # Denominator value\n    denominator: Quantity | None = None\nclass SampledData(BaseModel):\n    # R!  Zero value and units\n    origin: Quantity | None = None\n    # R!  Number of milliseconds between samples\n    period: int | None = None",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "SampledData",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class SampledData(BaseModel):\n    # R!  Zero value and units\n    origin: Quantity | None = None\n    # R!  Number of milliseconds between samples\n    period: int | None = None\n    # Multiply data by this before adding to origin\n    factor: int | None = None\n    # Lower limit of detection\n    lowerLimit: int | None = None\n    # Upper limit of detection",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Extension",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class Extension(BaseModel):\n    url: str | None = None\n    valueString: str | dict | None = None\n    data: dict | None = None\nclass PatientResource(BaseModel):\n    resourceType: str = \"Patient\"\n    # An identifier for this patient\n    identifier: List[Identifier] | None = None\n    # Whether this patient's record is in active use\n    active: bool | None = None",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "PatientResource",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class PatientResource(BaseModel):\n    resourceType: str = \"Patient\"\n    # An identifier for this patient\n    identifier: List[Identifier] | None = None\n    # Whether this patient's record is in active use\n    active: bool | None = None\n    # A name associated with the patient\n    name: List[HumanName] | None = None\n    #  A contact detail for the individual\n    telecom: List[ContactPoint] | None = None",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "SpecimenCollection",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class SpecimenCollection(BaseModel):\n    #  Who collected the specimen Reference(Patient|Practitioner|PractitionerRole|RelatedPerson)\n    collector: Reference | None = None\n    collectedDateTime: str | None = None\n    #  The quantity of specimen collected Quantity(SimpleQuantity)\n    quantity: Quantity | None = None\n    # Technique used to perform collection\n    method: CodeableConcept | None = None\nclass SpecimenResource(BaseModel):\n    resourceType: str = \"Specimen\"",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "SpecimenResource",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class SpecimenResource(BaseModel):\n    resourceType: str = \"Specimen\"\n    # External Identifier\n    identifier: List[Identifier] | None = None\n    # Identifier assigned by the lab\n    accessionIdentifier: Identifier | None = None\n    # available | unavailable | unsatisfactory | entered-in-error\n    status: str | None = None\n    # Kind of material that forms the specimen icon\n    type: CodeableConcept",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "ServiceRequestResource",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class ServiceRequestResource(BaseModel):\n    resourceType: str = \"ServiceRequest\"\n    # Identifiers assigned to this order\n    identifier: List[Identifier] | None = None\n    # What request replaces Reference(ServiceRequest)\n    replaces: List[Reference] | None = None\n    # Composite Request ID\n    requisition: Identifier | None = None\n    # draft | active | on-hold | revoked | completed | entered-in-error | unknown\n    status: str | None = None",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "ObservationComponent",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class ObservationComponent(BaseModel):\n    # R!  Type of component observation (code / type)\n    code: CodeableConcept | None = None\n    # value[x]: Actual component result. One of these 11:\n    valueQuantity: Quantity | None = None\n    valueCodeableConcept: CodeableConcept\n    valueString: str | None = None\n    valueBoolean: bool | None = None\n    valueInteger: int | None = None\n    valueRange: Range | None = None",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "ObservationResource",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class ObservationResource(BaseModel):\n    resourceType: str = \"Observation\"\n    # Business Identifier for observation\n    identifier: List[Identifier] | None = None\n    # Fulfills plan, proposal or order\n    # Reference(CarePlan|DeviceRequest|ImmunizationRecommendation|MedicationRequest|NutritionOrder|ServiceRequest)\n    basedOn: List[Reference] | None = None\n    # R!  registered | preliminary | final | amended +\n    status: str | None = None\n    # R!  Type of observation (code / type)",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "DiagnosticReportResource",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class DiagnosticReportResource(BaseModel):\n    resourceType: str = \"DiagnosticReport\"\n    # Business identifier for report\n    identifier: List[Identifier] | None = None\n    # What was requested\n    # Reference(CarePlan|ImmunizationRecommendation|MedicationRequest|NutritionOrder|ServiceRequest)\n    basedOn: List[Reference] | None = None\n    # R!  registered | partial | preliminary | final +\n    status: str | None = None\n    # Service category",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Resource",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class Resource(BaseModel):\n    resourceType: str\n    # short description\n    property1: str | None = None\nclass BundleEntryRequest(BaseModel):\n    # I R!  GET | HEAD | POST | PUT | DELETE | PATCH\n    method: str\n    # R!  URL for HTTP equivalent of this entry\n    url: str | None = None\nclass BundleEntryResponse(BaseModel):",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "BundleEntryRequest",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class BundleEntryRequest(BaseModel):\n    # I R!  GET | HEAD | POST | PUT | DELETE | PATCH\n    method: str\n    # R!  URL for HTTP equivalent of this entry\n    url: str | None = None\nclass BundleEntryResponse(BaseModel):\n    # R!  Status response code (text optional)\n    status: str\n    # The location (if the operation returns a location)\n    location: str | None = None",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "BundleEntryResponse",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class BundleEntryResponse(BaseModel):\n    # R!  Status response code (text optional)\n    status: str\n    # The location (if the operation returns a location)\n    location: str | None = None\n    # Server's date time modified\n    lastModified: str | None = None\n    # // OperationOutcome with hints and warnings (for batch/transaction)\n    outcome: Resource\nclass BundleEntry(BaseModel):",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "BundleEntry",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class BundleEntry(BaseModel):\n    # A resource in the bundle\n    resource: Any = None\n    # Additional execution information (transaction/batch/history)\n    request: BundleEntryRequest | None = None\n    # Results of execution (transaction/batch/history)\n    response: BundleEntryResponse | None = None\n    @field_validator(\"resource\")\n    @classmethod\n    def validate_resource(cls, val):",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "BundleResource",
        "kind": 6,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "class BundleResource(BaseModel):\n    resourceType: str = \"Bundle\"\n    # Persistent identifier for the bundle\n    identifier: Identifier | None = None\n    # R!  document | message | transaction | transaction-response | batch | batch-response |  \\\n    # history | searchset | collection | subscription-notification\n    type: str\n    # When the bundle was assembled\n    timestamp: str\n    # If search, the total number of matches",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Reference",
        "kind": 5,
        "importPath": "iol.fhir.schema",
        "description": "iol.fhir.schema",
        "peekOfCode": "Reference = ForwardRef(\"Identifier\")\nclass Reference(BaseModel):\n    # C? Literal reference, Relative, internal or absolute URL\n    reference: str | None = None\n    # Type the reference refers to (e.g. \"Patient\")\n    type: str | None = None\n    # Logical reference, when literal reference is not known\n    identifier: Optional[\"Identifier\"] = None\n    # Text alternative for the resource\n    display: str | None = None",
        "detail": "iol.fhir.schema",
        "documentation": {}
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": "job.entities",
        "description": "job.entities",
        "peekOfCode": "class Job(BaseEntity):\n    __tablename__ = \"job\"\n    action = Column(String)\n    category = Column(String)\n    priority = Column(Integer)\n    data = Column(JSONB)\n    job_id = Column(String)\n    creator_uid = Column(String)\n    status = Column(String)\n    reason = Column(String)",
        "detail": "job.entities",
        "documentation": {}
    },
    {
        "label": "JobState",
        "kind": 6,
        "importPath": "job.enum",
        "description": "job.enum",
        "peekOfCode": "class JobState(StrEnum):\n    PENDING = auto()\n    RUNNING = auto()\n    FAILED = auto()\n    FINISHED = auto()\nclass JobPriority(IntEnum):\n    NORMAL = 0\n    MEDIUM = 1\n    HIGH = 2\nclass JobAction(StrEnum):",
        "detail": "job.enum",
        "documentation": {}
    },
    {
        "label": "JobPriority",
        "kind": 6,
        "importPath": "job.enum",
        "description": "job.enum",
        "peekOfCode": "class JobPriority(IntEnum):\n    NORMAL = 0\n    MEDIUM = 1\n    HIGH = 2\nclass JobAction(StrEnum):\n    WORKSHEET_ASSIGN = auto()\n    WORKSHEET_MANUAL_ASSIGN = auto()\n    WORKSHEET_UN_ASSIGN = auto()\n    RESULT_VERIFY = auto()\n    RESULT_SUBMIT = auto()",
        "detail": "job.enum",
        "documentation": {}
    },
    {
        "label": "JobAction",
        "kind": 6,
        "importPath": "job.enum",
        "description": "job.enum",
        "peekOfCode": "class JobAction(StrEnum):\n    WORKSHEET_ASSIGN = auto()\n    WORKSHEET_MANUAL_ASSIGN = auto()\n    WORKSHEET_UN_ASSIGN = auto()\n    RESULT_VERIFY = auto()\n    RESULT_SUBMIT = auto()\n    GENERATE_REPORT = auto()\n    IMPRESS_REPORT = auto()\n    SHIPMENT_MANUAL_ASSIGN = auto()\n    SHIPMENT_DISPATCH = auto()",
        "detail": "job.enum",
        "documentation": {}
    },
    {
        "label": "JobCategory",
        "kind": 6,
        "importPath": "job.enum",
        "description": "job.enum",
        "peekOfCode": "class JobCategory(object):\n    SHIPMENT = auto()\n    WORKSHEET = auto()\n    RESULT = auto()\n    REPORT = auto()\n    IMPRESS = auto()\n    BILLING = auto()",
        "detail": "job.enum",
        "documentation": {}
    },
    {
        "label": "JobRepository",
        "kind": 6,
        "importPath": "job.repository",
        "description": "job.repository",
        "peekOfCode": "class JobRepository(BaseRepository[Job]):\n    def __init__(self) -> None:\n        super().__init__(Job)\n    async def fetch_sorted(self, filters: dict, sort: str):\n        stmt = self.queryset.smart_query(\n            filters=filters,\n            sort_attrs=sort,\n        )\n        async with self.async_session() as session:\n            results = await session.execute(stmt)",
        "detail": "job.repository",
        "documentation": {}
    },
    {
        "label": "felicity_workforce_init",
        "kind": 2,
        "importPath": "job.sched",
        "description": "job.sched",
        "peekOfCode": "def felicity_workforce_init():\n    logging.info(\"Initialising felicity workforce ...\")\n    scheduler.add_job(\n        func=run_jobs_if_exists, trigger=IntervalTrigger(seconds=10), id=\"felicity_wf\"\n    )\n    scheduler.add_job(\n        func=prepare_for_impress,\n        trigger=IntervalTrigger(seconds=60 * 60),\n        id=\"felicity_impress\",\n    )",
        "detail": "job.sched",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "job.sched",
        "description": "job.sched",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# apscheduler\nlog = logging.getLogger(\"apscheduler.executors.default\")\nlog.setLevel(logging.WARNING)\nscheduler = AsyncIOScheduler()\nasync def run_jobs_if_exists():\n    async def unknown_action(action):\n        logging.warning(f\"Unknown job action: {action}\")\n    jobs = await JobService().fetch_sorted()\n    # logging.info(f\"There are {len(jobs)} Jobs pending running.\")",
        "detail": "job.sched",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "job.sched",
        "description": "job.sched",
        "peekOfCode": "log = logging.getLogger(\"apscheduler.executors.default\")\nlog.setLevel(logging.WARNING)\nscheduler = AsyncIOScheduler()\nasync def run_jobs_if_exists():\n    async def unknown_action(action):\n        logging.warning(f\"Unknown job action: {action}\")\n    jobs = await JobService().fetch_sorted()\n    # logging.info(f\"There are {len(jobs)} Jobs pending running.\")\n    if len(jobs) == 0:\n        # felicity_pause_workforce()\\",
        "detail": "job.sched",
        "documentation": {}
    },
    {
        "label": "scheduler",
        "kind": 5,
        "importPath": "job.sched",
        "description": "job.sched",
        "peekOfCode": "scheduler = AsyncIOScheduler()\nasync def run_jobs_if_exists():\n    async def unknown_action(action):\n        logging.warning(f\"Unknown job action: {action}\")\n    jobs = await JobService().fetch_sorted()\n    # logging.info(f\"There are {len(jobs)} Jobs pending running.\")\n    if len(jobs) == 0:\n        # felicity_pause_workforce()\\\n        pass\n    else:",
        "detail": "job.sched",
        "documentation": {}
    },
    {
        "label": "JobBase",
        "kind": 6,
        "importPath": "job.schemas",
        "description": "job.schemas",
        "peekOfCode": "class JobBase(BaseModel):\n    action: str | None = None\n    category: str | None = JobCategory.WORKSHEET\n    priority: int | None = JobPriority.NORMAL\n    data: Optional[Any] = None\n    job_id: str | None = None\n    status: str | None = JobState.PENDING\n    reason: str | None = None\n    creator_uid: str | None = None\nclass Job(JobBase):",
        "detail": "job.schemas",
        "documentation": {}
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": "job.schemas",
        "description": "job.schemas",
        "peekOfCode": "class Job(JobBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass JobCreate(JobBase):\n    pass\nclass JobUpdate(JobBase):\n    pass",
        "detail": "job.schemas",
        "documentation": {}
    },
    {
        "label": "JobCreate",
        "kind": 6,
        "importPath": "job.schemas",
        "description": "job.schemas",
        "peekOfCode": "class JobCreate(JobBase):\n    pass\nclass JobUpdate(JobBase):\n    pass",
        "detail": "job.schemas",
        "documentation": {}
    },
    {
        "label": "JobUpdate",
        "kind": 6,
        "importPath": "job.schemas",
        "description": "job.schemas",
        "peekOfCode": "class JobUpdate(JobBase):\n    pass",
        "detail": "job.schemas",
        "documentation": {}
    },
    {
        "label": "JobService",
        "kind": 6,
        "importPath": "job.services",
        "description": "job.services",
        "peekOfCode": "class JobService(BaseService[Job, JobCreate, JobUpdate]):\n    def __init__(self):\n        super().__init__(JobRepository)\n    async def backoff(self, uid: str, minutes: int = 5, max_retries: int = 5):\n        job = await self.get(uid=uid)\n        bck = minutes * job.retries\n        job.next_try = datetime.now() + timedelta(minutes=bck)\n        if job.retries >= max_retries + 1:\n            job.status = JobState.FAILED\n            job.reason = f\"max retries have been exceeded: {max_retries}\"",
        "detail": "job.services",
        "documentation": {}
    },
    {
        "label": "JobWorkerService",
        "kind": 6,
        "importPath": "job.services",
        "description": "job.services",
        "peekOfCode": "class JobWorkerService:\n    def __init__(self):\n        self.job_service = JobService()\n    async def run_jobs_if_exists(self):\n        jobs = await self.job_service.fetch_sorted()\n        # logging.info(f\"There are {len(jobs)} Jobs pending running.\")\n        if not jobs:\n            return\n        job_dispatch_table = {}\n        # job_dispatch_table = {",
        "detail": "job.services",
        "documentation": {}
    },
    {
        "label": "MessageThread",
        "kind": 6,
        "importPath": "messaging.entities",
        "description": "messaging.entities",
        "peekOfCode": "class MessageThread(AuditUser):\n    \"\"\"MessageThread\"\"\"\n    __tablename__ = \"message_thread\"\n    broadcast = Column(Boolean, nullable=False)\n    messages = relationship(\"Message\", back_populates=\"thread\", lazy=\"selectin\")\n    recipients = relationship(\n        \"User\", secondary=message_thread_recipient, lazy=\"selectin\"\n    )\n    deleted_by = relationship(\"User\", secondary=message_thread_delete, lazy=\"selectin\")\n\"\"\"",
        "detail": "messaging.entities",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "messaging.entities",
        "description": "messaging.entities",
        "peekOfCode": "class Message(AuditUser, BaseMPTT):\n    \"\"\"Message\"\"\"\n    __tablename__ = \"message\"\n    thread_uid = Column(String, ForeignKey(\"message_thread.uid\"), nullable=True)\n    thread = relationship(\"MessageThread\", back_populates=\"messages\", lazy=\"selectin\")\n    body = Column(String, nullable=False)\n    viewers = relationship(\"User\", secondary=message_view, lazy=\"selectin\")\n    deleted_by = relationship(\"User\", secondary=message_delete, lazy=\"selectin\")",
        "detail": "messaging.entities",
        "documentation": {}
    },
    {
        "label": "message_thread_recipient",
        "kind": 5,
        "importPath": "messaging.entities",
        "description": "messaging.entities",
        "peekOfCode": "message_thread_recipient = Table(\n    \"message_thread_recipient\",\n    BaseEntity.metadata,\n    Column(\"message_thread_uid\", ForeignKey(\"message_thread.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\n\"\"\"\n Many to Many Link between Users (deletions)  and MessageThread\n\"\"\"\nmessage_thread_delete = Table(",
        "detail": "messaging.entities",
        "documentation": {}
    },
    {
        "label": "message_thread_delete",
        "kind": 5,
        "importPath": "messaging.entities",
        "description": "messaging.entities",
        "peekOfCode": "message_thread_delete = Table(\n    \"message_thread_delete\",\n    BaseEntity.metadata,\n    Column(\"message_thread_uid\", ForeignKey(\"message_thread.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\nclass MessageThread(AuditUser):\n    \"\"\"MessageThread\"\"\"\n    __tablename__ = \"message_thread\"\n    broadcast = Column(Boolean, nullable=False)",
        "detail": "messaging.entities",
        "documentation": {}
    },
    {
        "label": "message_view",
        "kind": 5,
        "importPath": "messaging.entities",
        "description": "messaging.entities",
        "peekOfCode": "message_view = Table(\n    \"message_view\",\n    BaseEntity.metadata,\n    Column(\"message_uid\", ForeignKey(\"message.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\n\"\"\"\n Many to Many Link between Users (deletions) and Message\n\"\"\"\nmessage_delete = Table(",
        "detail": "messaging.entities",
        "documentation": {}
    },
    {
        "label": "message_delete",
        "kind": 5,
        "importPath": "messaging.entities",
        "description": "messaging.entities",
        "peekOfCode": "message_delete = Table(\n    \"message_delete\",\n    BaseEntity.metadata,\n    Column(\"message_uid\", ForeignKey(\"message.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\nclass Message(AuditUser, BaseMPTT):\n    \"\"\"Message\"\"\"\n    __tablename__ = \"message\"\n    thread_uid = Column(String, ForeignKey(\"message_thread.uid\"), nullable=True)",
        "detail": "messaging.entities",
        "documentation": {}
    },
    {
        "label": "MessageThreadRepository",
        "kind": 6,
        "importPath": "messaging.repository",
        "description": "messaging.repository",
        "peekOfCode": "class MessageThreadRepository(BaseRepository[MessageThread]):\n    def __init__(self) -> None:\n        super().__init__(MessageThread)\nclass MessageRepository(BaseRepository[Message]):\n    def __init__(self) -> None:\n        super().__init__(Message)",
        "detail": "messaging.repository",
        "documentation": {}
    },
    {
        "label": "MessageRepository",
        "kind": 6,
        "importPath": "messaging.repository",
        "description": "messaging.repository",
        "peekOfCode": "class MessageRepository(BaseRepository[Message]):\n    def __init__(self) -> None:\n        super().__init__(Message)",
        "detail": "messaging.repository",
        "documentation": {}
    },
    {
        "label": "MessageBase",
        "kind": 6,
        "importPath": "messaging.schemas",
        "description": "messaging.schemas",
        "peekOfCode": "class MessageBase(BaseAuditModel):\n    thread_uid: str\n    thread: Optional[\"MessageThread\"] = None\n    body: str | None = \"\"\n    viewers: Optional[List[User]] = []\n    deleted_by: Optional[List[User]] = []\n    parent_id: str | None = None\nclass Message(MessageBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)",
        "detail": "messaging.schemas",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "messaging.schemas",
        "description": "messaging.schemas",
        "peekOfCode": "class Message(MessageBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass MessageCreate(MessageBase):\n    pass\nclass MessageUpdate(MessageBase):\n    pass\n#\n# MessageThread Schemas\n#",
        "detail": "messaging.schemas",
        "documentation": {}
    },
    {
        "label": "MessageCreate",
        "kind": 6,
        "importPath": "messaging.schemas",
        "description": "messaging.schemas",
        "peekOfCode": "class MessageCreate(MessageBase):\n    pass\nclass MessageUpdate(MessageBase):\n    pass\n#\n# MessageThread Schemas\n#\nclass MessageThreadBase(BaseAuditModel):\n    broadcast: bool | None = False\n    recipients: Optional[List[User]] = []",
        "detail": "messaging.schemas",
        "documentation": {}
    },
    {
        "label": "MessageUpdate",
        "kind": 6,
        "importPath": "messaging.schemas",
        "description": "messaging.schemas",
        "peekOfCode": "class MessageUpdate(MessageBase):\n    pass\n#\n# MessageThread Schemas\n#\nclass MessageThreadBase(BaseAuditModel):\n    broadcast: bool | None = False\n    recipients: Optional[List[User]] = []\n    messages: Optional[List[Message]] = []\n    recipients: Optional[List[User]] = []",
        "detail": "messaging.schemas",
        "documentation": {}
    },
    {
        "label": "MessageThreadBase",
        "kind": 6,
        "importPath": "messaging.schemas",
        "description": "messaging.schemas",
        "peekOfCode": "class MessageThreadBase(BaseAuditModel):\n    broadcast: bool | None = False\n    recipients: Optional[List[User]] = []\n    messages: Optional[List[Message]] = []\n    recipients: Optional[List[User]] = []\nclass MessageThread(MessageThreadBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass MessageThreadCreate(MessageThreadBase):\n    pass",
        "detail": "messaging.schemas",
        "documentation": {}
    },
    {
        "label": "MessageThread",
        "kind": 6,
        "importPath": "messaging.schemas",
        "description": "messaging.schemas",
        "peekOfCode": "class MessageThread(MessageThreadBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass MessageThreadCreate(MessageThreadBase):\n    pass\nclass MessageThreadUpdate(MessageThreadBase):\n    pass",
        "detail": "messaging.schemas",
        "documentation": {}
    },
    {
        "label": "MessageThreadCreate",
        "kind": 6,
        "importPath": "messaging.schemas",
        "description": "messaging.schemas",
        "peekOfCode": "class MessageThreadCreate(MessageThreadBase):\n    pass\nclass MessageThreadUpdate(MessageThreadBase):\n    pass",
        "detail": "messaging.schemas",
        "documentation": {}
    },
    {
        "label": "MessageThreadUpdate",
        "kind": 6,
        "importPath": "messaging.schemas",
        "description": "messaging.schemas",
        "peekOfCode": "class MessageThreadUpdate(MessageThreadBase):\n    pass",
        "detail": "messaging.schemas",
        "documentation": {}
    },
    {
        "label": "MessageThreadService",
        "kind": 6,
        "importPath": "messaging.services",
        "description": "messaging.services",
        "peekOfCode": "class MessageThreadService(\n    BaseService[MessageThread, MessageThreadCreate, MessageThreadUpdate]\n):\n    def __init__(self):\n        self.message_service = MessageService()\n        super().__init__(MessageThreadRepository)\n    async def get_last_message(self, uid: str):\n        thread = await self.get(uid=uid)\n        if not thread.messages:\n            return None",
        "detail": "messaging.services",
        "documentation": {}
    },
    {
        "label": "MessageService",
        "kind": 6,
        "importPath": "messaging.services",
        "description": "messaging.services",
        "peekOfCode": "class MessageService(BaseService[Message, MessageCreate, MessageUpdate]):\n    def __int__(self):\n        self.thread_service = MessageThreadService()\n        self.user_service = UserService()\n        super().__init__(MessageRepository)\n    async def send_message(\n        self, recipients: list[str], body: str, user: User\n    ) -> Message:\n        _recipients = [user]\n        for _rec in recipients:",
        "detail": "messaging.services",
        "documentation": {}
    },
    {
        "label": "Notice",
        "kind": 6,
        "importPath": "noticeboard.entities",
        "description": "noticeboard.entities",
        "peekOfCode": "class Notice(AuditUser):\n    \"\"\"Notice\"\"\"\n    __tablename__ = \"notice\"\n    departments = relationship(\n        \"Department\", secondary=department_notice, lazy=\"selectin\"\n    )\n    groups = relationship(\"Group\", secondary=group_notice, lazy=\"selectin\")\n    title = Column(String, nullable=False)\n    body = Column(String, nullable=False)\n    viewers = relationship(\"User\", secondary=notice_view, lazy=\"selectin\")",
        "detail": "noticeboard.entities",
        "documentation": {}
    },
    {
        "label": "NoticeRepository",
        "kind": 6,
        "importPath": "noticeboard.repository",
        "description": "noticeboard.repository",
        "peekOfCode": "class NoticeRepository(BaseRepository[Notice]):\n    def __init__(self) -> None:\n        super().__init__(Notice)",
        "detail": "noticeboard.repository",
        "documentation": {}
    },
    {
        "label": "NoticeBase",
        "kind": 6,
        "importPath": "noticeboard.schemas",
        "description": "noticeboard.schemas",
        "peekOfCode": "class NoticeBase(BaseAuditModel):\n    departments: Optional[List[Department]] = []\n    groups: Optional[List[Group]] = []\n    title: str | None = \"\"\n    body: str | None = \"\"\n    viewers: Optional[List[User]] = []\n    expiry: datetime | None = None\nclass Notice(NoticeBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)",
        "detail": "noticeboard.schemas",
        "documentation": {}
    },
    {
        "label": "Notice",
        "kind": 6,
        "importPath": "noticeboard.schemas",
        "description": "noticeboard.schemas",
        "peekOfCode": "class Notice(NoticeBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass NoticeCreate(NoticeBase):\n    pass\nclass NoticeUpdate(NoticeBase):\n    pass",
        "detail": "noticeboard.schemas",
        "documentation": {}
    },
    {
        "label": "NoticeCreate",
        "kind": 6,
        "importPath": "noticeboard.schemas",
        "description": "noticeboard.schemas",
        "peekOfCode": "class NoticeCreate(NoticeBase):\n    pass\nclass NoticeUpdate(NoticeBase):\n    pass",
        "detail": "noticeboard.schemas",
        "documentation": {}
    },
    {
        "label": "NoticeUpdate",
        "kind": 6,
        "importPath": "noticeboard.schemas",
        "description": "noticeboard.schemas",
        "peekOfCode": "class NoticeUpdate(NoticeBase):\n    pass",
        "detail": "noticeboard.schemas",
        "documentation": {}
    },
    {
        "label": "NoticeService",
        "kind": 6,
        "importPath": "noticeboard.services",
        "description": "noticeboard.services",
        "peekOfCode": "class NoticeService(BaseService[Notice, NoticeCreate, NoticeUpdate]):\n    def __init__(self):\n        self.group_service = GroupService()\n        self.department_service = DepartmentService()\n        self.user_service = UserService()\n        super().__init__(NoticeRepository)\n    async def filter(\n        self,\n        group_uid: str | None,\n        department_uid: str | None,",
        "detail": "noticeboard.services",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "notification.tasks.analyses",
        "description": "notification.tasks.analyses",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def check_over_due_analyses():\n    \"\"\"Check Over-Due Analyses\n    @schedule: runs every morning 4:00 am\n    e.g.\n        there are 3456 analyses that are overdue\n    \"\"\"\n# abnormal activity monitoring\n# sample cancellations\n# analysis retests",
        "detail": "notification.tasks.analyses",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "notification.tasks.instrument",
        "description": "notification.tasks.instrument",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def caliberation_status():\n    \"\"\"\"\"\"",
        "detail": "notification.tasks.instrument",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "notification.tasks.sample",
        "description": "notification.tasks.sample",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def notpublished():\n    \"\"\"\"\"\"\n# abnormal activity monitoring\n# sample cancellations\n# analysis retests\n# set threshnold parameters e.g there must be no more than 10 cancellations within week\n# there must be no more that 2 rejection per day/week etc\n# these must be no more than x retests /retractions/ invalidations\n# is these thresholds are exceeded then a system management notification must be generated",
        "detail": "notification.tasks.sample",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "notification.tasks.worksheet",
        "description": "notification.tasks.worksheet",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def check_open_worksheets():\n    \"\"\"Check Open Worksheets\n    @schedule: runs every morning 4:00 am\n    e.g.\n        23 worksheets are in open state\n    \"\"\"\nasync def check_incomplete_worksheet_assignments():\n    \"\"\"Check Incomplete Worksheet Assignments\n    @schedule: runs every morning 4:00 am",
        "detail": "notification.tasks.worksheet",
        "documentation": {}
    },
    {
        "label": "ActivityFeed",
        "kind": 6,
        "importPath": "notification.entities",
        "description": "notification.entities",
        "peekOfCode": "class ActivityFeed(AuditUser):\n    \"\"\"ActivityFeed\"\"\"\n    __tablename__ = \"activity_feed\"\n    name = Column(String, nullable=False)\n    subscribers = relationship(\n        \"User\", secondary=activity_feed_subscription, lazy=\"selectin\"\n    )\n\"\"\"\n Many to Many Link between ActivityStream and ActivityFeed\n\"\"\"",
        "detail": "notification.entities",
        "documentation": {}
    },
    {
        "label": "ActivityStream",
        "kind": 6,
        "importPath": "notification.entities",
        "description": "notification.entities",
        "peekOfCode": "class ActivityStream(AuditUser):\n    \"\"\"ActivityStream\n    Actor. The object that performed the activity.\n    Verb. The verb phrase that identifies the action of the activity.\n    Action Object. (Optional) The object linked to the action itself.\n    Target. (Optional) The object to which the activity was performed.\n    e.g. Aurthur (actor) verified (verb) worksheet ws20-1222 (action object) 20 on felicity lims (target) minutes ago\n    ?? maybe target as feed\n    \"\"\"\n    __tablename__ = \"activity_stream\"",
        "detail": "notification.entities",
        "documentation": {}
    },
    {
        "label": "Notification",
        "kind": 6,
        "importPath": "notification.entities",
        "description": "notification.entities",
        "peekOfCode": "class Notification(AuditUser):\n    \"\"\"Notification\n    Custom messages about system status. These are more like activity streams only that they are very specific\n    messages to notify users about something important\n    examples:\n        32 samples are due in 4 days, today, etc ....\n        7 open worksheets have been lying idle for 3 weeks including 137 samples past their due date.\n        2 worksheets have no samples, consider populating or deleting them to avoid cluttering your dashboard\n        ...\n    \"\"\"",
        "detail": "notification.entities",
        "documentation": {}
    },
    {
        "label": "activity_feed_subscription",
        "kind": 5,
        "importPath": "notification.entities",
        "description": "notification.entities",
        "peekOfCode": "activity_feed_subscription = Table(\n    \"activity_feed_subscription\",\n    BaseEntity.metadata,\n    Column(\"activity_feed_uid\", ForeignKey(\"activity_feed.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\nclass ActivityFeed(AuditUser):\n    \"\"\"ActivityFeed\"\"\"\n    __tablename__ = \"activity_feed\"\n    name = Column(String, nullable=False)",
        "detail": "notification.entities",
        "documentation": {}
    },
    {
        "label": "activity_stream_feed",
        "kind": 5,
        "importPath": "notification.entities",
        "description": "notification.entities",
        "peekOfCode": "activity_stream_feed = Table(\n    \"activity_stream_feed\",\n    BaseEntity.metadata,\n    Column(\"activity_feed_uid\", ForeignKey(\"activity_feed.uid\"), primary_key=True),\n    Column(\"stream_uid\", ForeignKey(\"activity_stream.uid\"), primary_key=True),\n)\n\"\"\"\n Many to Many Link between Users and ActivityStream\n\"\"\"\nactivity_stream_view = Table(",
        "detail": "notification.entities",
        "documentation": {}
    },
    {
        "label": "activity_stream_view",
        "kind": 5,
        "importPath": "notification.entities",
        "description": "notification.entities",
        "peekOfCode": "activity_stream_view = Table(\n    \"activity_stream_view\",\n    BaseEntity.metadata,\n    Column(\"activity_stream_uid\", ForeignKey(\"activity_stream.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\nclass ActivityStream(AuditUser):\n    \"\"\"ActivityStream\n    Actor. The object that performed the activity.\n    Verb. The verb phrase that identifies the action of the activity.",
        "detail": "notification.entities",
        "documentation": {}
    },
    {
        "label": "user_notification",
        "kind": 5,
        "importPath": "notification.entities",
        "description": "notification.entities",
        "peekOfCode": "user_notification = Table(\n    \"user_notification\",\n    BaseEntity.metadata,\n    Column(\"notification_uid\", ForeignKey(\"notification.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\n\"\"\"\n Many to Many Link between Users and Notification\n\"\"\"\nnotification_view = Table(",
        "detail": "notification.entities",
        "documentation": {}
    },
    {
        "label": "notification_view",
        "kind": 5,
        "importPath": "notification.entities",
        "description": "notification.entities",
        "peekOfCode": "notification_view = Table(\n    \"notification_view\",\n    BaseEntity.metadata,\n    Column(\"notification_uid\", ForeignKey(\"notification.uid\"), primary_key=True),\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n)\n\"\"\"\n Many to Many Link between Group and Notification\n\"\"\"\ngroup_notification = Table(",
        "detail": "notification.entities",
        "documentation": {}
    },
    {
        "label": "group_notification",
        "kind": 5,
        "importPath": "notification.entities",
        "description": "notification.entities",
        "peekOfCode": "group_notification = Table(\n    \"group_notification\",\n    BaseEntity.metadata,\n    Column(\"notification_uid\", ForeignKey(\"notification.uid\"), primary_key=True),\n    Column(\"group_uid\", ForeignKey(\"group.uid\"), primary_key=True),\n)\n\"\"\"\n Many to Many Link between Department and Notification\n\"\"\"\ndepartment_notification = Table(",
        "detail": "notification.entities",
        "documentation": {}
    },
    {
        "label": "department_notification",
        "kind": 5,
        "importPath": "notification.entities",
        "description": "notification.entities",
        "peekOfCode": "department_notification = Table(\n    \"department_notification\",\n    BaseEntity.metadata,\n    Column(\"notification_uid\", ForeignKey(\"notification.uid\"), primary_key=True),\n    Column(\"department_uid\", ForeignKey(\"department.uid\"), primary_key=True),\n)\nclass Notification(AuditUser):\n    \"\"\"Notification\n    Custom messages about system status. These are more like activity streams only that they are very specific\n    messages to notify users about something important",
        "detail": "notification.entities",
        "documentation": {}
    },
    {
        "label": "NotificationObject",
        "kind": 6,
        "importPath": "notification.enum",
        "description": "notification.enum",
        "peekOfCode": "class NotificationObject(StrEnum):\n    \"\"\"Action Object\"\"\"\n    SAMPLE = auto()\n    ANALYSIS_RESULT = auto()\n    WORKSHEET = auto()\n    REPORT = auto()\nclass NotificationChannel(StrEnum):\n    ACTIVITIES = auto()\n    NOTIFICATIONS = auto()\n    JOBS = auto()",
        "detail": "notification.enum",
        "documentation": {}
    },
    {
        "label": "NotificationChannel",
        "kind": 6,
        "importPath": "notification.enum",
        "description": "notification.enum",
        "peekOfCode": "class NotificationChannel(StrEnum):\n    ACTIVITIES = auto()\n    NOTIFICATIONS = auto()\n    JOBS = auto()",
        "detail": "notification.enum",
        "documentation": {}
    },
    {
        "label": "ActivityFeedRepository",
        "kind": 6,
        "importPath": "notification.repository",
        "description": "notification.repository",
        "peekOfCode": "class ActivityFeedRepository(BaseRepository[ActivityFeed]):\n    def __init__(self) -> None:\n        super().__init__(ActivityFeed)\nclass ActivityStreamRepository(BaseRepository[ActivityStream]):\n    def __init__(self) -> None:\n        super().__init__(ActivityStream)\nclass NotificationRepository(BaseRepository[Notification]):\n    def __init__(self) -> None:\n        super().__init__(Notification)",
        "detail": "notification.repository",
        "documentation": {}
    },
    {
        "label": "ActivityStreamRepository",
        "kind": 6,
        "importPath": "notification.repository",
        "description": "notification.repository",
        "peekOfCode": "class ActivityStreamRepository(BaseRepository[ActivityStream]):\n    def __init__(self) -> None:\n        super().__init__(ActivityStream)\nclass NotificationRepository(BaseRepository[Notification]):\n    def __init__(self) -> None:\n        super().__init__(Notification)",
        "detail": "notification.repository",
        "documentation": {}
    },
    {
        "label": "NotificationRepository",
        "kind": 6,
        "importPath": "notification.repository",
        "description": "notification.repository",
        "peekOfCode": "class NotificationRepository(BaseRepository[Notification]):\n    def __init__(self) -> None:\n        super().__init__(Notification)",
        "detail": "notification.repository",
        "documentation": {}
    },
    {
        "label": "ActivityFeedBase",
        "kind": 6,
        "importPath": "notification.schemas",
        "description": "notification.schemas",
        "peekOfCode": "class ActivityFeedBase(BaseAuditModel):\n    name: str | None = \"\"\n    subscribers: Optional[List[User]] = []\nclass ActivityFeed(ActivityFeedBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass ActivityFeedCreate(ActivityFeedBase):\n    pass\nclass ActivityFeedUpdate(ActivityFeedBase):\n    pass",
        "detail": "notification.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityFeed",
        "kind": 6,
        "importPath": "notification.schemas",
        "description": "notification.schemas",
        "peekOfCode": "class ActivityFeed(ActivityFeedBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass ActivityFeedCreate(ActivityFeedBase):\n    pass\nclass ActivityFeedUpdate(ActivityFeedBase):\n    pass\n#\n# ActivityStream Schemas\n#",
        "detail": "notification.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityFeedCreate",
        "kind": 6,
        "importPath": "notification.schemas",
        "description": "notification.schemas",
        "peekOfCode": "class ActivityFeedCreate(ActivityFeedBase):\n    pass\nclass ActivityFeedUpdate(ActivityFeedBase):\n    pass\n#\n# ActivityStream Schemas\n#\nclass ActivityStreamBase(BaseAuditModel):\n    feeds: Optional[List[ActivityFeed]] = []\n    actor_uid: str | None = None",
        "detail": "notification.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityFeedUpdate",
        "kind": 6,
        "importPath": "notification.schemas",
        "description": "notification.schemas",
        "peekOfCode": "class ActivityFeedUpdate(ActivityFeedBase):\n    pass\n#\n# ActivityStream Schemas\n#\nclass ActivityStreamBase(BaseAuditModel):\n    feeds: Optional[List[ActivityFeed]] = []\n    actor_uid: str | None = None\n    actor: Optional[User] = None\n    verb: str | None = None",
        "detail": "notification.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityStreamBase",
        "kind": 6,
        "importPath": "notification.schemas",
        "description": "notification.schemas",
        "peekOfCode": "class ActivityStreamBase(BaseAuditModel):\n    feeds: Optional[List[ActivityFeed]] = []\n    actor_uid: str | None = None\n    actor: Optional[User] = None\n    verb: str | None = None\n    action_object_type: str | None = None\n    action_object_uid: str | None = None\n    action_object: str | None = None\n    target_uid: str | None = None\n    target: str | None = None",
        "detail": "notification.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityStream",
        "kind": 6,
        "importPath": "notification.schemas",
        "description": "notification.schemas",
        "peekOfCode": "class ActivityStream(ActivityStreamBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass ActivityStreamCreate(ActivityStream):\n    pass\nclass ActivityStreamUpdate(ActivityStreamBase):\n    pass\n#\n# Notification Schemas\n#",
        "detail": "notification.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityStreamCreate",
        "kind": 6,
        "importPath": "notification.schemas",
        "description": "notification.schemas",
        "peekOfCode": "class ActivityStreamCreate(ActivityStream):\n    pass\nclass ActivityStreamUpdate(ActivityStreamBase):\n    pass\n#\n# Notification Schemas\n#\nclass NotificationBase(BaseAuditModel):\n    departments: Optional[List[Department]] = []\n    groups: Optional[List[Group]] = []",
        "detail": "notification.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityStreamUpdate",
        "kind": 6,
        "importPath": "notification.schemas",
        "description": "notification.schemas",
        "peekOfCode": "class ActivityStreamUpdate(ActivityStreamBase):\n    pass\n#\n# Notification Schemas\n#\nclass NotificationBase(BaseAuditModel):\n    departments: Optional[List[Department]] = []\n    groups: Optional[List[Group]] = []\n    users: Optional[List[User]] = []\n    message: str | None = \"\"",
        "detail": "notification.schemas",
        "documentation": {}
    },
    {
        "label": "NotificationBase",
        "kind": 6,
        "importPath": "notification.schemas",
        "description": "notification.schemas",
        "peekOfCode": "class NotificationBase(BaseAuditModel):\n    departments: Optional[List[Department]] = []\n    groups: Optional[List[Group]] = []\n    users: Optional[List[User]] = []\n    message: str | None = \"\"\n    viewers: Optional[List[User]] = []\nclass Notification(NotificationBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass NotificationCreate(NotificationBase):",
        "detail": "notification.schemas",
        "documentation": {}
    },
    {
        "label": "Notification",
        "kind": 6,
        "importPath": "notification.schemas",
        "description": "notification.schemas",
        "peekOfCode": "class Notification(NotificationBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass NotificationCreate(NotificationBase):\n    pass\nclass NotificationUpdate(NotificationBase):\n    pass",
        "detail": "notification.schemas",
        "documentation": {}
    },
    {
        "label": "NotificationCreate",
        "kind": 6,
        "importPath": "notification.schemas",
        "description": "notification.schemas",
        "peekOfCode": "class NotificationCreate(NotificationBase):\n    pass\nclass NotificationUpdate(NotificationBase):\n    pass",
        "detail": "notification.schemas",
        "documentation": {}
    },
    {
        "label": "NotificationUpdate",
        "kind": 6,
        "importPath": "notification.schemas",
        "description": "notification.schemas",
        "peekOfCode": "class NotificationUpdate(NotificationBase):\n    pass",
        "detail": "notification.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityFeedService",
        "kind": 6,
        "importPath": "notification.services",
        "description": "notification.services",
        "peekOfCode": "class ActivityFeedService(\n    BaseService[ActivityFeed, ActivityFeedCreate, ActivityFeedUpdate]\n):\n    def __init__(self):\n        super().__init__(ActivityFeedRepository)\n    async def reset_subscribers(self, activity_feed: ActivityFeed) -> ActivityFeed:\n        activity_feed.subscribers.clear()\n        return await super().update(activity_feed, **marshaller(activity_feed))\n    async def remove_subscriber(\n        self, activity_feed: ActivityFeed, user: User",
        "detail": "notification.services",
        "documentation": {}
    },
    {
        "label": "ActivityStreamService",
        "kind": 6,
        "importPath": "notification.services",
        "description": "notification.services",
        "peekOfCode": "class ActivityStreamService(\n    BaseService[ActivityStream, ActivityStreamCreate, ActivityStreamUpdate]\n):\n    def __init__(self):\n        super().__init__(ActivityStreamRepository)\n    @classmethod\n    async def stream(\n        cls,\n        obj: Any,\n        actor: User,",
        "detail": "notification.services",
        "documentation": {}
    },
    {
        "label": "NotificationService",
        "kind": 6,
        "importPath": "notification.services",
        "description": "notification.services",
        "peekOfCode": "class NotificationService(\n    BaseService[Notification, NotificationCreate, NotificationUpdate]\n):\n    def __init__(self):\n        super().__init__(NotificationRepository)\n    async def notify(\n        self,\n        message: str,\n        departments,\n        groups,",
        "detail": "notification.services",
        "documentation": {}
    },
    {
        "label": "Identification",
        "kind": 6,
        "importPath": "patient.entities",
        "description": "patient.entities",
        "peekOfCode": "class Identification(AuditHistory):\n    __tablename__ = \"identification\"\n    name = Column(String, index=True, unique=True, nullable=True)\nclass PatientIdentification(AuditHistory):\n    __tablename__ = \"patient_identification\"\n    identification_uid = Column(String, ForeignKey(\"identification.uid\"), nullable=True)\n    identification: Mapped[\"Identification\"] = relationship(\n        \"Identification\", lazy=\"selectin\"\n    )\n    patient_uid = Column(String, ForeignKey(\"patient.uid\"), nullable=True)",
        "detail": "patient.entities",
        "documentation": {}
    },
    {
        "label": "PatientIdentification",
        "kind": 6,
        "importPath": "patient.entities",
        "description": "patient.entities",
        "peekOfCode": "class PatientIdentification(AuditHistory):\n    __tablename__ = \"patient_identification\"\n    identification_uid = Column(String, ForeignKey(\"identification.uid\"), nullable=True)\n    identification: Mapped[\"Identification\"] = relationship(\n        \"Identification\", lazy=\"selectin\"\n    )\n    patient_uid = Column(String, ForeignKey(\"patient.uid\"), nullable=True)\n    patient: Mapped[\"Patient\"] = relationship(\n        \"Patient\", back_populates=\"identifications\", lazy=\"selectin\"\n    )",
        "detail": "patient.entities",
        "documentation": {}
    },
    {
        "label": "Patient",
        "kind": 6,
        "importPath": "patient.entities",
        "description": "patient.entities",
        "peekOfCode": "class Patient(AuditHistory):\n    __tablename__ = \"patient\"\n    # Identification\n    client_patient_id = Column(String, index=True, unique=True, nullable=False)\n    patient_id = Column(String, index=True, unique=True, nullable=True)\n    client_uid = Column(String, ForeignKey(\"client.uid\"), nullable=True)\n    client = relationship(Client, backref=\"patients\", lazy=\"selectin\")\n    # Details\n    first_name = Column(String, nullable=False)\n    middle_name = Column(String, nullable=True)",
        "detail": "patient.entities",
        "documentation": {}
    },
    {
        "label": "Sex",
        "kind": 6,
        "importPath": "patient.enum",
        "description": "patient.enum",
        "peekOfCode": "class Sex(StrEnum):\n    MALE = \"Male\"\n    FEMALE = \"Female\"\n    MISSING = \"Missing\"\n    TRANS_GENDER = \"Trans Gender\"",
        "detail": "patient.enum",
        "documentation": {}
    },
    {
        "label": "Identification",
        "kind": 6,
        "importPath": "patient.models",
        "description": "patient.models",
        "peekOfCode": "class Identification(AuditHistory):\n    __tablename__ = \"identification\"\n    name = Column(String, index=True, unique=True, nullable=True)\n    @classmethod\n    async def create(\n        cls, obj_in: dict | schemas.IdentificationCreate\n    ) -> schemas.Identification:\n        data = cls._import(obj_in)\n        return await super().create(data, related)\n    async def update(",
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "PatientIdentification",
        "kind": 6,
        "importPath": "patient.models",
        "description": "patient.models",
        "peekOfCode": "class PatientIdentification(AuditHistory):\n    __tablename__ = \"patient_identification\"\n    identification_uid = Column(String, ForeignKey(\"identification.uid\"), nullable=True)\n    identification: Mapped[\"Identification\"] = relationship(\n        \"Identification\", lazy=\"selectin\"\n    )\n    patient_uid = Column(String, ForeignKey(\"patient.uid\"), nullable=True)\n    patient: Mapped[\"Patient\"] = relationship(\n        \"Patient\", back_populates=\"identifications\", lazy=\"selectin\"\n    )",
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "kind": 6,
        "importPath": "patient.models",
        "description": "patient.models",
        "peekOfCode": "class Patient(AuditHistory):\n    __tablename__ = \"patient\"\n    # Identification\n    client_patient_id = Column(String, index=True, unique=True, nullable=False)\n    patient_id = Column(String, index=True, unique=True, nullable=True)\n    client_uid = Column(String, ForeignKey(\"client.uid\"), nullable=True)\n    client = relationship(Client, backref=\"patients\", lazy=\"selectin\")\n    # Details\n    first_name = Column(String, nullable=False)\n    middle_name = Column(String, nullable=True)",
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "patient.models",
        "description": "patient.models",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Identification(AuditHistory):\n    __tablename__ = \"identification\"\n    name = Column(String, index=True, unique=True, nullable=True)\n    @classmethod\n    async def create(\n        cls, obj_in: dict | schemas.IdentificationCreate\n    ) -> schemas.Identification:\n        data = cls._import(obj_in)\n        return await super().create(data, related)",
        "detail": "patient.models",
        "documentation": {}
    },
    {
        "label": "PatientRepository",
        "kind": 6,
        "importPath": "patient.repository",
        "description": "patient.repository",
        "peekOfCode": "class PatientRepository(BaseRepository[Patient]):\n    def __init__(self) -> None:\n        super().__init__(Patient)\nclass IdentificationRepository(BaseRepository[Identification]):\n    def __init__(self) -> None:\n        super().__init__(Identification)\nclass PatientIdentificationRepository(BaseRepository[PatientIdentification]):\n    def __init__(self) -> None:\n        super().__init__(PatientIdentification)",
        "detail": "patient.repository",
        "documentation": {}
    },
    {
        "label": "IdentificationRepository",
        "kind": 6,
        "importPath": "patient.repository",
        "description": "patient.repository",
        "peekOfCode": "class IdentificationRepository(BaseRepository[Identification]):\n    def __init__(self) -> None:\n        super().__init__(Identification)\nclass PatientIdentificationRepository(BaseRepository[PatientIdentification]):\n    def __init__(self) -> None:\n        super().__init__(PatientIdentification)",
        "detail": "patient.repository",
        "documentation": {}
    },
    {
        "label": "PatientIdentificationRepository",
        "kind": 6,
        "importPath": "patient.repository",
        "description": "patient.repository",
        "peekOfCode": "class PatientIdentificationRepository(BaseRepository[PatientIdentification]):\n    def __init__(self) -> None:\n        super().__init__(PatientIdentification)",
        "detail": "patient.repository",
        "documentation": {}
    },
    {
        "label": "PatientBase",
        "kind": 6,
        "importPath": "patient.schemas",
        "description": "patient.schemas",
        "peekOfCode": "class PatientBase(BaseAuditModel):\n    client_patient_id: str | None = None\n    client_uid: str | None = None\n    patient_id: str | None = None\n    first_name: str | None = None\n    middle_name: str | None = None\n    last_name: str | None = None\n    gender: str | None = None\n    age: int | None = None\n    date_of_birth: datetime | None = None",
        "detail": "patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientCreate",
        "kind": 6,
        "importPath": "patient.schemas",
        "description": "patient.schemas",
        "peekOfCode": "class PatientCreate(PatientBase):\n    client_patient_id: str\n    first_name: str\n    last_name: str\n    client_uid: str\n    active: bool = True\n# Properties to receive via API on update\nclass PatientUpdate(PatientBase):\n    pass\nclass PatientInDBBase(PatientBase):",
        "detail": "patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientUpdate",
        "kind": 6,
        "importPath": "patient.schemas",
        "description": "patient.schemas",
        "peekOfCode": "class PatientUpdate(PatientBase):\n    pass\nclass PatientInDBBase(PatientBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Patient(PatientInDBBase):\n    pass\n# Additional properties stored in DB\nclass PatientInDB(PatientInDBBase):",
        "detail": "patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientInDBBase",
        "kind": 6,
        "importPath": "patient.schemas",
        "description": "patient.schemas",
        "peekOfCode": "class PatientInDBBase(PatientBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Patient(PatientInDBBase):\n    pass\n# Additional properties stored in DB\nclass PatientInDB(PatientInDBBase):\n    pass\n#",
        "detail": "patient.schemas",
        "documentation": {}
    },
    {
        "label": "Patient",
        "kind": 6,
        "importPath": "patient.schemas",
        "description": "patient.schemas",
        "peekOfCode": "class Patient(PatientInDBBase):\n    pass\n# Additional properties stored in DB\nclass PatientInDB(PatientInDBBase):\n    pass\n#\n#  Identification Schema\n#\n# Shared properties\nclass IdentificationBase(BaseAuditModel):",
        "detail": "patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientInDB",
        "kind": 6,
        "importPath": "patient.schemas",
        "description": "patient.schemas",
        "peekOfCode": "class PatientInDB(PatientInDBBase):\n    pass\n#\n#  Identification Schema\n#\n# Shared properties\nclass IdentificationBase(BaseAuditModel):\n    name: str\n# Properties to receive via API on creation\nclass IdentificationCreate(IdentificationBase):",
        "detail": "patient.schemas",
        "documentation": {}
    },
    {
        "label": "IdentificationBase",
        "kind": 6,
        "importPath": "patient.schemas",
        "description": "patient.schemas",
        "peekOfCode": "class IdentificationBase(BaseAuditModel):\n    name: str\n# Properties to receive via API on creation\nclass IdentificationCreate(IdentificationBase):\n    pass\n# Properties to receive via API on update\nclass IdentificationUpdate(IdentificationBase):\n    pass\nclass IdentificationInDBBase(IdentificationBase):\n    uid: str | None = None",
        "detail": "patient.schemas",
        "documentation": {}
    },
    {
        "label": "IdentificationCreate",
        "kind": 6,
        "importPath": "patient.schemas",
        "description": "patient.schemas",
        "peekOfCode": "class IdentificationCreate(IdentificationBase):\n    pass\n# Properties to receive via API on update\nclass IdentificationUpdate(IdentificationBase):\n    pass\nclass IdentificationInDBBase(IdentificationBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Identification(IdentificationInDBBase):",
        "detail": "patient.schemas",
        "documentation": {}
    },
    {
        "label": "IdentificationUpdate",
        "kind": 6,
        "importPath": "patient.schemas",
        "description": "patient.schemas",
        "peekOfCode": "class IdentificationUpdate(IdentificationBase):\n    pass\nclass IdentificationInDBBase(IdentificationBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Identification(IdentificationInDBBase):\n    pass\n# Additional properties stored in DB\nclass IdentificationInDB(IdentificationInDBBase):",
        "detail": "patient.schemas",
        "documentation": {}
    },
    {
        "label": "IdentificationInDBBase",
        "kind": 6,
        "importPath": "patient.schemas",
        "description": "patient.schemas",
        "peekOfCode": "class IdentificationInDBBase(IdentificationBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Identification(IdentificationInDBBase):\n    pass\n# Additional properties stored in DB\nclass IdentificationInDB(IdentificationInDBBase):\n    pass\n#",
        "detail": "patient.schemas",
        "documentation": {}
    },
    {
        "label": "Identification",
        "kind": 6,
        "importPath": "patient.schemas",
        "description": "patient.schemas",
        "peekOfCode": "class Identification(IdentificationInDBBase):\n    pass\n# Additional properties stored in DB\nclass IdentificationInDB(IdentificationInDBBase):\n    pass\n#\n#  PatientIdentification Schema\n#\n# Shared properties\nclass PatientIdentificationBase(BaseAuditModel):",
        "detail": "patient.schemas",
        "documentation": {}
    },
    {
        "label": "IdentificationInDB",
        "kind": 6,
        "importPath": "patient.schemas",
        "description": "patient.schemas",
        "peekOfCode": "class IdentificationInDB(IdentificationInDBBase):\n    pass\n#\n#  PatientIdentification Schema\n#\n# Shared properties\nclass PatientIdentificationBase(BaseAuditModel):\n    patient_uid: str\n    identification_uid: str\n    value: str",
        "detail": "patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientIdentificationBase",
        "kind": 6,
        "importPath": "patient.schemas",
        "description": "patient.schemas",
        "peekOfCode": "class PatientIdentificationBase(BaseAuditModel):\n    patient_uid: str\n    identification_uid: str\n    value: str\n# Properties to receive via API on creation\nclass PatientIdentificationCreate(PatientIdentificationBase):\n    pass\n# Properties to receive via API on update\nclass PatientIdentificationUpdate(PatientIdentificationBase):\n    pass",
        "detail": "patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientIdentificationCreate",
        "kind": 6,
        "importPath": "patient.schemas",
        "description": "patient.schemas",
        "peekOfCode": "class PatientIdentificationCreate(PatientIdentificationBase):\n    pass\n# Properties to receive via API on update\nclass PatientIdentificationUpdate(PatientIdentificationBase):\n    pass\nclass PatientIdentificationInDBBase(PatientIdentificationBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass PatientIdentification(PatientIdentificationInDBBase):",
        "detail": "patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientIdentificationUpdate",
        "kind": 6,
        "importPath": "patient.schemas",
        "description": "patient.schemas",
        "peekOfCode": "class PatientIdentificationUpdate(PatientIdentificationBase):\n    pass\nclass PatientIdentificationInDBBase(PatientIdentificationBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass PatientIdentification(PatientIdentificationInDBBase):\n    pass\n# Additional properties stored in DB\nclass PatientIdentificationInDB(PatientIdentificationInDBBase):",
        "detail": "patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientIdentificationInDBBase",
        "kind": 6,
        "importPath": "patient.schemas",
        "description": "patient.schemas",
        "peekOfCode": "class PatientIdentificationInDBBase(PatientIdentificationBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass PatientIdentification(PatientIdentificationInDBBase):\n    pass\n# Additional properties stored in DB\nclass PatientIdentificationInDB(PatientIdentificationInDBBase):\n    pass",
        "detail": "patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientIdentification",
        "kind": 6,
        "importPath": "patient.schemas",
        "description": "patient.schemas",
        "peekOfCode": "class PatientIdentification(PatientIdentificationInDBBase):\n    pass\n# Additional properties stored in DB\nclass PatientIdentificationInDB(PatientIdentificationInDBBase):\n    pass",
        "detail": "patient.schemas",
        "documentation": {}
    },
    {
        "label": "PatientIdentificationInDB",
        "kind": 6,
        "importPath": "patient.schemas",
        "description": "patient.schemas",
        "peekOfCode": "class PatientIdentificationInDB(PatientIdentificationInDBBase):\n    pass",
        "detail": "patient.schemas",
        "documentation": {}
    },
    {
        "label": "IdentificationService",
        "kind": 6,
        "importPath": "patient.services",
        "description": "patient.services",
        "peekOfCode": "class IdentificationService(\n    BaseService[Identification, IdentificationCreate, IdentificationUpdate]\n):\n    def __init__(self):\n        super().__init__(IdentificationRepository)\nclass PatientIdentificationService(\n    BaseService[\n        PatientIdentification, PatientIdentificationCreate, PatientIdentificationUpdate\n    ]\n):",
        "detail": "patient.services",
        "documentation": {}
    },
    {
        "label": "PatientIdentificationService",
        "kind": 6,
        "importPath": "patient.services",
        "description": "patient.services",
        "peekOfCode": "class PatientIdentificationService(\n    BaseService[\n        PatientIdentification, PatientIdentificationCreate, PatientIdentificationUpdate\n    ]\n):\n    def __init__(self):\n        super().__init__(PatientIdentificationRepository)\nclass PatientService(BaseService[Patient, PatientCreate, PatientUpdate]):\n    def __init__(self):\n        self.id_sequence_service = IdSequenceService()",
        "detail": "patient.services",
        "documentation": {}
    },
    {
        "label": "PatientService",
        "kind": 6,
        "importPath": "patient.services",
        "description": "patient.services",
        "peekOfCode": "class PatientService(BaseService[Patient, PatientCreate, PatientUpdate]):\n    def __init__(self):\n        self.id_sequence_service = IdSequenceService()\n        super().__init__(PatientRepository)\n    async def search(self, query_string: str) -> list[Patient]:\n        filters = {\n            \"first_name\": query_string,\n            \"middle_name\": query_string,\n            \"last_name\": query_string,\n            \"patient_id\": query_string,",
        "detail": "patient.services",
        "documentation": {}
    },
    {
        "label": "ReflexRule",
        "kind": 6,
        "importPath": "reflex.entities",
        "description": "reflex.entities",
        "peekOfCode": "class ReflexRule(AuditHistory):\n    __tablename__ = \"reflex_rule\"\n    name = Column(String, index=True, unique=True, nullable=False)\n    description = Column(String, nullable=False)\n    reflex_actions = relationship(\n        \"ReflexAction\", back_populates=\"reflex_rule\", lazy=\"selectin\"\n    )\nclass ReflexBrainAddition(BaseEntity):\n    \"\"\"Many to Many Link between ReflexBrain and Analysis\n    with extra data for additions",
        "detail": "reflex.entities",
        "documentation": {}
    },
    {
        "label": "ReflexBrainAddition",
        "kind": 6,
        "importPath": "reflex.entities",
        "description": "reflex.entities",
        "peekOfCode": "class ReflexBrainAddition(BaseEntity):\n    \"\"\"Many to Many Link between ReflexBrain and Analysis\n    with extra data for additions\n    \"\"\"\n    __tablename__ = \"reflex_brain_addition\"\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), primary_key=True)\n    analysis = relationship(\"Analysis\", lazy=\"selectin\")\n    reflex_brain_uid = Column(String, ForeignKey(\"reflex_brain.uid\"), primary_key=True)\n    count = Column(Integer, default=1)\nclass ReflexBrainFinal(BaseEntity):",
        "detail": "reflex.entities",
        "documentation": {}
    },
    {
        "label": "ReflexBrainFinal",
        "kind": 6,
        "importPath": "reflex.entities",
        "description": "reflex.entities",
        "peekOfCode": "class ReflexBrainFinal(BaseEntity):\n    \"\"\"Many to Many Link between ReflexBrain and Analysis\n    with extra data for finalize where necessary\n    \"\"\"\n    __tablename__ = \"reflex_brain_final\"\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), primary_key=True)\n    analysis = relationship(\"Analysis\", lazy=\"selectin\")\n    reflex_brain_uid = Column(String, ForeignKey(\"reflex_brain.uid\"), primary_key=True)\n    value = Column(String)\nclass ReflexBrainCriteria(BaseEntity):",
        "detail": "reflex.entities",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCriteria",
        "kind": 6,
        "importPath": "reflex.entities",
        "description": "reflex.entities",
        "peekOfCode": "class ReflexBrainCriteria(BaseEntity):\n    \"\"\"Many to Many Link between ReflexBrain and Analysis\n    with extra data for criteria/decision making\n    operators: =, !=, >, >=, <, <=\n    \"\"\"\n    __tablename__ = \"reflex_brain_criteria\"\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), primary_key=True)\n    analysis = relationship(\"Analysis\", lazy=\"selectin\")\n    reflex_brain_uid = Column(String, ForeignKey(\"reflex_brain.uid\"), primary_key=True)\n    operator = Column(String, nullable=False)",
        "detail": "reflex.entities",
        "documentation": {}
    },
    {
        "label": "ReflexBrain",
        "kind": 6,
        "importPath": "reflex.entities",
        "description": "reflex.entities",
        "peekOfCode": "class ReflexBrain(AuditHistory):\n    __tablename__ = \"reflex_brain\"\n    reflex_action_uid = Column(\n        String, ForeignKey(\"reflex_action.uid\"), nullable=False, default=1\n    )\n    reflex_action = relationship(\n        \"ReflexAction\", back_populates=\"brains\", lazy=\"selectin\"\n    )\n    description = Column(String, nullable=True)\n    analyses_values = relationship(ReflexBrainCriteria, lazy=\"selectin\")",
        "detail": "reflex.entities",
        "documentation": {}
    },
    {
        "label": "ReflexAction",
        "kind": 6,
        "importPath": "reflex.entities",
        "description": "reflex.entities",
        "peekOfCode": "class ReflexAction(AuditHistory):\n    __tablename__ = \"reflex_action\"\n    level = Column(Integer, nullable=False, default=1)\n    description = Column(String, nullable=False)\n    # triggers\n    analyses = relationship(\n        \"Analysis\", secondary=reflex_action_analysis, lazy=\"selectin\"\n    )\n    sample_type_uid = Column(String, ForeignKey(\"sample_type.uid\"), nullable=True)\n    sample_type = relationship(\"SampleType\", lazy=\"selectin\")",
        "detail": "reflex.entities",
        "documentation": {}
    },
    {
        "label": "reflex_action_analysis",
        "kind": 5,
        "importPath": "reflex.entities",
        "description": "reflex.entities",
        "peekOfCode": "reflex_action_analysis = Table(\n    \"reflex_action_analysis\",\n    BaseEntity.metadata,\n    Column(\"analysis_uid\", ForeignKey(\"analysis.uid\"), primary_key=True),\n    Column(\"reflex_action_uid\", ForeignKey(\"reflex_action.uid\"), primary_key=True),\n)\nclass ReflexAction(AuditHistory):\n    __tablename__ = \"reflex_action\"\n    level = Column(Integer, nullable=False, default=1)\n    description = Column(String, nullable=False)",
        "detail": "reflex.entities",
        "documentation": {}
    },
    {
        "label": "ReflexRuleRepository",
        "kind": 6,
        "importPath": "reflex.repository",
        "description": "reflex.repository",
        "peekOfCode": "class ReflexRuleRepository(BaseRepository[ReflexRule]):\n    def __init__(self) -> None:\n        super().__init__(ReflexRule)\nclass ReflexBrainAdditionRepository(BaseRepository[ReflexBrainAddition]):\n    def __init__(self) -> None:\n        super().__init__(ReflexBrainAddition)\nclass ReflexBrainFinalRepository(BaseRepository[ReflexBrainFinal]):\n    def __init__(self) -> None:\n        super().__init__(ReflexBrainFinal)\nclass ReflexBrainCriteriaRepository(BaseRepository[ReflexBrainCriteria]):",
        "detail": "reflex.repository",
        "documentation": {}
    },
    {
        "label": "ReflexBrainAdditionRepository",
        "kind": 6,
        "importPath": "reflex.repository",
        "description": "reflex.repository",
        "peekOfCode": "class ReflexBrainAdditionRepository(BaseRepository[ReflexBrainAddition]):\n    def __init__(self) -> None:\n        super().__init__(ReflexBrainAddition)\nclass ReflexBrainFinalRepository(BaseRepository[ReflexBrainFinal]):\n    def __init__(self) -> None:\n        super().__init__(ReflexBrainFinal)\nclass ReflexBrainCriteriaRepository(BaseRepository[ReflexBrainCriteria]):\n    def __init__(self) -> None:\n        super().__init__(ReflexBrainCriteria)\nclass ReflexBrainRepository(BaseRepository[ReflexBrain]):",
        "detail": "reflex.repository",
        "documentation": {}
    },
    {
        "label": "ReflexBrainFinalRepository",
        "kind": 6,
        "importPath": "reflex.repository",
        "description": "reflex.repository",
        "peekOfCode": "class ReflexBrainFinalRepository(BaseRepository[ReflexBrainFinal]):\n    def __init__(self) -> None:\n        super().__init__(ReflexBrainFinal)\nclass ReflexBrainCriteriaRepository(BaseRepository[ReflexBrainCriteria]):\n    def __init__(self) -> None:\n        super().__init__(ReflexBrainCriteria)\nclass ReflexBrainRepository(BaseRepository[ReflexBrain]):\n    def __init__(self) -> None:\n        super().__init__(ReflexBrain)\nclass ReflexActionRepository(BaseRepository[ReflexAction]):",
        "detail": "reflex.repository",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCriteriaRepository",
        "kind": 6,
        "importPath": "reflex.repository",
        "description": "reflex.repository",
        "peekOfCode": "class ReflexBrainCriteriaRepository(BaseRepository[ReflexBrainCriteria]):\n    def __init__(self) -> None:\n        super().__init__(ReflexBrainCriteria)\nclass ReflexBrainRepository(BaseRepository[ReflexBrain]):\n    def __init__(self) -> None:\n        super().__init__(ReflexBrain)\nclass ReflexActionRepository(BaseRepository[ReflexAction]):\n    def __init__(self) -> None:\n        super().__init__(ReflexAction)",
        "detail": "reflex.repository",
        "documentation": {}
    },
    {
        "label": "ReflexBrainRepository",
        "kind": 6,
        "importPath": "reflex.repository",
        "description": "reflex.repository",
        "peekOfCode": "class ReflexBrainRepository(BaseRepository[ReflexBrain]):\n    def __init__(self) -> None:\n        super().__init__(ReflexBrain)\nclass ReflexActionRepository(BaseRepository[ReflexAction]):\n    def __init__(self) -> None:\n        super().__init__(ReflexAction)",
        "detail": "reflex.repository",
        "documentation": {}
    },
    {
        "label": "ReflexActionRepository",
        "kind": 6,
        "importPath": "reflex.repository",
        "description": "reflex.repository",
        "peekOfCode": "class ReflexActionRepository(BaseRepository[ReflexAction]):\n    def __init__(self) -> None:\n        super().__init__(ReflexAction)",
        "detail": "reflex.repository",
        "documentation": {}
    },
    {
        "label": "ReflexRuleBase",
        "kind": 6,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "class ReflexRuleBase(BaseAuditModel):\n    name: str\n    description: str\n    sample_types: Optional[List[SampleType]] = []\n# Additional properties to return via API\nclass ReflexRule(ReflexRuleBase):\n    uid: str\nmodel_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReflexRuleCreate(ReflexRuleBase):",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexRule",
        "kind": 6,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "class ReflexRule(ReflexRuleBase):\n    uid: str\nmodel_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReflexRuleCreate(ReflexRuleBase):\n    pass\n# Properties to receive via API on update\nclass ReflexRuleUpdate(ReflexRuleBase):\n    pass\n#",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexRuleCreate",
        "kind": 6,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "class ReflexRuleCreate(ReflexRuleBase):\n    pass\n# Properties to receive via API on update\nclass ReflexRuleUpdate(ReflexRuleBase):\n    pass\n#\n#  ReflexBrainAddition Schema\n#\n# Shared properties\nclass ReflexBrainAdditionBase(BaseAuditModel):",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexRuleUpdate",
        "kind": 6,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "class ReflexRuleUpdate(ReflexRuleBase):\n    pass\n#\n#  ReflexBrainAddition Schema\n#\n# Shared properties\nclass ReflexBrainAdditionBase(BaseAuditModel):\n    analysis_uid: str\n    analysis: Optional[Analysis] = None\n    reflex_brain_uid: str",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainAdditionBase",
        "kind": 6,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "class ReflexBrainAdditionBase(BaseAuditModel):\n    analysis_uid: str\n    analysis: Optional[Analysis] = None\n    reflex_brain_uid: str\n    reflex_brain: Optional[\"ReflexBrain\"] = None\n    count: int\n# Additional properties to return via API\nclass ReflexBrainAddition(ReflexBrainAdditionBase):\n    uid: str\nmodel_config = ConfigDict(from_attributes=True)",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainAddition",
        "kind": 6,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "class ReflexBrainAddition(ReflexBrainAdditionBase):\n    uid: str\nmodel_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReflexBrainAdditionCreate(ReflexBrainAdditionBase):\n    pass\n# Properties to receive via API on update\nclass ReflexBrainAdditionUpdate(ReflexBrainAdditionBase):\n    pass\n#",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainAdditionCreate",
        "kind": 6,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "class ReflexBrainAdditionCreate(ReflexBrainAdditionBase):\n    pass\n# Properties to receive via API on update\nclass ReflexBrainAdditionUpdate(ReflexBrainAdditionBase):\n    pass\n#\n#  ReflexBrainFinal Schema\n#\n# Shared properties\nclass ReflexBrainFinalBase(BaseAuditModel):",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainAdditionUpdate",
        "kind": 6,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "class ReflexBrainAdditionUpdate(ReflexBrainAdditionBase):\n    pass\n#\n#  ReflexBrainFinal Schema\n#\n# Shared properties\nclass ReflexBrainFinalBase(BaseAuditModel):\n    analysis_uid: str\n    analysis: Optional[Analysis] = None\n    reflex_brain_uid: str",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainFinalBase",
        "kind": 6,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "class ReflexBrainFinalBase(BaseAuditModel):\n    analysis_uid: str\n    analysis: Optional[Analysis] = None\n    reflex_brain_uid: str\n    reflex_brain: Optional[\"ReflexBrain\"] = None\n    value: str\n# Additional properties to return via API\nclass ReflexBrainFinal(ReflexBrainFinalBase):\n    uid: str\nmodel_config = ConfigDict(from_attributes=True)",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainFinal",
        "kind": 6,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "class ReflexBrainFinal(ReflexBrainFinalBase):\n    uid: str\nmodel_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReflexBrainFinalCreate(ReflexBrainFinalBase):\n    pass\n# Properties to receive via API on update\nclass ReflexBrainFinalUpdate(ReflexBrainFinalBase):\n    pass\n#",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainFinalCreate",
        "kind": 6,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "class ReflexBrainFinalCreate(ReflexBrainFinalBase):\n    pass\n# Properties to receive via API on update\nclass ReflexBrainFinalUpdate(ReflexBrainFinalBase):\n    pass\n#\n#  ReflexBrainCriteria Schema\n#\n# Shared properties\nclass ReflexBrainCriteriaBase(BaseAuditModel):",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainFinalUpdate",
        "kind": 6,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "class ReflexBrainFinalUpdate(ReflexBrainFinalBase):\n    pass\n#\n#  ReflexBrainCriteria Schema\n#\n# Shared properties\nclass ReflexBrainCriteriaBase(BaseAuditModel):\n    analysis_uid: str\n    analysis: Optional[Analysis] = None\n    reflex_brain_uid: str",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCriteriaBase",
        "kind": 6,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "class ReflexBrainCriteriaBase(BaseAuditModel):\n    analysis_uid: str\n    analysis: Optional[Analysis] = None\n    reflex_brain_uid: str\n    reflex_brain: Optional[\"ReflexBrain\"] = None\n    value: str\n# Additional properties to return via API\nclass ReflexBrainCriteria(ReflexBrainCriteriaBase):\n    uid: str\nmodel_config = ConfigDict(from_attributes=True)",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCriteria",
        "kind": 6,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "class ReflexBrainCriteria(ReflexBrainCriteriaBase):\n    uid: str\nmodel_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReflexBrainCriteriaCreate(ReflexBrainCriteriaBase):\n    pass\n# Properties to receive via API on update\nclass ReflexBrainCriteriaUpdate(ReflexBrainCriteriaBase):\n    pass\n#",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCriteriaCreate",
        "kind": 6,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "class ReflexBrainCriteriaCreate(ReflexBrainCriteriaBase):\n    pass\n# Properties to receive via API on update\nclass ReflexBrainCriteriaUpdate(ReflexBrainCriteriaBase):\n    pass\n#\n#  ReflexBrain Schema\n#\n# Shared properties\nclass ReflexBrainBase(BaseAuditModel):",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCriteriaUpdate",
        "kind": 6,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "class ReflexBrainCriteriaUpdate(ReflexBrainCriteriaBase):\n    pass\n#\n#  ReflexBrain Schema\n#\n# Shared properties\nclass ReflexBrainBase(BaseAuditModel):\n    reflex_action_uid: str\n    reflex_action: Optional[\"ReflexAction\"] = None\n    description: str | None",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainBase",
        "kind": 6,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "class ReflexBrainBase(BaseAuditModel):\n    reflex_action_uid: str\n    reflex_action: Optional[\"ReflexAction\"] = None\n    description: str | None\n    analyses_values: Optional[List[ReflexBrainCriteria]] = None\n    add_new: Optional[List[ReflexBrainAddition]] = None\n    finalise: Optional[List[ReflexBrainFinal]] = None\n# Additional properties to return via API\nclass ReflexBrain(ReflexBrainBase):\n    uid: str | None = None",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrain",
        "kind": 6,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "class ReflexBrain(ReflexBrainBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReflexBrainCreate(ReflexBrainBase):\n    pass\n# Properties to receive via API on update\nclass ReflexBrainUpdate(ReflexBrainBase):\n    pass\n#",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCreate",
        "kind": 6,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "class ReflexBrainCreate(ReflexBrainBase):\n    pass\n# Properties to receive via API on update\nclass ReflexBrainUpdate(ReflexBrainBase):\n    pass\n#\n#  ReflexBrain Schema\n#\n# Shared properties\nclass ReflexActionBase(BaseAuditModel):",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexBrainUpdate",
        "kind": 6,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "class ReflexBrainUpdate(ReflexBrainBase):\n    pass\n#\n#  ReflexBrain Schema\n#\n# Shared properties\nclass ReflexActionBase(BaseAuditModel):\n    level: int\n    description: str | None\n    reflex_rule_uid: str",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexActionBase",
        "kind": 6,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "class ReflexActionBase(BaseAuditModel):\n    level: int\n    description: str | None\n    reflex_rule_uid: str\n    reflex_rule: Optional[ReflexRule] = None\n    brains: Optional[List[ReflexBrain]] = None\n    analyses: Optional[List[Analysis]] = []\n    sample_type_uid: str | None\n    sample_type: Optional[SampleType] = None\n# Additional properties to return via API",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexAction",
        "kind": 6,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "class ReflexAction(ReflexActionBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReflexActionCreate(ReflexActionBase):\n    pass\n# Properties to receive via API on update\nclass ReflexActionUpdate(ReflexActionBase):\n    pass",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexActionCreate",
        "kind": 6,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "class ReflexActionCreate(ReflexActionBase):\n    pass\n# Properties to receive via API on update\nclass ReflexActionUpdate(ReflexActionBase):\n    pass",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexActionUpdate",
        "kind": 6,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "class ReflexActionUpdate(ReflexActionBase):\n    pass",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "model_config",
        "kind": 5,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReflexRuleCreate(ReflexRuleBase):\n    pass\n# Properties to receive via API on update\nclass ReflexRuleUpdate(ReflexRuleBase):\n    pass\n#\n#  ReflexBrainAddition Schema\n#",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "model_config",
        "kind": 5,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReflexBrainAdditionCreate(ReflexBrainAdditionBase):\n    pass\n# Properties to receive via API on update\nclass ReflexBrainAdditionUpdate(ReflexBrainAdditionBase):\n    pass\n#\n#  ReflexBrainFinal Schema\n#",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "model_config",
        "kind": 5,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReflexBrainFinalCreate(ReflexBrainFinalBase):\n    pass\n# Properties to receive via API on update\nclass ReflexBrainFinalUpdate(ReflexBrainFinalBase):\n    pass\n#\n#  ReflexBrainCriteria Schema\n#",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "model_config",
        "kind": 5,
        "importPath": "reflex.schemas",
        "description": "reflex.schemas",
        "peekOfCode": "model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReflexBrainCriteriaCreate(ReflexBrainCriteriaBase):\n    pass\n# Properties to receive via API on update\nclass ReflexBrainCriteriaUpdate(ReflexBrainCriteriaBase):\n    pass\n#\n#  ReflexBrain Schema\n#",
        "detail": "reflex.schemas",
        "documentation": {}
    },
    {
        "label": "ReflexRuleService",
        "kind": 6,
        "importPath": "reflex.services",
        "description": "reflex.services",
        "peekOfCode": "class ReflexRuleService(BaseService[ReflexRule, ReflexRuleCreate, ReflexRuleUpdate]):\n    def __init__(self):\n        super().__init__(ReflexRuleRepository)\nclass ReflexBrainAdditionService(\n    BaseService[\n        ReflexBrainAddition, ReflexBrainAdditionCreate, ReflexBrainAdditionUpdate\n    ]\n):\n    def __init__(self):\n        super().__init__(ReflexBrainAdditionRepository)",
        "detail": "reflex.services",
        "documentation": {}
    },
    {
        "label": "ReflexBrainAdditionService",
        "kind": 6,
        "importPath": "reflex.services",
        "description": "reflex.services",
        "peekOfCode": "class ReflexBrainAdditionService(\n    BaseService[\n        ReflexBrainAddition, ReflexBrainAdditionCreate, ReflexBrainAdditionUpdate\n    ]\n):\n    def __init__(self):\n        super().__init__(ReflexBrainAdditionRepository)\nclass ReflexBrainFinalService(\n    BaseService[ReflexBrainFinal, ReflexBrainFinalCreate, ReflexBrainFinalUpdate]\n):",
        "detail": "reflex.services",
        "documentation": {}
    },
    {
        "label": "ReflexBrainFinalService",
        "kind": 6,
        "importPath": "reflex.services",
        "description": "reflex.services",
        "peekOfCode": "class ReflexBrainFinalService(\n    BaseService[ReflexBrainFinal, ReflexBrainFinalCreate, ReflexBrainFinalUpdate]\n):\n    def __init__(self):\n        super().__init__(ReflexBrainFinalRepository)\nclass ReflexBrainCriteriaService(\n    BaseService[\n        ReflexBrainCriteria, ReflexBrainCriteriaCreate, ReflexBrainCriteriaUpdate\n    ]\n):",
        "detail": "reflex.services",
        "documentation": {}
    },
    {
        "label": "ReflexBrainCriteriaService",
        "kind": 6,
        "importPath": "reflex.services",
        "description": "reflex.services",
        "peekOfCode": "class ReflexBrainCriteriaService(\n    BaseService[\n        ReflexBrainCriteria, ReflexBrainCriteriaCreate, ReflexBrainCriteriaUpdate\n    ]\n):\n    def __init__(self):\n        super().__init__(ReflexBrainCriteriaRepository)\nclass ReflexBrainService(\n    BaseService[ReflexBrain, ReflexBrainCreate, ReflexBrainUpdate]\n):",
        "detail": "reflex.services",
        "documentation": {}
    },
    {
        "label": "ReflexBrainService",
        "kind": 6,
        "importPath": "reflex.services",
        "description": "reflex.services",
        "peekOfCode": "class ReflexBrainService(\n    BaseService[ReflexBrain, ReflexBrainCreate, ReflexBrainUpdate]\n):\n    def __init__(self):\n        super().__init__(ReflexBrainRepository)\nclass ReflexActionService(\n    BaseService[ReflexAction, ReflexActionCreate, ReflexActionUpdate]\n):\n    def __init__(self):\n        super().__init__(ReflexActionRepository)",
        "detail": "reflex.services",
        "documentation": {}
    },
    {
        "label": "ReflexActionService",
        "kind": 6,
        "importPath": "reflex.services",
        "description": "reflex.services",
        "peekOfCode": "class ReflexActionService(\n    BaseService[ReflexAction, ReflexActionCreate, ReflexActionUpdate]\n):\n    def __init__(self):\n        super().__init__(ReflexActionRepository)\nclass ReflexEngineService:\n    _siblings: List[AnalysisResult] = None\n    _cousins: List[AnalysisResult] = None\n    _results_pool: List[AnalysisResult] = None\n    _reflex_action: ReflexAction = None",
        "detail": "reflex.services",
        "documentation": {}
    },
    {
        "label": "ReflexEngineService",
        "kind": 6,
        "importPath": "reflex.services",
        "description": "reflex.services",
        "peekOfCode": "class ReflexEngineService:\n    _siblings: List[AnalysisResult] = None\n    _cousins: List[AnalysisResult] = None\n    _results_pool: List[AnalysisResult] = None\n    _reflex_action: ReflexAction = None\n    def __init__(self, analysis_result, user):\n        self.analysis_result: AnalysisResult = analysis_result\n        self.sample: Sample = analysis_result.sample\n        self.analysis: Analysis = analysis_result.analysis\n        self.user = user",
        "detail": "reflex.services",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "reflex.services",
        "description": "reflex.services",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ReflexRuleService(BaseService[ReflexRule, ReflexRuleCreate, ReflexRuleUpdate]):\n    def __init__(self):\n        super().__init__(ReflexRuleRepository)\nclass ReflexBrainAdditionService(\n    BaseService[\n        ReflexBrainAddition, ReflexBrainAdditionCreate, ReflexBrainAdditionUpdate\n    ]\n):\n    def __init__(self):",
        "detail": "reflex.services",
        "documentation": {}
    },
    {
        "label": "LocationBase",
        "kind": 6,
        "importPath": "setup.entities.location",
        "description": "setup.entities.location",
        "peekOfCode": "class LocationBase(AuditUser):\n    __abstract__ = True\n    code = Column(String, index=True, unique=True, nullable=True)\n    name = Column(String)\n    email = Column(String, nullable=True)\n    email_cc = Column(String, nullable=True)\n    mobile_phone = Column(String, nullable=True)\n    business_phone = Column(String, nullable=True)\n    active = Column(Boolean(), default=False)\nclass District(LocationBase):",
        "detail": "setup.entities.location",
        "documentation": {}
    },
    {
        "label": "District",
        "kind": 6,
        "importPath": "setup.entities.location",
        "description": "setup.entities.location",
        "peekOfCode": "class District(LocationBase):\n    __tablename__ = \"district\"\n    province_uid = Column(String, ForeignKey(\"province.uid\"))\n    province = relationship(\"Province\", backref=\"districts\", lazy=\"selectin\")\nclass Province(LocationBase):\n    __tablename__ = \"province\"\n    country_uid = Column(String, ForeignKey(\"country.uid\"))\n    country = relationship(\"Country\", backref=\"provinces\", lazy=\"selectin\")\nclass Country(AuditUser):\n    __tablename__ = \"country\"",
        "detail": "setup.entities.location",
        "documentation": {}
    },
    {
        "label": "Province",
        "kind": 6,
        "importPath": "setup.entities.location",
        "description": "setup.entities.location",
        "peekOfCode": "class Province(LocationBase):\n    __tablename__ = \"province\"\n    country_uid = Column(String, ForeignKey(\"country.uid\"))\n    country = relationship(\"Country\", backref=\"provinces\", lazy=\"selectin\")\nclass Country(AuditUser):\n    __tablename__ = \"country\"\n    name = Column(String, default=\"Zimbabwe\")\n    code = Column(String, index=True, unique=True, nullable=True)\n    active = Column(Boolean(), default=False)",
        "detail": "setup.entities.location",
        "documentation": {}
    },
    {
        "label": "Country",
        "kind": 6,
        "importPath": "setup.entities.location",
        "description": "setup.entities.location",
        "peekOfCode": "class Country(AuditUser):\n    __tablename__ = \"country\"\n    name = Column(String, default=\"Zimbabwe\")\n    code = Column(String, index=True, unique=True, nullable=True)\n    active = Column(Boolean(), default=False)",
        "detail": "setup.entities.location",
        "documentation": {}
    },
    {
        "label": "Laboratory",
        "kind": 6,
        "importPath": "setup.entities.setup",
        "description": "setup.entities.setup",
        "peekOfCode": "class Laboratory(AuditUser):\n    __tablename__ = \"laboratory\"\n    setup_name = Column(\n        String, default=\"felicity\", nullable=False\n    )  # Do not change this value ever\n    lab_name = Column(String, nullable=False)\n    tag_line = Column(String, nullable=True)\n    code = Column(String, nullable=True)\n    lab_manager_uid = Column(String, ForeignKey(\"user.uid\"), nullable=True)\n    lab_manager = relationship(User, foreign_keys=[lab_manager_uid], lazy=\"selectin\")",
        "detail": "setup.entities.setup",
        "documentation": {}
    },
    {
        "label": "LaboratorySetting",
        "kind": 6,
        "importPath": "setup.entities.setup",
        "description": "setup.entities.setup",
        "peekOfCode": "class LaboratorySetting(AuditUser):\n    __tablename__ = \"laboratory_setting\"\n    laboratory_uid = Column(String, ForeignKey(\"laboratory.uid\"), nullable=True)\n    laboratory = relationship(\n        Laboratory, foreign_keys=[laboratory_uid], backref=\"settings\", lazy=\"selectin\"\n    )\n    allow_self_verification = Column(Boolean(), nullable=False)\n    allow_patient_registration = Column(Boolean(), nullable=True)\n    allow_sample_registration = Column(Boolean(), nullable=True)\n    allow_worksheet_creation = Column(Boolean(), nullable=True)",
        "detail": "setup.entities.setup",
        "documentation": {}
    },
    {
        "label": "Supplier",
        "kind": 6,
        "importPath": "setup.entities.setup",
        "description": "setup.entities.setup",
        "peekOfCode": "class Supplier(AuditUser):\n    \"\"\"Supplier\"\"\"\n    __tablename__ = \"supplier\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)\nclass Manufacturer(AuditUser):\n    \"\"\"Manufacturer\"\"\"\n    __tablename__ = \"manufacturer\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)",
        "detail": "setup.entities.setup",
        "documentation": {}
    },
    {
        "label": "Manufacturer",
        "kind": 6,
        "importPath": "setup.entities.setup",
        "description": "setup.entities.setup",
        "peekOfCode": "class Manufacturer(AuditUser):\n    \"\"\"Manufacturer\"\"\"\n    __tablename__ = \"manufacturer\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)\nclass Department(AuditUser):\n    \"\"\"Departrments/Sections\"\"\"\n    __tablename__ = \"department\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)",
        "detail": "setup.entities.setup",
        "documentation": {}
    },
    {
        "label": "Department",
        "kind": 6,
        "importPath": "setup.entities.setup",
        "description": "setup.entities.setup",
        "peekOfCode": "class Department(AuditUser):\n    \"\"\"Departrments/Sections\"\"\"\n    __tablename__ = \"department\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)\n    code = Column(String, nullable=True)\nclass Unit(AuditUser):\n    \"\"\"Unit for analyte measurement\"\"\"\n    __tablename__ = \"unit\"\n    name = Column(String, nullable=False)",
        "detail": "setup.entities.setup",
        "documentation": {}
    },
    {
        "label": "Unit",
        "kind": 6,
        "importPath": "setup.entities.setup",
        "description": "setup.entities.setup",
        "peekOfCode": "class Unit(AuditUser):\n    \"\"\"Unit for analyte measurement\"\"\"\n    __tablename__ = \"unit\"\n    name = Column(String, nullable=False)\n    is_si_unit = Column(Boolean(), default=False)",
        "detail": "setup.entities.setup",
        "documentation": {}
    },
    {
        "label": "CountryRepository",
        "kind": 6,
        "importPath": "setup.repositories.location",
        "description": "setup.repositories.location",
        "peekOfCode": "class CountryRepository(BaseRepository[Country]):\n    def __init__(self) -> None:\n        super().__init__(Country)\nclass ProvinceRepository(BaseRepository[Province]):\n    def __init__(self) -> None:\n        super().__init__(Province)\nclass DistrictRepository(BaseRepository[District]):\n    def __init__(self) -> None:\n        super().__init__(District)",
        "detail": "setup.repositories.location",
        "documentation": {}
    },
    {
        "label": "ProvinceRepository",
        "kind": 6,
        "importPath": "setup.repositories.location",
        "description": "setup.repositories.location",
        "peekOfCode": "class ProvinceRepository(BaseRepository[Province]):\n    def __init__(self) -> None:\n        super().__init__(Province)\nclass DistrictRepository(BaseRepository[District]):\n    def __init__(self) -> None:\n        super().__init__(District)",
        "detail": "setup.repositories.location",
        "documentation": {}
    },
    {
        "label": "DistrictRepository",
        "kind": 6,
        "importPath": "setup.repositories.location",
        "description": "setup.repositories.location",
        "peekOfCode": "class DistrictRepository(BaseRepository[District]):\n    def __init__(self) -> None:\n        super().__init__(District)",
        "detail": "setup.repositories.location",
        "documentation": {}
    },
    {
        "label": "DepartmentRepository",
        "kind": 6,
        "importPath": "setup.repositories.setup",
        "description": "setup.repositories.setup",
        "peekOfCode": "class DepartmentRepository(BaseRepository[Department]):\n    def __init__(self) -> None:\n        super().__init__(Department)\nclass LaboratoryRepository(BaseRepository[Laboratory]):\n    def __init__(self) -> None:\n        super().__init__(Laboratory)\nclass LaboratorySettingRepository(BaseRepository[LaboratorySetting]):\n    def __init__(self) -> None:\n        super().__init__(LaboratorySetting)\nclass ManufacturerRepository(BaseRepository[Manufacturer]):",
        "detail": "setup.repositories.setup",
        "documentation": {}
    },
    {
        "label": "LaboratoryRepository",
        "kind": 6,
        "importPath": "setup.repositories.setup",
        "description": "setup.repositories.setup",
        "peekOfCode": "class LaboratoryRepository(BaseRepository[Laboratory]):\n    def __init__(self) -> None:\n        super().__init__(Laboratory)\nclass LaboratorySettingRepository(BaseRepository[LaboratorySetting]):\n    def __init__(self) -> None:\n        super().__init__(LaboratorySetting)\nclass ManufacturerRepository(BaseRepository[Manufacturer]):\n    def __init__(self) -> None:\n        super().__init__(Manufacturer)\nclass SupplierRepository(BaseRepository[Supplier]):",
        "detail": "setup.repositories.setup",
        "documentation": {}
    },
    {
        "label": "LaboratorySettingRepository",
        "kind": 6,
        "importPath": "setup.repositories.setup",
        "description": "setup.repositories.setup",
        "peekOfCode": "class LaboratorySettingRepository(BaseRepository[LaboratorySetting]):\n    def __init__(self) -> None:\n        super().__init__(LaboratorySetting)\nclass ManufacturerRepository(BaseRepository[Manufacturer]):\n    def __init__(self) -> None:\n        super().__init__(Manufacturer)\nclass SupplierRepository(BaseRepository[Supplier]):\n    def __init__(self) -> None:\n        super().__init__(Supplier)\nclass UnitRepository(BaseRepository[Unit]):",
        "detail": "setup.repositories.setup",
        "documentation": {}
    },
    {
        "label": "ManufacturerRepository",
        "kind": 6,
        "importPath": "setup.repositories.setup",
        "description": "setup.repositories.setup",
        "peekOfCode": "class ManufacturerRepository(BaseRepository[Manufacturer]):\n    def __init__(self) -> None:\n        super().__init__(Manufacturer)\nclass SupplierRepository(BaseRepository[Supplier]):\n    def __init__(self) -> None:\n        super().__init__(Supplier)\nclass UnitRepository(BaseRepository[Unit]):\n    def __init__(self) -> None:\n        super().__init__(Unit)",
        "detail": "setup.repositories.setup",
        "documentation": {}
    },
    {
        "label": "SupplierRepository",
        "kind": 6,
        "importPath": "setup.repositories.setup",
        "description": "setup.repositories.setup",
        "peekOfCode": "class SupplierRepository(BaseRepository[Supplier]):\n    def __init__(self) -> None:\n        super().__init__(Supplier)\nclass UnitRepository(BaseRepository[Unit]):\n    def __init__(self) -> None:\n        super().__init__(Unit)",
        "detail": "setup.repositories.setup",
        "documentation": {}
    },
    {
        "label": "UnitRepository",
        "kind": 6,
        "importPath": "setup.repositories.setup",
        "description": "setup.repositories.setup",
        "peekOfCode": "class UnitRepository(BaseRepository[Unit]):\n    def __init__(self) -> None:\n        super().__init__(Unit)",
        "detail": "setup.repositories.setup",
        "documentation": {}
    },
    {
        "label": "LaboratoryBase",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class LaboratoryBase(BaseModel):\n    setup_name: str | None = \"felicity\"\n    lab_name: str | None = None\n    tag_line: str | None = None\n    email: Optional[EmailStr] = None\n    email_cc: str | None = None\n    mobile_phone: str | None = None\n    business_phone: str | None = None\n    lab_manager_uid: str | None = None\n    address: str | None = \"\"",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryCreate",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class LaboratoryCreate(LaboratoryBase):\n    pass\n# Properties to receive via API on update\nclass LaboratoryUpdate(LaboratoryBase):\n    pass\nclass LaboratoryInDBBase(LaboratoryBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Laboratory(LaboratoryInDBBase):",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryUpdate",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class LaboratoryUpdate(LaboratoryBase):\n    pass\nclass LaboratoryInDBBase(LaboratoryBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Laboratory(LaboratoryInDBBase):\n    pass\n# Additional properties stored in DB\nclass LaboratoryInDB(LaboratoryInDBBase):",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryInDBBase",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class LaboratoryInDBBase(LaboratoryBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Laboratory(LaboratoryInDBBase):\n    pass\n# Additional properties stored in DB\nclass LaboratoryInDB(LaboratoryInDBBase):\n    pass\nclass LaboratorySettingBase(BaseAuditModel):",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "Laboratory",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class Laboratory(LaboratoryInDBBase):\n    pass\n# Additional properties stored in DB\nclass LaboratoryInDB(LaboratoryInDBBase):\n    pass\nclass LaboratorySettingBase(BaseAuditModel):\n    laboratory_uid: str | None = None\n    laboratory: Optional[Laboratory] = None\n    allow_self_verification: bool | None = False\n    allow_patient_registration: bool | None = True",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratoryInDB",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class LaboratoryInDB(LaboratoryInDBBase):\n    pass\nclass LaboratorySettingBase(BaseAuditModel):\n    laboratory_uid: str | None = None\n    laboratory: Optional[Laboratory] = None\n    allow_self_verification: bool | None = False\n    allow_patient_registration: bool | None = True\n    allow_sample_registration: bool | None = True\n    allow_worksheet_creation: bool | None = True\n    default_route: str | None = None",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratorySettingBase",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class LaboratorySettingBase(BaseAuditModel):\n    laboratory_uid: str | None = None\n    laboratory: Optional[Laboratory] = None\n    allow_self_verification: bool | None = False\n    allow_patient_registration: bool | None = True\n    allow_sample_registration: bool | None = True\n    allow_worksheet_creation: bool | None = True\n    default_route: str | None = None\n    password_lifetime: int | None = None\n    inactivity_log_out: int | None = None",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratorySettingCreate",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class LaboratorySettingCreate(LaboratorySettingBase):\n    pass\nclass LaboratorySettingUpdate(LaboratorySettingBase):\n    pass\nclass LaboratorySetting(LaboratorySettingBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n#\n#  Department\n#",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratorySettingUpdate",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class LaboratorySettingUpdate(LaboratorySettingBase):\n    pass\nclass LaboratorySetting(LaboratorySettingBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n#\n#  Department\n#\n# Shared properties\nclass DepartmentBase(BaseModel):",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratorySetting",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class LaboratorySetting(LaboratorySettingBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n#\n#  Department\n#\n# Shared properties\nclass DepartmentBase(BaseModel):\n    name: str = None\n    description: str = None",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "DepartmentBase",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class DepartmentBase(BaseModel):\n    name: str = None\n    description: str = None\n    code: str = None\n# Properties to receive via API on creation\nclass DepartmentCreate(DepartmentBase):\n    pass\n# Properties to receive via API on update\nclass DepartmentUpdate(DepartmentBase):\n    pass",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "DepartmentCreate",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class DepartmentCreate(DepartmentBase):\n    pass\n# Properties to receive via API on update\nclass DepartmentUpdate(DepartmentBase):\n    pass\nclass DepartmentInDBBase(DepartmentBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Department(DepartmentInDBBase):",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "DepartmentUpdate",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class DepartmentUpdate(DepartmentBase):\n    pass\nclass DepartmentInDBBase(DepartmentBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Department(DepartmentInDBBase):\n    pass\n# Additional properties stored in DB\nclass DepartmentInDB(DepartmentInDBBase):",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "DepartmentInDBBase",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class DepartmentInDBBase(DepartmentBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Department(DepartmentInDBBase):\n    pass\n# Additional properties stored in DB\nclass DepartmentInDB(DepartmentInDBBase):\n    pass\n#",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "Department",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class Department(DepartmentInDBBase):\n    pass\n# Additional properties stored in DB\nclass DepartmentInDB(DepartmentInDBBase):\n    pass\n#\n#  Unit\n#\n# Shared properties\nclass UnitBase(BaseModel):",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "DepartmentInDB",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class DepartmentInDB(DepartmentInDBBase):\n    pass\n#\n#  Unit\n#\n# Shared properties\nclass UnitBase(BaseModel):\n    name: str = None\n    description: str | None = None\n# Properties to receive via API on creation",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "UnitBase",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class UnitBase(BaseModel):\n    name: str = None\n    description: str | None = None\n# Properties to receive via API on creation\nclass UnitCreate(UnitBase):\n    pass\n# Properties to receive via API on update\nclass UnitUpdate(UnitBase):\n    pass\nclass UnitInDBBase(UnitBase):",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "UnitCreate",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class UnitCreate(UnitBase):\n    pass\n# Properties to receive via API on update\nclass UnitUpdate(UnitBase):\n    pass\nclass UnitInDBBase(UnitBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Unit(UnitInDBBase):",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "UnitUpdate",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class UnitUpdate(UnitBase):\n    pass\nclass UnitInDBBase(UnitBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Unit(UnitInDBBase):\n    pass\n# Additional properties stored in DB\nclass UnitInDB(UnitInDBBase):",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "UnitInDBBase",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class UnitInDBBase(UnitBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Unit(UnitInDBBase):\n    pass\n# Additional properties stored in DB\nclass UnitInDB(UnitInDBBase):\n    pass\n#",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "Unit",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class Unit(UnitInDBBase):\n    pass\n# Additional properties stored in DB\nclass UnitInDB(UnitInDBBase):\n    pass\n#\n#  Supplier\n#\n# Shared properties\nclass SupplierBase(BaseModel):",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "UnitInDB",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class UnitInDB(UnitInDBBase):\n    pass\n#\n#  Supplier\n#\n# Shared properties\nclass SupplierBase(BaseModel):\n    name: str = None\n    description: str = None\n    keyword: str = None",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "SupplierBase",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class SupplierBase(BaseModel):\n    name: str = None\n    description: str = None\n    keyword: str = None\n# Properties to receive via API on creation\nclass SupplierCreate(SupplierBase):\n    pass\n# Properties to receive via API on update\nclass SupplierUpdate(SupplierBase):\n    pass",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "SupplierCreate",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class SupplierCreate(SupplierBase):\n    pass\n# Properties to receive via API on update\nclass SupplierUpdate(SupplierBase):\n    pass\nclass SupplierInDBBase(SupplierBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Supplier(SupplierInDBBase):",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "SupplierUpdate",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class SupplierUpdate(SupplierBase):\n    pass\nclass SupplierInDBBase(SupplierBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Supplier(SupplierInDBBase):\n    pass\n# Additional properties stored in DB\nclass SupplierInDB(SupplierInDBBase):",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "SupplierInDBBase",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class SupplierInDBBase(SupplierBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Supplier(SupplierInDBBase):\n    pass\n# Additional properties stored in DB\nclass SupplierInDB(SupplierInDBBase):\n    pass\n#",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "Supplier",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class Supplier(SupplierInDBBase):\n    pass\n# Additional properties stored in DB\nclass SupplierInDB(SupplierInDBBase):\n    pass\n#\n#  Manufacturer\n#\n# Shared properties\nclass ManufacturerBase(BaseModel):",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "SupplierInDB",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class SupplierInDB(SupplierInDBBase):\n    pass\n#\n#  Manufacturer\n#\n# Shared properties\nclass ManufacturerBase(BaseModel):\n    name: str = None\n    description: str = None\n    keyword: str = None",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "ManufacturerBase",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class ManufacturerBase(BaseModel):\n    name: str = None\n    description: str = None\n    keyword: str = None\n# Properties to receive via API on creation\nclass ManufacturerCreate(ManufacturerBase):\n    pass\n# Properties to receive via API on update\nclass ManufacturerUpdate(ManufacturerBase):\n    pass",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "ManufacturerCreate",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class ManufacturerCreate(ManufacturerBase):\n    pass\n# Properties to receive via API on update\nclass ManufacturerUpdate(ManufacturerBase):\n    pass\nclass ManufacturerInDBBase(ManufacturerBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Manufacturer(ManufacturerInDBBase):",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "ManufacturerUpdate",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class ManufacturerUpdate(ManufacturerBase):\n    pass\nclass ManufacturerInDBBase(ManufacturerBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Manufacturer(ManufacturerInDBBase):\n    pass\n# Additional properties stored in DB\nclass ManufacturerInDB(ManufacturerInDBBase):",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "ManufacturerInDBBase",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class ManufacturerInDBBase(ManufacturerBase):\n    uid: str = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Manufacturer(ManufacturerInDBBase):\n    pass\n# Additional properties stored in DB\nclass ManufacturerInDB(ManufacturerInDBBase):\n    pass\n#",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "Manufacturer",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class Manufacturer(ManufacturerInDBBase):\n    pass\n# Additional properties stored in DB\nclass ManufacturerInDB(ManufacturerInDBBase):\n    pass\n#\n# Country s\n#\n# Shared properties\nclass CountryBase(BaseModel):",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "ManufacturerInDB",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class ManufacturerInDB(ManufacturerInDBBase):\n    pass\n#\n# Country s\n#\n# Shared properties\nclass CountryBase(BaseModel):\n    name: str | None = None\n    code: str | None = None\n    active: bool | None = True",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "CountryBase",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class CountryBase(BaseModel):\n    name: str | None = None\n    code: str | None = None\n    active: bool | None = True\nclass CountryBaseInDB(CountryBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass CountryCreate(CountryBase):\n    pass",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "CountryBaseInDB",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class CountryBaseInDB(CountryBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass CountryCreate(CountryBase):\n    pass\n# Properties to receive via API on update\nclass CountryUpdate(CountryBase):\n    pass\n# Properties to return via API",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "CountryCreate",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class CountryCreate(CountryBase):\n    pass\n# Properties to receive via API on update\nclass CountryUpdate(CountryBase):\n    pass\n# Properties to return via API\nclass Country(CountryBaseInDB):\n    pass\n# Properties stored in DB\nclass CountryInDB(CountryBaseInDB):",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "CountryUpdate",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class CountryUpdate(CountryBase):\n    pass\n# Properties to return via API\nclass Country(CountryBaseInDB):\n    pass\n# Properties stored in DB\nclass CountryInDB(CountryBaseInDB):\n    pass\n#\n# Province s",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "Country",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class Country(CountryBaseInDB):\n    pass\n# Properties stored in DB\nclass CountryInDB(CountryBaseInDB):\n    pass\n#\n# Province s\n#\n# Shared properties\nclass ProvinceBase(BaseModel):",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "CountryInDB",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class CountryInDB(CountryBaseInDB):\n    pass\n#\n# Province s\n#\n# Shared properties\nclass ProvinceBase(BaseModel):\n    name: str | None = None\n    country_uid: str | None = None\n    code: str | None = None",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "ProvinceBase",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class ProvinceBase(BaseModel):\n    name: str | None = None\n    country_uid: str | None = None\n    code: str | None = None\n    email: str | None = None\n    email_cc: str | None = None\n    consent_email: str | None = None\n    mobile_phone: str | None = None\n    business_phone: str | None = None\n    consent_sms: str | None = None",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "ProvinceBaseInDB",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class ProvinceBaseInDB(ProvinceBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ProvinceCreate(ProvinceBase):\n    country_uid: str\n# Properties to receive via API on update\nclass ProvinceUpdate(ProvinceBase):\n    pass\n# Properties to return via API",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "ProvinceCreate",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class ProvinceCreate(ProvinceBase):\n    country_uid: str\n# Properties to receive via API on update\nclass ProvinceUpdate(ProvinceBase):\n    pass\n# Properties to return via API\nclass Province(ProvinceBaseInDB):\n    pass\n# Properties stored in DB\nclass ProvinceInDB(ProvinceBaseInDB):",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "ProvinceUpdate",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class ProvinceUpdate(ProvinceBase):\n    pass\n# Properties to return via API\nclass Province(ProvinceBaseInDB):\n    pass\n# Properties stored in DB\nclass ProvinceInDB(ProvinceBaseInDB):\n    pass\n#\n# District s",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "Province",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class Province(ProvinceBaseInDB):\n    pass\n# Properties stored in DB\nclass ProvinceInDB(ProvinceBaseInDB):\n    pass\n#\n# District s\n#\n# Shared properties\nclass DistrictBase(BaseModel):",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "ProvinceInDB",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class ProvinceInDB(ProvinceBaseInDB):\n    pass\n#\n# District s\n#\n# Shared properties\nclass DistrictBase(BaseModel):\n    name: str | None = None\n    province_uid: str | None = None\n    code: str | None = None",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "DistrictBase",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class DistrictBase(BaseModel):\n    name: str | None = None\n    province_uid: str | None = None\n    code: str | None = None\n    email: str | None = None\n    email_cc: str | None = None\n    consent_email: str | None = None\n    mobile_phone: str | None = None\n    business_phone: str | None = None\n    consent_sms: str | None = None",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "DistrictBaseInDB",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class DistrictBaseInDB(DistrictBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass DistrictCreate(DistrictBase):\n    province_uid: str\n# Properties to receive via API on update\nclass DistrictUpdate(DistrictBase):\n    pass\n# Properties to return via API",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "DistrictCreate",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class DistrictCreate(DistrictBase):\n    province_uid: str\n# Properties to receive via API on update\nclass DistrictUpdate(DistrictBase):\n    pass\n# Properties to return via API\nclass District(DistrictBaseInDB):\n    pass\n# Properties stored in DB\nclass DistrictInDB(DistrictBaseInDB):",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "DistrictUpdate",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class DistrictUpdate(DistrictBase):\n    pass\n# Properties to return via API\nclass District(DistrictBaseInDB):\n    pass\n# Properties stored in DB\nclass DistrictInDB(DistrictBaseInDB):\n    pass",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "District",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class District(DistrictBaseInDB):\n    pass\n# Properties stored in DB\nclass DistrictInDB(DistrictBaseInDB):\n    pass",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "DistrictInDB",
        "kind": 6,
        "importPath": "setup.schemas",
        "description": "setup.schemas",
        "peekOfCode": "class DistrictInDB(DistrictBaseInDB):\n    pass",
        "detail": "setup.schemas",
        "documentation": {}
    },
    {
        "label": "LaboratorySettingService",
        "kind": 6,
        "importPath": "setup.services",
        "description": "setup.services",
        "peekOfCode": "class LaboratorySettingService(\n    BaseService[LaboratorySetting, LaboratorySettingCreate, LaboratorySettingUpdate]\n):\n    def __init__(self):\n        super().__init__(LaboratorySettingRepository)\nclass SupplierService(BaseService[Supplier, SupplierCreate, SupplierUpdate]):\n    def __init__(self):\n        super().__init__(SupplierRepository)\nclass ManufacturerService(\n    BaseService[Manufacturer, ManufacturerCreate, ManufacturerUpdate]",
        "detail": "setup.services",
        "documentation": {}
    },
    {
        "label": "SupplierService",
        "kind": 6,
        "importPath": "setup.services",
        "description": "setup.services",
        "peekOfCode": "class SupplierService(BaseService[Supplier, SupplierCreate, SupplierUpdate]):\n    def __init__(self):\n        super().__init__(SupplierRepository)\nclass ManufacturerService(\n    BaseService[Manufacturer, ManufacturerCreate, ManufacturerUpdate]\n):\n    def __init__(self):\n        super().__init__(ManufacturerRepository)\nclass DepartmentService(BaseService[Department, DepartmentCreate, DepartmentUpdate]):\n    def __init__(self):",
        "detail": "setup.services",
        "documentation": {}
    },
    {
        "label": "ManufacturerService",
        "kind": 6,
        "importPath": "setup.services",
        "description": "setup.services",
        "peekOfCode": "class ManufacturerService(\n    BaseService[Manufacturer, ManufacturerCreate, ManufacturerUpdate]\n):\n    def __init__(self):\n        super().__init__(ManufacturerRepository)\nclass DepartmentService(BaseService[Department, DepartmentCreate, DepartmentUpdate]):\n    def __init__(self):\n        super().__init__(DepartmentRepository)\nclass UnitService(BaseService[Unit, UnitCreate, UnitUpdate]):\n    def __init__(self):",
        "detail": "setup.services",
        "documentation": {}
    },
    {
        "label": "DepartmentService",
        "kind": 6,
        "importPath": "setup.services",
        "description": "setup.services",
        "peekOfCode": "class DepartmentService(BaseService[Department, DepartmentCreate, DepartmentUpdate]):\n    def __init__(self):\n        super().__init__(DepartmentRepository)\nclass UnitService(BaseService[Unit, UnitCreate, UnitUpdate]):\n    def __init__(self):\n        super().__init__(UnitRepository)\nclass LaboratoryService(BaseService[Laboratory, LaboratoryCreate, LaboratoryUpdate]):\n    def __init__(self):\n        super().__init__(LaboratoryRepository)\n    async def get_by_setup_name(self, keyword=\"felicity\") -> Laboratory:",
        "detail": "setup.services",
        "documentation": {}
    },
    {
        "label": "UnitService",
        "kind": 6,
        "importPath": "setup.services",
        "description": "setup.services",
        "peekOfCode": "class UnitService(BaseService[Unit, UnitCreate, UnitUpdate]):\n    def __init__(self):\n        super().__init__(UnitRepository)\nclass LaboratoryService(BaseService[Laboratory, LaboratoryCreate, LaboratoryUpdate]):\n    def __init__(self):\n        super().__init__(LaboratoryRepository)\n    async def get_by_setup_name(self, keyword=\"felicity\") -> Laboratory:\n        return await self.get(setup_name=keyword)\nclass DistrictService(BaseService[District, DistrictCreate, DistrictUpdate]):\n    def __init__(self):",
        "detail": "setup.services",
        "documentation": {}
    },
    {
        "label": "LaboratoryService",
        "kind": 6,
        "importPath": "setup.services",
        "description": "setup.services",
        "peekOfCode": "class LaboratoryService(BaseService[Laboratory, LaboratoryCreate, LaboratoryUpdate]):\n    def __init__(self):\n        super().__init__(LaboratoryRepository)\n    async def get_by_setup_name(self, keyword=\"felicity\") -> Laboratory:\n        return await self.get(setup_name=keyword)\nclass DistrictService(BaseService[District, DistrictCreate, DistrictUpdate]):\n    def __init__(self):\n        super().__init__(DistrictRepository)\nclass ProvinceService(BaseService[Province, ProvinceCreate, ProvinceUpdate]):\n    def __init__(self):",
        "detail": "setup.services",
        "documentation": {}
    },
    {
        "label": "DistrictService",
        "kind": 6,
        "importPath": "setup.services",
        "description": "setup.services",
        "peekOfCode": "class DistrictService(BaseService[District, DistrictCreate, DistrictUpdate]):\n    def __init__(self):\n        super().__init__(DistrictRepository)\nclass ProvinceService(BaseService[Province, ProvinceCreate, ProvinceUpdate]):\n    def __init__(self):\n        super().__init__(ProvinceRepository)\nclass CountryService(BaseService[Country, CountryCreate, CountryUpdate]):\n    def __init__(self):\n        super().__init__(CountryRepository)",
        "detail": "setup.services",
        "documentation": {}
    },
    {
        "label": "ProvinceService",
        "kind": 6,
        "importPath": "setup.services",
        "description": "setup.services",
        "peekOfCode": "class ProvinceService(BaseService[Province, ProvinceCreate, ProvinceUpdate]):\n    def __init__(self):\n        super().__init__(ProvinceRepository)\nclass CountryService(BaseService[Country, CountryCreate, CountryUpdate]):\n    def __init__(self):\n        super().__init__(CountryRepository)",
        "detail": "setup.services",
        "documentation": {}
    },
    {
        "label": "CountryService",
        "kind": 6,
        "importPath": "setup.services",
        "description": "setup.services",
        "peekOfCode": "class CountryService(BaseService[Country, CountryCreate, CountryUpdate]):\n    def __init__(self):\n        super().__init__(CountryRepository)",
        "detail": "setup.services",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratory",
        "kind": 6,
        "importPath": "shipment.entities",
        "description": "shipment.entities",
        "peekOfCode": "class ReferralLaboratory(AuditHistory):\n    __tablename__ = \"referral_laboratory\"\n    name = Column(String, nullable=True)\n    code = Column(String, index=True, unique=True, nullable=False)\n    url = Column(String, nullable=False)\n    username = Column(String, nullable=False)\n    password = Column(String, nullable=False)\n    is_reference = Column(Boolean(), default=False)\n    is_referral = Column(Boolean(), default=False)\nclass Shipment(AuditHistory):",
        "detail": "shipment.entities",
        "documentation": {}
    },
    {
        "label": "Shipment",
        "kind": 6,
        "importPath": "shipment.entities",
        "description": "shipment.entities",
        "peekOfCode": "class Shipment(AuditHistory):\n    __tablename__ = \"shipment\"\n    shipment_id = Column(String, index=True, unique=True, nullable=False)\n    comment = Column(String, nullable=True)\n    courier = Column(String, nullable=False)\n    assigned_count = Column(Integer, nullable=False, default=0)\n    data = Column(JSONB)\n    state = Column(String)\n    laboratory_uid = Column(\n        String, ForeignKey(\"referral_laboratory.uid\"), nullable=True",
        "detail": "shipment.entities",
        "documentation": {}
    },
    {
        "label": "ShippedSample",
        "kind": 6,
        "importPath": "shipment.entities",
        "description": "shipment.entities",
        "peekOfCode": "class ShippedSample(BaseEntity):\n    \"\"\"ShippedSample enables samples to be shipped multiple times\n    A sample can be tracked through different shipments from inception to end\n    \"\"\"\n    __tablename__ = \"shipped_sample\"\n    sample_uid = Column(String, ForeignKey(\"sample.uid\"), nullable=True)\n    sample = relationship(\"Sample\", foreign_keys=[sample_uid], lazy=\"selectin\")\n    shipment_uid = Column(String, ForeignKey(\"shipment.uid\"), nullable=True)\n    shipment = relationship(Shipment, foreign_keys=[shipment_uid], lazy=\"selectin\")\n    result_notified = Column(Boolean(), default=False)",
        "detail": "shipment.entities",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "shipment.entities",
        "description": "shipment.entities",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ReferralLaboratory(AuditHistory):\n    __tablename__ = \"referral_laboratory\"\n    name = Column(String, nullable=True)\n    code = Column(String, index=True, unique=True, nullable=False)\n    url = Column(String, nullable=False)\n    username = Column(String, nullable=False)\n    password = Column(String, nullable=False)\n    is_reference = Column(Boolean(), default=False)\n    is_referral = Column(Boolean(), default=False)",
        "detail": "shipment.entities",
        "documentation": {}
    },
    {
        "label": "ShipmentState",
        "kind": 6,
        "importPath": "shipment.enum",
        "description": "shipment.enum",
        "peekOfCode": "class ShipmentState(StrEnum):\n    \"\"\"Shipment Workflow States\n    empty -> preperation -> ready -> shipped\n    Other:\n    rejected, recalled, received\n    \"\"\"\n    DUE = auto()  # shipment recived from external labs\n    RECEIVING = auto()\n    EMPTY = auto()  # shipment without samples\n    PREPERATION = auto()  # shipment containing at least a single sample",
        "detail": "shipment.enum",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratoryRepository",
        "kind": 6,
        "importPath": "shipment.repository",
        "description": "shipment.repository",
        "peekOfCode": "class ReferralLaboratoryRepository(BaseRepository[ReferralLaboratory]):\n    def __init__(self) -> None:\n        super().__init__(ReferralLaboratory)\nclass ShipmentRepository(BaseRepository[Shipment]):\n    def __init__(self) -> None:\n        super().__init__(Shipment)\nclass ShippedSampleRepository(BaseRepository[ShippedSample]):\n    def __init__(self) -> None:\n        super().__init__(ShippedSample)",
        "detail": "shipment.repository",
        "documentation": {}
    },
    {
        "label": "ShipmentRepository",
        "kind": 6,
        "importPath": "shipment.repository",
        "description": "shipment.repository",
        "peekOfCode": "class ShipmentRepository(BaseRepository[Shipment]):\n    def __init__(self) -> None:\n        super().__init__(Shipment)\nclass ShippedSampleRepository(BaseRepository[ShippedSample]):\n    def __init__(self) -> None:\n        super().__init__(ShippedSample)",
        "detail": "shipment.repository",
        "documentation": {}
    },
    {
        "label": "ShippedSampleRepository",
        "kind": 6,
        "importPath": "shipment.repository",
        "description": "shipment.repository",
        "peekOfCode": "class ShippedSampleRepository(BaseRepository[ShippedSample]):\n    def __init__(self) -> None:\n        super().__init__(ShippedSample)",
        "detail": "shipment.repository",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratoryBase",
        "kind": 6,
        "importPath": "shipment.schemas",
        "description": "shipment.schemas",
        "peekOfCode": "class ReferralLaboratoryBase(BaseModel):\n    name: str | None = None\n    code: str | None = None\n    url: str | None = None\n    username: str | None = None\n    password: str | None = None\n    is_reference: bool | None = None\n    is_referral: bool | None = None\nclass ReferralLaboratoryBaseInDB(ReferralLaboratoryBase):\n    uid: str | None = None",
        "detail": "shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratoryBaseInDB",
        "kind": 6,
        "importPath": "shipment.schemas",
        "description": "shipment.schemas",
        "peekOfCode": "class ReferralLaboratoryBaseInDB(ReferralLaboratoryBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ReferralLaboratoryCreate(ReferralLaboratoryBase):\n    pass\n# Properties to receive via API on update\nclass ReferralLaboratoryUpdate(ReferralLaboratoryBase):\n    pass\n# Properties to return via API",
        "detail": "shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratoryCreate",
        "kind": 6,
        "importPath": "shipment.schemas",
        "description": "shipment.schemas",
        "peekOfCode": "class ReferralLaboratoryCreate(ReferralLaboratoryBase):\n    pass\n# Properties to receive via API on update\nclass ReferralLaboratoryUpdate(ReferralLaboratoryBase):\n    pass\n# Properties to return via API\nclass ReferralLaboratory(ReferralLaboratoryBaseInDB):\n    pass\n# Properties stored in DB\nclass ReferralLaboratoryInDB(ReferralLaboratoryBaseInDB):",
        "detail": "shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratoryUpdate",
        "kind": 6,
        "importPath": "shipment.schemas",
        "description": "shipment.schemas",
        "peekOfCode": "class ReferralLaboratoryUpdate(ReferralLaboratoryBase):\n    pass\n# Properties to return via API\nclass ReferralLaboratory(ReferralLaboratoryBaseInDB):\n    pass\n# Properties stored in DB\nclass ReferralLaboratoryInDB(ReferralLaboratoryBaseInDB):\n    pass\n#\n# Shipment Schemas",
        "detail": "shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratory",
        "kind": 6,
        "importPath": "shipment.schemas",
        "description": "shipment.schemas",
        "peekOfCode": "class ReferralLaboratory(ReferralLaboratoryBaseInDB):\n    pass\n# Properties stored in DB\nclass ReferralLaboratoryInDB(ReferralLaboratoryBaseInDB):\n    pass\n#\n# Shipment Schemas\n#\n# Shared properties\nclass ShipmentBase(BaseModel):",
        "detail": "shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratoryInDB",
        "kind": 6,
        "importPath": "shipment.schemas",
        "description": "shipment.schemas",
        "peekOfCode": "class ReferralLaboratoryInDB(ReferralLaboratoryBaseInDB):\n    pass\n#\n# Shipment Schemas\n#\n# Shared properties\nclass ShipmentBase(BaseModel):\n    shipment_id: str | None = None\n    comment: str | None = None\n    courier: str | None = None",
        "detail": "shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShipmentBase",
        "kind": 6,
        "importPath": "shipment.schemas",
        "description": "shipment.schemas",
        "peekOfCode": "class ShipmentBase(BaseModel):\n    shipment_id: str | None = None\n    comment: str | None = None\n    courier: str | None = None\n    assigned_count: int | None = None\n    data: dict | None = {}\n    samples: SampleBaseInDB | None = None\n    state: str | None = None\n    incoming: bool | None = False\n    laboratory_uid: str | None = None",
        "detail": "shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShipmentBaseInDB",
        "kind": 6,
        "importPath": "shipment.schemas",
        "description": "shipment.schemas",
        "peekOfCode": "class ShipmentBaseInDB(ShipmentBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ShipmentCreate(ShipmentBase):\n    pass\n# Properties to receive via API on update\nclass ShipmentUpdate(ShipmentBase):\n    pass\n# Properties to return via API",
        "detail": "shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShipmentCreate",
        "kind": 6,
        "importPath": "shipment.schemas",
        "description": "shipment.schemas",
        "peekOfCode": "class ShipmentCreate(ShipmentBase):\n    pass\n# Properties to receive via API on update\nclass ShipmentUpdate(ShipmentBase):\n    pass\n# Properties to return via API\nclass Shipment(ShipmentBaseInDB):\n    pass\n# Properties stored in DB\nclass ShipmentInDB(ShipmentBaseInDB):",
        "detail": "shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShipmentUpdate",
        "kind": 6,
        "importPath": "shipment.schemas",
        "description": "shipment.schemas",
        "peekOfCode": "class ShipmentUpdate(ShipmentBase):\n    pass\n# Properties to return via API\nclass Shipment(ShipmentBaseInDB):\n    pass\n# Properties stored in DB\nclass ShipmentInDB(ShipmentBaseInDB):\n    pass\n#\n# ShippedSample Schemas",
        "detail": "shipment.schemas",
        "documentation": {}
    },
    {
        "label": "Shipment",
        "kind": 6,
        "importPath": "shipment.schemas",
        "description": "shipment.schemas",
        "peekOfCode": "class Shipment(ShipmentBaseInDB):\n    pass\n# Properties stored in DB\nclass ShipmentInDB(ShipmentBaseInDB):\n    pass\n#\n# ShippedSample Schemas\n#\n# Shared properties\nclass ShippedSampleBase(BaseModel):",
        "detail": "shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShipmentInDB",
        "kind": 6,
        "importPath": "shipment.schemas",
        "description": "shipment.schemas",
        "peekOfCode": "class ShipmentInDB(ShipmentBaseInDB):\n    pass\n#\n# ShippedSample Schemas\n#\n# Shared properties\nclass ShippedSampleBase(BaseModel):\n    sample_uid: str | None = None\n    shipment_uid: str | None = None\nclass ShippedSampleBaseInDB(ShippedSampleBase):",
        "detail": "shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShippedSampleBase",
        "kind": 6,
        "importPath": "shipment.schemas",
        "description": "shipment.schemas",
        "peekOfCode": "class ShippedSampleBase(BaseModel):\n    sample_uid: str | None = None\n    shipment_uid: str | None = None\nclass ShippedSampleBaseInDB(ShippedSampleBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ShippedSampleCreate(ShippedSampleBase):\n    pass\n# Properties to receive via API on update",
        "detail": "shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShippedSampleBaseInDB",
        "kind": 6,
        "importPath": "shipment.schemas",
        "description": "shipment.schemas",
        "peekOfCode": "class ShippedSampleBaseInDB(ShippedSampleBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass ShippedSampleCreate(ShippedSampleBase):\n    pass\n# Properties to receive via API on update\nclass ShippedSampleUpdate(ShippedSampleBase):\n    pass\n# Properties to return via API",
        "detail": "shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShippedSampleCreate",
        "kind": 6,
        "importPath": "shipment.schemas",
        "description": "shipment.schemas",
        "peekOfCode": "class ShippedSampleCreate(ShippedSampleBase):\n    pass\n# Properties to receive via API on update\nclass ShippedSampleUpdate(ShippedSampleBase):\n    pass\n# Properties to return via API\nclass ShippedSample(ShippedSampleBaseInDB):\n    pass\n# Properties stored in DB\nclass ShippedSampleInDB(ShippedSampleBaseInDB):",
        "detail": "shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShippedSampleUpdate",
        "kind": 6,
        "importPath": "shipment.schemas",
        "description": "shipment.schemas",
        "peekOfCode": "class ShippedSampleUpdate(ShippedSampleBase):\n    pass\n# Properties to return via API\nclass ShippedSample(ShippedSampleBaseInDB):\n    pass\n# Properties stored in DB\nclass ShippedSampleInDB(ShippedSampleBaseInDB):\n    pass",
        "detail": "shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShippedSample",
        "kind": 6,
        "importPath": "shipment.schemas",
        "description": "shipment.schemas",
        "peekOfCode": "class ShippedSample(ShippedSampleBaseInDB):\n    pass\n# Properties stored in DB\nclass ShippedSampleInDB(ShippedSampleBaseInDB):\n    pass",
        "detail": "shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ShippedSampleInDB",
        "kind": 6,
        "importPath": "shipment.schemas",
        "description": "shipment.schemas",
        "peekOfCode": "class ShippedSampleInDB(ShippedSampleBaseInDB):\n    pass",
        "detail": "shipment.schemas",
        "documentation": {}
    },
    {
        "label": "ReferralLaboratoryService",
        "kind": 6,
        "importPath": "shipment.services",
        "description": "shipment.services",
        "peekOfCode": "class ReferralLaboratoryService(\n    BaseService[ReferralLaboratory, ReferralLaboratoryCreate, ReferralLaboratoryUpdate]\n):\n    def __init__(self):\n        super().__init__(ReferralLaboratoryRepository)\nclass ShippedSampleService(\n    BaseService[ShippedSample, ShippedSampleCreate, ShippedSampleUpdate]\n):\n    def __init__(self):\n        super().__init__(ShippedSampleRepository)",
        "detail": "shipment.services",
        "documentation": {}
    },
    {
        "label": "ShippedSampleService",
        "kind": 6,
        "importPath": "shipment.services",
        "description": "shipment.services",
        "peekOfCode": "class ShippedSampleService(\n    BaseService[ShippedSample, ShippedSampleCreate, ShippedSampleUpdate]\n):\n    def __init__(self):\n        super().__init__(ShippedSampleRepository)\nclass ShipmentService(BaseService[Shipment, ShipmentCreate, ShipmentUpdate]):\n    def __init__(self):\n        self.id_sequence_service = IdSequenceService()\n        self.shipped_sample_service = ShipmentRepository()\n        self.activity_service = ActivityStreamService()",
        "detail": "shipment.services",
        "documentation": {}
    },
    {
        "label": "ShipmentService",
        "kind": 6,
        "importPath": "shipment.services",
        "description": "shipment.services",
        "peekOfCode": "class ShipmentService(BaseService[Shipment, ShipmentCreate, ShipmentUpdate]):\n    def __init__(self):\n        self.id_sequence_service = IdSequenceService()\n        self.shipped_sample_service = ShipmentRepository()\n        self.activity_service = ActivityStreamService()\n        super().__init__(ShipmentRepository)\n    async def set_flow(self, uid: str, flow: bool = False):\n        \"\"\"Set whether the flow is incoming or outgoing\"\"\"\n        await super().update(uid, {\"incoming\": flow})\n    async def get_samples(self, uid: str):",
        "detail": "shipment.services",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "shipment.tasks",
        "description": "shipment.tasks",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def populate_shipment_manually(job_uid: str):\n    logger.info(f\"starting job {job_uid} ....\")\n    job_service = JobService()\n    shipment_service = ShipmentService()\n    job = await job_service.get(uid=job_uid)\n    if not job:\n        return\n    if not job.status == JobState.PENDING:\n        return",
        "detail": "shipment.tasks",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "shipment.utils",
        "description": "shipment.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# shipments\nasync def shipment_assign(shipment_uid: str, samples_data: list[dict], actor_uid):\n    shipment_service = ShipmentService()\n    sample_service = SampleService()\n    analysis_result_service = AnalysisResultService()\n    shipped_sample_service = ShippedSampleService()\n    shipment = await shipment_service.get(uid=shipment_uid)\n    async def process_sample(_sample_data):\n        sample = await sample_service.get(uid=_sample_data.get(\"sample_uid\", None))",
        "detail": "shipment.utils",
        "documentation": {}
    },
    {
        "label": "StoreRoom",
        "kind": 6,
        "importPath": "storage.entities",
        "description": "storage.entities",
        "peekOfCode": "class StoreRoom(AuditUser):\n    \"\"\"Store Room\"\"\"\n    __tablename__ = \"store_room\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\nclass StorageLocation(AuditUser):\n    \"\"\"Storage Location\n    e.g: Fridge, CupBoard, Floor, Box, etc\n    \"\"\"\n    __tablename__ = \"storage_location\"",
        "detail": "storage.entities",
        "documentation": {}
    },
    {
        "label": "StorageLocation",
        "kind": 6,
        "importPath": "storage.entities",
        "description": "storage.entities",
        "peekOfCode": "class StorageLocation(AuditUser):\n    \"\"\"Storage Location\n    e.g: Fridge, CupBoard, Floor, Box, etc\n    \"\"\"\n    __tablename__ = \"storage_location\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    store_room_uid = Column(String, ForeignKey(\"store_room.uid\"), nullable=False)\n    store_room = relationship(StoreRoom, backref=\"storage_locations\", lazy=\"selectin\")\nclass StorageSection(AuditUser):",
        "detail": "storage.entities",
        "documentation": {}
    },
    {
        "label": "StorageSection",
        "kind": 6,
        "importPath": "storage.entities",
        "description": "storage.entities",
        "peekOfCode": "class StorageSection(AuditUser):\n    \"\"\"Storage Location Section/Compartment\n    e.g: Shelve, Tray, Rack, etc\n    \"\"\"\n    __tablename__ = \"storage_section\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    storage_location_uid = Column(\n        String, ForeignKey(\"storage_location.uid\"), nullable=False\n    )",
        "detail": "storage.entities",
        "documentation": {}
    },
    {
        "label": "StorageContainer",
        "kind": 6,
        "importPath": "storage.entities",
        "description": "storage.entities",
        "peekOfCode": "class StorageContainer(AuditUser):\n    \"\"\"Storage Carrier\n    e.g: Sample K-Lite, etc\n    \"\"\"\n    __tablename__ = \"storage_container\"\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=False)\n    storage_section_uid = Column(\n        String, ForeignKey(\"storage_section.uid\"), nullable=False\n    )",
        "detail": "storage.entities",
        "documentation": {}
    },
    {
        "label": "StoreRoomRepository",
        "kind": 6,
        "importPath": "storage.repository",
        "description": "storage.repository",
        "peekOfCode": "class StoreRoomRepository(BaseRepository[StoreRoom]):\n    def __init__(self) -> None:\n        super().__init__(StoreRoom)\nclass StorageLocationRepository(BaseRepository[StorageLocation]):\n    def __init__(self) -> None:\n        super().__init__(StorageLocation)\nclass StorageSectionRepository(BaseRepository[StorageSection]):\n    def __init__(self) -> None:\n        super().__init__(StorageSection)\nclass StorageContainerRepository(BaseRepository[StorageContainer]):",
        "detail": "storage.repository",
        "documentation": {}
    },
    {
        "label": "StorageLocationRepository",
        "kind": 6,
        "importPath": "storage.repository",
        "description": "storage.repository",
        "peekOfCode": "class StorageLocationRepository(BaseRepository[StorageLocation]):\n    def __init__(self) -> None:\n        super().__init__(StorageLocation)\nclass StorageSectionRepository(BaseRepository[StorageSection]):\n    def __init__(self) -> None:\n        super().__init__(StorageSection)\nclass StorageContainerRepository(BaseRepository[StorageContainer]):\n    def __init__(self) -> None:\n        super().__init__(StorageContainer)",
        "detail": "storage.repository",
        "documentation": {}
    },
    {
        "label": "StorageSectionRepository",
        "kind": 6,
        "importPath": "storage.repository",
        "description": "storage.repository",
        "peekOfCode": "class StorageSectionRepository(BaseRepository[StorageSection]):\n    def __init__(self) -> None:\n        super().__init__(StorageSection)\nclass StorageContainerRepository(BaseRepository[StorageContainer]):\n    def __init__(self) -> None:\n        super().__init__(StorageContainer)",
        "detail": "storage.repository",
        "documentation": {}
    },
    {
        "label": "StorageContainerRepository",
        "kind": 6,
        "importPath": "storage.repository",
        "description": "storage.repository",
        "peekOfCode": "class StorageContainerRepository(BaseRepository[StorageContainer]):\n    def __init__(self) -> None:\n        super().__init__(StorageContainer)",
        "detail": "storage.repository",
        "documentation": {}
    },
    {
        "label": "StoreRoomBase",
        "kind": 6,
        "importPath": "storage.schemas",
        "description": "storage.schemas",
        "peekOfCode": "class StoreRoomBase(BaseModel):\n    name: str | None = None\n    description: str | None = None\nclass StoreRoom(StoreRoomBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass StoreRoomCreate(StoreRoomBase):\n    pass\n# Properties to receive via API on update",
        "detail": "storage.schemas",
        "documentation": {}
    },
    {
        "label": "StoreRoom",
        "kind": 6,
        "importPath": "storage.schemas",
        "description": "storage.schemas",
        "peekOfCode": "class StoreRoom(StoreRoomBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass StoreRoomCreate(StoreRoomBase):\n    pass\n# Properties to receive via API on update\nclass StoreRoomUpdate(StoreRoomBase):\n    pass\n#",
        "detail": "storage.schemas",
        "documentation": {}
    },
    {
        "label": "StoreRoomCreate",
        "kind": 6,
        "importPath": "storage.schemas",
        "description": "storage.schemas",
        "peekOfCode": "class StoreRoomCreate(StoreRoomBase):\n    pass\n# Properties to receive via API on update\nclass StoreRoomUpdate(StoreRoomBase):\n    pass\n#\n# StorageLocation Schemas\n#\n# Shared properties\nclass StorageLocationBase(BaseModel):",
        "detail": "storage.schemas",
        "documentation": {}
    },
    {
        "label": "StoreRoomUpdate",
        "kind": 6,
        "importPath": "storage.schemas",
        "description": "storage.schemas",
        "peekOfCode": "class StoreRoomUpdate(StoreRoomBase):\n    pass\n#\n# StorageLocation Schemas\n#\n# Shared properties\nclass StorageLocationBase(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    store_room_uid: str",
        "detail": "storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageLocationBase",
        "kind": 6,
        "importPath": "storage.schemas",
        "description": "storage.schemas",
        "peekOfCode": "class StorageLocationBase(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    store_room_uid: str\n    store_room: Optional[StoreRoom] = None\nclass StorageLocation(StorageLocationBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass StorageLocationCreate(StorageLocationBase):",
        "detail": "storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageLocation",
        "kind": 6,
        "importPath": "storage.schemas",
        "description": "storage.schemas",
        "peekOfCode": "class StorageLocation(StorageLocationBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass StorageLocationCreate(StorageLocationBase):\n    pass\n# Properties to receive via API on update\nclass StorageLocationUpdate(StorageLocationBase):\n    pass\n#",
        "detail": "storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageLocationCreate",
        "kind": 6,
        "importPath": "storage.schemas",
        "description": "storage.schemas",
        "peekOfCode": "class StorageLocationCreate(StorageLocationBase):\n    pass\n# Properties to receive via API on update\nclass StorageLocationUpdate(StorageLocationBase):\n    pass\n#\n# StorageSection Schemas\n#\n# Shared properties\nclass StorageSectionBase(BaseModel):",
        "detail": "storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageLocationUpdate",
        "kind": 6,
        "importPath": "storage.schemas",
        "description": "storage.schemas",
        "peekOfCode": "class StorageLocationUpdate(StorageLocationBase):\n    pass\n#\n# StorageSection Schemas\n#\n# Shared properties\nclass StorageSectionBase(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    storage_location_uid: str",
        "detail": "storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageSectionBase",
        "kind": 6,
        "importPath": "storage.schemas",
        "description": "storage.schemas",
        "peekOfCode": "class StorageSectionBase(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    storage_location_uid: str\n    storage_location: Optional[StorageLocation] = None\nclass StorageSection(StorageSectionBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass StorageSectionCreate(StorageSectionBase):",
        "detail": "storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageSection",
        "kind": 6,
        "importPath": "storage.schemas",
        "description": "storage.schemas",
        "peekOfCode": "class StorageSection(StorageSectionBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass StorageSectionCreate(StorageSectionBase):\n    pass\n# Properties to receive via API on update\nclass StorageSectionUpdate(StorageSectionBase):\n    pass\n#",
        "detail": "storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageSectionCreate",
        "kind": 6,
        "importPath": "storage.schemas",
        "description": "storage.schemas",
        "peekOfCode": "class StorageSectionCreate(StorageSectionBase):\n    pass\n# Properties to receive via API on update\nclass StorageSectionUpdate(StorageSectionBase):\n    pass\n#\n# StorageContainer Schemas\n#\n# Shared properties\nclass StorageContainerBase(BaseModel):",
        "detail": "storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageSectionUpdate",
        "kind": 6,
        "importPath": "storage.schemas",
        "description": "storage.schemas",
        "peekOfCode": "class StorageSectionUpdate(StorageSectionBase):\n    pass\n#\n# StorageContainer Schemas\n#\n# Shared properties\nclass StorageContainerBase(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    storage_section_uid: str",
        "detail": "storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageContainerBase",
        "kind": 6,
        "importPath": "storage.schemas",
        "description": "storage.schemas",
        "peekOfCode": "class StorageContainerBase(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    storage_section_uid: str\n    storage_section: Optional[StorageSection] = None\n    grid: bool = False\n    row_wise: bool = False\n    cols: int | None = None\n    rows: int | None = None\n    slots: int | None = 0",
        "detail": "storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageContainer",
        "kind": 6,
        "importPath": "storage.schemas",
        "description": "storage.schemas",
        "peekOfCode": "class StorageContainer(StorageContainerBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass StorageContainerCreate(StorageContainerBase):\n    pass\n# Properties to receive via API on update\nclass StorageContainerUpdate(StorageContainerBase):\n    pass",
        "detail": "storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageContainerCreate",
        "kind": 6,
        "importPath": "storage.schemas",
        "description": "storage.schemas",
        "peekOfCode": "class StorageContainerCreate(StorageContainerBase):\n    pass\n# Properties to receive via API on update\nclass StorageContainerUpdate(StorageContainerBase):\n    pass",
        "detail": "storage.schemas",
        "documentation": {}
    },
    {
        "label": "StorageContainerUpdate",
        "kind": 6,
        "importPath": "storage.schemas",
        "description": "storage.schemas",
        "peekOfCode": "class StorageContainerUpdate(StorageContainerBase):\n    pass",
        "detail": "storage.schemas",
        "documentation": {}
    },
    {
        "label": "StoreRoomService",
        "kind": 6,
        "importPath": "storage.services",
        "description": "storage.services",
        "peekOfCode": "class StoreRoomService(BaseService[StoreRoom, StoreRoomCreate, StoreRoomUpdate]):\n    def __init__(self):\n        super().__init__(StoreRoomRepository)\nclass StorageLocationService(\n    BaseService[StorageLocation, StorageLocationCreate, StorageLocationUpdate]\n):\n    def __init__(self):\n        super().__init__(StorageLocationRepository)\nclass StorageSectionService(\n    BaseService[StorageSection, StorageSectionCreate, StorageSectionUpdate]",
        "detail": "storage.services",
        "documentation": {}
    },
    {
        "label": "StorageLocationService",
        "kind": 6,
        "importPath": "storage.services",
        "description": "storage.services",
        "peekOfCode": "class StorageLocationService(\n    BaseService[StorageLocation, StorageLocationCreate, StorageLocationUpdate]\n):\n    def __init__(self):\n        super().__init__(StorageLocationRepository)\nclass StorageSectionService(\n    BaseService[StorageSection, StorageSectionCreate, StorageSectionUpdate]\n):\n    def __init__(self):\n        self.sample_service = SampleService()",
        "detail": "storage.services",
        "documentation": {}
    },
    {
        "label": "StorageSectionService",
        "kind": 6,
        "importPath": "storage.services",
        "description": "storage.services",
        "peekOfCode": "class StorageSectionService(\n    BaseService[StorageSection, StorageSectionCreate, StorageSectionUpdate]\n):\n    def __init__(self):\n        self.sample_service = SampleService()\n        super().__init__(StorageSectionRepository)\nclass StorageContainerService(\n    BaseService[StorageContainer, StorageContainerCreate, StorageContainerUpdate]\n):\n    def __init__(self):",
        "detail": "storage.services",
        "documentation": {}
    },
    {
        "label": "StorageContainerService",
        "kind": 6,
        "importPath": "storage.services",
        "description": "storage.services",
        "peekOfCode": "class StorageContainerService(\n    BaseService[StorageContainer, StorageContainerCreate, StorageContainerUpdate]\n):\n    def __init__(self):\n        self.sample_service = SampleService()\n        super().__init__(StorageContainerRepository)\n    async def get_samples(self, storage_container_uid: str) -> list[Sample]:\n        return await self.sample_service.get_all(\n            storage_container_uid=storage_container_uid\n        )",
        "detail": "storage.services",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "kind": 6,
        "importPath": "user.abstract",
        "description": "user.abstract",
        "peekOfCode": "class AbstractBaseUser(AuditUser):\n    __abstract__ = True\n    first_name = Column(String, index=True)\n    last_name = Column(String, index=True)\n    email = Column(String, unique=True, index=True, nullable=False)\n    mobile_phone = Column(String, nullable=True)\n    business_phone = Column(String, nullable=True)\n    user_name = Column(String, unique=True, index=True, nullable=False)\n    hashed_password = Column(String, nullable=False)\n    login_retry = Column(Integer)",
        "detail": "user.abstract",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "user.entities",
        "description": "user.entities",
        "peekOfCode": "class User(AbstractBaseUser):\n    __tablename__ = \"user\"\n    groups = relationship(\n        \"Group\", secondary=user_groups, back_populates=\"members\", lazy=\"selectin\"\n    )\n    preference_uid = Column(String, ForeignKey(\"user_preference.uid\"))\n    preference = relationship(\n        \"UserPreference\", foreign_keys=[preference_uid], lazy=\"selectin\"\n    )\nclass Permission(BaseEntity):",
        "detail": "user.entities",
        "documentation": {}
    },
    {
        "label": "Permission",
        "kind": 6,
        "importPath": "user.entities",
        "description": "user.entities",
        "peekOfCode": "class Permission(BaseEntity):\n    __tablename__ = \"permission\"\n    action = Column(String, nullable=False)  # e.g create, modify\n    target = Column(String, nullable=False)  # e.g sample, worksheet\n    active = Column(Boolean(), default=True)\nclass Group(BaseEntity):\n    __tablename__ = \"group\"\n    name = Column(String, unique=True, index=True, nullable=False)\n    keyword = Column(\n        String, unique=True, index=True, nullable=False, default=\"keyword_x\"",
        "detail": "user.entities",
        "documentation": {}
    },
    {
        "label": "Group",
        "kind": 6,
        "importPath": "user.entities",
        "description": "user.entities",
        "peekOfCode": "class Group(BaseEntity):\n    __tablename__ = \"group\"\n    name = Column(String, unique=True, index=True, nullable=False)\n    keyword = Column(\n        String, unique=True, index=True, nullable=False, default=\"keyword_x\"\n    )\n    members = relationship(\n        \"User\", secondary=user_groups, back_populates=\"groups\", lazy=\"selectin\"\n    )\n    permissions = relationship(",
        "detail": "user.entities",
        "documentation": {}
    },
    {
        "label": "UserPreference",
        "kind": 6,
        "importPath": "user.entities",
        "description": "user.entities",
        "peekOfCode": "class UserPreference(BaseEntity):\n    \"\"\"Preferences for System Personalisation\"\"\"\n    __tablename__ = \"user_preference\"\n    expanded_menu = Column(Boolean(), default=False)\n    departments = relationship(\n        \"Department\", secondary=department_preference, lazy=\"selectin\"\n    )\n    theme = Column(String, default=\"light\")  # dark, light",
        "detail": "user.entities",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "user.entities",
        "description": "user.entities",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# TODO: Refactor User to LaboratoryContact, UserAuth to ContactAuth\n\"\"\"\nMany to Many Link between Group and User\n\"\"\"\nuser_groups = Table(\n    \"user_groups\",\n    BaseEntity.metadata,\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n    Column(\"group_uid\", ForeignKey(\"group.uid\"), primary_key=True),",
        "detail": "user.entities",
        "documentation": {}
    },
    {
        "label": "user_groups",
        "kind": 5,
        "importPath": "user.entities",
        "description": "user.entities",
        "peekOfCode": "user_groups = Table(\n    \"user_groups\",\n    BaseEntity.metadata,\n    Column(\"user_uid\", ForeignKey(\"user.uid\"), primary_key=True),\n    Column(\"group_uid\", ForeignKey(\"group.uid\"), primary_key=True),\n)\n\"\"\"\nMany to Many Link between Group and Permission\n\"\"\"\npermission_groups = Table(",
        "detail": "user.entities",
        "documentation": {}
    },
    {
        "label": "permission_groups",
        "kind": 5,
        "importPath": "user.entities",
        "description": "user.entities",
        "peekOfCode": "permission_groups = Table(\n    \"permission_groups\",\n    BaseEntity.metadata,\n    Column(\"permission_uid\", ForeignKey(\"permission.uid\"), primary_key=True),\n    Column(\"group_uid\", ForeignKey(\"group.uid\"), primary_key=True),\n)\nclass User(AbstractBaseUser):\n    __tablename__ = \"user\"\n    groups = relationship(\n        \"Group\", secondary=user_groups, back_populates=\"members\", lazy=\"selectin\"",
        "detail": "user.entities",
        "documentation": {}
    },
    {
        "label": "department_preference",
        "kind": 5,
        "importPath": "user.entities",
        "description": "user.entities",
        "peekOfCode": "department_preference = Table(\n    \"department_preference\",\n    BaseEntity.metadata,\n    Column(\"department_uid\", ForeignKey(\"department.uid\"), primary_key=True),\n    Column(\"preference_uid\", ForeignKey(\"user_preference.uid\"), primary_key=True),\n)\nclass UserPreference(BaseEntity):\n    \"\"\"Preferences for System Personalisation\"\"\"\n    __tablename__ = \"user_preference\"\n    expanded_menu = Column(Boolean(), default=False)",
        "detail": "user.entities",
        "documentation": {}
    },
    {
        "label": "UserType",
        "kind": 6,
        "importPath": "user.enum",
        "description": "user.enum",
        "peekOfCode": "class UserType(StrEnum):\n    DISPATCH_CONTACT = \"dcuser\"\n    CLIENT_CONTACT = \"ccuser\"\n    LABORATORY_CONTACT = \"lcuser\"",
        "detail": "user.enum",
        "documentation": {}
    },
    {
        "label": "new_account_created",
        "kind": 2,
        "importPath": "user.events",
        "description": "user.events",
        "peekOfCode": "def new_account_created(**kwargs):\n    send_new_account_email(\n        settings.FIRST_SUPERUSER_EMAIL,\n        settings.FIRST_SUPERUSER_USERNAME,\n        settings.FIRST_SUPERUSER_PASSWORD,\n    )\ndef password_reset(user, token):\n    send_reset_password_email(email_to=user.email, email=user.email, token=token)\ndef init_user_events():\n    subscribe(\"new-account-created\", new_account_created)",
        "detail": "user.events",
        "documentation": {}
    },
    {
        "label": "password_reset",
        "kind": 2,
        "importPath": "user.events",
        "description": "user.events",
        "peekOfCode": "def password_reset(user, token):\n    send_reset_password_email(email_to=user.email, email=user.email, token=token)\ndef init_user_events():\n    subscribe(\"new-account-created\", new_account_created)\n    subscribe(\"password-reset\", password_reset)",
        "detail": "user.events",
        "documentation": {}
    },
    {
        "label": "init_user_events",
        "kind": 2,
        "importPath": "user.events",
        "description": "user.events",
        "peekOfCode": "def init_user_events():\n    subscribe(\"new-account-created\", new_account_created)\n    subscribe(\"password-reset\", password_reset)",
        "detail": "user.events",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "user.events",
        "description": "user.events",
        "peekOfCode": "settings = get_settings()\ndef new_account_created(**kwargs):\n    send_new_account_email(\n        settings.FIRST_SUPERUSER_EMAIL,\n        settings.FIRST_SUPERUSER_USERNAME,\n        settings.FIRST_SUPERUSER_PASSWORD,\n    )\ndef password_reset(user, token):\n    send_reset_password_email(email_to=user.email, email=user.email, token=token)\ndef init_user_events():",
        "detail": "user.events",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "kind": 6,
        "importPath": "user.repository",
        "description": "user.repository",
        "peekOfCode": "class UserRepository(BaseRepository[User]):\n    def __init__(self) -> None:\n        super().__init__(User)\nclass PermissionRepository(BaseRepository[Permission]):\n    def __init__(self) -> None:\n        super().__init__(Permission)\nclass GroupRepository(BaseRepository[Group]):\n    def __init__(self) -> None:\n        super().__init__(Group)\nclass UserPreferenceRepository(BaseRepository[UserPreference]):",
        "detail": "user.repository",
        "documentation": {}
    },
    {
        "label": "PermissionRepository",
        "kind": 6,
        "importPath": "user.repository",
        "description": "user.repository",
        "peekOfCode": "class PermissionRepository(BaseRepository[Permission]):\n    def __init__(self) -> None:\n        super().__init__(Permission)\nclass GroupRepository(BaseRepository[Group]):\n    def __init__(self) -> None:\n        super().__init__(Group)\nclass UserPreferenceRepository(BaseRepository[UserPreference]):\n    def __init__(self) -> None:\n        super().__init__(UserPreference)",
        "detail": "user.repository",
        "documentation": {}
    },
    {
        "label": "GroupRepository",
        "kind": 6,
        "importPath": "user.repository",
        "description": "user.repository",
        "peekOfCode": "class GroupRepository(BaseRepository[Group]):\n    def __init__(self) -> None:\n        super().__init__(Group)\nclass UserPreferenceRepository(BaseRepository[UserPreference]):\n    def __init__(self) -> None:\n        super().__init__(UserPreference)",
        "detail": "user.repository",
        "documentation": {}
    },
    {
        "label": "UserPreferenceRepository",
        "kind": 6,
        "importPath": "user.repository",
        "description": "user.repository",
        "peekOfCode": "class UserPreferenceRepository(BaseRepository[UserPreference]):\n    def __init__(self) -> None:\n        super().__init__(UserPreference)",
        "detail": "user.repository",
        "documentation": {}
    },
    {
        "label": "PermissionBase",
        "kind": 6,
        "importPath": "user.schemas",
        "description": "user.schemas",
        "peekOfCode": "class PermissionBase(BaseModel):\n    action: str | None = None\n    target: str | None = None\n    active: bool = False\n# Properties to receive via API on creation\nclass PermissionCreate(PermissionBase):\n    pass\n# Properties to receive via API on update\nclass PermissionUpdate(PermissionBase):\n    uid: str | None = None",
        "detail": "user.schemas",
        "documentation": {}
    },
    {
        "label": "PermissionCreate",
        "kind": 6,
        "importPath": "user.schemas",
        "description": "user.schemas",
        "peekOfCode": "class PermissionCreate(PermissionBase):\n    pass\n# Properties to receive via API on update\nclass PermissionUpdate(PermissionBase):\n    uid: str | None = None\nclass PermissionInDBBase(PermissionBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Permission(PermissionInDBBase):",
        "detail": "user.schemas",
        "documentation": {}
    },
    {
        "label": "PermissionUpdate",
        "kind": 6,
        "importPath": "user.schemas",
        "description": "user.schemas",
        "peekOfCode": "class PermissionUpdate(PermissionBase):\n    uid: str | None = None\nclass PermissionInDBBase(PermissionBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Permission(PermissionInDBBase):\n    pass\n# Additional properties stored in DB\nclass PermissionInDB(PermissionInDBBase):",
        "detail": "user.schemas",
        "documentation": {}
    },
    {
        "label": "PermissionInDBBase",
        "kind": 6,
        "importPath": "user.schemas",
        "description": "user.schemas",
        "peekOfCode": "class PermissionInDBBase(PermissionBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Permission(PermissionInDBBase):\n    pass\n# Additional properties stored in DB\nclass PermissionInDB(PermissionInDBBase):\n    pass\n#",
        "detail": "user.schemas",
        "documentation": {}
    },
    {
        "label": "Permission",
        "kind": 6,
        "importPath": "user.schemas",
        "description": "user.schemas",
        "peekOfCode": "class Permission(PermissionInDBBase):\n    pass\n# Additional properties stored in DB\nclass PermissionInDB(PermissionInDBBase):\n    pass\n#\n#  Group Schema\n#\n# Shared properties\nclass GroupBase(BaseModel):",
        "detail": "user.schemas",
        "documentation": {}
    },
    {
        "label": "PermissionInDB",
        "kind": 6,
        "importPath": "user.schemas",
        "description": "user.schemas",
        "peekOfCode": "class PermissionInDB(PermissionInDBBase):\n    pass\n#\n#  Group Schema\n#\n# Shared properties\nclass GroupBase(BaseModel):\n    name: str | None = None\n    keyword: str | None = None\n    permissions: Optional[List[Permission]] = None",
        "detail": "user.schemas",
        "documentation": {}
    },
    {
        "label": "GroupBase",
        "kind": 6,
        "importPath": "user.schemas",
        "description": "user.schemas",
        "peekOfCode": "class GroupBase(BaseModel):\n    name: str | None = None\n    keyword: str | None = None\n    permissions: Optional[List[Permission]] = None\n    active: bool = False\n# Properties to receive via API on creation\nclass GroupCreate(GroupBase):\n    pass\n# Properties to receive via API on update\nclass GroupUpdate(GroupBase):",
        "detail": "user.schemas",
        "documentation": {}
    },
    {
        "label": "GroupCreate",
        "kind": 6,
        "importPath": "user.schemas",
        "description": "user.schemas",
        "peekOfCode": "class GroupCreate(GroupBase):\n    pass\n# Properties to receive via API on update\nclass GroupUpdate(GroupBase):\n    uid: str | None = None\nclass GroupInDBBase(GroupBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Group(GroupInDBBase):",
        "detail": "user.schemas",
        "documentation": {}
    },
    {
        "label": "GroupUpdate",
        "kind": 6,
        "importPath": "user.schemas",
        "description": "user.schemas",
        "peekOfCode": "class GroupUpdate(GroupBase):\n    uid: str | None = None\nclass GroupInDBBase(GroupBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Group(GroupInDBBase):\n    pass\n# Additional properties stored in DB\nclass GroupInDB(GroupInDBBase):",
        "detail": "user.schemas",
        "documentation": {}
    },
    {
        "label": "GroupInDBBase",
        "kind": 6,
        "importPath": "user.schemas",
        "description": "user.schemas",
        "peekOfCode": "class GroupInDBBase(GroupBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass Group(GroupInDBBase):\n    pass\n# Additional properties stored in DB\nclass GroupInDB(GroupInDBBase):\n    pass\n#",
        "detail": "user.schemas",
        "documentation": {}
    },
    {
        "label": "Group",
        "kind": 6,
        "importPath": "user.schemas",
        "description": "user.schemas",
        "peekOfCode": "class Group(GroupInDBBase):\n    pass\n# Additional properties stored in DB\nclass GroupInDB(GroupInDBBase):\n    pass\n#\n#  User Preferences\n#\nclass UserPreferenceBase(BaseAuditModel):\n    expanded_menu: bool | None = False",
        "detail": "user.schemas",
        "documentation": {}
    },
    {
        "label": "GroupInDB",
        "kind": 6,
        "importPath": "user.schemas",
        "description": "user.schemas",
        "peekOfCode": "class GroupInDB(GroupInDBBase):\n    pass\n#\n#  User Preferences\n#\nclass UserPreferenceBase(BaseAuditModel):\n    expanded_menu: bool | None = False\n    theme: str | None = \"light\"\nclass UserPreference(UserPreferenceBase):\n    uid: str | None = None",
        "detail": "user.schemas",
        "documentation": {}
    },
    {
        "label": "UserPreferenceBase",
        "kind": 6,
        "importPath": "user.schemas",
        "description": "user.schemas",
        "peekOfCode": "class UserPreferenceBase(BaseAuditModel):\n    expanded_menu: bool | None = False\n    theme: str | None = \"light\"\nclass UserPreference(UserPreferenceBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass UserPreferenceCreate(UserPreferenceBase):\n    pass\nclass UserPreferenceUpdate(UserPreferenceBase):\n    pass",
        "detail": "user.schemas",
        "documentation": {}
    },
    {
        "label": "UserPreference",
        "kind": 6,
        "importPath": "user.schemas",
        "description": "user.schemas",
        "peekOfCode": "class UserPreference(UserPreferenceBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\nclass UserPreferenceCreate(UserPreferenceBase):\n    pass\nclass UserPreferenceUpdate(UserPreferenceBase):\n    pass\n#\n#  User Schema\n#",
        "detail": "user.schemas",
        "documentation": {}
    },
    {
        "label": "UserPreferenceCreate",
        "kind": 6,
        "importPath": "user.schemas",
        "description": "user.schemas",
        "peekOfCode": "class UserPreferenceCreate(UserPreferenceBase):\n    pass\nclass UserPreferenceUpdate(UserPreferenceBase):\n    pass\n#\n#  User Schema\n#\n# Shared properties\nclass UserBasicBase(BaseModel):\n    first_name: str | None = None",
        "detail": "user.schemas",
        "documentation": {}
    },
    {
        "label": "UserPreferenceUpdate",
        "kind": 6,
        "importPath": "user.schemas",
        "description": "user.schemas",
        "peekOfCode": "class UserPreferenceUpdate(UserPreferenceBase):\n    pass\n#\n#  User Schema\n#\n# Shared properties\nclass UserBasicBase(BaseModel):\n    first_name: str | None = None\n    last_name: str | None = None\n    user_name: str | None = None",
        "detail": "user.schemas",
        "documentation": {}
    },
    {
        "label": "UserBasicBase",
        "kind": 6,
        "importPath": "user.schemas",
        "description": "user.schemas",
        "peekOfCode": "class UserBasicBase(BaseModel):\n    first_name: str | None = None\n    last_name: str | None = None\n    user_name: str | None = None\nclass UserBase(BaseAuditModel):\n    email: Optional[EmailStr] = None\n    first_name: str | None = None\n    last_name: str | None = None\n    password: str | None = None\n    user_name: str | None = None",
        "detail": "user.schemas",
        "documentation": {}
    },
    {
        "label": "UserBase",
        "kind": 6,
        "importPath": "user.schemas",
        "description": "user.schemas",
        "peekOfCode": "class UserBase(BaseAuditModel):\n    email: Optional[EmailStr] = None\n    first_name: str | None = None\n    last_name: str | None = None\n    password: str | None = None\n    user_name: str | None = None\n    avatar: str | None = None\n    bio: str | None = None\n    default_route: str | None = None\n    groups: Optional[Group] = []",
        "detail": "user.schemas",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "user.schemas",
        "description": "user.schemas",
        "peekOfCode": "class UserCreate(UserBase):\n    pass\n# Properties to receive via API on update\nclass UserUpdate(UserBase):\n    preference_uid: str | None = None\nclass UserInDBBase(UserBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass UserBasic(UserBasicBase):",
        "detail": "user.schemas",
        "documentation": {}
    },
    {
        "label": "UserUpdate",
        "kind": 6,
        "importPath": "user.schemas",
        "description": "user.schemas",
        "peekOfCode": "class UserUpdate(UserBase):\n    preference_uid: str | None = None\nclass UserInDBBase(UserBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass UserBasic(UserBasicBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API",
        "detail": "user.schemas",
        "documentation": {}
    },
    {
        "label": "UserInDBBase",
        "kind": 6,
        "importPath": "user.schemas",
        "description": "user.schemas",
        "peekOfCode": "class UserInDBBase(UserBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass UserBasic(UserBasicBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass User(UserInDBBase):\n    pass",
        "detail": "user.schemas",
        "documentation": {}
    },
    {
        "label": "UserBasic",
        "kind": 6,
        "importPath": "user.schemas",
        "description": "user.schemas",
        "peekOfCode": "class UserBasic(UserBasicBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Additional properties to return via API\nclass User(UserInDBBase):\n    pass\n# Additional properties stored in DB\nclass UserInDB(UserInDBBase):\n    hashed_password: str",
        "detail": "user.schemas",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "user.schemas",
        "description": "user.schemas",
        "peekOfCode": "class User(UserInDBBase):\n    pass\n# Additional properties stored in DB\nclass UserInDB(UserInDBBase):\n    hashed_password: str",
        "detail": "user.schemas",
        "documentation": {}
    },
    {
        "label": "UserInDB",
        "kind": 6,
        "importPath": "user.schemas",
        "description": "user.schemas",
        "peekOfCode": "class UserInDB(UserInDBBase):\n    hashed_password: str",
        "detail": "user.schemas",
        "documentation": {}
    },
    {
        "label": "UserService",
        "kind": 6,
        "importPath": "user.services",
        "description": "user.services",
        "peekOfCode": "class UserService(BaseService[User, UserCreate, UserUpdate]):\n    def __init__(self) -> None:\n        super().__init__(UserRepository)\n    async def create(self, user_in: UserCreate, related: list[str] = None) -> User:\n        by_username = await self.get_by_username(user_in.user_name)\n        if by_username:\n            raise Exception(\"Username already exist\")\n        policy = password_check(user_in.password, user_in.user_name)\n        if not policy[\"password_ok\"]:\n            raise Exception(policy[\"message\"])",
        "detail": "user.services",
        "documentation": {}
    },
    {
        "label": "GroupService",
        "kind": 6,
        "importPath": "user.services",
        "description": "user.services",
        "peekOfCode": "class GroupService(BaseService[Group, GroupCreate, GroupUpdate]):\n    def __init__(self):\n        super().__init__(GroupRepository)\nclass PermissionService(BaseService[Permission, PermissionCreate, PermissionUpdate]):\n    def __init__(self):\n        super().__init__(PermissionRepository)\nclass UserPreferenceService(\n    BaseService[UserPreference, UserPreferenceCreate, UserPreferenceUpdate]\n):\n    def __init__(self) -> None:",
        "detail": "user.services",
        "documentation": {}
    },
    {
        "label": "PermissionService",
        "kind": 6,
        "importPath": "user.services",
        "description": "user.services",
        "peekOfCode": "class PermissionService(BaseService[Permission, PermissionCreate, PermissionUpdate]):\n    def __init__(self):\n        super().__init__(PermissionRepository)\nclass UserPreferenceService(\n    BaseService[UserPreference, UserPreferenceCreate, UserPreferenceUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(UserPreferenceRepository)",
        "detail": "user.services",
        "documentation": {}
    },
    {
        "label": "UserPreferenceService",
        "kind": 6,
        "importPath": "user.services",
        "description": "user.services",
        "peekOfCode": "class UserPreferenceService(\n    BaseService[UserPreference, UserPreferenceCreate, UserPreferenceUpdate]\n):\n    def __init__(self) -> None:\n        super().__init__(UserPreferenceRepository)",
        "detail": "user.services",
        "documentation": {}
    },
    {
        "label": "WSBase",
        "kind": 6,
        "importPath": "worksheet.entities",
        "description": "worksheet.entities",
        "peekOfCode": "class WSBase(AuditUser):\n    __abstract__ = True\n    worksheet_type = Column(String)\n    reserved = Column(JSONB)\n    number_of_samples = Column(Integer)\n    rows = Column(Integer)\n    cols = Column(Integer)\n    row_wise = Column(Boolean(), default=False)\n    state = Column(String)\n\"\"\"",
        "detail": "worksheet.entities",
        "documentation": {}
    },
    {
        "label": "WorkSheetTemplate",
        "kind": 6,
        "importPath": "worksheet.entities",
        "description": "worksheet.entities",
        "peekOfCode": "class WorkSheetTemplate(WSBase):\n    \"\"\"WorkSheetTemplate\n    a template has a single analyses associated in order to avoid\n    cases where multi analyses can be assigned to a single ws\n    \"\"\"\n    __tablename__ = \"worksheet_template\"\n    name = Column(String, unique=True, nullable=False)\n    description = Column(String)\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    analysis = relationship(analysis_entities.Analysis, lazy=\"selectin\")",
        "detail": "worksheet.entities",
        "documentation": {}
    },
    {
        "label": "WorkSheet",
        "kind": 6,
        "importPath": "worksheet.entities",
        "description": "worksheet.entities",
        "peekOfCode": "class WorkSheet(AuditHistory, WSBase):\n    __tablename__ = \"worksheet\"\n    template_uid = Column(String, ForeignKey(\"worksheet_template.uid\"), nullable=False)\n    template = relationship(\"WorkSheetTemplate\", lazy=\"selectin\")\n    analyst_uid = Column(String, ForeignKey(\"user.uid\"), nullable=False)\n    analyst = relationship(User, foreign_keys=[analyst_uid], lazy=\"selectin\")\n    worksheet_id = Column(String, index=True, unique=True, nullable=False)\n    analysis_uid = Column(String, ForeignKey(\"analysis.uid\"), nullable=True)\n    analysis = relationship(analysis_entities.Analysis, lazy=\"selectin\")\n    instrument_uid = Column(String, ForeignKey(\"instrument.uid\"), nullable=True)",
        "detail": "worksheet.entities",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "worksheet.entities",
        "description": "worksheet.entities",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass WSBase(AuditUser):\n    __abstract__ = True\n    worksheet_type = Column(String)\n    reserved = Column(JSONB)\n    number_of_samples = Column(Integer)\n    rows = Column(Integer)\n    cols = Column(Integer)\n    row_wise = Column(Boolean(), default=False)\n    state = Column(String)",
        "detail": "worksheet.entities",
        "documentation": {}
    },
    {
        "label": "worksheet_template_qc_level",
        "kind": 5,
        "importPath": "worksheet.entities",
        "description": "worksheet.entities",
        "peekOfCode": "worksheet_template_qc_level = Table(\n    \"worksheet_template_qc_level\",\n    BaseEntity.metadata,\n    Column(\"ws_template_uid\", ForeignKey(\"worksheet_template.uid\"), primary_key=True),\n    Column(\"qc_level_uid\", ForeignKey(\"qc_level.uid\"), primary_key=True),\n)\nclass WorkSheetTemplate(WSBase):\n    \"\"\"WorkSheetTemplate\n    a template has a single analyses associated in order to avoid\n    cases where multi analyses can be assigned to a single ws",
        "detail": "worksheet.entities",
        "documentation": {}
    },
    {
        "label": "WorkSheetLayout",
        "kind": 6,
        "importPath": "worksheet.enum",
        "description": "worksheet.enum",
        "peekOfCode": "class WorkSheetLayout(StrEnum):\n    \"\"\"Worksheet Types\n    FLAT: Single Column, can be displayed as Multi Column when needed\n    GRID: Multi Column: Specific Rows and Columns\n    \"\"\"\n    FLAT = auto()\n    GRID = auto()\nclass WorkSheetState(StrEnum):\n    \"\"\"Worksheet Workflow States\n    empty -> pending -> submitting -> awaiting -> approving -> approved",
        "detail": "worksheet.enum",
        "documentation": {}
    },
    {
        "label": "WorkSheetState",
        "kind": 6,
        "importPath": "worksheet.enum",
        "description": "worksheet.enum",
        "peekOfCode": "class WorkSheetState(StrEnum):\n    \"\"\"Worksheet Workflow States\n    empty -> pending -> submitting -> awaiting -> approving -> approved\n    \"\"\"\n    EMPTY = auto()  # worksheets without samples\n    PENDING = auto()  # worksheets containing at least a single 'pending' analyte\n    SUBMITTING = auto()\n    AWAITING = (\n        auto()\n    )  # worksheets whose analytes are results but not all approved/verified",
        "detail": "worksheet.enum",
        "documentation": {}
    },
    {
        "label": "WorkSheetRepository",
        "kind": 6,
        "importPath": "worksheet.repository",
        "description": "worksheet.repository",
        "peekOfCode": "class WorkSheetRepository(BaseRepository[WorkSheet]):\n    def __init__(self) -> None:\n        super().__init__(WorkSheet)\n    async def paginate_with_cursors(\n        self,\n        page_size: int | None = None,\n        after_cursor: str | None = None,\n        before_cursor: str | None = None,\n        text: str | None = None,\n        status: str | None = None,",
        "detail": "worksheet.repository",
        "documentation": {}
    },
    {
        "label": "WorkSheetTemplateRepository",
        "kind": 6,
        "importPath": "worksheet.repository",
        "description": "worksheet.repository",
        "peekOfCode": "class WorkSheetTemplateRepository(BaseRepository[WorkSheetTemplate]):\n    def __init__(self) -> None:\n        super().__init__(WorkSheetTemplate)",
        "detail": "worksheet.repository",
        "documentation": {}
    },
    {
        "label": "WorkSheetBase",
        "kind": 6,
        "importPath": "worksheet.schemas",
        "description": "worksheet.schemas",
        "peekOfCode": "class WorkSheetBase(BaseModel):\n    analyst_uid: str | None = None\n    template_uid: str | None = None\n    worksheet_id: str | None = None\n    instrument_uid: str | None = None\n    sample_type_uid: str | None = None\n    analysis_uid: str | None = None\n    analysis: Optional[AnalysisBaseInDB] = None\n    reserved: Optional[dict] = None\n    number_of_samples: int | None = None",
        "detail": "worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WorkSheetBaseInDB",
        "kind": 6,
        "importPath": "worksheet.schemas",
        "description": "worksheet.schemas",
        "peekOfCode": "class WorkSheetBaseInDB(WorkSheetBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass WorkSheetCreate(WorkSheetBase):\n    pass\n# Properties to receive via API on update\nclass WorkSheetUpdate(WorkSheetBase):\n    pass\n# Properties to return via API",
        "detail": "worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WorkSheetCreate",
        "kind": 6,
        "importPath": "worksheet.schemas",
        "description": "worksheet.schemas",
        "peekOfCode": "class WorkSheetCreate(WorkSheetBase):\n    pass\n# Properties to receive via API on update\nclass WorkSheetUpdate(WorkSheetBase):\n    pass\n# Properties to return via API\nclass WorkSheet(WorkSheetBaseInDB):\n    pass\n# Properties stored in DB\nclass WorkSheetInDB(WorkSheetBaseInDB):",
        "detail": "worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WorkSheetUpdate",
        "kind": 6,
        "importPath": "worksheet.schemas",
        "description": "worksheet.schemas",
        "peekOfCode": "class WorkSheetUpdate(WorkSheetBase):\n    pass\n# Properties to return via API\nclass WorkSheet(WorkSheetBaseInDB):\n    pass\n# Properties stored in DB\nclass WorkSheetInDB(WorkSheetBaseInDB):\n    pass\n#\n# WSTemplate Schemas",
        "detail": "worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WorkSheet",
        "kind": 6,
        "importPath": "worksheet.schemas",
        "description": "worksheet.schemas",
        "peekOfCode": "class WorkSheet(WorkSheetBaseInDB):\n    pass\n# Properties stored in DB\nclass WorkSheetInDB(WorkSheetBaseInDB):\n    pass\n#\n# WSTemplate Schemas\n#\n# Shared properties\nclass WSTemplateBase(BaseModel):",
        "detail": "worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WorkSheetInDB",
        "kind": 6,
        "importPath": "worksheet.schemas",
        "description": "worksheet.schemas",
        "peekOfCode": "class WorkSheetInDB(WorkSheetBaseInDB):\n    pass\n#\n# WSTemplate Schemas\n#\n# Shared properties\nclass WSTemplateBase(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    instrument_uid: str | None = None",
        "detail": "worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WSTemplateBase",
        "kind": 6,
        "importPath": "worksheet.schemas",
        "description": "worksheet.schemas",
        "peekOfCode": "class WSTemplateBase(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    instrument_uid: str | None = None\n    sample_type_uid: str | None = None\n    analysis_uid: str | None = None\n    analysis: Optional[AnalysisBaseInDB] = None\n    qc_analyses: Optional[List[AnalysisBaseInDB]] = []\n    qc_levels: Optional[List[QCLevelInDB]] = []\n    reserved: Optional[dict] = None",
        "detail": "worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WSTemplateBaseInDB",
        "kind": 6,
        "importPath": "worksheet.schemas",
        "description": "worksheet.schemas",
        "peekOfCode": "class WSTemplateBaseInDB(WSTemplateBase):\n    uid: str | None = None\n    model_config = ConfigDict(from_attributes=True)\n# Properties to receive via API on creation\nclass WSTemplateCreate(WSTemplateBase):\n    pass\n# Properties to receive via API on update\nclass WSTemplateUpdate(WSTemplateBase):\n    pass\n# Properties to return via API",
        "detail": "worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WSTemplateCreate",
        "kind": 6,
        "importPath": "worksheet.schemas",
        "description": "worksheet.schemas",
        "peekOfCode": "class WSTemplateCreate(WSTemplateBase):\n    pass\n# Properties to receive via API on update\nclass WSTemplateUpdate(WSTemplateBase):\n    pass\n# Properties to return via API\nclass WSTemplate(WSTemplateBaseInDB):\n    pass\n# Properties stored in DB\nclass WSTemplateInDB(WSTemplateBaseInDB):",
        "detail": "worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WSTemplateUpdate",
        "kind": 6,
        "importPath": "worksheet.schemas",
        "description": "worksheet.schemas",
        "peekOfCode": "class WSTemplateUpdate(WSTemplateBase):\n    pass\n# Properties to return via API\nclass WSTemplate(WSTemplateBaseInDB):\n    pass\n# Properties stored in DB\nclass WSTemplateInDB(WSTemplateBaseInDB):\n    pass",
        "detail": "worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WSTemplate",
        "kind": 6,
        "importPath": "worksheet.schemas",
        "description": "worksheet.schemas",
        "peekOfCode": "class WSTemplate(WSTemplateBaseInDB):\n    pass\n# Properties stored in DB\nclass WSTemplateInDB(WSTemplateBaseInDB):\n    pass",
        "detail": "worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WSTemplateInDB",
        "kind": 6,
        "importPath": "worksheet.schemas",
        "description": "worksheet.schemas",
        "peekOfCode": "class WSTemplateInDB(WSTemplateBaseInDB):\n    pass",
        "detail": "worksheet.schemas",
        "documentation": {}
    },
    {
        "label": "WorkSheetTemplateService",
        "kind": 6,
        "importPath": "worksheet.services",
        "description": "worksheet.services",
        "peekOfCode": "class WorkSheetTemplateService(\n    BaseService[WSTemplate, WSTemplateCreate, WSTemplateUpdate]\n):\n    def __init__(self):\n        super().__init__(QCTemplateRepository)\nclass WorkSheetService(BaseService[WorkSheet, WorkSheetCreate, WorkSheetUpdate]):\n    id_sequence_service = IdSequenceService()\n    def __init__(self):\n        self.analysis_result_service = AnalysisResultService()\n        self.activity_streamer = ActivityStreamService()",
        "detail": "worksheet.services",
        "documentation": {}
    },
    {
        "label": "WorkSheetService",
        "kind": 6,
        "importPath": "worksheet.services",
        "description": "worksheet.services",
        "peekOfCode": "class WorkSheetService(BaseService[WorkSheet, WorkSheetCreate, WorkSheetUpdate]):\n    id_sequence_service = IdSequenceService()\n    def __init__(self):\n        self.analysis_result_service = AnalysisResultService()\n        self.activity_streamer = ActivityStreamService()\n        super().__init__(WorkSheetRepository)\n    async def get_analysis_results(self, uid: str):\n        results: List[AnalysisResult] = []\n        qc_results: List[AnalysisResult] = []\n        all_results = await self.analysis_result_service.get_all(worksheet_uid=uid)",
        "detail": "worksheet.services",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "worksheet.services",
        "description": "worksheet.services",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass WorkSheetTemplateService(\n    BaseService[WSTemplate, WSTemplateCreate, WSTemplateUpdate]\n):\n    def __init__(self):\n        super().__init__(QCTemplateRepository)\nclass WorkSheetService(BaseService[WorkSheet, WorkSheetCreate, WorkSheetUpdate]):\n    id_sequence_service = IdSequenceService()\n    def __init__(self):\n        self.analysis_result_service = AnalysisResultService()",
        "detail": "worksheet.services",
        "documentation": {}
    },
    {
        "label": "get_sample_position",
        "kind": 2,
        "importPath": "worksheet.tasks",
        "description": "worksheet.tasks",
        "peekOfCode": "def get_sample_position(reserved, level_uid) -> int:\n    if not reserved:\n        return 0\n    matching_keys = [\n        k for k, v in reserved.items() if v.get(\"level_uid\", 0) == level_uid\n    ]\n    return int(matching_keys[0]) if matching_keys else 0\nasync def setup_ws_quality_control(ws: WorkSheet):\n    analysis_result_service = AnalysisResultService()\n    qc_set_service = QCSetService()",
        "detail": "worksheet.tasks",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "worksheet.tasks",
        "description": "worksheet.tasks",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def populate_worksheet_plate(job_uid: str):\n    logger.info(f\"starting job {job_uid} ....\")\n    job_service = JobService()\n    worksheet_service = WorkSheetService()\n    analysis_result_service = AnalysisResultService()\n    job = await job_service.get(uid=job_uid)\n    if not job:\n        return\n    if not job.status == JobState.PENDING:",
        "detail": "worksheet.tasks",
        "documentation": {}
    },
    {
        "label": "WorksheetWorkFlowException",
        "kind": 6,
        "importPath": "worksheet.workflow",
        "description": "worksheet.workflow",
        "peekOfCode": "class WorksheetWorkFlowException(Exception): ...\nclass WorkSheetWorkFlow:\n    \"\"\"WorksheetWorkFlow\n    Defines a set of guards that allow or prevent actions taken on Worksheet\n    \"\"\"\n    def __init__(self):\n        self.worksheet_service = WorkSheetService()\n    async def submit(self, uid, submitter):\n        worksheet = await self.worksheet_service.get(uid=uid)\n        await self._guard_submit(worksheet)",
        "detail": "worksheet.workflow",
        "documentation": {}
    },
    {
        "label": "WorkSheetWorkFlow",
        "kind": 6,
        "importPath": "worksheet.workflow",
        "description": "worksheet.workflow",
        "peekOfCode": "class WorkSheetWorkFlow:\n    \"\"\"WorksheetWorkFlow\n    Defines a set of guards that allow or prevent actions taken on Worksheet\n    \"\"\"\n    def __init__(self):\n        self.worksheet_service = WorkSheetService()\n    async def submit(self, uid, submitter):\n        worksheet = await self.worksheet_service.get(uid=uid)\n        await self._guard_submit(worksheet)\n        return self.worksheet_service.submit(submitter)",
        "detail": "worksheet.workflow",
        "documentation": {}
    },
    {
        "label": "observe_events",
        "kind": 2,
        "importPath": "events",
        "description": "events",
        "peekOfCode": "def observe_events():\n    init_user_events()",
        "detail": "events",
        "documentation": {}
    },
    {
        "label": "NotFoundError",
        "kind": 6,
        "importPath": "exceptions",
        "description": "exceptions",
        "peekOfCode": "class NotFoundError(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)\nclass AlreadyExistsError(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)\nclass NotAllowedError(Exception):\n    def __init__(self, message):",
        "detail": "exceptions",
        "documentation": {}
    },
    {
        "label": "AlreadyExistsError",
        "kind": 6,
        "importPath": "exceptions",
        "description": "exceptions",
        "peekOfCode": "class AlreadyExistsError(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)\nclass NotAllowedError(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)\nclass GenericError(Exception):\n    def __init__(self, message):",
        "detail": "exceptions",
        "documentation": {}
    },
    {
        "label": "NotAllowedError",
        "kind": 6,
        "importPath": "exceptions",
        "description": "exceptions",
        "peekOfCode": "class NotAllowedError(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)\nclass GenericError(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)\nclass MissingDataError(Exception):\n    def __init__(self, message):",
        "detail": "exceptions",
        "documentation": {}
    },
    {
        "label": "GenericError",
        "kind": 6,
        "importPath": "exceptions",
        "description": "exceptions",
        "peekOfCode": "class GenericError(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)\nclass MissingDataError(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)\nclass ValidationError(Exception):\n    def __init__(self, message):",
        "detail": "exceptions",
        "documentation": {}
    },
    {
        "label": "MissingDataError",
        "kind": 6,
        "importPath": "exceptions",
        "description": "exceptions",
        "peekOfCode": "class MissingDataError(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)\nclass ValidationError(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)",
        "detail": "exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "kind": 6,
        "importPath": "exceptions",
        "description": "exceptions",
        "peekOfCode": "class ValidationError(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)",
        "detail": "exceptions",
        "documentation": {}
    }
]