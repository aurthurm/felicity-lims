"""updated

Revision ID: 10ecf5ec9e80
Revises: 28042fd2e903
Create Date: 2024-08-08 13:09:38.431256

"""
import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision = '10ecf5ec9e80'
down_revision = '28042fd2e903'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('audit_log',
                    sa.Column('user_id', sa.String(), nullable=True),
                    sa.Column('target_type', sa.String(length=100), nullable=False),
                    sa.Column('target_id', sa.String(), nullable=True),
                    sa.Column('action', sa.Integer(), nullable=True),
                    sa.Column('state_before', sa.UnicodeText(), nullable=True),
                    sa.Column('state_after', sa.UnicodeText(), nullable=True),
                    sa.Column('uid', sa.String(), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('created_by_uid', sa.String(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('updated_by_uid', sa.String(), nullable=True),
                    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
                    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
                    sa.PrimaryKeyConstraint('uid')
                    )
    op.create_index(op.f('ix_audit_log_uid'), 'audit_log', ['uid'], unique=False)
    op.add_column('group', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('group', sa.Column('created_by_uid', sa.String(), nullable=True))
    op.add_column('group', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('group', sa.Column('updated_by_uid', sa.String(), nullable=True))
    op.create_foreign_key(None, 'group', 'user', ['created_by_uid'], ['uid'])
    op.create_foreign_key(None, 'group', 'user', ['updated_by_uid'], ['uid'])
    op.add_column('id_sequence', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('id_sequence', sa.Column('created_by_uid', sa.String(), nullable=True))
    op.add_column('id_sequence', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('id_sequence', sa.Column('updated_by_uid', sa.String(), nullable=True))
    op.create_foreign_key(None, 'id_sequence', 'user', ['updated_by_uid'], ['uid'])
    op.create_foreign_key(None, 'id_sequence', 'user', ['created_by_uid'], ['uid'])
    op.add_column('job', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('job', sa.Column('created_by_uid', sa.String(), nullable=True))
    op.add_column('job', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('job', sa.Column('updated_by_uid', sa.String(), nullable=True))
    op.create_foreign_key(None, 'job', 'user', ['updated_by_uid'], ['uid'])
    op.create_foreign_key(None, 'job', 'user', ['created_by_uid'], ['uid'])
    op.add_column('permission', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('permission', sa.Column('created_by_uid', sa.String(), nullable=True))
    op.add_column('permission', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('permission', sa.Column('updated_by_uid', sa.String(), nullable=True))
    op.create_foreign_key(None, 'permission', 'user', ['created_by_uid'], ['uid'])
    op.create_foreign_key(None, 'permission', 'user', ['updated_by_uid'], ['uid'])
    op.add_column('reflex_brain_addition', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('reflex_brain_addition', sa.Column('created_by_uid', sa.String(), nullable=True))
    op.add_column('reflex_brain_addition', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('reflex_brain_addition', sa.Column('updated_by_uid', sa.String(), nullable=True))
    op.create_foreign_key(None, 'reflex_brain_addition', 'user', ['updated_by_uid'], ['uid'])
    op.create_foreign_key(None, 'reflex_brain_addition', 'user', ['created_by_uid'], ['uid'])
    op.add_column('reflex_brain_criteria', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('reflex_brain_criteria', sa.Column('created_by_uid', sa.String(), nullable=True))
    op.add_column('reflex_brain_criteria', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('reflex_brain_criteria', sa.Column('updated_by_uid', sa.String(), nullable=True))
    op.create_foreign_key(None, 'reflex_brain_criteria', 'user', ['created_by_uid'], ['uid'])
    op.create_foreign_key(None, 'reflex_brain_criteria', 'user', ['updated_by_uid'], ['uid'])
    op.add_column('reflex_brain_final', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('reflex_brain_final', sa.Column('created_by_uid', sa.String(), nullable=True))
    op.add_column('reflex_brain_final', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('reflex_brain_final', sa.Column('updated_by_uid', sa.String(), nullable=True))
    op.create_foreign_key(None, 'reflex_brain_final', 'user', ['created_by_uid'], ['uid'])
    op.create_foreign_key(None, 'reflex_brain_final', 'user', ['updated_by_uid'], ['uid'])
    op.add_column('shipped_sample', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('shipped_sample', sa.Column('created_by_uid', sa.String(), nullable=True))
    op.add_column('shipped_sample', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('shipped_sample', sa.Column('updated_by_uid', sa.String(), nullable=True))
    op.create_foreign_key(None, 'shipped_sample', 'user', ['updated_by_uid'], ['uid'])
    op.create_foreign_key(None, 'shipped_sample', 'user', ['created_by_uid'], ['uid'])
    op.add_column('user_preference', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('user_preference', sa.Column('created_by_uid', sa.String(), nullable=True))
    op.add_column('user_preference', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('user_preference', sa.Column('updated_by_uid', sa.String(), nullable=True))
    op.create_foreign_key(None, 'user_preference', 'user', ['updated_by_uid'], ['uid'])
    op.create_foreign_key(None, 'user_preference', 'user', ['created_by_uid'], ['uid'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'user_preference', type_='foreignkey')
    op.drop_constraint(None, 'user_preference', type_='foreignkey')
    op.drop_column('user_preference', 'updated_by_uid')
    op.drop_column('user_preference', 'updated_at')
    op.drop_column('user_preference', 'created_by_uid')
    op.drop_column('user_preference', 'created_at')
    op.drop_constraint(None, 'shipped_sample', type_='foreignkey')
    op.drop_constraint(None, 'shipped_sample', type_='foreignkey')
    op.drop_column('shipped_sample', 'updated_by_uid')
    op.drop_column('shipped_sample', 'updated_at')
    op.drop_column('shipped_sample', 'created_by_uid')
    op.drop_column('shipped_sample', 'created_at')
    op.drop_constraint(None, 'reflex_brain_final', type_='foreignkey')
    op.drop_constraint(None, 'reflex_brain_final', type_='foreignkey')
    op.drop_column('reflex_brain_final', 'updated_by_uid')
    op.drop_column('reflex_brain_final', 'updated_at')
    op.drop_column('reflex_brain_final', 'created_by_uid')
    op.drop_column('reflex_brain_final', 'created_at')
    op.drop_constraint(None, 'reflex_brain_criteria', type_='foreignkey')
    op.drop_constraint(None, 'reflex_brain_criteria', type_='foreignkey')
    op.drop_column('reflex_brain_criteria', 'updated_by_uid')
    op.drop_column('reflex_brain_criteria', 'updated_at')
    op.drop_column('reflex_brain_criteria', 'created_by_uid')
    op.drop_column('reflex_brain_criteria', 'created_at')
    op.drop_constraint(None, 'reflex_brain_addition', type_='foreignkey')
    op.drop_constraint(None, 'reflex_brain_addition', type_='foreignkey')
    op.drop_column('reflex_brain_addition', 'updated_by_uid')
    op.drop_column('reflex_brain_addition', 'updated_at')
    op.drop_column('reflex_brain_addition', 'created_by_uid')
    op.drop_column('reflex_brain_addition', 'created_at')
    op.drop_constraint(None, 'permission', type_='foreignkey')
    op.drop_constraint(None, 'permission', type_='foreignkey')
    op.drop_column('permission', 'updated_by_uid')
    op.drop_column('permission', 'updated_at')
    op.drop_column('permission', 'created_by_uid')
    op.drop_column('permission', 'created_at')
    op.drop_constraint(None, 'job', type_='foreignkey')
    op.drop_constraint(None, 'job', type_='foreignkey')
    op.drop_column('job', 'updated_by_uid')
    op.drop_column('job', 'updated_at')
    op.drop_column('job', 'created_by_uid')
    op.drop_column('job', 'created_at')
    op.drop_constraint(None, 'id_sequence', type_='foreignkey')
    op.drop_constraint(None, 'id_sequence', type_='foreignkey')
    op.drop_column('id_sequence', 'updated_by_uid')
    op.drop_column('id_sequence', 'updated_at')
    op.drop_column('id_sequence', 'created_by_uid')
    op.drop_column('id_sequence', 'created_at')
    op.drop_constraint(None, 'group', type_='foreignkey')
    op.drop_constraint(None, 'group', type_='foreignkey')
    op.drop_column('group', 'updated_by_uid')
    op.drop_column('group', 'updated_at')
    op.drop_column('group', 'created_by_uid')
    op.drop_column('group', 'created_at')
    op.drop_index(op.f('ix_audit_log_uid'), table_name='audit_log')
    op.drop_table('audit_log')
    # ### end Alembic commands ###
