"""cleanup

Revision ID: 79cc9c2c7768
Revises: 0777557a3508
Create Date: 2024-02-16 15:17:04.865234

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "79cc9c2c7768"
down_revision = "0777557a3508"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "instrument_competence",
        sa.Column("instrument_uid", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("user_uid", sa.String(), nullable=False),
        sa.Column("issue_date", sa.DateTime(), nullable=False),
        sa.Column("expiry_date", sa.DateTime(), nullable=False),
        sa.Column("internal", sa.Boolean(), nullable=False),
        sa.Column("competence", sa.LargeBinary(), nullable=True),
        sa.Column("uid", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_uid", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_uid", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by_uid"],
            ["user.uid"],
        ),
        sa.ForeignKeyConstraint(
            ["instrument_uid"],
            ["instrument.uid"],
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_uid"],
            ["user.uid"],
        ),
        sa.ForeignKeyConstraint(
            ["user_uid"],
            ["user.uid"],
        ),
        sa.PrimaryKeyConstraint("uid"),
    )
    op.create_index(
        op.f("ix_instrument_competence_uid"),
        "instrument_competence",
        ["uid"],
        unique=False,
    )
    op.create_table(
        "laboratory_instrument",
        sa.Column("instrument_uid", sa.String(), nullable=False),
        sa.Column("lab_name", sa.String(), nullable=False),
        sa.Column("serial_number", sa.String(), nullable=False),
        sa.Column("date_commissioned", sa.DateTime(), nullable=True),
        sa.Column("date_decommissioned", sa.DateTime(), nullable=True),
        sa.Column("uid", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_uid", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_uid", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by_uid"],
            ["user.uid"],
        ),
        sa.ForeignKeyConstraint(
            ["instrument_uid"],
            ["instrument.uid"],
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_uid"],
            ["user.uid"],
        ),
        sa.PrimaryKeyConstraint("uid"),
    )
    op.create_index(
        op.f("ix_laboratory_instrument_uid"),
        "laboratory_instrument",
        ["uid"],
        unique=False,
    )
    op.add_column(
        "analysis_result",
        sa.Column("laboratory_instrument_uid", sa.String(), nullable=True),
    )
    op.drop_constraint(
        "analysis_result_instrument_uid_fkey", "analysis_result", type_="foreignkey"
    )
    op.create_foreign_key(
        None,
        "analysis_result",
        "laboratory_instrument",
        ["laboratory_instrument_uid"],
        ["uid"],
    )
    op.drop_column("analysis_result", "instrument_uid")
    op.add_column(
        "analysis_specification", sa.Column("normal_value", sa.String(), nullable=True)
    )
    op.add_column(
        "calibration_certificate",
        sa.Column("laboratory_instrument_uid", sa.String(), nullable=False),
    )
    op.add_column(
        "calibration_certificate",
        sa.Column("certificate", sa.LargeBinary(), nullable=True),
    )
    op.alter_column(
        "calibration_certificate",
        "date_issued",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
    )
    op.alter_column(
        "calibration_certificate",
        "valid_from_date",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
    )
    op.alter_column(
        "calibration_certificate",
        "valid_to_date",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
    )
    op.alter_column(
        "calibration_certificate",
        "performed_by",
        existing_type=sa.VARCHAR(),
        nullable=False,
    )
    op.alter_column(
        "calibration_certificate",
        "approved_by",
        existing_type=sa.VARCHAR(),
        nullable=False,
    )
    op.drop_constraint(
        "calibration_certificate_instrument_uid_fkey",
        "calibration_certificate",
        type_="foreignkey",
    )
    op.create_foreign_key(
        None,
        "calibration_certificate",
        "laboratory_instrument",
        ["laboratory_instrument_uid"],
        ["uid"],
    )
    op.drop_column("calibration_certificate", "instrument_uid")
    op.add_column(
        "instrument_calibration",
        sa.Column("laboratory_instrument_uid", sa.String(), nullable=False),
    )
    op.add_column(
        "instrument_calibration", sa.Column("report", sa.LargeBinary(), nullable=True)
    )
    op.alter_column(
        "instrument_calibration",
        "calibration_id",
        existing_type=sa.VARCHAR(),
        nullable=True,
    )
    op.alter_column(
        "instrument_calibration",
        "date_reported",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
    )
    op.alter_column(
        "instrument_calibration",
        "performed_by",
        existing_type=sa.VARCHAR(),
        nullable=False,
    )
    op.alter_column(
        "instrument_calibration",
        "start_date",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
    )
    op.alter_column(
        "instrument_calibration",
        "end_date",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
    )
    op.alter_column(
        "instrument_calibration",
        "work_done",
        existing_type=sa.VARCHAR(),
        nullable=False,
    )
    op.drop_constraint(
        "instrument_calibration_instrument_uid_fkey",
        "instrument_calibration",
        type_="foreignkey",
    )
    op.create_foreign_key(
        None,
        "instrument_calibration",
        "laboratory_instrument",
        ["laboratory_instrument_uid"],
        ["uid"],
    )
    op.drop_column("instrument_calibration", "instrument_uid")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "instrument_calibration",
        sa.Column("instrument_uid", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.drop_constraint(None, "instrument_calibration", type_="foreignkey")
    op.create_foreign_key(
        "instrument_calibration_instrument_uid_fkey",
        "instrument_calibration",
        "instrument",
        ["instrument_uid"],
        ["uid"],
    )
    op.alter_column(
        "instrument_calibration", "work_done", existing_type=sa.VARCHAR(), nullable=True
    )
    op.alter_column(
        "instrument_calibration",
        "end_date",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
    )
    op.alter_column(
        "instrument_calibration",
        "start_date",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
    )
    op.alter_column(
        "instrument_calibration",
        "performed_by",
        existing_type=sa.VARCHAR(),
        nullable=True,
    )
    op.alter_column(
        "instrument_calibration",
        "date_reported",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
    )
    op.alter_column(
        "instrument_calibration",
        "calibration_id",
        existing_type=sa.VARCHAR(),
        nullable=False,
    )
    op.drop_column("instrument_calibration", "report")
    op.drop_column("instrument_calibration", "laboratory_instrument_uid")
    op.add_column(
        "calibration_certificate",
        sa.Column("instrument_uid", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.drop_constraint(None, "calibration_certificate", type_="foreignkey")
    op.create_foreign_key(
        "calibration_certificate_instrument_uid_fkey",
        "calibration_certificate",
        "instrument",
        ["instrument_uid"],
        ["uid"],
    )
    op.alter_column(
        "calibration_certificate",
        "approved_by",
        existing_type=sa.VARCHAR(),
        nullable=True,
    )
    op.alter_column(
        "calibration_certificate",
        "performed_by",
        existing_type=sa.VARCHAR(),
        nullable=True,
    )
    op.alter_column(
        "calibration_certificate",
        "valid_to_date",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
    )
    op.alter_column(
        "calibration_certificate",
        "valid_from_date",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
    )
    op.alter_column(
        "calibration_certificate",
        "date_issued",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
    )
    op.drop_column("calibration_certificate", "certificate")
    op.drop_column("calibration_certificate", "laboratory_instrument_uid")
    op.drop_column("analysis_specification", "normal_value")
    op.add_column(
        "analysis_result",
        sa.Column("instrument_uid", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.drop_constraint(None, "analysis_result", type_="foreignkey")
    op.create_foreign_key(
        "analysis_result_instrument_uid_fkey",
        "analysis_result",
        "instrument",
        ["instrument_uid"],
        ["uid"],
    )
    op.drop_column("analysis_result", "laboratory_instrument_uid")
    op.drop_index(
        op.f("ix_laboratory_instrument_uid"), table_name="laboratory_instrument"
    )
    op.drop_table("laboratory_instrument")
    op.drop_index(
        op.f("ix_instrument_competence_uid"), table_name="instrument_competence"
    )
    op.drop_table("instrument_competence")
    # ### end Alembic commands ###
