"""add-microbiology-1

Revision ID: 4b6240ec4682
Revises: cccb8d8adce5
Create Date: 2025-02-23 22:23:47.290039

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '4b6240ec4682'
down_revision = 'cccb8d8adce5'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('abx_antibiotic',
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('whonet_abx_code', sa.String(), nullable=True),
    sa.Column('who_code', sa.String(), nullable=True),
    sa.Column('din_code', sa.String(), nullable=True),
    sa.Column('jac_code', sa.String(), nullable=True),
    sa.Column('eucast_code', sa.String(), nullable=True),
    sa.Column('user_code', sa.String(), nullable=True),
    sa.Column('abx_number', sa.String(), nullable=True),
    sa.Column('potency', sa.String(), nullable=True),
    sa.Column('atc_code', sa.String(), nullable=True),
    sa.Column('class', sa.String(), nullable=True),
    sa.Column('subclass', sa.String(), nullable=True),
    sa.Column('prof_class', sa.String(), nullable=True),
    sa.Column('cia_category', sa.String(), nullable=True),
    sa.Column('clsi_order', sa.String(), nullable=True),
    sa.Column('eucast_order', sa.String(), nullable=True),
    sa.Column('human', sa.Boolean(), nullable=True),
    sa.Column('veterinary', sa.Boolean(), nullable=True),
    sa.Column('animal_gp', sa.String(), nullable=True),
    sa.Column('loinccomp', sa.String(), nullable=True),
    sa.Column('loincgen', sa.String(), nullable=True),
    sa.Column('loincdisk', sa.String(), nullable=True),
    sa.Column('loincmic', sa.String(), nullable=True),
    sa.Column('loincetest', sa.String(), nullable=True),
    sa.Column('loincslow', sa.String(), nullable=True),
    sa.Column('loincafb', sa.String(), nullable=True),
    sa.Column('loincsbt', sa.String(), nullable=True),
    sa.Column('loincmlc', sa.String(), nullable=True),
    sa.Column('comments', sa.String(length=500), nullable=True),
    sa.Column('uid', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_abx_antibiotic_uid'), 'abx_antibiotic', ['uid'], unique=False)
    op.create_table('abx_ast_panel',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('uid', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_abx_ast_panel_uid'), 'abx_ast_panel', ['uid'], unique=False)
    op.create_table('abx_breakpoint_type',
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('uid', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_abx_breakpoint_type_uid'), 'abx_breakpoint_type', ['uid'], unique=False)
    op.create_table('abx_expert_interpret_rule',
    sa.Column('rule_code', sa.String(length=50), nullable=True),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('organism_code', sa.String(length=50), nullable=False),
    sa.Column('organism_code_type', sa.String(length=50), nullable=False),
    sa.Column('rule_criteria', sa.String(), nullable=False),
    sa.Column('affected_antibiotics', sa.String(), nullable=False),
    sa.Column('antibiotic_exceptions', sa.String(), nullable=True),
    sa.Column('uid', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_abx_expert_interpret_rule_uid'), 'abx_expert_interpret_rule', ['uid'], unique=False)
    op.create_table('abx_guideline',
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('code', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('uid', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_abx_guideline_uid'), 'abx_guideline', ['uid'], unique=False)
    op.create_table('abx_host',
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('uid', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_abx_host_uid'), 'abx_host', ['uid'], unique=False)
    op.create_table('abx_infection_site',
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('uid', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_abx_infection_site_uid'), 'abx_infection_site', ['uid'], unique=False)
    op.create_table('abx_kingdom',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('uid', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_abx_kingdom_uid'), 'abx_kingdom', ['uid'], unique=False)
    op.create_table('abx_medium',
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('uid', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_abx_medium_uid'), 'abx_medium', ['uid'], unique=False)
    op.create_table('abx_test_method',
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('uid', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_abx_test_method_uid'), 'abx_test_method', ['uid'], unique=False)
    op.create_table('abx_antibiotic_guideline',
    sa.Column('antibiotic_uid', sa.String(), nullable=False),
    sa.Column('guideline_uid', sa.String(), nullable=False),
    sa.Column('uid', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['antibiotic_uid'], ['abx_antibiotic.uid'], ),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['guideline_uid'], ['abx_guideline.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_abx_antibiotic_guideline_uid'), 'abx_antibiotic_guideline', ['uid'], unique=False)
    op.create_table('abx_expected_res_phenotype',
    sa.Column('guideline_uid', sa.String(), nullable=True),
    sa.Column('reference_table', sa.String(length=100), nullable=True),
    sa.Column('organism_code', sa.String(length=50), nullable=False),
    sa.Column('organism_code_type', sa.String(length=50), nullable=False),
    sa.Column('exception_organism_code', sa.String(length=50), nullable=True),
    sa.Column('exception_organism_code_type', sa.String(length=50), nullable=True),
    sa.Column('abx_code', sa.String(length=50), nullable=False),
    sa.Column('abx_code_type', sa.String(length=50), nullable=False),
    sa.Column('antibiotic_exceptions', sa.String(length=500), nullable=True),
    sa.Column('comments', sa.String(length=500), nullable=True),
    sa.Column('uid', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['guideline_uid'], ['abx_guideline.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_abx_expected_res_phenotype_uid'), 'abx_expected_res_phenotype', ['uid'], unique=False)
    op.create_table('abx_guideline_year',
    sa.Column('guideline_uid', sa.String(), nullable=True),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('code', sa.String(length=20), nullable=False),
    sa.Column('uid', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['guideline_uid'], ['abx_guideline.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_abx_guideline_year_uid'), 'abx_guideline_year', ['uid'], unique=False)
    op.create_table('abx_laboratory_antibiotic',
    sa.Column('laboratory_uid', sa.String(), nullable=False),
    sa.Column('antibiotic_uid', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['antibiotic_uid'], ['abx_antibiotic.uid'], ),
    sa.ForeignKeyConstraint(['laboratory_uid'], ['laboratory.uid'], ),
    sa.PrimaryKeyConstraint('laboratory_uid', 'antibiotic_uid')
    )
    op.create_table('abx_panel_antibiotic',
    sa.Column('panel_uid', sa.String(), nullable=False),
    sa.Column('antibiotic_uid', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['antibiotic_uid'], ['abx_antibiotic.uid'], ),
    sa.ForeignKeyConstraint(['panel_uid'], ['abx_ast_panel.uid'], ),
    sa.PrimaryKeyConstraint('panel_uid', 'antibiotic_uid')
    )
    op.create_table('abx_phylum',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('kingdom_uid', sa.String(), nullable=True),
    sa.Column('uid', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['kingdom_uid'], ['abx_kingdom.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_abx_phylum_uid'), 'abx_phylum', ['uid'], unique=False)
    op.create_table('abx_qc_ranges',
    sa.Column('guideline_uid', sa.String(), nullable=True),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('strain', sa.String(length=100), nullable=False),
    sa.Column('reference_table', sa.String(length=100), nullable=False),
    sa.Column('whonet_org_code', sa.String(length=50), nullable=False),
    sa.Column('antibiotic', sa.String(length=100), nullable=False),
    sa.Column('abx_test', sa.String(length=50), nullable=True),
    sa.Column('whonet_abx_code', sa.String(length=50), nullable=False),
    sa.Column('method', sa.String(length=100), nullable=False),
    sa.Column('medium_uid', sa.String(), nullable=True),
    sa.Column('minimum', sa.String(length=10), nullable=False),
    sa.Column('maximum', sa.String(length=10), nullable=False),
    sa.Column('uid', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['guideline_uid'], ['abx_guideline.uid'], ),
    sa.ForeignKeyConstraint(['medium_uid'], ['abx_medium.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_abx_qc_ranges_uid'), 'abx_qc_ranges', ['uid'], unique=False)
    op.create_table('abx_breakpoint',
    sa.Column('guideline_year_uid', sa.String(), nullable=True),
    sa.Column('test_method_uid', sa.String(), nullable=True),
    sa.Column('potency', sa.String(length=50), nullable=True),
    sa.Column('organism_code', sa.String(length=50), nullable=False),
    sa.Column('organism_code_type', sa.String(length=50), nullable=False),
    sa.Column('breakpoint_type_uid', sa.String(), nullable=True),
    sa.Column('host_uid', sa.String(), nullable=True),
    sa.Column('site_of_infection_uid', sa.String(), nullable=True),
    sa.Column('reference_table', sa.String(length=100), nullable=True),
    sa.Column('reference_sequence', sa.String(length=100), nullable=True),
    sa.Column('whonet_abx_code', sa.String(length=50), nullable=True),
    sa.Column('comments', sa.String(length=500), nullable=True),
    sa.Column('r', sa.String(length=20), nullable=True),
    sa.Column('i', sa.String(length=20), nullable=True),
    sa.Column('sdd', sa.String(length=20), nullable=True),
    sa.Column('s', sa.String(length=20), nullable=True),
    sa.Column('ecv_ecoff', sa.String(length=20), nullable=True),
    sa.Column('ecv_ecoff_tentative', sa.String(length=20), nullable=True),
    sa.Column('uid', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['breakpoint_type_uid'], ['abx_breakpoint_type.uid'], ),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['guideline_year_uid'], ['abx_guideline_year.uid'], ),
    sa.ForeignKeyConstraint(['host_uid'], ['abx_host.uid'], ),
    sa.ForeignKeyConstraint(['site_of_infection_uid'], ['abx_infection_site.uid'], ),
    sa.ForeignKeyConstraint(['test_method_uid'], ['abx_test_method.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_abx_breakpoint_uid'), 'abx_breakpoint', ['uid'], unique=False)
    op.create_table('abx_class',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('phylum_uid', sa.String(), nullable=True),
    sa.Column('uid', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['phylum_uid'], ['abx_phylum.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_abx_class_uid'), 'abx_class', ['uid'], unique=False)
    op.create_table('abx_order',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('class_uid', sa.String(), nullable=True),
    sa.Column('uid', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['class_uid'], ['abx_class.uid'], ),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_abx_order_uid'), 'abx_order', ['uid'], unique=False)
    op.create_table('abx_family',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('order_uid', sa.String(), nullable=True),
    sa.Column('uid', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['order_uid'], ['abx_order.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_abx_family_uid'), 'abx_family', ['uid'], unique=False)
    op.create_table('abx_genus',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('family_uid', sa.String(), nullable=True),
    sa.Column('uid', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['family_uid'], ['abx_family.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_abx_genus_uid'), 'abx_genus', ['uid'], unique=False)
    op.create_table('abx_organism',
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('whonet_org_code', sa.String(length=50), nullable=True),
    sa.Column('replaced_by', sa.String(length=50), nullable=True),
    sa.Column('taxonomic_status', sa.String(length=50), nullable=True),
    sa.Column('common', sa.String(length=100), nullable=True),
    sa.Column('organism_type', sa.String(length=50), nullable=True),
    sa.Column('anaerobe', sa.Boolean(), nullable=True),
    sa.Column('morphology', sa.String(length=100), nullable=True),
    sa.Column('subkingdom_code', sa.String(length=50), nullable=True),
    sa.Column('family_code', sa.String(length=50), nullable=True),
    sa.Column('genus_group', sa.String(length=100), nullable=True),
    sa.Column('genus_code', sa.String(length=50), nullable=True),
    sa.Column('species_group', sa.String(length=100), nullable=True),
    sa.Column('serovar_group', sa.String(length=100), nullable=True),
    sa.Column('msf_grp_clin', sa.String(length=50), nullable=True),
    sa.Column('sct_code', sa.String(length=50), nullable=True),
    sa.Column('sct_text', sa.String(length=100), nullable=True),
    sa.Column('gbif_taxon_id', sa.String(length=100), nullable=True),
    sa.Column('gbif_dataset_id', sa.String(length=255), nullable=True),
    sa.Column('gbif_taxonomic_status', sa.String(length=50), nullable=True),
    sa.Column('kingdom_uid', sa.String(), nullable=True),
    sa.Column('phylum_uid', sa.String(), nullable=True),
    sa.Column('class_uid', sa.String(), nullable=True),
    sa.Column('order_uid', sa.String(), nullable=True),
    sa.Column('family_uid', sa.String(), nullable=True),
    sa.Column('genus_uid', sa.String(), nullable=True),
    sa.Column('comments', sa.String(length=500), nullable=True),
    sa.Column('uid', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['class_uid'], ['abx_class.uid'], ),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['family_uid'], ['abx_family.uid'], ),
    sa.ForeignKeyConstraint(['genus_uid'], ['abx_genus.uid'], ),
    sa.ForeignKeyConstraint(['kingdom_uid'], ['abx_kingdom.uid'], ),
    sa.ForeignKeyConstraint(['order_uid'], ['abx_order.uid'], ),
    sa.ForeignKeyConstraint(['phylum_uid'], ['abx_phylum.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_abx_organism_uid'), 'abx_organism', ['uid'], unique=False)
    op.create_table('abx_organism_serotypes',
    sa.Column('organism_uid', sa.String(), nullable=False),
    sa.Column('serotype', sa.String(length=100), nullable=False),
    sa.Column('serogroup', sa.String(length=100), nullable=True),
    sa.Column('subspecies', sa.String(length=100), nullable=True),
    sa.Column('o_antigens', sa.String(length=100), nullable=True),
    sa.Column('h_phase_1', sa.String(length=100), nullable=True),
    sa.Column('h_phase_2', sa.String(length=100), nullable=True),
    sa.Column('x997_check', sa.String(length=10), nullable=True),
    sa.Column('fate', sa.String(length=50), nullable=True),
    sa.Column('uid', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['organism_uid'], ['abx_organism.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_abx_organism_serotypes_uid'), 'abx_organism_serotypes', ['uid'], unique=False)
    op.create_table('abx_panel_organism',
    sa.Column('panel_uid', sa.String(), nullable=False),
    sa.Column('organism_uid', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['organism_uid'], ['abx_organism.uid'], ),
    sa.ForeignKeyConstraint(['panel_uid'], ['abx_ast_panel.uid'], ),
    sa.PrimaryKeyConstraint('panel_uid', 'organism_uid')
    )
    op.create_table('abx_organism_result',
    sa.Column('analysis_result_uid', sa.String(), nullable=True),
    sa.Column('organism_uid', sa.String(), nullable=True),
    sa.Column('isolate_number', sa.Integer(), nullable=True),
    sa.Column('uid', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['analysis_result_uid'], ['analysis_result.uid'], ),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['organism_uid'], ['abx_organism.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_abx_organism_result_uid'), 'abx_organism_result', ['uid'], unique=False)
    op.create_table('abx_ast_result',
    sa.Column('organism_result_uid', sa.String(), nullable=True),
    sa.Column('analysis_result_uid', sa.String(), nullable=True),
    sa.Column('antibiotic_uid', sa.String(), nullable=True),
    sa.Column('guideline_year_uid', sa.String(), nullable=True),
    sa.Column('breakpoint_uid', sa.String(), nullable=True),
    sa.Column('ast_method_uid', sa.String(), nullable=True),
    sa.Column('ast_value', sa.String(length=10), nullable=True),
    sa.Column('uid', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['analysis_result_uid'], ['analysis_result.uid'], ),
    sa.ForeignKeyConstraint(['antibiotic_uid'], ['abx_antibiotic.uid'], ),
    sa.ForeignKeyConstraint(['ast_method_uid'], ['abx_test_method.uid'], ),
    sa.ForeignKeyConstraint(['breakpoint_uid'], ['abx_breakpoint.uid'], ),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['guideline_year_uid'], ['abx_guideline_year.uid'], ),
    sa.ForeignKeyConstraint(['organism_result_uid'], ['abx_organism_result.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_abx_ast_result_uid'), 'abx_ast_result', ['uid'], unique=False)
    op.drop_index('analysis_result_level_idx', table_name='analysis_result')
    op.drop_index('analysis_result_lft_idx', table_name='analysis_result')
    op.drop_index('analysis_result_rgt_idx', table_name='analysis_result')
    op.create_index(op.f('ix_analysis_result_level'), 'analysis_result', ['level'], unique=False)
    op.create_index(op.f('ix_analysis_result_lft'), 'analysis_result', ['lft'], unique=False)
    op.create_index(op.f('ix_analysis_result_rgt'), 'analysis_result', ['rgt'], unique=False)
    op.drop_index('message_level_idx', table_name='message')
    op.drop_index('message_lft_idx', table_name='message')
    op.drop_index('message_rgt_idx', table_name='message')
    op.create_index(op.f('ix_message_level'), 'message', ['level'], unique=False)
    op.create_index(op.f('ix_message_lft'), 'message', ['lft'], unique=False)
    op.create_index(op.f('ix_message_rgt'), 'message', ['rgt'], unique=False)
    op.drop_index('sample_level_idx', table_name='sample')
    op.drop_index('sample_lft_idx', table_name='sample')
    op.drop_index('sample_rgt_idx', table_name='sample')
    op.create_index(op.f('ix_sample_level'), 'sample', ['level'], unique=False)
    op.create_index(op.f('ix_sample_lft'), 'sample', ['lft'], unique=False)
    op.create_index(op.f('ix_sample_rgt'), 'sample', ['rgt'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_sample_rgt'), table_name='sample')
    op.drop_index(op.f('ix_sample_lft'), table_name='sample')
    op.drop_index(op.f('ix_sample_level'), table_name='sample')
    op.create_index('sample_rgt_idx', 'sample', ['rgt'], unique=False)
    op.create_index('sample_lft_idx', 'sample', ['lft'], unique=False)
    op.create_index('sample_level_idx', 'sample', ['level'], unique=False)
    op.drop_index(op.f('ix_message_rgt'), table_name='message')
    op.drop_index(op.f('ix_message_lft'), table_name='message')
    op.drop_index(op.f('ix_message_level'), table_name='message')
    op.create_index('message_rgt_idx', 'message', ['rgt'], unique=False)
    op.create_index('message_lft_idx', 'message', ['lft'], unique=False)
    op.create_index('message_level_idx', 'message', ['level'], unique=False)
    op.drop_index(op.f('ix_analysis_result_rgt'), table_name='analysis_result')
    op.drop_index(op.f('ix_analysis_result_lft'), table_name='analysis_result')
    op.drop_index(op.f('ix_analysis_result_level'), table_name='analysis_result')
    op.create_index('analysis_result_rgt_idx', 'analysis_result', ['rgt'], unique=False)
    op.create_index('analysis_result_lft_idx', 'analysis_result', ['lft'], unique=False)
    op.create_index('analysis_result_level_idx', 'analysis_result', ['level'], unique=False)
    op.drop_index(op.f('ix_abx_ast_result_uid'), table_name='abx_ast_result')
    op.drop_table('abx_ast_result')
    op.drop_index(op.f('ix_abx_organism_result_uid'), table_name='abx_organism_result')
    op.drop_table('abx_organism_result')
    op.drop_table('abx_panel_organism')
    op.drop_index(op.f('ix_abx_organism_serotypes_uid'), table_name='abx_organism_serotypes')
    op.drop_table('abx_organism_serotypes')
    op.drop_index(op.f('ix_abx_organism_uid'), table_name='abx_organism')
    op.drop_table('abx_organism')
    op.drop_index(op.f('ix_abx_genus_uid'), table_name='abx_genus')
    op.drop_table('abx_genus')
    op.drop_index(op.f('ix_abx_family_uid'), table_name='abx_family')
    op.drop_table('abx_family')
    op.drop_index(op.f('ix_abx_order_uid'), table_name='abx_order')
    op.drop_table('abx_order')
    op.drop_index(op.f('ix_abx_class_uid'), table_name='abx_class')
    op.drop_table('abx_class')
    op.drop_index(op.f('ix_abx_breakpoint_uid'), table_name='abx_breakpoint')
    op.drop_table('abx_breakpoint')
    op.drop_index(op.f('ix_abx_qc_ranges_uid'), table_name='abx_qc_ranges')
    op.drop_table('abx_qc_ranges')
    op.drop_index(op.f('ix_abx_phylum_uid'), table_name='abx_phylum')
    op.drop_table('abx_phylum')
    op.drop_table('abx_panel_antibiotic')
    op.drop_table('abx_laboratory_antibiotic')
    op.drop_index(op.f('ix_abx_guideline_year_uid'), table_name='abx_guideline_year')
    op.drop_table('abx_guideline_year')
    op.drop_index(op.f('ix_abx_expected_res_phenotype_uid'), table_name='abx_expected_res_phenotype')
    op.drop_table('abx_expected_res_phenotype')
    op.drop_index(op.f('ix_abx_antibiotic_guideline_uid'), table_name='abx_antibiotic_guideline')
    op.drop_table('abx_antibiotic_guideline')
    op.drop_index(op.f('ix_abx_test_method_uid'), table_name='abx_test_method')
    op.drop_table('abx_test_method')
    op.drop_index(op.f('ix_abx_medium_uid'), table_name='abx_medium')
    op.drop_table('abx_medium')
    op.drop_index(op.f('ix_abx_kingdom_uid'), table_name='abx_kingdom')
    op.drop_table('abx_kingdom')
    op.drop_index(op.f('ix_abx_infection_site_uid'), table_name='abx_infection_site')
    op.drop_table('abx_infection_site')
    op.drop_index(op.f('ix_abx_host_uid'), table_name='abx_host')
    op.drop_table('abx_host')
    op.drop_index(op.f('ix_abx_guideline_uid'), table_name='abx_guideline')
    op.drop_table('abx_guideline')
    op.drop_index(op.f('ix_abx_expert_interpret_rule_uid'), table_name='abx_expert_interpret_rule')
    op.drop_table('abx_expert_interpret_rule')
    op.drop_index(op.f('ix_abx_breakpoint_type_uid'), table_name='abx_breakpoint_type')
    op.drop_table('abx_breakpoint_type')
    op.drop_index(op.f('ix_abx_ast_panel_uid'), table_name='abx_ast_panel')
    op.drop_table('abx_ast_panel')
    op.drop_index(op.f('ix_abx_antibiotic_uid'), table_name='abx_antibiotic')
    op.drop_table('abx_antibiotic')
    # ### end Alembic commands ###
