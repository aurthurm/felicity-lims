"""upgrade-1

Revision ID: 6abbbaa72a2d
Revises: 6f377b641bc8
Create Date: 2024-09-20 14:35:07.214320

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '6abbbaa72a2d'
down_revision = '6f377b641bc8'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('audit_log', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('audit_log', sa.Column('created_by_uid', sa.String(), nullable=True))
    op.add_column('audit_log', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('audit_log', sa.Column('updated_by_uid', sa.String(), nullable=True))
    op.create_foreign_key(None, 'audit_log', 'user', ['updated_by_uid'], ['uid'])
    op.create_foreign_key(None, 'audit_log', 'user', ['created_by_uid'], ['uid'])
    op.alter_column('client_contact', 'email',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_index('ix_client_contact_email', table_name='client_contact')
    op.create_index(op.f('ix_client_contact_email'), 'client_contact', ['email'], unique=True)
    op.add_column('group', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('group', sa.Column('created_by_uid', sa.String(), nullable=True))
    op.add_column('group', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('group', sa.Column('updated_by_uid', sa.String(), nullable=True))
    op.create_foreign_key(None, 'group', 'user', ['created_by_uid'], ['uid'])
    op.create_foreign_key(None, 'group', 'user', ['updated_by_uid'], ['uid'])
    op.add_column('id_sequence', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('id_sequence', sa.Column('created_by_uid', sa.String(), nullable=True))
    op.add_column('id_sequence', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('id_sequence', sa.Column('updated_by_uid', sa.String(), nullable=True))
    op.create_foreign_key(None, 'id_sequence', 'user', ['updated_by_uid'], ['uid'])
    op.create_foreign_key(None, 'id_sequence', 'user', ['created_by_uid'], ['uid'])
    op.add_column('job', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('job', sa.Column('created_by_uid', sa.String(), nullable=True))
    op.add_column('job', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('job', sa.Column('updated_by_uid', sa.String(), nullable=True))
    op.create_foreign_key(None, 'job', 'user', ['updated_by_uid'], ['uid'])
    op.create_foreign_key(None, 'job', 'user', ['created_by_uid'], ['uid'])
    op.add_column('permission', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('permission', sa.Column('created_by_uid', sa.String(), nullable=True))
    op.add_column('permission', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('permission', sa.Column('updated_by_uid', sa.String(), nullable=True))
    op.create_foreign_key(None, 'permission', 'user', ['updated_by_uid'], ['uid'])
    op.create_foreign_key(None, 'permission', 'user', ['created_by_uid'], ['uid'])
    op.add_column('reflex_brain_addition', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('reflex_brain_addition', sa.Column('created_by_uid', sa.String(), nullable=True))
    op.add_column('reflex_brain_addition', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('reflex_brain_addition', sa.Column('updated_by_uid', sa.String(), nullable=True))
    op.create_foreign_key(None, 'reflex_brain_addition', 'user', ['updated_by_uid'], ['uid'])
    op.create_foreign_key(None, 'reflex_brain_addition', 'user', ['created_by_uid'], ['uid'])
    op.add_column('reflex_brain_criteria', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('reflex_brain_criteria', sa.Column('created_by_uid', sa.String(), nullable=True))
    op.add_column('reflex_brain_criteria', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('reflex_brain_criteria', sa.Column('updated_by_uid', sa.String(), nullable=True))
    op.create_foreign_key(None, 'reflex_brain_criteria', 'user', ['updated_by_uid'], ['uid'])
    op.create_foreign_key(None, 'reflex_brain_criteria', 'user', ['created_by_uid'], ['uid'])
    op.add_column('reflex_brain_final', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('reflex_brain_final', sa.Column('created_by_uid', sa.String(), nullable=True))
    op.add_column('reflex_brain_final', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('reflex_brain_final', sa.Column('updated_by_uid', sa.String(), nullable=True))
    op.create_foreign_key(None, 'reflex_brain_final', 'user', ['updated_by_uid'], ['uid'])
    op.create_foreign_key(None, 'reflex_brain_final', 'user', ['created_by_uid'], ['uid'])
    op.drop_column('report_impress', 'date_generated')
    op.add_column('shipped_sample', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('shipped_sample', sa.Column('created_by_uid', sa.String(), nullable=True))
    op.add_column('shipped_sample', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('shipped_sample', sa.Column('updated_by_uid', sa.String(), nullable=True))
    op.create_foreign_key(None, 'shipped_sample', 'user', ['updated_by_uid'], ['uid'])
    op.create_foreign_key(None, 'shipped_sample', 'user', ['created_by_uid'], ['uid'])
    op.add_column('user_preference', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('user_preference', sa.Column('created_by_uid', sa.String(), nullable=True))
    op.add_column('user_preference', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('user_preference', sa.Column('updated_by_uid', sa.String(), nullable=True))
    op.create_foreign_key(None, 'user_preference', 'user', ['created_by_uid'], ['uid'])
    op.create_foreign_key(None, 'user_preference', 'user', ['updated_by_uid'], ['uid'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'user_preference', type_='foreignkey')
    op.drop_constraint(None, 'user_preference', type_='foreignkey')
    op.drop_column('user_preference', 'updated_by_uid')
    op.drop_column('user_preference', 'updated_at')
    op.drop_column('user_preference', 'created_by_uid')
    op.drop_column('user_preference', 'created_at')
    op.drop_constraint(None, 'shipped_sample', type_='foreignkey')
    op.drop_constraint(None, 'shipped_sample', type_='foreignkey')
    op.drop_column('shipped_sample', 'updated_by_uid')
    op.drop_column('shipped_sample', 'updated_at')
    op.drop_column('shipped_sample', 'created_by_uid')
    op.drop_column('shipped_sample', 'created_at')
    op.add_column('report_impress', sa.Column('date_generated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'reflex_brain_final', type_='foreignkey')
    op.drop_constraint(None, 'reflex_brain_final', type_='foreignkey')
    op.drop_column('reflex_brain_final', 'updated_by_uid')
    op.drop_column('reflex_brain_final', 'updated_at')
    op.drop_column('reflex_brain_final', 'created_by_uid')
    op.drop_column('reflex_brain_final', 'created_at')
    op.drop_constraint(None, 'reflex_brain_criteria', type_='foreignkey')
    op.drop_constraint(None, 'reflex_brain_criteria', type_='foreignkey')
    op.drop_column('reflex_brain_criteria', 'updated_by_uid')
    op.drop_column('reflex_brain_criteria', 'updated_at')
    op.drop_column('reflex_brain_criteria', 'created_by_uid')
    op.drop_column('reflex_brain_criteria', 'created_at')
    op.drop_constraint(None, 'reflex_brain_addition', type_='foreignkey')
    op.drop_constraint(None, 'reflex_brain_addition', type_='foreignkey')
    op.drop_column('reflex_brain_addition', 'updated_by_uid')
    op.drop_column('reflex_brain_addition', 'updated_at')
    op.drop_column('reflex_brain_addition', 'created_by_uid')
    op.drop_column('reflex_brain_addition', 'created_at')
    op.drop_constraint(None, 'permission', type_='foreignkey')
    op.drop_constraint(None, 'permission', type_='foreignkey')
    op.drop_column('permission', 'updated_by_uid')
    op.drop_column('permission', 'updated_at')
    op.drop_column('permission', 'created_by_uid')
    op.drop_column('permission', 'created_at')
    op.drop_constraint(None, 'job', type_='foreignkey')
    op.drop_constraint(None, 'job', type_='foreignkey')
    op.drop_column('job', 'updated_by_uid')
    op.drop_column('job', 'updated_at')
    op.drop_column('job', 'created_by_uid')
    op.drop_column('job', 'created_at')
    op.drop_constraint(None, 'id_sequence', type_='foreignkey')
    op.drop_constraint(None, 'id_sequence', type_='foreignkey')
    op.drop_column('id_sequence', 'updated_by_uid')
    op.drop_column('id_sequence', 'updated_at')
    op.drop_column('id_sequence', 'created_by_uid')
    op.drop_column('id_sequence', 'created_at')
    op.drop_constraint(None, 'group', type_='foreignkey')
    op.drop_constraint(None, 'group', type_='foreignkey')
    op.drop_column('group', 'updated_by_uid')
    op.drop_column('group', 'updated_at')
    op.drop_column('group', 'created_by_uid')
    op.drop_column('group', 'created_at')
    op.drop_index(op.f('ix_client_contact_email'), table_name='client_contact')
    op.create_index('ix_client_contact_email', 'client_contact', ['email'], unique=False)
    op.alter_column('client_contact', 'email',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_constraint(None, 'audit_log', type_='foreignkey')
    op.drop_constraint(None, 'audit_log', type_='foreignkey')
    op.drop_column('audit_log', 'updated_by_uid')
    op.drop_column('audit_log', 'updated_at')
    op.drop_column('audit_log', 'created_by_uid')
    op.drop_column('audit_log', 'created_at')
    # ### end Alembic commands ###
