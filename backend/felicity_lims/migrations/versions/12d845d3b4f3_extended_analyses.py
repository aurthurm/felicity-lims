"""extended analyses

Revision ID: 12d845d3b4f3
Revises: d869acd08bf1
Create Date: 2022-02-10 10:00:11.613603

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision = '12d845d3b4f3'
down_revision = 'd869acd08bf1'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('instrumenttype',
    sa.Column('uid', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.Integer(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_instrumenttype_uid'), 'instrumenttype', ['uid'], unique=False)
    op.create_table('manufacturer',
    sa.Column('uid', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.Integer(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_manufacturer_uid'), 'manufacturer', ['uid'], unique=False)
    op.create_table('unit',
    sa.Column('uid', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('is_si_unit', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.Integer(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_unit_uid'), 'unit', ['uid'], unique=False)
    op.create_table('qcreference',
    sa.Column('uid', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('department_uid', sa.Integer(), nullable=True),
    sa.Column('is_string_result', sa.Boolean(), nullable=True),
    sa.Column('expected_result', sa.String(), nullable=True),
    sa.Column('min_value', sa.Float(), nullable=True),
    sa.Column('max_value', sa.Float(), nullable=True),
    sa.Column('allowable_error', sa.Float(), nullable=True),
    sa.Column('ref_date_created', sa.DateTime(), nullable=True),
    sa.Column('ref_date_opened', sa.DateTime(), nullable=True),
    sa.Column('ref_date_expiry', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('manufacturer', sa.String(), nullable=True),
    sa.Column('supplier', sa.String(), nullable=True),
    sa.Column('catalog_number', sa.String(), nullable=True),
    sa.Column('lot_number', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.Integer(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['department_uid'], ['department.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_qcreference_uid'), 'qcreference', ['uid'], unique=False)
    op.create_table('calibrationcertificate',
    sa.Column('uid', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('instrument_uid', sa.Integer(), nullable=True),
    sa.Column('certificate_code', sa.String(), nullable=False),
    sa.Column('internal', sa.Boolean(), nullable=False),
    sa.Column('issuer', sa.String(), nullable=True),
    sa.Column('date_issued', sa.DateTime(), nullable=True),
    sa.Column('valid_from_date', sa.DateTime(), nullable=True),
    sa.Column('valid_to_date', sa.DateTime(), nullable=True),
    sa.Column('performed_by', sa.String(), nullable=True),
    sa.Column('approved_by', sa.String(), nullable=True),
    sa.Column('remarks', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.Integer(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['instrument_uid'], ['instrument.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_calibrationcertificate_certificate_code'), 'calibrationcertificate', ['certificate_code'], unique=True)
    op.create_index(op.f('ix_calibrationcertificate_uid'), 'calibrationcertificate', ['uid'], unique=False)
    op.create_table('instrument_method',
    sa.Column('instrument_uid', sa.Integer(), nullable=False),
    sa.Column('method_uid', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['instrument_uid'], ['instrument.uid'], ),
    sa.ForeignKeyConstraint(['method_uid'], ['method.uid'], ),
    sa.PrimaryKeyConstraint('instrument_uid', 'method_uid')
    )
    op.create_table('instrumentcalibration',
    sa.Column('uid', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('instrument_uid', sa.Integer(), nullable=True),
    sa.Column('calibration_id', sa.String(), nullable=False),
    sa.Column('date_reported', sa.DateTime(), nullable=True),
    sa.Column('report_id', sa.String(), nullable=True),
    sa.Column('performed_by', sa.String(), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('notes_before', sa.String(), nullable=True),
    sa.Column('work_done', sa.String(), nullable=True),
    sa.Column('remarks', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.Integer(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['instrument_uid'], ['instrument.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_instrumentcalibration_calibration_id'), 'instrumentcalibration', ['calibration_id'], unique=True)
    op.create_index(op.f('ix_instrumentcalibration_report_id'), 'instrumentcalibration', ['report_id'], unique=True)
    op.create_index(op.f('ix_instrumentcalibration_uid'), 'instrumentcalibration', ['uid'], unique=False)
    op.create_table('analysiscorrectionfactor',
    sa.Column('uid', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('factor', sa.Float(), nullable=False),
    sa.Column('analysis_uid', sa.Integer(), nullable=True),
    sa.Column('instrument_uid', sa.Integer(), nullable=True),
    sa.Column('method_uid', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.Integer(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['analysis_uid'], ['analysis.uid'], ),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['instrument_uid'], ['instrument.uid'], ),
    sa.ForeignKeyConstraint(['method_uid'], ['method.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_analysiscorrectionfactor_uid'), 'analysiscorrectionfactor', ['uid'], unique=False)
    op.create_table('analysisdetectionlimit',
    sa.Column('uid', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('lower_limit', sa.Float(), nullable=False),
    sa.Column('upper_limit', sa.Float(), nullable=False),
    sa.Column('analysis_uid', sa.Integer(), nullable=True),
    sa.Column('instrument_uid', sa.Integer(), nullable=True),
    sa.Column('method_uid', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.Integer(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['analysis_uid'], ['analysis.uid'], ),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['instrument_uid'], ['instrument.uid'], ),
    sa.ForeignKeyConstraint(['method_uid'], ['method.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_analysisdetectionlimit_uid'), 'analysisdetectionlimit', ['uid'], unique=False)
    op.create_table('analysisinterim',
    sa.Column('uid', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('key', sa.Integer(), nullable=False),
    sa.Column('value', sa.String(), nullable=False),
    sa.Column('analysis_uid', sa.Integer(), nullable=True),
    sa.Column('instrument_uid', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.Integer(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['analysis_uid'], ['analysis.uid'], ),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['instrument_uid'], ['instrument.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_analysisinterim_uid'), 'analysisinterim', ['uid'], unique=False)
    op.create_table('analysisspecification',
    sa.Column('uid', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('analysis_uid', sa.Integer(), nullable=True),
    sa.Column('unit_uid', sa.Integer(), nullable=True),
    sa.Column('min', sa.Float(), nullable=True),
    sa.Column('max', sa.Float(), nullable=True),
    sa.Column('min_warn', sa.Float(), nullable=True),
    sa.Column('max_warn', sa.Float(), nullable=True),
    sa.Column('min_report', sa.String(), nullable=True),
    sa.Column('max_report', sa.String(), nullable=True),
    sa.Column('warn_values', sa.String(), nullable=True),
    sa.Column('warn_report', sa.String(), nullable=True),
    sa.Column('method_uid', sa.Integer(), nullable=True),
    sa.Column('gender', sa.String(), nullable=True),
    sa.Column('age_min', sa.Integer(), nullable=True),
    sa.Column('age_max', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.Integer(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['analysis_uid'], ['analysis.uid'], ),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['method_uid'], ['method.uid'], ),
    sa.ForeignKeyConstraint(['unit_uid'], ['unit.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_analysisspecification_uid'), 'analysisspecification', ['uid'], unique=False)
    op.create_table('analysisuncertainty',
    sa.Column('uid', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('min', sa.Float(), nullable=False),
    sa.Column('max', sa.Float(), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('analysis_uid', sa.Integer(), nullable=True),
    sa.Column('instrument_uid', sa.Integer(), nullable=True),
    sa.Column('method_uid', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_uid', sa.Integer(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_uid', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['analysis_uid'], ['analysis.uid'], ),
    sa.ForeignKeyConstraint(['created_by_uid'], ['user.uid'], ),
    sa.ForeignKeyConstraint(['instrument_uid'], ['instrument.uid'], ),
    sa.ForeignKeyConstraint(['method_uid'], ['method.uid'], ),
    sa.ForeignKeyConstraint(['updated_by_uid'], ['user.uid'], ),
    sa.PrimaryKeyConstraint('uid')
    )
    op.create_index(op.f('ix_analysisuncertainty_uid'), 'analysisuncertainty', ['uid'], unique=False)
    op.create_table('qc_reference_analysis',
    sa.Column('qc_reference_uid', sa.Integer(), nullable=False),
    sa.Column('analysis_uid', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['analysis_uid'], ['analysis.uid'], ),
    sa.ForeignKeyConstraint(['qc_reference_uid'], ['qcreference.uid'], ),
    sa.PrimaryKeyConstraint('qc_reference_uid', 'analysis_uid')
    )
    op.add_column('analysis', sa.Column('unit_uid', sa.Integer(), nullable=True))
    op.add_column('analysis', sa.Column('department_uid', sa.Integer(), nullable=True))
    op.add_column('analysis', sa.Column('precision', sa.Integer(), nullable=True))
    op.add_column('analysis', sa.Column('required_verifications', sa.Integer(), nullable=True))
    op.add_column('analysis', sa.Column('hidden', sa.Boolean(), nullable=True))
    op.create_foreign_key(None, 'analysis', 'department', ['department_uid'], ['uid'])
    op.create_foreign_key(None, 'analysis', 'unit', ['unit_uid'], ['uid'])
    op.drop_column('analysis', 'unit')
    op.add_column('analysiscategory', sa.Column('department_uid', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'analysiscategory', 'department', ['department_uid'], ['uid'])
    op.add_column('instrument', sa.Column('instrument_type_uid', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'instrument', 'instrumenttype', ['instrument_type_uid'], ['uid'])
    op.add_column('profile', sa.Column('department_uid', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'profile', 'department', ['department_uid'], ['uid'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'profile', type_='foreignkey')
    op.drop_column('profile', 'department_uid')
    op.drop_constraint(None, 'instrument', type_='foreignkey')
    op.drop_column('instrument', 'instrument_type_uid')
    op.drop_constraint(None, 'analysiscategory', type_='foreignkey')
    op.drop_column('analysiscategory', 'department_uid')
    op.add_column('analysis', sa.Column('unit', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'analysis', type_='foreignkey')
    op.drop_constraint(None, 'analysis', type_='foreignkey')
    op.drop_column('analysis', 'hidden')
    op.drop_column('analysis', 'required_verifications')
    op.drop_column('analysis', 'precision')
    op.drop_column('analysis', 'department_uid')
    op.drop_column('analysis', 'unit_uid')
    op.drop_table('qc_reference_analysis')
    op.drop_index(op.f('ix_analysisuncertainty_uid'), table_name='analysisuncertainty')
    op.drop_table('analysisuncertainty')
    op.drop_index(op.f('ix_analysisspecification_uid'), table_name='analysisspecification')
    op.drop_table('analysisspecification')
    op.drop_index(op.f('ix_analysisinterim_uid'), table_name='analysisinterim')
    op.drop_table('analysisinterim')
    op.drop_index(op.f('ix_analysisdetectionlimit_uid'), table_name='analysisdetectionlimit')
    op.drop_table('analysisdetectionlimit')
    op.drop_index(op.f('ix_analysiscorrectionfactor_uid'), table_name='analysiscorrectionfactor')
    op.drop_table('analysiscorrectionfactor')
    op.drop_index(op.f('ix_instrumentcalibration_uid'), table_name='instrumentcalibration')
    op.drop_index(op.f('ix_instrumentcalibration_report_id'), table_name='instrumentcalibration')
    op.drop_index(op.f('ix_instrumentcalibration_calibration_id'), table_name='instrumentcalibration')
    op.drop_table('instrumentcalibration')
    op.drop_table('instrument_method')
    op.drop_index(op.f('ix_calibrationcertificate_uid'), table_name='calibrationcertificate')
    op.drop_index(op.f('ix_calibrationcertificate_certificate_code'), table_name='calibrationcertificate')
    op.drop_table('calibrationcertificate')
    op.drop_index(op.f('ix_qcreference_uid'), table_name='qcreference')
    op.drop_table('qcreference')
    op.drop_index(op.f('ix_unit_uid'), table_name='unit')
    op.drop_table('unit')
    op.drop_index(op.f('ix_manufacturer_uid'), table_name='manufacturer')
    op.drop_table('manufacturer')
    op.drop_index(op.f('ix_instrumenttype_uid'), table_name='instrumenttype')
    op.drop_table('instrumenttype')
    # ### end Alembic commands ###
